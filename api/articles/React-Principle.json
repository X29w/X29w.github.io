{"title":"React-Principle","uid":"6f35d21607cc4ac40e0305fd85e2df31","slug":"React-Principle","date":"2024-11-23T16:50:47.000Z","updated":"2024-11-30T04:09:53.429Z","comments":true,"path":"api/articles/React-Principle.json","keywords":null,"cover":null,"content":"<h1 id=\"React-Principle\"><a href=\"#React-Principle\" class=\"headerlink\" title=\"React-Principle\"></a>React-Principle</h1><p>此文章旨在于剖析 React 的一些基本原理，帮助读者更好地理解 React 的工作原理。并写出属于自己的 React 代码。</p>\n<h2 id=\"前置任务\"><a href=\"#前置任务\" class=\"headerlink\" title=\"前置任务\"></a>前置任务</h2><h3 id=\"搭建目录以及配置一些工具\"><a href=\"#搭建目录以及配置一些工具\" class=\"headerlink\" title=\"搭建目录以及配置一些工具\"></a>搭建目录以及配置一些工具</h3><p>First of all！</p>\n<p>├── packages<br>| ├── react<br>| | ├── src<br>| | ├── index.ts<br>| | └── package.json<br>| ├── react-reconciler<br>| | └── package.json<br>| └── shared<br>| ├── package.json<br>| ├── ReactSymbols.ts<br>| └── ReactTypes.ts<br>├── scripts<br>| └── rollup<br>| ├── react.config.js<br>| └── utils.js<br>├── .gitignore<br>├── .prettier.json<br>├── eslint.config.js<br>├── package-lock.json<br>├── package.json<br>├── README.md<br>└── tsconfig.json</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><h4 id=\"根目录的package-json文件\"><a href=\"#根目录的package-json文件\" class=\"headerlink\" title=\"根目录的package.json文件\"></a>根目录的<code>package.json</code>文件</h4><p>在根目录的<code>package.json</code>文件中，我们需要安装一些依赖并配置好 scripts 命令：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;react&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;lint&quot;: &quot;eslint .&#x2F;packages&quot;,\n    &quot;build:dev&quot;: &quot;rimraf dist &amp;&amp; rollup --bundleConfigAsCjs --config scripts&#x2F;rollup&#x2F;react.config.js&quot;\n  &#125;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;x29&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;@eslint&#x2F;js&quot;: &quot;^9.15.0&quot;,\n    &quot;@rollup&#x2F;plugin-commonjs&quot;: &quot;^28.0.1&quot;,\n    &quot;@types&#x2F;node&quot;: &quot;^22.9.3&quot;,\n    &quot;@types&#x2F;rollup-plugin-generate-package-json&quot;: &quot;^3.2.9&quot;,\n    &quot;@typescript-eslint&#x2F;eslint-plugin&quot;: &quot;^8.15.0&quot;,\n    &quot;@typescript-eslint&#x2F;parser&quot;: &quot;^8.15.0&quot;,\n    &quot;eslint&quot;: &quot;^9.15.0&quot;,\n    &quot;eslint-config-prettier&quot;: &quot;^9.1.0&quot;,\n    &quot;eslint-plugin-prettier&quot;: &quot;^5.2.1&quot;,\n    &quot;prettier&quot;: &quot;^3.3.3&quot;,\n    &quot;rimraf&quot;: &quot;^6.0.1&quot;,\n    &quot;rollup&quot;: &quot;^4.27.3&quot;,\n    &quot;rollup-plugin-generate-package-json&quot;: &quot;^3.2.0&quot;,\n    &quot;rollup-plugin-typescript2&quot;: &quot;^0.36.0&quot;,\n    &quot;typescript&quot;: &quot;^5.6.3&quot;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h4><p>在根目录下创建<code>tsconfig.json</code>文件，并配置好编译选项：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compileOnSave&quot;: true,\n  &quot;compilerOptions&quot;: &#123;\n    &quot;target&quot;: &quot;ESNext&quot;,\n    &quot;useDefineForClassFields&quot;: true,\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;lib&quot;: [&quot;ESNext&quot;, &quot;DOM&quot;],\n    &quot;moduleResolution&quot;: &quot;Node&quot;,\n    &quot;strict&quot;: true,\n    &quot;sourceMap&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;noEmit&quot;: true,\n    &quot;noUnusedLocals&quot;: true,\n    &quot;noUnusedParameters&quot;: true,\n    &quot;noImplicitReturns&quot;: false,\n    &quot;skipLibCheck&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&#x2F;packages&quot;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"eslint-config-js\"><a href=\"#eslint-config-js\" class=\"headerlink\" title=\"eslint.config.js\"></a>eslint.config.js</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import eslint from &quot;@eslint&#x2F;js&quot;;\nimport tseslint from &quot;@typescript-eslint&#x2F;eslint-plugin&quot;;\nimport tsparser from &quot;@typescript-eslint&#x2F;parser&quot;;\nimport prettier from &quot;eslint-plugin-prettier&quot;;\nimport eslintConfigPrettier from &quot;eslint-config-prettier&quot;;\n\nexport default [\n  &#x2F;&#x2F; 基础 ESLint 配置\n  eslint.configs.recommended,\n\n  &#x2F;&#x2F; Prettier 配置\n  eslintConfigPrettier,\n\n  &#123;\n    files: [&quot;**&#x2F;*.ts&quot;, &quot;**&#x2F;*.tsx&quot;],\n    languageOptions: &#123;\n      parser: tsparser,\n      parserOptions: &#123;\n        ecmaVersion: &quot;latest&quot;,\n        sourceType: &quot;module&quot;,\n      &#125;,\n    &#125;,\n    plugins: &#123;\n      &quot;@typescript-eslint&quot;: tseslint,\n      prettier: prettier,\n    &#125;,\n    rules: &#123;\n      &quot;prettier&#x2F;prettier&quot;: &quot;error&quot;,\n      &quot;no-case-declarations&quot;: &quot;off&quot;,\n      &quot;no-constant-condition&quot;: &quot;off&quot;,\n      &quot;@typescript-eslint&#x2F;ban-ts-comment&quot;: &quot;off&quot;,\n      &quot;@typescript-eslint&#x2F;no-var-requires&quot;: &quot;off&quot;,\n      &quot;react&#x2F;react-in-jsx-scope&quot;: &quot;off&quot;,\n      &quot;prettier&#x2F;prettier&quot;: [\n        &quot;error&quot;,\n        &#123;\n          endOfLine: &quot;auto&quot;,\n        &#125;,\n      ],\n    &#125;,\n  &#125;,\n];</code></pre>\n\n<h4 id=\"prettier-json\"><a href=\"#prettier-json\" class=\"headerlink\" title=\".prettier.json\"></a>.prettier.json</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;printWidth&quot;: 80,\n  &quot;tabWidth&quot;: 2,\n  &quot;useTabs&quot;: true,\n  &quot;singleQuote&quot;: true,\n  &quot;semi&quot;: true,\n  &quot;trailingComma&quot;: &quot;none&quot;,\n  &quot;bracketSpacing&quot;: true\n&#125;</code></pre>\n\n<h3 id=\"打包脚本\"><a href=\"#打包脚本\" class=\"headerlink\" title=\"打包脚本\"></a>打包脚本</h3><h4 id=\"rollup-config-js\"><a href=\"#rollup-config-js\" class=\"headerlink\" title=\"rollup.config.js\"></a>rollup.config.js</h4><p>在<code>scripts</code>目录下创建<code>rollup.config.js</code>文件，并配置打包选项：<br>::: warning<br>注意：<code>rollup.config.js</code>文件需要使用<code>commonjs</code>模块规范，因为<code>rollup</code>默认使用<code>esm</code>模块规范，而<code>node</code>环境不支持<code>esm</code>模块规范。并且一定要是<code>js</code>文件，不能是<code>ts</code>文件。<br>:::</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getBaseRollupPlugins, getPackageJSON, resolvePkgPath &#125; from &quot;.&#x2F;utils&quot;;\n\nimport generatePackageJson from &quot;rollup-plugin-generate-package-json&quot;;\n\n&#x2F;&#x2F; 获取package.json下面的name字段\nconst &#123; name, module &#125; &#x3D; getPackageJSON(&quot;react&quot;, false); &#x2F;&#x2F; react\n&#x2F;&#x2F; react包的路径\nconst pkgPath &#x3D; resolvePkgPath(name, false);\n&#x2F;&#x2F;react 产物路劲\nconst pkgDistPath &#x3D; resolvePkgPath(name, true);\nexport default [\n  &#x2F;&#x2F; 对应react包\n  &#123;\n    input: &#96;$&#123;pkgPath&#125;&#x2F;$&#123;module&#125;&#96;,\n    output: &#123;\n      file: &#96;$&#123;pkgDistPath&#125;&#x2F;index.js&#96;,\n      name: &quot;react&quot;,\n      format: &quot;umd&quot;,\n    &#125;,\n    plugins: [\n      ...getBaseRollupPlugins(),\n      generatePackageJson(&#123;\n        inputFolder: pkgPath,\n        outputFolder: pkgDistPath,\n        baseContents: (&#123; name, description, version &#125;) &#x3D;&gt; (&#123;\n          name,\n          description,\n          version,\n          main: &quot;index.js&quot;,\n        &#125;),\n      &#125;),\n    ],\n  &#125;,\n  &#x2F;&#x2F; jsx-runtime包\n  &#123;\n    input: &#96;$&#123;pkgPath&#125;&#x2F;src&#x2F;jsx.ts&#96;,\n    output: [\n      &#x2F;&#x2F; jsx-runtime\n      &#123;\n        file: &#96;$&#123;pkgDistPath&#125;&#x2F;jsx-runtime.js&#96;,\n        name: &quot;jsx-runtime.js&quot;,\n        format: &quot;umd&quot;,\n      &#125;,\n      &#123;\n        file: &#96;$&#123;pkgDistPath&#125;&#x2F;jsx-dev-runtime.js&#96;,\n        name: &quot;jsx-dev-runtime.js&quot;,\n        format: &quot;umd&quot;,\n      &#125;,\n    ],\n    plugins: getBaseRollupPlugins(),\n  &#125;,\n];</code></pre>\n\n<h4 id=\"utils-js\"><a href=\"#utils-js\" class=\"headerlink\" title=\"utils.js\"></a>utils.js</h4><p>在<code>scripts</code>目录下创建<code>utils.js</code>文件，并配置一些工具函数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import path from &quot;path&quot;;\nimport fs from &quot;fs&quot;;\nimport ts from &quot;rollup-plugin-typescript2&quot;;\nimport cjs from &quot;@rollup&#x2F;plugin-commonjs&quot;;\n\n&#x2F;&#x2F; 包路径\nconst pkgPath &#x3D; path.resolve(__dirname, &quot;..&#x2F;..&#x2F;packages&quot;);\n&#x2F;&#x2F; 打包产物路径\nconst distPath &#x3D; path.resolve(__dirname, &quot;..&#x2F;..&#x2F;dist&#x2F;node_modules&quot;);\n\n&#x2F;**\n * @name 获取包路径或者是打包产物路径\n * @param pkgName\n * @param isDist 是否是打包\n *&#x2F;\nexport const resolvePkgPath &#x3D; (pkgName, isDist) &#x3D;&gt; &#123;\n  return isDist ? &#96;$&#123;distPath&#125;&#x2F;$&#123;pkgName&#125;&#96; : &#96;$&#123;pkgPath&#125;&#x2F;$&#123;pkgName&#125;&#96;;\n&#125;;\n\n&#x2F;**\n * @name 解析包对应的package.json文件\n * @param pkgName\n *&#x2F;\nexport const getPackageJSON &#x3D; (pkgName, isDist) &#x3D;&gt; &#123;\n  &#x2F;&#x2F;1. 包路径 + Package.json\n  const path &#x3D; &#96;$&#123;resolvePkgPath(pkgName, isDist)&#125;&#x2F;package.json&#96;;\n  const str &#x3D; fs.readFileSync(path, &#123; encoding: &quot;utf-8&quot; &#125;);\n  return JSON.parse(str);\n&#125;;\n\nexport const getBaseRollupPlugins &#x3D; (&#123; typeScriptConfig &#x3D; &#123;&#125; &#125; &#x3D; &#123;&#125;) &#x3D;&gt; [\n  cjs(),\n  ts(typeScriptConfig),\n];</code></pre>\n\n<h3 id=\"package-x2F-react\"><a href=\"#package-x2F-react\" class=\"headerlink\" title=\"package&#x2F;react\"></a>package&#x2F;react</h3><p>该目录下的<code>package.json</code>文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;react&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;module&quot;: &quot;index.ts&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;shared&quot;: &quot;workspace:*&quot;\n  &#125;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;x29&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;description&quot;: &quot;react公共方法&quot;\n&#125;</code></pre>\n\n<p>其中 package&#x2F;index.ts 和 package&#x2F;src&#x2F;jsx.ts 文件先随便写点什么 ts 代码，为了<code>npm run build:dev</code>命令可以正常运行。<br>package&#x2F;src&#x2F;jsx.ts 的目录和文件名在 rollup.config.js 中配置一一对应的</p>\n<h3 id=\"package-x2F-shared\"><a href=\"#package-x2F-shared\" class=\"headerlink\" title=\"package&#x2F;shared\"></a>package&#x2F;shared</h3><p>该目录下的<code>package.json</code>文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;shared&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;x29&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;description&quot;: &quot;所有公共方法以及类型定义&quot;\n&#125;</code></pre>\n\n<h3 id=\"package-x2F-react-reconciler\"><a href=\"#package-x2F-react-reconciler\" class=\"headerlink\" title=\"package&#x2F;react-reconciler\"></a>package&#x2F;react-reconciler</h3><p>该目录下的<code>package.json</code>文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;react-reconciler&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;x29&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;description&quot;: &quot;&quot;\n&#125;</code></pre>\n\n<p>至此，我们已经完成了项目的目录结构以及一些依赖的安装。<br>在根目录下，我们可以运行<code>npm run build:dev</code>命令进行项目的打包。<br><code>npm run lint</code>命令可以对项目的代码进行 eslint 检查。</p>\n<h2 id=\"jsx\"><a href=\"#jsx\" class=\"headerlink\" title=\"jsx\"></a>jsx</h2><h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p><code>React</code> 主要是将页面的结构通过 <code>jsx</code> 进行描述，在调和后，每一个 <code>React element</code> 对象的子节点都会形成一个对应的 <code>fiberNode</code></p>\n<p>本节内容主要是实现 <code>jsx</code> 的生成。在 <code>React</code> 的源码中，<code>jsx</code> 的代码逻辑存在 <code>packages</code> 下面的 react 包中。为了兼容 React 的旧版本，我们主要是实现最后导出三个文件。</p>\n<p><code>index.js: import React from &#39;react&#39;</code> 这样使用<br><code>jsx-runtime.js</code>: 新版通过 babel 导入<br><code>jsx-dev-runtime.js</code>: 开发环境的包</p>\n<p>为了开发者方便，<code>React</code> 提供一种类似于 html 的方式去书写代码，然后 <code>React</code> 通过 <code>babel</code> 去进行转义。在 <code>React</code> 的新版本中，我们不再需要手动去引入 <code>React</code>, <code>plugin-syntax-jsx</code> 已经向文件中提前注入了 <code>_jsxRuntime api</code>。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div className&#x3D;&quot;x&quot;&gt;\n  123\n  &lt;span&gt;yx&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><div class=\"caption\"><span>新版Automatic</span></div><code class=\"language-jsx\">import &#123; jsx as _jsx &#125; from &quot;react&#x2F;jsx-runtime&quot;;\nimport &#123; jsxs as _jsxs &#125; from &quot;react&#x2F;jsx-runtime&quot;;\n&#x2F;*#__PURE__*&#x2F; _jsxs(&quot;div&quot;, &#123;\n  className: &quot;x&quot;,\n  children: [\n    &quot;123&quot;,\n    &#x2F;*#__PURE__*&#x2F; _jsx(&quot;span&quot;, &#123;\n      children: &quot;yx&quot;,\n    &#125;),\n  ],\n&#125;);</code></pre>\n\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><div class=\"caption\"><span>旧版Classic</span></div><code class=\"language-jsx\">&#x2F;*#__PURE__*&#x2F; React.createElement(\n  &quot;div&quot;,\n  &#123;\n    className: &quot;x&quot;,\n  &#125;,\n  &quot;123&quot;,\n  &#x2F;*#__PURE__*&#x2F; React.createElement(&quot;span&quot;, null, &quot;yx&quot;)\n);</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>主要是分为三部分：1. 对应的 <code>tag</code> 字段， 2. 属性和 <code>children，</code> 3. <code>key</code> 等一些特殊字段。</p></blockquote>\n<h3 id=\"实现-JSX\"><a href=\"#实现-JSX\" class=\"headerlink\" title=\"实现 JSX\"></a>实现 JSX</h3><h4 id=\"声明类型\"><a href=\"#声明类型\" class=\"headerlink\" title=\"声明类型\"></a>声明类型</h4><p>在 <code>packages/shared/ReactTypes.ts</code> 文件中，我们声明了 <code>JSX</code> 相关的类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;** 在这里集中定义React的类型 *&#x2F;\n\n&#x2F;** 定义 React 的 Type 类型 *&#x2F;\nexport type Type &#x3D; any;\n\n&#x2F;** 定义 React 的 Key 类型 *&#x2F;\nexport type Key &#x3D; string | null;\n\n&#x2F;** 定义 React 的 Ref 类型 *&#x2F;\nexport type Ref&lt;T &#x3D; any&gt; &#x3D;\n  | &#123; current: T | null &#125;\n  | ((instance: T | null) &#x3D;&gt; void)\n  | null;\n\n&#x2F;** 定义 React 的 Props 类型 *&#x2F;\nexport type Props &#x3D; &#123;\n  [key: string]: any;\n  children?: any;\n&#125;;\n\n&#x2F;** 定义 React 的 ElementType 类型 *&#x2F;\nexport type ElementType &#x3D; string | ((props: any) &#x3D;&gt; ReactElementType | null);\n\n&#x2F;** 定义 React 的 ReactElement 类型 *&#x2F;\nexport interface ReactElementType &#123;\n  $$typeof: symbol | number;\n  type: ElementType;\n  key: Key;\n  ref: Ref;\n  props: Props;\n  __mark: string;\n&#125;</code></pre>\n\n<p>在 <code>packages/shared/ReactSymbols.ts</code> 文件中，我们声明了 <code>JSX</code> 相关的 <code>symbol。</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n * 判断当前环境是否支持 Symbol 及其 for 方法\n * 1. typeof Symbol &#x3D;&#x3D;&#x3D; &#39;function&#39; 检查 Symbol 是否可用且是函数类型\n * 2. Symbol.for 检查是否支持全局 Symbol 注册表功能\n * 3. 在较老的浏览器中可能不支持 Symbol，此时返回 false\n *&#x2F;\nconst supportSymbol &#x3D; typeof Symbol &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; Symbol.for;\n\n&#x2F;**\n * 1. Symbol.for() 是什么：\n *   - 这是 JavaScript 的全局 Symbol 注册表功能\n *   - Symbol.for(&#39;react.element&#39;) 会创建一个全局唯一的 Symbol\n *   - 如果已经存在同名的 Symbol，则返回已存在的那个\n *   - 这确保了在不同的模块中使用相同的字符串创建的 Symbol 是完全相同的\n * 2.为什么需要降级方案 0xeac7：\n *   - 不是所有 JavaScript 环境都支持 Symbol（比如老版本浏览器）\n *   - 0xeac7 是一个十六进制数字，作为降级后的标识符\n *   - 这个数字是 React 团队选择的一个特定值，用来标识 React 元素\n * 3. 这个值的用途：\n *   - 用来标识一个对象是否是合法的 React 元素\n *   - 在 ReactElement 接口中，我们看到有 $$typeof 属性\n *   - $$typeof 就会被赋值为 REACT_ELEMENT_TYPE\n *   - React 内部会检查这个值来确保元素的合法性 *&#x2F;\nexport const REACT_ELEMENT_TYPE &#x3D; supportSymbol\n  ? Symbol.for(&quot;react.element&quot;)\n  : 0xeac7;</code></pre>\n\n<h4 id=\"实现-JSX-1\"><a href=\"#实现-JSX-1\" class=\"headerlink\" title=\"实现 JSX\"></a>实现 JSX</h4><p>在 <code>packages/react/src/jsx.ts</code> 文件中，我们实现 <code>JSX</code> 的逻辑。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123; REACT_ELEMENT_TYPE &#125; from &quot;shared&#x2F;ReactSymbols&quot;;\nimport &#123;\n  ElementType,\n  Key,\n  Props,\n  ReactElementType,\n  Ref,\n  Type,\n&#125; from &quot;shared&#x2F;ReactTypes&quot;;\n\n&#x2F;**\n * 创建 React 元素的核心函数\n * @param type 元素类型 - 可以是字符串(原生 DOM 元素)或函数(组件)\n * @param key 用于标识元素的唯一键值，帮助 React 进行高效的 DOM diff\n * @param ref 引用对象，用于访问 DOM 节点或组件实例\n * @param props 元素的属性对象，包含所有传入的属性和子元素\n * @returns 返回一个 React 元素对象\n *&#x2F;\nconst ReactElement &#x3D; (\n  type: Type,\n  key: Key,\n  ref: Ref,\n  props: Props\n): ReactElementType &#x3D;&gt; (&#123;\n  &#x2F;&#x2F; 标识这是一个 React 元素的内部类型标记\n  $$typeof: REACT_ELEMENT_TYPE,\n  &#x2F;&#x2F; 元素类型（div, p, 或自定义组件等）\n  type,\n  &#x2F;&#x2F; 用于优化更新的 key 值\n  key,\n  &#x2F;&#x2F; DOM 或组件实例的引用\n  ref,\n  &#x2F;&#x2F; 元素的所有属性\n  props,\n  &#x2F;&#x2F; 自定义标记，用于标识这是我们的 React 实现\n  __mark: &quot;x-react&quot;,\n&#125;);\n\n&#x2F;**\n * 从配置对象中提取并处理 key、ref 和其他 props\n * @param &#123;Config&#125; Jsx.JsxConfig - React 元素的配置对象\n * @returns &#123;[Key, Ref, Props]&#125; 返回一个元组，包含处理后的 key、ref 和 props\n *\n * @description\n * 1. 通过解构获取 key 和 ref，设置默认值为 null\n * 2. 将 key 转换为字符串（如果存在）\n * 3. 使用 reduce 处理剩余的 props，确保只包含对象自身的属性\n * 4. 返回处理后的 [key, ref, props] 元组\n *&#x2F;\nconst extractPropsFromConfig &#x3D; (config: Jsx.JsxConfig): [Key, Ref, Props] &#x3D;&gt; &#123;\n  const &#123; key &#x3D; null, ref &#x3D; null, ...props &#125; &#x3D; config;\n  return [\n    key !&#x3D; null ? String(key) : null,\n    ref,\n    Object.keys(props).reduce((acc, prop) &#x3D;&gt; &#123;\n      if (&#123;&#125;.hasOwnProperty.call(config, prop)) &#123;\n        acc[prop] &#x3D; props[prop];\n      &#125;\n      return acc;\n    &#125;, &#123;&#125; as Props),\n  ];\n&#125;;\n\n&#x2F;**\n * 处理并合并 children 到 props 中\n * @param &#123;Props&#125; props - 原始的 props 对象\n * @param &#123;any[]&#125; children - 子元素数组\n * @returns &#123;Props&#125; 返回合并了 children 的新 props 对象\n *\n * @description\n * 1. 如果没有 children，直接返回原始 props\n * 2. 如果只有一个 child，直接使用该 child\n * 3. 如果有多个 children，保持数组形式\n * 4. 使用展开运算符创建新的 props 对象，确保不修改原始对象\n *&#x2F;\nconst processChildren &#x3D; (props: Props, children: any[]): Props &#x3D;&gt; &#123;\n  if (children.length &#x3D;&#x3D;&#x3D; 0) return props;\n\n  return &#123;\n    ...props,\n    children: children.length &#x3D;&#x3D;&#x3D; 1 ? children[0] : children,\n  &#125;;\n&#125;;\n\n&#x2F;**\n * JSX 转换函数 - 将 JSX 语法转换为 React 元素\n * @param &#123;ElementType&#125; type - 元素类型（可以是字符串或组件函数）\n * @param &#123;Config&#125; Jsx.JsxConfig - 元素的配置对象，包含 props、key、ref 等\n * @param &#123;...any&#125; children - 子元素列表\n * @returns &#123;ReactElementType&#125; 返回创建的 React 元素\n *\n * @description\n * 1. 首先从配置中提取必要的属性\n * 2. 处理并添加 children\n * 3. 使用这些处理后的值创建 React 元素\n *\n * @description\n * * 完整的处理流程：\n * 1. jsx(&#39;div&#39;, &#123; className: &#39;container&#39; &#125;, child1, child2) 被调用\n * 2. extractPropsFromConfig 处理配置对象：\n *    - 提取 key 和 ref（如果有）\n *    - 处理其余属性（如 className, onClick 等）\n * 3. processChildren 处理子元素：\n *    - 将所有子元素规范化处理\n *    - 添加到 props.children 中\n * 4. ReactElement 创建最终的 React 元素对象\n * 5. 返回的元素对象将被 React 用于后续的渲染流程\n *&#x2F;\nexport const jsx &#x3D; (\n  type: ElementType,\n  config: Jsx.JsxConfig,\n  ...children: any\n) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 第一步：提取和处理配置\n  const [key, ref, props] &#x3D; extractPropsFromConfig(config);\n  &#x2F;&#x2F; 第二步：处理子元素\n  const propsWithChildren &#x3D; processChildren(props, children);\n\n  &#x2F;&#x2F; 第三步：创建 React 元素\n  return ReactElement(type, key, ref, propsWithChildren);\n\n  &#x2F;* 返回的对象形如：\n   &#123;\n     $$typeof: Symbol(react.element),\n     type: &#39;div&#39;,\n     props: &#123;\n       className: &#39;container&#39;,\n       children: &#123;\n         $$typeof: Symbol(react.element),\n         type: &#39;span&#39;,\n         props: &#123; children: &#39;Hello&#39; &#125;\n       &#125;\n     &#125;\n   &#125; *&#x2F;\n&#125;;\n\n&#x2F;**\n * 开发环境使用的 JSX 转换函数\n * @param &#123;ElementType&#125; type - 元素类型\n * @param &#123;Config&#125; Jsx.JsxConfig - 元素配置对象\n * @returns &#123;ReactElementType&#125; 返回创建的 React 元素\n *\n * @description\n * 1. 开发环境版本，不处理 children\n * 2. 用于开发工具和调试\n * 3. 保持与生产版本相同的基本结构，但可能包含额外的开发时检查\n *\n * @description 开发环境的 JSX 转换函数\n * 与生产版本的主要区别：\n * 1. 可以进行额外的类型检查\n * 2. 可以提供更好的错误信息\n * 3. 可以进行开发时的警告提示\n * 4. 可以添加开发工具所需的调试信息\n *&#x2F;\nexport const jsxDev &#x3D; (type: ElementType, config: Jsx.JsxConfig) &#x3D;&gt; &#123;\n  const [key, ref, props] &#x3D; extractPropsFromConfig(config);\n  return ReactElement(type, key, ref, props);\n&#125;;</code></pre>\n\n<p><strong>整体 jsx 函数的调用流程</strong></p>\n<ol>\n<li>JSX 代码：</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function App() &#123;\n  return (\n    &lt;div className&#x3D;&quot;container&quot;&gt;\n      &lt;span&gt;Hello&lt;&#x2F;span&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>Babel 转义后的代码：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function App() &#123;\n  return jsx(&quot;div&quot;, &#123; className: &quot;container&quot; &#125;, jsx(&quot;span&quot;, null, &quot;Hello&quot;));\n&#125;</code></pre>\n\n<p>jsx 函数的作用就是接收 Babel 转换后的参数，并创建出 React 元素（虚拟 DOM 节点）</p>\n<ol start=\"3\">\n<li>最终生成的 React 元素结构：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n$$typeof: Symbol(react.element),\ntype: &#39;div&#39;,\nkey: null,\nref: null,\nprops: &#123;\n    className: &#39;container&#39;,\n    children: [\n      &#123;\n        $$typeof: Symbol(react.element),\n        type: &#39;span&#39;,\n        props: &#123; children: &#39;Hello&#39; &#125;,\n        &#x2F;&#x2F; ...\n      &#125;\n    ]\n&#125;\n&#125;</code></pre>\n\n<ol start=\"4\">\n<li>所以整个流程是：</li>\n</ol>\n<ul>\n<li>开发者写 JSX 代码</li>\n<li>Babel 在编译时将 JSX 语法转换为 jsx() 函数调用</li>\n<li>运行时，jsx() 函数被调用，创建 React 元素</li>\n<li>React 使用这些元素来渲染实际的 DOM 5.简单来说：Babel 的工作是：转换语法（<div> → jsx(‘div’)）,jsx 函数的工作是：创建虚拟 DOM 节点（jsx(‘div’) → { type: ‘div’, props: {…} }）,这就是为什么在 React 17 之后的版本中，我们不需要手动引入 React（import React from ‘react’），因为 Babel 会自动帮我们引入 jsx 函数。</li>\n</ul>\n<ol start=\"5\">\n<li>那么为什么还存在 jsxDev 函数呢？</li>\n</ol>\n<p>jsxDev 函数的作用是为了开发环境的 JSX 转换，它的作用和 jsx 函数一样，只是它不处理 children 子元素，所以它的返回值和生产环境的 jsx 函数返回值是一样的。</p>\n<p><code>区别的具体体现：</code></p>\n<ul>\n<li>Babel 的转换会根据环境不同选择不同的函数：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 开发环境下，Babel 会转换成：\njsxDev(&quot;div&quot;, &#123; className: &quot;container&quot; &#125;);\n\n&#x2F;&#x2F; 生产环境下，Babel 会转换成：\njsx(&quot;div&quot;, &#123; className: &quot;container&quot; &#125;);</code></pre>\n\n<ul>\n<li>实际应用场景：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function App() &#123;\n  &#x2F;&#x2F; 开发环境下，如果你这样写：\n  return &lt;div&gt;&#123;undefined.toString()&#125;&lt;&#x2F;div&gt;;\n\n  &#x2F;&#x2F; jsxDev 可以提供更友好的错误信息：\n  &#x2F;&#x2F; &quot;Cannot read property &#39;toString&#39; of undefined at App&quot;\n  &#x2F;&#x2F; 并显示具体的组件栈信息\n\n  &#x2F;&#x2F; 而在生产环境下，jsx 函数会简单地抛出错误，\n  &#x2F;&#x2F; 没有这些额外的调试信息\n&#125;</code></pre>\n\n<ul>\n<li>性能考虑：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 开发环境：更多的检查，更多的警告\njsxDev(&quot;div&quot;, &#123;\n  &#x2F;&#x2F; 可以检查 props 类型\n  &#x2F;&#x2F; 可以检查废弃的 API 使用\n  &#x2F;&#x2F; 可以添加更多的调试信息\n&#125;);\n\n&#x2F;&#x2F; 生产环境：更简洁的代码，更好的性能\njsx(&quot;div&quot;, &#123;\n  &#x2F;&#x2F; 只进行必要的转换\n  &#x2F;&#x2F; 没有额外的检查和警告\n  &#x2F;&#x2F; 代码体积更小，运行更快\n&#125;);</code></pre>\n\n<p><code>Summary：</code></p>\n<ul>\n<li><code>开发体验</code>：提供更好的错误信息和警告</li>\n<li><code>调试能力</code>：支持 React DevTools 等开发工具</li>\n<li><code>性能优化</code>：生产环境可以移除开发时的检查代码</li>\n<li><code>包体积</code>：生产环境的代码更精简</li>\n</ul>\n<p>这就是为什么 <code>React</code> 需要维护两个版本的 <code>JSX</code> 转换函数，它们服务于不同的目的：<br><code>jsx</code>: 注重性能和包体积<br><code>jsxDev</code>: 注重开发体验和调试能力</p>\n<h2 id=\"React-reconciler\"><a href=\"#React-reconciler\" class=\"headerlink\" title=\"React reconciler\"></a>React reconciler</h2><p><code>React reconciler</code> 主要是实现了 <code>React</code> 的核心算法，包括调和、渲染、更新等。</p>\n<h3 id=\"更改-packages-x2F-react-reconciler-x2F-package-json-文件\"><a href=\"#更改-packages-x2F-react-reconciler-x2F-package-json-文件\" class=\"headerlink\" title=\"更改 packages&#x2F;react-reconciler&#x2F;package.json 文件\"></a>更改 packages&#x2F;react-reconciler&#x2F;package.json 文件</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;react-reconciler&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;react-reconciler&quot;,\n  &quot;module&quot;: &quot;index.ts&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;shared&quot;: &quot;workspace: *&quot;\n  &#125;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;x29&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n&#125;</code></pre>\n\n<h3 id=\"在-packages-x2F-react-x2F-src-x2F-currentBatchConfig-ts-文件中，我们声明了-currentBatchConfig-类型。\"><a href=\"#在-packages-x2F-react-x2F-src-x2F-currentBatchConfig-ts-文件中，我们声明了-currentBatchConfig-类型。\" class=\"headerlink\" title=\"在 packages&#x2F;react&#x2F;src&#x2F;currentBatchConfig.ts 文件中，我们声明了 currentBatchConfig 类型。\"></a>在 packages&#x2F;react&#x2F;src&#x2F;currentBatchConfig.ts 文件中，我们声明了 <code>currentBatchConfig</code> 类型。</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>currentBatchConfig.ts - React 批处理配置文件</p></blockquote>\n<p>作用：</p>\n<ul>\n<li>存储当前 React 批量更新的配置信息</li>\n<li>主要用于 Transition 相关的功能</li>\n<li>在并发渲染中控制更新的优先级</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n * React 当前批处理配置对象\n *\n * 用途：\n * 1. 在组件更新时标记更新的类型\n * 2. 帮助 React 区分普通更新和 Transition 更新\n * 3. 影响更新的优先级和调度方式\n *\n * @type &#123;React.BatchConfig&#125;\n *\n * @example\n * &#x2F;&#x2F; React 内部使用示例\n * function scheduleUpdate(fiber, update) &#123;\n *   const transition &#x3D; ReactCurrentBatchConfig.transition;\n *   if (transition !&#x3D;&#x3D; null) &#123;\n *     &#x2F;&#x2F; 这是一个 Transition 更新，使用较低的优先级\n *     scheduleTransitionUpdate(fiber, update);\n *   &#125; else &#123;\n *     &#x2F;&#x2F; 这是一个普通更新，使用正常优先级\n *     scheduleRegularUpdate(fiber, update);\n *   &#125;\n * &#125;\n *&#x2F;\nconst ReactCurrentBatchConfig: React.BatchConfig &#x3D; &#123;\n  transition: null,\n&#125;;\n\nexport default ReactCurrentBatchConfig;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际应用场景：</p></blockquote>\n<ol>\n<li>useTransition Hook:</li>\n</ol>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">function App() &#123;\n  const [isPending, startTransition] &#x3D; useTransition();\n  return (\n    &lt;button\n      onClick&#x3D;&#123;() &#x3D;&gt; &#123;\n        startTransition(() &#x3D;&gt; &#123;\n          &#x2F;&#x2F; 这里的更新会被标记为 Transition\n          setLargeList(generateLargeList());\n        &#125;);\n      &#125;&#125;\n    &gt;\n      Update List\n    &lt;&#x2F;button&gt;\n  );\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>并发特性：</li>\n</ol>\n<ul>\n<li>允许 React 中断渲染以处理更高优先级的更新</li>\n<li>帮助实现更流畅的用户体验</li>\n<li>支持可中断的渲染过程</li>\n</ul>\n<h3 id=\"在-packages-x2F-react-reconciler-x2F-src-x2F-fiberFlags-ts-文件中\"><a href=\"#在-packages-x2F-react-reconciler-x2F-src-x2F-fiberFlags-ts-文件中\" class=\"headerlink\" title=\"在 packages&#x2F;react-reconciler&#x2F;src&#x2F;fiberFlags.ts 文件中\"></a>在 packages&#x2F;react-reconciler&#x2F;src&#x2F;fiberFlags.ts 文件中</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>fiberFlags.ts - React Fiber 节点的副作用（side-effects）标记定义</p></blockquote>\n<p>作用：</p>\n<ul>\n<li>定义所有可能的 Fiber 节点副作用类型</li>\n<li>使用二进制位标记实现高效的副作用追踪</li>\n<li>通过位运算组合多个副作用</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n\n\n&#x2F;**\n * Flags 类型定义\n * 用于在 TypeScript 中标识副作用标记的类型\n *&#x2F;\nexport type Flags &#x3D; number;\n\n&#x2F;**\n * 无副作用标记\n * 表示节点不需要进行任何操作\n * 二进制：0000000\n *&#x2F;\nexport const NoFlags &#x3D; 0b0000000;\n\n&#x2F;**\n * 插入&#x2F;移动标记\n * 表示节点需要插入到 DOM 中或在 DOM 中移动位置\n * 二进制：0000001\n *&#x2F;\nexport const Placement &#x3D; 0b0000001;\n\n&#x2F;**\n * 更新标记\n * 表示节点的属性或内容需要更新\n * 二进制：0000010\n *&#x2F;\nexport const Update &#x3D; 0b0000010;\n\n&#x2F;**\n * 子节点删除标记\n * 表示需要删除子节点\n * 二进制：0000100\n *&#x2F;\nexport const ChildDeletion &#x3D; 0b0000100;\n\n&#x2F;**\n * 被动效果标记（如 useEffect）\n * 表示节点包含需要在提交阶段后异步执行的副作用\n * 二进制：0001000\n *&#x2F;\nexport const PassiveEffect &#x3D; 0b0001000;\n\n&#x2F;**\n * Ref 更新标记\n * 表示节点的 ref 需要更新\n * 二进制：0010000\n *&#x2F;\nexport const Ref &#x3D; 0b0010000;\n\n&#x2F;**\n * 可见性变更标记\n * 表示节点的显示&#x2F;隐藏状态需要更新\n * 二进制：0100000\n *&#x2F;\nexport const Visibility &#x3D; 0b0100000;\n\n&#x2F;**\n * 已捕获标记\n * 表示错误已经被捕获\n * 二进制：1000000\n *&#x2F;\nexport const DidCapture &#x3D; 0b1000000;\n\n&#x2F;**\n * 应该捕获标记\n * 表示这个节点应该尝试捕获错误\n * 二进制：01000000000\n *&#x2F;\nexport const ShouldCapture &#x3D; 0b01000000000;\n\n&#x2F;**\n * 突变阶段的标记集合\n * 包含了在 DOM 突变阶段需要处理的所有副作用\n * 通过位运算组合多个标记\n *\n * @example\n * if (fiber.flags &amp; MutationMask) &#123;\n *   &#x2F;&#x2F; 需要在突变阶段处理这个节点\n * &#125;\n *&#x2F;\nexport const MutationMask &#x3D;\n  Placement | Update | ChildDeletion | Ref | Visibility;\n\n&#x2F;**\n * 布局阶段的标记集合\n * 包含了在 DOM 布局阶段需要处理的所有副作用\n * 目前只包含 Ref 的更新\n *&#x2F;\nexport const LayoutMask &#x3D; Ref;\n\n&#x2F;**\n * 被动效果的标记集合\n * 包含了需要异步处理的副作用\n * 主要用于 useEffect 的处理\n *&#x2F;\nexport const PassiveMask &#x3D; PassiveEffect | ChildDeletion;</code></pre>\n\n<p>使用示例：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 添加副作用标记\nfiber.flags |&#x3D; Update;\n\n&#x2F;&#x2F; 检查是否包含某个副作用\nif (fiber.flags &amp; Placement) &#123;\n  &#x2F;&#x2F; 需要插入或移动节点\n&#125;\n\n&#x2F;&#x2F; 在不同阶段检查相关副作用\nif (fiber.flags &amp; MutationMask) &#123;\n  &#x2F;&#x2F; 处理 DOM 突变相关的副作用\n&#125;\n\nif (fiber.flags &amp; PassiveMask) &#123;\n  &#x2F;&#x2F; 处理 useEffect 相关的副作用\n&#125;</code></pre>\n\n<h3 id=\"在-packages-x2F-react-reconciler-x2F-src-x2F-workTags-ts-文件中\"><a href=\"#在-packages-x2F-react-reconciler-x2F-src-x2F-workTags-ts-文件中\" class=\"headerlink\" title=\"在 packages&#x2F;react-reconciler&#x2F;src&#x2F;workTags.ts 文件中\"></a>在 packages&#x2F;react-reconciler&#x2F;src&#x2F;workTags.ts 文件中</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>workTags.ts - React Fiber 节点类型定义文件</p></blockquote>\n<p>作用：</p>\n<ul>\n<li>定义所有可能的 Fiber 节点类型</li>\n<li>用于在 Fiber 树中标识不同类型的节点</li>\n<li>帮助 React 在协调过程中正确处理不同类型的组件</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n * 函数组件标识\n * 用于标识函数式组件创建的 Fiber 节点\n * @example\n * function App() &#123; return &lt;div&gt;Hello&lt;&#x2F;div&gt; &#125;\n * &#x2F;&#x2F; App 组件对应的 Fiber 节点的 tag 值为 FunctionComponent (0)\n *&#x2F;\nexport const FunctionComponent: React.FunctionComponent &#x3D; 0;\n\n&#x2F;**\n * 根节点标识\n * 用于标识应用的根节点（Root）\n * @example\n * ReactDOM.render(&lt;App &#x2F;&gt;, container)\n * &#x2F;&#x2F; container 对应的 Fiber 节点的 tag 值为 HostRoot (3)\n *&#x2F;\nexport const HostRoot: React.HostRoot &#x3D; 3;\n\n&#x2F;**\n * 原生 DOM 元素标识\n * 用于标识普通 HTML 元素的 Fiber 节点\n * @example\n * &lt;div&gt;Hello&lt;&#x2F;div&gt;\n * &#x2F;&#x2F; div 对应的 Fiber 节点的 tag 值为 HostComponent (5)\n *&#x2F;\nexport const HostComponent: React.HostComponent &#x3D; 5;\n\n&#x2F;**\n * 文本节点标识\n * 用于标识文本内容的 Fiber 节点\n * @example\n * &lt;div&gt;Hello World&lt;&#x2F;div&gt;\n * &#x2F;&#x2F; &quot;Hello World&quot; 对应的 Fiber 节点的 tag 值为 HostText (6)\n *&#x2F;\nexport const HostText: React.HostText &#x3D; 6;\n\n&#x2F;**\n * Fragment 标识\n * 用于标识 React.Fragment 的 Fiber 节点\n * @example\n * &lt;React.Fragment&gt;\n *   &lt;div&gt;Item 1&lt;&#x2F;div&gt;\n *   &lt;div&gt;Item 2&lt;&#x2F;div&gt;\n * &lt;&#x2F;React.Fragment&gt;\n * &#x2F;&#x2F; Fragment 对应的 Fiber 节点的 tag 值为 Fragment (7)\n *&#x2F;\nexport const Fragment: React.Fragment &#x3D; 7;\n\n&#x2F;**\n * Context Provider 标识\n * 用于标识 Context.Provider 的 Fiber 节点\n * @example\n * &lt;MyContext.Provider value&#x3D;&#123;value&#125;&gt;\n *   &#123;children&#125;\n * &lt;&#x2F;MyContext.Provider&gt;\n * &#x2F;&#x2F; Provider 对应的 Fiber 节点的 tag 值为 ContextProvider (11)\n *&#x2F;\nexport const ContextProvider: React.ContextProvider &#x3D; 11;\n\n&#x2F;**\n * Suspense 组件标识\n * 用于标识 Suspense 组件的 Fiber 节点\n * @example\n * &lt;Suspense fallback&#x3D;&#123;&lt;Loading &#x2F;&gt;&#125;&gt;\n *   &lt;SomeComponent &#x2F;&gt;\n * &lt;&#x2F;Suspense&gt;\n * &#x2F;&#x2F; Suspense 对应的 Fiber 节点的 tag 值为 SuspenseComponent (13)\n *&#x2F;\nexport const SuspenseComponent: React.SuspenseComponent &#x3D; 13;\n\n&#x2F;**\n * Offscreen 组件标识\n * 用于标识 Offscreen 组件的 Fiber 节点\n * 通常用于实现一些性能优化相关的功能\n * @example\n * &#x2F;&#x2F; React 内部使用，用于优化渲染性能\n * &#x2F;&#x2F; 对应的 Fiber 节点的 tag 值为 OffscreenComponent (14)\n *&#x2F;\nexport const OffscreenComponent: React.OffscreenComponent &#x3D; 14;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用示例：</p></blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function processFiber(fiber: FiberNode) &#123;\n  switch (fiber.tag) &#123;\n    case FunctionComponent:\n      &#x2F;&#x2F; 处理函数组件\n      updateFunctionComponent(fiber);\n      break;\n    case HostComponent:\n      &#x2F;&#x2F; 处理 DOM 元素\n      updateHostComponent(fiber);\n      break;\n    case HostText:\n      &#x2F;&#x2F; 处理文本节点\n      updateTextContent(fiber);\n      break;\n    &#x2F;&#x2F; ... 处理其他类型\n  &#125;\n&#125;</code></pre>\n\n","feature":true,"text":"React-Principle此文章旨在于剖析 React 的一些基本原理，帮助读者更好地理解 React 的工作原理。并写出属于自己的 React 代码。 前置任务搭建目录以及配置一些工具First of all！ ├── packages| ├── react| | ├── ...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"React","slug":"React","count":1,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React-Principle\"><span class=\"toc-text\">React-Principle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">前置任务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BA%E7%9B%AE%E5%BD%95%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">搭建目录以及配置一些工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">安装依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%9A%84package-json%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">根目录的package.json文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#tsconfig-json\"><span class=\"toc-text\">tsconfig.json</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#eslint-config-js\"><span class=\"toc-text\">eslint.config.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#prettier-json\"><span class=\"toc-text\">.prettier.json</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">打包脚本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#rollup-config-js\"><span class=\"toc-text\">rollup.config.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#utils-js\"><span class=\"toc-text\">utils.js</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#package-x2F-react\"><span class=\"toc-text\">package&#x2F;react</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#package-x2F-shared\"><span class=\"toc-text\">package&#x2F;shared</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#package-x2F-react-reconciler\"><span class=\"toc-text\">package&#x2F;react-reconciler</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jsx\"><span class=\"toc-text\">jsx</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">基本介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-JSX\"><span class=\"toc-text\">实现 JSX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">声明类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-JSX-1\"><span class=\"toc-text\">实现 JSX</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-reconciler\"><span class=\"toc-text\">React reconciler</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%94%B9-packages-x2F-react-reconciler-x2F-package-json-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">更改 packages&#x2F;react-reconciler&#x2F;package.json 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-packages-x2F-react-x2F-src-x2F-currentBatchConfig-ts-%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E5%A3%B0%E6%98%8E%E4%BA%86-currentBatchConfig-%E7%B1%BB%E5%9E%8B%E3%80%82\"><span class=\"toc-text\">在 packages&#x2F;react&#x2F;src&#x2F;currentBatchConfig.ts 文件中，我们声明了 currentBatchConfig 类型。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-packages-x2F-react-reconciler-x2F-src-x2F-fiberFlags-ts-%E6%96%87%E4%BB%B6%E4%B8%AD\"><span class=\"toc-text\">在 packages&#x2F;react-reconciler&#x2F;src&#x2F;fiberFlags.ts 文件中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-packages-x2F-react-reconciler-x2F-src-x2F-workTags-ts-%E6%96%87%E4%BB%B6%E4%B8%AD\"><span class=\"toc-text\">在 packages&#x2F;react-reconciler&#x2F;src&#x2F;workTags.ts 文件中</span></a></li></ol></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"rollup","uid":"6d1a44d72f500b2ae165cfd01771a531","slug":"rollup","date":"2024-12-22T08:39:14.000Z","updated":"2024-12-22T10:16:45.524Z","comments":true,"path":"api/articles/rollup.json","keywords":null,"cover":"/images/rollup/cover.png","text":"rollup前端工程化历程 除屑优化(tree shaking)除了可以使用 ES 模块之外，Rollup 还可以静态分析你导入的代码，并将排除任何实际上没有使用的内容，从上面的引入和最后的打包结果就可以看到，没有使用到的内容直接被删除了。 注意，除屑优化的核心思想是在编译阶段通...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"Academic","slug":"Academic","count":2,"path":"api/categories/Academic.json"}],"tags":[{"name":"rollup","slug":"rollup","count":1,"path":"api/tags/rollup.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"前端自动化部署","uid":"78c733f14091289904e8c5ab0e4b1c53","slug":"automated-deployment","date":"2024-10-20T04:18:31.000Z","updated":"2024-11-23T16:49:25.153Z","comments":true,"path":"api/articles/automated-deployment.json","keywords":null,"cover":[],"text":"所谓自动化部署就是当代码触发提交的时候自动部署到服务器上 前置准备工作 服务器：需要有一台可以部署代码的服务器，比如阿里云、腾讯云、GitHub Pages 等 代码仓库：需要有一个代码仓库，比如 GitHub、GitLab 等 会 linux 懂点 Ngnix 懂点 Git 买...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Academic","slug":"Academic","count":2,"path":"api/categories/Academic.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"},{"name":"nginx","slug":"nginx","count":1,"path":"api/tags/nginx.json"},{"name":"jenkins","slug":"jenkins","count":1,"path":"api/tags/jenkins.json"},{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}