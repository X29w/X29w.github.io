{"title":"interview-react","uid":"315f9f443ae2dc302897ea2ae6c37f7e","slug":"interview-react","date":"2024-05-30T14:59:54.000Z","updated":"2024-05-30T15:00:06.903Z","comments":true,"path":"api/articles/interview-react.json","keywords":null,"cover":null,"content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"React-事件机制\"><a href=\"#React-事件机制\" class=\"headerlink\" title=\"React 事件机制\"></a>React 事件机制</h2><p>React 使用自己的事件系统，它是对浏览器原生事件系统的一个轻量级封装，旨在提高性能并提供更好的跨浏览器兼容性。下面是React事件机制的核心特点和工作原理：</p>\n<h3 id=\"事件命名约定\"><a href=\"#事件命名约定\" class=\"headerlink\" title=\"事件命名约定\"></a>事件命名约定</h3><ul>\n<li><strong>驼峰命名</strong>：React 使用驼峰命名法（camelCase）来命名事件处理器，比如<code>onClick</code>而不是<code>onclick</code>。</li>\n</ul>\n<h3 id=\"事件处理函数\"><a href=\"#事件处理函数\" class=\"headerlink\" title=\"事件处理函数\"></a>事件处理函数</h3><ul>\n<li><strong>自动绑定</strong>：在ES6类组件中，需要手动绑定<code>this</code>（如在构造函数中使用<code>this.handleClick = this.handleClick.bind(this);</code>），或者使用箭头函数来定义事件处理器以确保正确的上下文。</li>\n<li><strong>合成事件（SyntheticEvent）</strong>：React 为原生事件创建了一个跨浏览器的兼容层，称为合成事件。这些合成事件与原生事件相似，但提供了一些额外的便利性，并在事件处理完毕后自动销毁，帮助避免内存泄漏。</li>\n</ul>\n<h3 id=\"事件委托（Event-Delegation）\"><a href=\"#事件委托（Event-Delegation）\" class=\"headerlink\" title=\"事件委托（Event Delegation）\"></a>事件委托（Event Delegation）</h3><ul>\n<li><strong>事件冒泡</strong>：React 利用了事件冒泡机制，实际上只在最外层的DOM节点（通常是一个根节点如<code>&lt;div id=&quot;root&quot;&gt;</code>）上监听所有事件，然后通过事件目标判断应该触发哪个组件的事件处理器。这种方法减少了内存消耗和事件监听器的数量。</li>\n</ul>\n<h3 id=\"阻止默认行为\"><a href=\"#阻止默认行为\" class=\"headerlink\" title=\"阻止默认行为\"></a>阻止默认行为</h3><ul>\n<li>使用<code>event.preventDefault()</code>方法阻止事件的默认行为，比如点击链接时不跳转或表单提交时不刷新页面。</li>\n</ul>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><ul>\n<li>由于React事件处理器作为属性传递，直接在事件处理函数中添加额外参数通常需要借助箭头函数或者使用<code>bind</code>来传递。</li>\n</ul>\n<h3 id=\"跨浏览器兼容\"><a href=\"#跨浏览器兼容\" class=\"headerlink\" title=\"跨浏览器兼容\"></a>跨浏览器兼容</h3><ul>\n<li>React合成事件确保了事件处理的一致性，隐藏了不同浏览器之间的差异，使得开发者无需担心兼容性问题。</li>\n</ul>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ul>\n<li>通过事件委托和合成事件的机制，React减少了DOM操作，提高了性能。同时，React还提供了<code>shouldComponentUpdate</code>生命周期方法来控制不必要的重新渲染，进一步优化性能。</li>\n</ul>\n<h2 id=\"React-事件与普通-HTML-事件的不同之处\"><a href=\"#React-事件与普通-HTML-事件的不同之处\" class=\"headerlink\" title=\"React 事件与普通 HTML 事件的不同之处\"></a>React 事件与普通 HTML 事件的不同之处</h2><p>React 的事件处理与原生 HTML 事件在机制和用法上存在一些关键差异，主要体现在以下几个方面：</p>\n<h3 id=\"1-命名约定\"><a href=\"#1-命名约定\" class=\"headerlink\" title=\"1. 命名约定\"></a>1. <strong>命名约定</strong></h3><ul>\n<li><strong>原生 HTML 事件</strong>：使用全小写字母，如 <code>onclick</code>。</li>\n<li><strong>React 事件</strong>：采用驼峰命名法，如 <code>onClick</code>。</li>\n</ul>\n<h3 id=\"2-事件处理方式\"><a href=\"#2-事件处理方式\" class=\"headerlink\" title=\"2. 事件处理方式\"></a>2. <strong>事件处理方式</strong></h3><ul>\n<li><strong>原生 HTML</strong>：通常在元素的属性中直接使用字符串形式的函数名，如 <code>&lt;button onclick=&quot;handleClick()&quot;&gt;Click me&lt;/button&gt;</code>。</li>\n<li><strong>React</strong>：事件处理器是以函数形式传递给组件属性，如 <code>&lt;button onClick=&#123;this.handleClick&#125;&gt;Click me&lt;/button&gt;</code>。</li>\n</ul>\n<h3 id=\"3-事件委托与合成事件\"><a href=\"#3-事件委托与合成事件\" class=\"headerlink\" title=\"3. 事件委托与合成事件\"></a>3. <strong>事件委托与合成事件</strong></h3><ul>\n<li><strong>原生 HTML</strong>：事件直接绑定在每个DOM元素上。</li>\n<li><strong>React</strong>：采用事件委托机制，在文档（通常是根节点）上监听所有事件，利用事件冒泡机制处理事件，然后根据事件目标分发给相应的React组件。这样减少了内存占用和提高了性能。</li>\n</ul>\n<h3 id=\"4-阻止默认行为\"><a href=\"#4-阻止默认行为\" class=\"headerlink\" title=\"4. 阻止默认行为\"></a>4. <strong>阻止默认行为</strong></h3><ul>\n<li><strong>原生 HTML</strong>：可以使用 <code>return false;</code> 或 <code>event.returnValue = false;</code> 阻止默认行为。</li>\n<li><strong>React</strong>：必须显式调用 <code>event.preventDefault();</code> 来阻止事件的默认行为，<code>return false;</code> 不起作用。</li>\n</ul>\n<h3 id=\"5-合成事件对象\"><a href=\"#5-合成事件对象\" class=\"headerlink\" title=\"5. 合成事件对象\"></a>5. <strong>合成事件对象</strong></h3><ul>\n<li><strong>React</strong> 提供了合成事件（SyntheticEvent），这是一个跨浏览器的事件模拟对象，封装了原生事件，提供了统一的接口，并在事件处理完毕后自动清理，有助于防止内存泄漏。</li>\n</ul>\n<h3 id=\"6-执行顺序\"><a href=\"#6-执行顺序\" class=\"headerlink\" title=\"6. 执行顺序\"></a>6. <strong>执行顺序</strong></h3><ul>\n<li><strong>React</strong> 的合成事件会在原生事件之后执行，且合成事件依赖冒泡阶段到达<code>document</code>，因此，如果原生事件阻止了事件冒泡，可能会导致合成事件不触发。</li>\n</ul>\n<h3 id=\"7-性能优化\"><a href=\"#7-性能优化\" class=\"headerlink\" title=\"7. 性能优化\"></a>7. <strong>性能优化</strong></h3><ul>\n<li>React 通过事件委托和合成事件机制，减少了DOM操作，提高了应用的性能，并且提供了生命周期方法（如 <code>shouldComponentUpdate</code>）来进一步控制渲染，优化性能。</li>\n</ul>\n<h2 id=\"React-组件中事件代理的实现与原理\"><a href=\"#React-组件中事件代理的实现与原理\" class=\"headerlink\" title=\"React 组件中事件代理的实现与原理\"></a>React 组件中事件代理的实现与原理</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>在React中实现事件代理，主要是通过在父组件上绑定事件处理器，利用事件冒泡机制处理子组件触发的事件。具体步骤如下：</p>\n<ol>\n<li><p><strong>定义父组件事件处理器</strong>：在父组件中定义一个事件处理器函数，该函数将负责处理所有子组件触发的事件。</p>\n</li>\n<li><p><strong>在父组件的JSX中绑定事件</strong>：在父组件的渲染方法中，为包含子组件的元素（通常是直接的父容器）绑定所需的事件处理器，如<code>onClick</code>。</p>\n</li>\n<li><p><strong>事件处理器内的逻辑</strong>：在事件处理器中，通过<code>event.target</code>或<code>event.currentTarget</code>识别实际触发事件的子元素，并根据需要执行相应逻辑。</p>\n</li>\n<li><p><strong>条件渲染或透传数据</strong>：根据触发事件的子元素，可以在事件处理器中做出不同的响应，或者通过属性（props）将处理逻辑或数据传递给子组件。</p>\n</li>\n</ol>\n<h3 id=\"原理说明\"><a href=\"#原理说明\" class=\"headerlink\" title=\"原理说明\"></a>原理说明</h3><p>React的事件代理机制基于以下核心原理：</p>\n<ol>\n<li><p><strong>事件委托（Event Delegation）</strong>：React 利用事件冒泡机制（bubbling phase），即事件从最深的节点开始，逐级向上层节点传播，直到文档根节点。父组件只需在某一层级监听事件，即可捕捉到所有子组件的事件。</p>\n</li>\n<li><p><strong>合成事件系统（SyntheticEvent System）</strong>：React提供了一套跨浏览器兼容的合成事件系统，它在内部对原生事件进行了封装，统一了事件接口，并且在事件处理完毕后自动清理，有助于防止内存泄漏。</p>\n</li>\n<li><p><strong>单一事件监听器</strong>：React在最外层（通常是ReactDOM.render()挂载的根节点）为每种类型的事件只绑定一个监听器，而非为每个子元素单独绑定。这样显著减少了DOM上的事件监听器数量，提高了性能。</p>\n</li>\n<li><p><strong>事件映射与分发</strong>：React维护了一个事件处理器的映射关系，当事件从子组件冒泡到监听器所在的根节点时，React根据事件类型查找对应的处理器并执行，同时确保正确的<code>this</code>上下文和事件对象。</p>\n</li>\n</ol>\n<h2 id=\"在React中如何避免不必要的render？\"><a href=\"#在React中如何避免不必要的render？\" class=\"headerlink\" title=\"在React中如何避免不必要的render？\"></a>在React中如何避免不必要的render？</h2><p>在React的函数式组件中避免不必要的渲染，主要可以通过以下几个策略来实现：</p>\n<h3 id=\"1-使用-React-memo\"><a href=\"#1-使用-React-memo\" class=\"headerlink\" title=\"1. 使用 React.memo\"></a>1. <strong>使用 <code>React.memo</code></strong></h3><p><code>React.memo</code> 是一个高阶组件，可以用于优化纯函数组件，避免在props未改变时重新渲染。它类似于类组件中的 <code>PureComponent</code>。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; memo &#125; from &#39;react&#39;;\n\nconst MyComponent &#x3D; memo((props) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 组件逻辑...\n&#125;);</code></pre>\n\n<h3 id=\"2-利用-useMemo-缓存计算结果\"><a href=\"#2-利用-useMemo-缓存计算结果\" class=\"headerlink\" title=\"2. 利用 useMemo 缓存计算结果\"></a>2. <strong>利用 <code>useMemo</code> 缓存计算结果</strong></h3><p><code>useMemo</code> 用于缓存昂贵计算的结果，只有当依赖项改变时才重新计算。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useMemo &#125; from &#39;react&#39;;\n\nfunction MyComponent(&#123; a, b &#125;) &#123;\n  const expensiveCalculation &#x3D; useMemo(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 进行复杂计算...\n    return calculationResult;\n  &#125;, [a, b]); &#x2F;&#x2F; 仅当 &#39;a&#39; 或 &#39;b&#39; 改变时重新计算\n\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<h3 id=\"3-利用-useCallback-避免创建新的回调函数\"><a href=\"#3-利用-useCallback-避免创建新的回调函数\" class=\"headerlink\" title=\"3. 利用 useCallback 避免创建新的回调函数\"></a>3. <strong>利用 <code>useCallback</code> 避免创建新的回调函数</strong></h3><p><code>useCallback</code> 确保传递给子组件的回调函数在依赖项不变时引用保持不变，从而避免子组件因接收新函数而重新渲染。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useCallback &#125; from &#39;react&#39;;\n\nfunction ParentComponent() &#123;\n  const handleClick &#x3D; useCallback(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 处理点击事件...\n  &#125;, []); &#x2F;&#x2F; 空依赖数组意味着这个函数在整个组件生命周期内都只会创建一次\n\n  return &lt;ChildComponent onClick&#x3D;&#123;handleClick&#125; &#x2F;&gt;;\n&#125;</code></pre>\n\n<h3 id=\"4-避免在渲染过程中产生新的引用\"><a href=\"#4-避免在渲染过程中产生新的引用\" class=\"headerlink\" title=\"4. 避免在渲染过程中产生新的引用\"></a>4. <strong>避免在渲染过程中产生新的引用</strong></h3><p>确保在渲染过程中使用的对象或数组尽量保持引用稳定，避免因引用地址变化导致不必要的渲染。</p>\n<h3 id=\"5-谨慎使用-Context-和-Redux-等状态管理库\"><a href=\"#5-谨慎使用-Context-和-Redux-等状态管理库\" class=\"headerlink\" title=\"5. 谨慎使用 Context 和 Redux 等状态管理库\"></a>5. <strong>谨慎使用 Context 和 Redux 等状态管理库</strong></h3><p>当直接使用 <code>useContext</code> 消费Context值时，组件可能会因为Context的任何更新而重新渲染。可以通过在消费组件外包裹一层 <code>React.memo</code> 或者在更深层次使用 <code>useContext</code> 结合 <code>useMemo</code>&#x2F;<code>useCallback</code> 来减少不必要的更新。</p>\n<h3 id=\"6-Keys-在列表渲染中的正确使用\"><a href=\"#6-Keys-在列表渲染中的正确使用\" class=\"headerlink\" title=\"6. Keys 在列表渲染中的正确使用\"></a>6. <strong>Keys 在列表渲染中的正确使用</strong></h3><p>确保在列表渲染时为每个元素提供稳定的 <code>key</code> 属性，帮助React高效地更新列表，避免不必要的完整列表重渲染。</p>\n<h2 id=\"React中什么是受控组件和非控组件？\"><a href=\"#React中什么是受控组件和非控组件？\" class=\"headerlink\" title=\"React中什么是受控组件和非控组件？\"></a>React中什么是受控组件和非控组件？</h2><p>在React的函数式组件中，<strong>受控组件</strong>（Controlled Components）和<strong>非受控组件</strong>（Uncontrolled Components）是处理表单输入数据的两种不同方式。</p>\n<h3 id=\"受控组件（Controlled-Components）\"><a href=\"#受控组件（Controlled-Components）\" class=\"headerlink\" title=\"受控组件（Controlled Components）\"></a>受控组件（Controlled Components）</h3><ul>\n<li><p><strong>定义</strong>: 受控组件是指其值由React状态（通常是<code>useState</code> Hook管理）控制的表单元素。每次表单元素的值发生变化时，都会通过onChange事件触发更新状态，从而确保组件的显示值与React状态保持一致。</p>\n</li>\n<li><p><strong>实现方式</strong>:</p>\n<ol>\n<li>使用<code>useState</code>初始化表单字段的状态。</li>\n<li>为表单元素设置<code>value</code>或<code>checked</code>属性，绑定到状态值。</li>\n<li>定义一个onChange处理器更新状态。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useState &#125; from &#39;react&#39;;\n\nfunction ControlledInput() &#123;\n  const [value, setValue] &#x3D; useState(&#39;&#39;);\n\n  const handleChange &#x3D; (e) &#x3D;&gt; &#123;\n    setValue(e.target.value);\n  &#125;;\n\n  return (\n    &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;handleChange&#125; &#x2F;&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"非受控组件（Uncontrolled-Components）\"><a href=\"#非受控组件（Uncontrolled-Components）\" class=\"headerlink\" title=\"非受控组件（Uncontrolled Components）\"></a>非受控组件（Uncontrolled Components）</h3><ul>\n<li><p><strong>定义</strong>: 非受控组件的值不由React状态直接管理，而是存储在DOM中，通常使用<code>ref</code>来访问这些值。当需要获取表单数据时，直接从DOM中读取，而不是从React状态中读取。</p>\n</li>\n<li><p><strong>实现方式</strong>:</p>\n<ol>\n<li>使用<code>useRef</code>创建一个ref来访问DOM元素。</li>\n<li>不为表单元素设置<code>value</code>或<code>checked</code>属性。</li>\n<li>在需要时，通过ref访问DOM元素获取值。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useRef, useEffect &#125; from &#39;react&#39;;\n\nfunction UncontrolledInput() &#123;\n  const inputRef &#x3D; useRef(null);\n\n  useEffect(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 可以在这里设置初始值或做其他DOM操作\n  &#125;, []);\n\n  const handleSubmit &#x3D; (e) &#x3D;&gt; &#123;\n    e.preventDefault();\n    console.log(inputRef.current.value); &#x2F;&#x2F; 获取输入值\n  &#125;;\n\n  return (\n    &lt;form onSubmit&#x3D;&#123;handleSubmit&#125;&gt;\n      &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;inputRef&#125; &#x2F;&gt;\n      &lt;button type&#x3D;&quot;submit&quot;&gt;Submit&lt;&#x2F;button&gt;\n    &lt;&#x2F;form&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"选择哪种方式\"><a href=\"#选择哪种方式\" class=\"headerlink\" title=\"选择哪种方式\"></a>选择哪种方式</h3><ul>\n<li><strong>受控组件</strong>适合需要精细控制表单状态和验证的情况，所有状态更新都在React中管理，逻辑集中且易于控制。</li>\n<li><strong>非受控组件</strong>适用于简单的表单或性能敏感的场景，减少React的状态管理负担，但可能需要更多的DOM操作来交互和获取数据。</li>\n</ul>\n<h2 id=\"React的函数式组件中refs的作用是什么？有哪些应用场景？\"><a href=\"#React的函数式组件中refs的作用是什么？有哪些应用场景？\" class=\"headerlink\" title=\"React的函数式组件中refs的作用是什么？有哪些应用场景？\"></a>React的函数式组件中refs的作用是什么？有哪些应用场景？</h2><p>在React的函数式组件中，<code>refs</code>的作用主要是提供一种方式来直接访问和操作DOM元素或React组件的实例。它们允许你在React的声明式编程模型之外，进行必要的直接操作，特别是在需要与DOM交互的场景下。下面是<code>refs</code>的一些关键应用场景：</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><strong>访问DOM元素</strong>：可以用来获取对DOM元素的直接访问权限，从而执行如聚焦输入框、测量尺寸、滚动页面等操作。</li>\n<li><strong>组件实例引用</strong>：不仅可以用于DOM元素，还可以用来引用函数式或类组件的实例，进而调用组件内部的方法或访问其属性。</li>\n<li><strong>集成第三方库</strong>：与非React库集成时，经常需要直接操作DOM或访问特定元素，这时<code>refs</code>就显得尤为重要。</li>\n<li><strong>管理焦点与选择</strong>：对于表单元素，可以便捷地控制焦点管理和文本选择。</li>\n<li><strong>动画控制</strong>：与CSS动画或第三方动画库结合时，可以通过<code>refs</code>来触发和控制动画。</li>\n</ul>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ol>\n<li><p><strong>自动聚焦</strong>：页面加载后或某些操作后，自动聚焦到特定的输入框。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">const inputRef &#x3D; useRef(null);\nuseEffect(() &#x3D;&gt; &#123;\n  inputRef.current.focus();\n&#125;, []);\nreturn &lt;input ref&#x3D;&#123;inputRef&#125; type&#x3D;&quot;text&quot; &#x2F;&gt;;</code></pre>\n</li>\n<li><p><strong>滚动位置管理</strong>：控制滚动条位置或执行平滑滚动效果。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">const scrollRef &#x3D; useRef(null);\nconst handleScrollToBottom &#x3D; () &#x3D;&gt; &#123;\n  scrollRef.current.scrollTop &#x3D; scrollRef.current.scrollHeight;\n&#125;;\nreturn &lt;div ref&#x3D;&#123;scrollRef&#125; onButtonClick&#x3D;&#123;handleScrollToBottom&#125;&gt;&#123;&#x2F;* 内容 *&#x2F;&#125;&lt;&#x2F;div&gt;;</code></pre>\n</li>\n<li><p><strong>测量元素尺寸</strong>：动态调整布局或实现自适应设计。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">const divRef &#x3D; useRef(null);\nuseEffect(() &#x3D;&gt; &#123;\n  console.log(divRef.current.offsetHeight);\n&#125;, []);\nreturn &lt;div ref&#x3D;&#123;divRef&#125;&gt;测量高度&lt;&#x2F;div&gt;;</code></pre>\n</li>\n<li><p><strong>触发第三方库功能</strong>：如使用D3.js进行图形绘制，需要直接操作DOM。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">const chartRef &#x3D; useRef(null);\nuseEffect(() &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 初始化D3图表\n  const chart &#x3D; new SomeD3Chart(chartRef.current);\n  &#x2F;&#x2F; 渲染图表\n  chart.render();\n  &#x2F;&#x2F; 清理函数\n  return () &#x3D;&gt; chart.destroy();\n&#125;, []);\nreturn &lt;div ref&#x3D;&#123;chartRef&#125; &#x2F;&gt;;</code></pre></li>\n</ol>\n<h2 id=\"React-forwardRef是什么？它有什么作用？\"><a href=\"#React-forwardRef是什么？它有什么作用？\" class=\"headerlink\" title=\"React.forwardRef是什么？它有什么作用？\"></a>React.forwardRef是什么？它有什么作用？</h2><p>在React的函数式组件中，<strong>受控组件</strong>（Controlled Components）和<strong>非受控组件</strong>（Uncontrolled Components）是处理表单输入数据的两种不同方式。</p>\n<h3 id=\"受控组件（Controlled-Components）-1\"><a href=\"#受控组件（Controlled-Components）-1\" class=\"headerlink\" title=\"受控组件（Controlled Components）\"></a>受控组件（Controlled Components）</h3><ul>\n<li><p><strong>定义</strong>: 受控组件是指其值由React状态（通常是<code>useState</code> Hook管理）控制的表单元素。每次表单元素的值发生变化时，都会通过onChange事件触发更新状态，从而确保组件的显示值与React状态保持一致。</p>\n</li>\n<li><p><strong>实现方式</strong>:</p>\n<ol>\n<li>使用<code>useState</code>初始化表单字段的状态。</li>\n<li>为表单元素设置<code>value</code>或<code>checked</code>属性，绑定到状态值。</li>\n<li>定义一个onChange处理器更新状态。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useState &#125; from &#39;react&#39;;\n\nfunction ControlledInput() &#123;\n  const [value, setValue] &#x3D; useState(&#39;&#39;);\n\n  const handleChange &#x3D; (e) &#x3D;&gt; &#123;\n    setValue(e.target.value);\n  &#125;;\n\n  return (\n    &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;handleChange&#125; &#x2F;&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"非受控组件（Uncontrolled-Components）-1\"><a href=\"#非受控组件（Uncontrolled-Components）-1\" class=\"headerlink\" title=\"非受控组件（Uncontrolled Components）\"></a>非受控组件（Uncontrolled Components）</h3><ul>\n<li><p><strong>定义</strong>: 非受控组件的值不由React状态直接管理，而是存储在DOM中，通常使用<code>ref</code>来访问这些值。当需要获取表单数据时，直接从DOM中读取，而不是从React状态中读取。</p>\n</li>\n<li><p><strong>实现方式</strong>:</p>\n<ol>\n<li>使用<code>useRef</code>创建一个ref来访问DOM元素。</li>\n<li>不为表单元素设置<code>value</code>或<code>checked</code>属性。</li>\n<li>在需要时，通过ref访问DOM元素获取值。</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; useRef, useEffect &#125; from &#39;react&#39;;\n\nfunction UncontrolledInput() &#123;\n  const inputRef &#x3D; useRef(null);\n\n  useEffect(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 可以在这里设置初始值或做其他DOM操作\n  &#125;, []);\n\n  const handleSubmit &#x3D; (e) &#x3D;&gt; &#123;\n    e.preventDefault();\n    console.log(inputRef.current.value); &#x2F;&#x2F; 获取输入值\n  &#125;;\n\n  return (\n    &lt;form onSubmit&#x3D;&#123;handleSubmit&#125;&gt;\n      &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;inputRef&#125; &#x2F;&gt;\n      &lt;button type&#x3D;&quot;submit&quot;&gt;Submit&lt;&#x2F;button&gt;\n    &lt;&#x2F;form&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"选择哪种方式-1\"><a href=\"#选择哪种方式-1\" class=\"headerlink\" title=\"选择哪种方式\"></a>选择哪种方式</h3><ul>\n<li><strong>受控组件</strong>适合需要精细控制表单状态和验证的情况，所有状态更新都在React中管理，逻辑集中且易于控制。</li>\n<li><strong>非受控组件</strong>适用于简单的表单或性能敏感的场景，减少React的状态管理负担，但可能需要更多的DOM操作来交互和获取数据。</li>\n</ul>\n<h2 id=\"类组件与函数组件的异同\"><a href=\"#类组件与函数组件的异同\" class=\"headerlink\" title=\"类组件与函数组件的异同\"></a>类组件与函数组件的异同</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ul>\n<li><strong>目的</strong>：无论是类组件还是函数组件，它们都是React中构建用户界面的基本单元，用于描述UI的结构和行为。</li>\n<li><strong>渲染</strong>：两者都可以接收<code>props</code>作为输入，并返回React元素来描述应该在页面上渲染的内容。</li>\n<li><strong>状态管理</strong>：虽然方式不同，但现代React通过Hooks（如<code>useState</code>、<code>useEffect</code>等）使得函数组件也能管理状态和生命周期逻辑，逐渐缩小了与类组件在功能上的差距。</li>\n<li><strong>优化</strong>：两者都可以通过React的内在机制（如PureComponent、<code>React.memo</code>等）来避免不必要的渲染。</li>\n</ul>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ol>\n<li><p><strong>语法结构</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：以函数形式定义，更简洁，无需继承<code>React.Component</code>，直接接收<code>props</code>并返回JSX。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function FunctionalComponent(props) &#123;\n  return &lt;div&gt;Hello, &#123;props.name&#125;!&lt;&#x2F;div&gt;;\n&#125;</code></pre></li>\n<li><strong>类组件</strong>：基于ES6类定义，需要继承<code>React.Component</code>，并实现<code>render</code>方法来返回JSX。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">class ClassComponent extends React.Component &#123;\n  render() &#123;\n    return &lt;div&gt;Hello, &#123;this.props.name&#125;!&lt;&#x2F;div&gt;;\n  &#125;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p><strong>状态管理</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：原本无状态，但引入Hooks后，可以使用<code>useState</code>、<code>useReducer</code>等来管理状态。</li>\n<li><strong>类组件</strong>：可以直接使用<code>this.state</code>和<code>this.setState</code>来管理状态。</li>\n</ul>\n</li>\n<li><p><strong>生命周期</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：通过Hooks（如<code>useEffect</code>）模拟类组件的生命周期方法，更侧重于副作用的管理而非传统生命周期的概念。</li>\n<li><strong>类组件</strong>：包含完整的生命周期方法，如<code>componentDidMount</code>、<code>componentDidUpdate</code>等，适用于需要细致控制组件生命周期的场景。</li>\n</ul>\n</li>\n<li><p><strong>性能优化</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：可以轻易地通过<code>React.memo</code>进行性能优化，避免不必要的渲染。</li>\n<li><strong>类组件</strong>：需继承<code>React.PureComponent</code>或手动实现<code>shouldComponentUpdate</code>来优化。</li>\n</ul>\n</li>\n<li><p><strong>上下文访问</strong>:</p>\n<ul>\n<li>两者都可以使用<code>useContext</code> Hook来访问React Context，但类组件也可以通过<code>contextType</code>属性直接访问。</li>\n</ul>\n</li>\n<li><p><strong>内存占用</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：由于没有实例，理论上内存占用更少。</li>\n<li><strong>类组件</strong>：每个实例都有自己的状态和方法，可能会占用更多内存。</li>\n</ul>\n</li>\n<li><p><strong>测试与调试</strong>:</p>\n<ul>\n<li><strong>函数组件</strong>：通常认为更易于测试，因为它们是纯粹的函数。</li>\n<li><strong>类组件</strong>：由于有实例和生命周期方法，测试和调试可能稍微复杂一些。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"React-setState-调用的原理\"><a href=\"#React-setState-调用的原理\" class=\"headerlink\" title=\"React setState 调用的原理\"></a>React setState 调用的原理</h2><p>在React中，<code>setState</code>方法用于更新组件的状态，并触发组件重新渲染以反映状态变化。以下是<code>setState</code>调用的原理概览，以Markdown格式展示：</p>\n<h3 id=\"setState调用原理\"><a href=\"#setState调用原理\" class=\"headerlink\" title=\"setState调用原理\"></a><code>setState</code>调用原理</h3><ol>\n<li><p><strong>合并状态</strong>：<br>当调用<code>setState</code>时，传递给它的对象将会与当前状态合并。这意味着，如果你只更新部分状态，其他状态属性保持不变。</p>\n</li>\n<li><p><strong>队列更新</strong>：<br>React不会立即更新状态和重新渲染组件，而是将状态更新任务放入一个更新队列中。这一机制有助于批量处理多个状态更新，减少不必要的渲染，提升性能。</p>\n</li>\n<li><p><strong>批量更新机制</strong>：<br>React通过一个名为<code>isBatchingUpdates</code>的标志来决定是否立即执行更新还是将其加入队列。在执行某些操作（如处理事件或在React的生命周期方法中）前，React会通过<code>batchedUpdates</code>方法将<code>isBatchingUpdates</code>设为<code>true</code>，从而延迟状态更新和渲染。</p>\n</li>\n<li><p><strong>异步更新</strong>：<br>在大多数情况下，<code>setState</code>是异步的，意味着调用<code>setState</code>后，状态不会立即改变，也不会立即触发组件重新渲染。React会在当前代码执行完成后，且有可能合并多个状态更新为一次操作，再进行实际的更新和渲染。</p>\n</li>\n<li><p><strong>回调函数</strong>：<br>如果你需要在状态更新且DOM已更改后执行某些操作，可以向<code>setState</code>传递一个回调函数作为第二个参数。这个回调函数将在更新完成并且组件重新渲染后被调用。</p>\n</li>\n<li><p><strong>函数作为参数</strong>：<br><code>setState</code>还可以接受一个函数作为参数，该函数接收当前状态作为参数并返回一个新的状态对象。这在需要基于前一个状态来计算下一个状态时非常有用，确保状态更新的确定性。</p>\n</li>\n</ol>\n<h3 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h3><ul>\n<li><strong>enqueueSetState</strong>：内部方法，负责将新的状态加入更新队列。</li>\n<li><strong>batchingStrategy</strong>：管理批量更新的策略对象，通过其<code>isBatchingUpdates</code>属性控制是否批量处理更新。</li>\n<li><strong>batchedUpdates</strong>：函数，用于开启批量更新模式，通常在React控制的事件处理前后调用，以决定状态更新的时机。</li>\n</ul>\n<p>通过这些机制，React确保了状态更新的高效和可预测性，同时也为开发者提供了灵活的状态管理方式。</p>\n<h2 id=\"React中的setState批量更新的过程是什么\"><a href=\"#React中的setState批量更新的过程是什么\" class=\"headerlink\" title=\"React中的setState批量更新的过程是什么\"></a>React中的setState批量更新的过程是什么</h2><p>在React中，<code>setState</code>批量更新的过程旨在优化性能，减少不必要的渲染，确保高效的UI更新。以下是批量更新机制的工作流程，以Markdown格式描述：</p>\n<h3 id=\"setState批量更新过程\"><a href=\"#setState批量更新过程\" class=\"headerlink\" title=\"setState批量更新过程\"></a><code>setState</code>批量更新过程</h3><ol>\n<li><p>**调用<code>setState</code>**：<br>当组件调用<code>setState</code>方法时，React并不会立即执行状态更新和重渲染。相反，它会记录下这次状态变更的请求。</p>\n</li>\n<li><p><strong>加入更新队列</strong>：<br>这个状态更新的请求会被加入到一个内部的更新队列中。如果在当前事件循环中有多次<code>setState</code>调用，它们都会被累积在这个队列里，而不是立即执行。</p>\n</li>\n<li><p><strong>合并状态</strong>：<br>React在处理更新队列时，会检查是否有多个更新针对同一组件，并尝试合并这些更新。如果更新是对象形式，且在事件循环中连续调用，React会将这些对象合并成一个新状态，避免多次不必要的渲染。</p>\n</li>\n<li><p><strong>批量处理</strong>：<br>React会等到当前运行的JavaScript执行栈为空（即所有同步代码执行完毕），才开始处理更新队列。这样做是为了减少UI重绘的次数，因为多次连续的状态更新可能只需要最终状态的一次渲染即可体现。</p>\n</li>\n<li><p><strong>Reconciliation（协调）</strong>：<br>在开始实际更新之前，React会执行所谓的“协调”过程，比较新旧状态和props，仅对需要更新的部分进行最小化的DOM操作，进一步优化性能。</p>\n</li>\n<li><p><strong>实际更新与渲染</strong>：<br>根据合并后的状态和props，React计算出虚拟DOM的差异，并将这些差异应用到实际DOM上，触发必要的渲染。这个过程称为“commit”阶段。</p>\n</li>\n<li><p><strong>回调执行</strong>：<br>如果在<code>setState</code>调用中指定了回调函数，这个回调会在所有状态更新和渲染完成之后被调用，这是确保DOM已经反映了最新状态的好时机。</p>\n</li>\n</ol>\n<h3 id=\"React-18中的改进\"><a href=\"#React-18中的改进\" class=\"headerlink\" title=\"React 18中的改进\"></a>React 18中的改进</h3><p>从React 18开始，引入了自动批处理（Automatic Batching）特性，使得在更广泛的情景下，如在事件处理程序和Promise决议期间，React都能自动地批量处理状态更新，而无需开发者手动使用<code>unstable_batchedUpdates</code>。这一改进进一步简化了代码，并提升了应用的性能。</p>\n<p>通过这一系列精心设计的步骤，React的<code>setState</code>批量更新机制确保了即使在面对复杂的状态变化时，也能提供流畅且高效的用户体验。</p>\n<h2 id=\"React中setState的第二个参数作用是什么？\"><a href=\"#React中setState的第二个参数作用是什么？\" class=\"headerlink\" title=\"React中setState的第二个参数作用是什么？\"></a>React中setState的第二个参数作用是什么？</h2><p>在React中，<code>setState</code>方法接受第二个可选参数，该参数是一个回调函数。这个回调函数的作用和目的如下：</p>\n<h3 id=\"setState第二个参数的作用\"><a href=\"#setState第二个参数的作用\" class=\"headerlink\" title=\"setState第二个参数的作用\"></a><code>setState</code>第二个参数的作用</h3><ul>\n<li><p><strong>回调时机</strong>：此回调函数会在<code>setState</code>引发的状态更新<strong>并且组件完成重新渲染</strong>之后被调用。这意味着当React异步处理完状态更新，且UI已经反映了新的状态时，才会执行此回调。</p>\n</li>\n<li><p><strong>确保访问最新状态</strong>：由于<code>setState</code>操作是异步的，直接在<code>setState</code>调用后访问<code>this.state</code>可能无法立即获得更新后的状态值。使用此回调函数，你可以确保在执行回调内的代码时，<code>this.state</code>已经包含了最新的状态值。</p>\n</li>\n<li><p><strong>执行后续操作</strong>：如果你需要在状态更新后执行某些操作（如数据处理、发起网络请求、或是基于新状态的DOM操作等），这个回调提供了一个安全的环境来执行这些逻辑。</p>\n</li>\n</ul>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">this.setState(&#123; counter: this.state.counter + 1 &#125;, () &#x3D;&gt; &#123;\n  console.log(&#39;状态已更新，当前计数器值为：&#39;, this.state.counter);\n  &#x2F;&#x2F; 在这里可以安全地访问和使用更新后的状态值\n&#125;);</code></pre>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><p><strong>避免依赖于回调进行状态依赖的逻辑</strong>：尽管回调函数提供了访问更新后状态的途径，但最佳实践是尽量通过React的生命周期方法（如<code>componentDidUpdate</code>以前的版本，或者在函数组件中使用<code>useEffect</code>）来处理依赖于状态变化的逻辑。</p>\n</li>\n<li><p><strong>React 16.8+与Hooks</strong>：对于函数组件，可以使用<code>useEffect</code> Hook来监听状态变化并执行副作用，这通常比依赖<code>setState</code>的回调更为灵活和清晰。</p>\n</li>\n</ul>\n<p>通过合理利用<code>setState</code>的第二个参数——回调函数，可以有效地管理状态更新后的逻辑处理，确保应用的行为符合预期。</p>\n<h2 id=\"React组件的state和props有什么区别？\"><a href=\"#React组件的state和props有什么区别？\" class=\"headerlink\" title=\"React组件的state和props有什么区别？\"></a>React组件的state和props有什么区别？</h2><h3 id=\"React中State与Props的区别\"><a href=\"#React中State与Props的区别\" class=\"headerlink\" title=\"React中State与Props的区别\"></a>React中State与Props的区别</h3><p>在React应用中，<code>state</code>和<code>props</code>都是用来管理组件数据的重要概念，但它们在用途、来源以及可控性上有所不同。下面详细阐述这些区别：</p>\n<h4 id=\"1-数据来源\"><a href=\"#1-数据来源\" class=\"headerlink\" title=\"1. 数据来源\"></a>1. 数据来源</h4><ul>\n<li><p><strong>Props（属性）</strong>：</p>\n<ul>\n<li>Props是从外部传递给组件的配置数据，通常由父组件通过标签属性的方式设定。</li>\n<li>它们是只读的，子组件不应也不能修改父组件传递过来的props。</li>\n<li>代表了组件的外部输入，决定了组件如何呈现。</li>\n</ul>\n</li>\n<li><p><strong>State（状态）</strong>：</p>\n<ul>\n<li>State是组件内部维护的数据，表示组件自身的状态。</li>\n<li>State允许组件根据用户的交互或其他内部逻辑动态改变自身状态，从而触发重新渲染。</li>\n<li>由组件自身初始化并在组件内部通过<code>setState</code>方法进行更新。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-控制权与可变性\"><a href=\"#2-控制权与可变性\" class=\"headerlink\" title=\"2. 控制权与可变性\"></a>2. 控制权与可变性</h4><ul>\n<li><p><strong>Props</strong>：</p>\n<ul>\n<li>控制权在父组件，子组件只能被动接收。</li>\n<li>不可变性保证了组件的纯功能性，使得组件表现得像纯函数，易于理解和预测。</li>\n</ul>\n</li>\n<li><p><strong>State</strong>：</p>\n<ul>\n<li>控制权在组件内部，组件可以根据需要修改自己的状态。</li>\n<li>可变性使得组件具有动态性，能够响应不同的状态变化。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-影响范围\"><a href=\"#3-影响范围\" class=\"headerlink\" title=\"3. 影响范围\"></a>3. 影响范围</h4><ul>\n<li><p><strong>Props</strong>：</p>\n<ul>\n<li>用于跨组件通信，影响所有使用这些props的子组件。</li>\n<li>改变props会导致使用这些props的组件重新渲染。</li>\n</ul>\n</li>\n<li><p><strong>State</strong>：</p>\n<ul>\n<li>影响范围局限于组件本身及其子组件（如果子组件依赖于该状态）。</li>\n<li>状态的改变会触发组件及其依赖该状态的子组件的重新渲染。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-使用场景\"><a href=\"#4-使用场景\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h4><ul>\n<li><p><strong>Props</strong>：</p>\n<ul>\n<li>用于传递数据和行为给子组件。</li>\n<li>当组件间需要共享数据或父组件需要控制子组件的表现时使用。</li>\n</ul>\n</li>\n<li><p><strong>State</strong>：</p>\n<ul>\n<li>用于组件内部状态的管理，如表单控件的值、加载状态等。</li>\n<li>当组件需要基于用户交互或异步操作改变自身行为时使用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>简而言之，<code>props</code>是组件间通信的桥梁，让组件可以接收外部信息；而<code>state</code>则负责组件内部状态的管理和变化，使组件能响应不同的状态展现不同的UI。理解它们的区别对于构建可维护、可预测的React应用至关重要。</p>\n<h2 id=\"React中的props为什么是只读的？\"><a href=\"#React中的props为什么是只读的？\" class=\"headerlink\" title=\"React中的props为什么是只读的？\"></a>React中的props为什么是只读的？</h2><p>React中的<code>props</code>被设计为只读的，这一决策基于以下几个核心原因，旨在增强应用程序的稳定性和可维护性：</p>\n<h3 id=\"React中Props只读性的原因\"><a href=\"#React中Props只读性的原因\" class=\"headerlink\" title=\"React中Props只读性的原因\"></a>React中Props只读性的原因</h3><ol>\n<li><p><strong>可预测性</strong>：</p>\n<ul>\n<li>只读的<code>props</code>确保组件接收的数据不会在组件内部被意外修改，使得组件行为更加可预测。</li>\n<li>开发者可以放心地假设一旦组件接收到<code>props</code>，这些数据就不会改变，除非父组件显式地更新它们。</li>\n</ul>\n</li>\n<li><p><strong>单向数据流</strong>：</p>\n<ul>\n<li>React推广单向数据流（one-way data binding）模式，其中数据流动主要沿着组件树自上而下。</li>\n<li>只读的<code>props</code>强化了这一模式，简化了数据管理和错误追踪，因为数据源头清晰明确。</li>\n</ul>\n</li>\n<li><p><strong>组件复用与解耦</strong>：</p>\n<ul>\n<li>使组件成为纯函数式的，即给定相同的输入（props），总能得到相同的输出（UI）。</li>\n<li>这种纯粹性提高了组件的可复用性和可测试性，组件之间更加独立，易于维护和理解。</li>\n</ul>\n</li>\n<li><p><strong>状态管理</strong>：</p>\n<ul>\n<li>将状态提升至最近的共同祖先组件中管理，而非分散在各个子组件的<code>props</code>中。</li>\n<li>集中的状态管理有助于控制复杂度，避免“ prop drilling”问题，即层层传递props。</li>\n</ul>\n</li>\n<li><p><strong>性能优化</strong>：</p>\n<ul>\n<li>React可以通过比较<code>props</code>和<code>state</code>的变化来确定是否需要重新渲染组件，只读性简化了这一过程。</li>\n<li>若<code>props</code>可变，React需要更复杂的机制来跟踪变动，可能导致不必要的渲染或遗漏必要的更新。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>综上所述，<code>props</code>的只读性质是React设计哲学的一部分，它鼓励构建清晰、可维护、易于推理的应用程序。通过保持数据流向的单一性和组件的纯净性，React应用能够更加健壮和高效。</p>\n<h2 id=\"父子组件的通信方式？\"><a href=\"#父子组件的通信方式？\" class=\"headerlink\" title=\"父子组件的通信方式？\"></a>父子组件的通信方式？</h2><p>在React的函数式组件中，父子组件间的通信主要依靠<strong>props</strong>传递数据和<strong>回调函数</strong>实现消息回传。以下是这两种基本通信方式的说明：</p>\n<h3 id=\"1-父组件向子组件传递数据（Props）\"><a href=\"#1-父组件向子组件传递数据（Props）\" class=\"headerlink\" title=\"1. 父组件向子组件传递数据（Props）\"></a>1. 父组件向子组件传递数据（Props）</h3><p>父组件通过将数据作为属性（props）传递给子组件，子组件通过<code>props</code>接收这些数据。</p>\n<h4 id=\"父组件示例\"><a href=\"#父组件示例\" class=\"headerlink\" title=\"父组件示例\"></a>父组件示例</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function ParentComponent() &#123;\n  const parentData &#x3D; &quot;Hello from Parent&quot;;\n\n  return (\n    &lt;ChildComponent childMessage&#x3D;&#123;parentData&#125; &#x2F;&gt;\n  );\n&#125;</code></pre>\n\n<h4 id=\"子组件示例\"><a href=\"#子组件示例\" class=\"headerlink\" title=\"子组件示例\"></a>子组件示例</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function ChildComponent(&#123; childMessage &#125;) &#123;\n  return (\n    &lt;div&gt;\n      &#123;childMessage&#125;\n    &lt;&#x2F;div&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"2-子组件向父组件传递信息（回调函数）\"><a href=\"#2-子组件向父组件传递信息（回调函数）\" class=\"headerlink\" title=\"2. 子组件向父组件传递信息（回调函数）\"></a>2. 子组件向父组件传递信息（回调函数）</h3><p>子组件通过触发一个来自父组件的回调函数，将信息传递回去。这种方式常用于事件处理。</p>\n<h4 id=\"父组件示例（包含回调）\"><a href=\"#父组件示例（包含回调）\" class=\"headerlink\" title=\"父组件示例（包含回调）\"></a>父组件示例（包含回调）</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function ParentComponent() &#123;\n  const handleCallback &#x3D; (childData) &#x3D;&gt; &#123;\n    console.log(&quot;Data from Child:&quot;, childData);\n  &#125;;\n\n  return (\n    &lt;ChildComponent onChildEvent&#x3D;&#123;handleCallback&#125; &#x2F;&gt;\n  );\n&#125;</code></pre>\n\n<h4 id=\"子组件示例（调用回调）\"><a href=\"#子组件示例（调用回调）\" class=\"headerlink\" title=\"子组件示例（调用回调）\"></a>子组件示例（调用回调）</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function ChildComponent(&#123; onChildEvent &#125;) &#123;\n  const sendDataToParent &#x3D; () &#x3D;&gt; &#123;\n    onChildEvent(&quot;Hello from Child&quot;);\n  &#125;;\n\n  return (\n    &lt;button onClick&#x3D;&#123;sendDataToParent&#125;&gt;\n      Send Data to Parent\n    &lt;&#x2F;button&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"使用useContext-useReducer-useState与useEffect进行状态管理（高级通信）\"><a href=\"#使用useContext-useReducer-useState与useEffect进行状态管理（高级通信）\" class=\"headerlink\" title=\"使用useContext, useReducer, useState与useEffect进行状态管理（高级通信）\"></a>使用<code>useContext</code>, <code>useReducer</code>, <code>useState</code>与<code>useEffect</code>进行状态管理（高级通信）</h3><p>对于更复杂的通信需求，React提供了额外的Hooks，如<code>useContext</code>用于跨组件层级的状态共享，<code>useReducer</code>用于管理复杂的组件状态逻辑，以及<code>useEffect</code>可以在组件更新后执行副作用，间接实现组件间的通信。</p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>Props</strong>是父组件向子组件传递数据的基本手段。</li>\n<li><strong>回调函数</strong>是子组件向父组件传递信息的常用方式。</li>\n<li>对于非直接父子关系的组件间通信，可以考虑使用<code>Context API</code>（特别是<code>useContext</code>）或状态管理库（如Redux）。</li>\n</ul>\n<p>通过这些机制，React函数式组件能够有效地实现灵活且可维护的父子组件间通信。</p>\n<h2 id=\"跨级组件的通信方式？\"><a href=\"#跨级组件的通信方式？\" class=\"headerlink\" title=\"跨级组件的通信方式？\"></a>跨级组件的通信方式？</h2><p>在React的函数式组件中，跨级组件通信指的是不相邻的组件之间传递数据或触发操作。为了实现这一点，React提供了几种策略，以下是最常用的几种方法：</p>\n<h3 id=\"1-Context-API\"><a href=\"#1-Context-API\" class=\"headerlink\" title=\"1. Context API\"></a>1. <strong>Context API</strong></h3><p>React的<code>Context API</code>允许你在组件树中传递数据，而无需手动将props逐层传递。这对于跨多层的组件通信特别有用。</p>\n<h4 id=\"创建Context\"><a href=\"#创建Context\" class=\"headerlink\" title=\"创建Context\"></a>创建Context</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; MyContext.js\nimport React, &#123; createContext, useContext, useState &#125; from &#39;react&#39;;\n\nconst MyContext &#x3D; createContext();\n\nfunction MyProvider(&#123; children &#125;) &#123;\n  const [data, setData] &#x3D; useState(&#39;Initial Data&#39;);\n\n  return (\n    &lt;MyContext.Provider value&#x3D;&#123;&#123; data, setData &#125;&#125;&gt;\n      &#123;children&#125;\n    &lt;&#x2F;MyContext.Provider&gt;\n  );\n&#125;\n\nexport &#123; MyContext, MyProvider &#125;;</code></pre>\n\n<h4 id=\"使用Context\"><a href=\"#使用Context\" class=\"headerlink\" title=\"使用Context\"></a>使用Context</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; GrandchildComponent.js\nimport React, &#123; useContext &#125; from &#39;react&#39;;\nimport &#123; MyContext &#125; from &#39;.&#x2F;MyContext&#39;;\n\nfunction GrandchildComponent() &#123;\n  const &#123; data, setData &#125; &#x3D; useContext(MyContext);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;&#123;data&#125;&lt;&#x2F;p&gt;\n      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setData(&#39;Data updated!&#39;)&#125;&gt;\n        Update Data\n      &lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"2-Redux-or-Other-State-Management-Libraries\"><a href=\"#2-Redux-or-Other-State-Management-Libraries\" class=\"headerlink\" title=\"2. Redux or Other State Management Libraries\"></a>2. <strong>Redux or Other State Management Libraries</strong></h3><p>对于大型应用，可以使用Redux这样的状态管理库来集中管理应用状态，任何组件都可以访问和修改存储中的状态，实现跨组件通信。</p>\n<h3 id=\"3-Custom-Event-Bus-x2F-Pub-Sub\"><a href=\"#3-Custom-Event-Bus-x2F-Pub-Sub\" class=\"headerlink\" title=\"3. Custom Event Bus &#x2F; Pub-Sub\"></a>3. <strong>Custom Event Bus &#x2F; Pub-Sub</strong></h3><p>虽然不是React推荐的主要方式，但在某些场景下，创建一个全局的事件总线（Event Bus）来发布和订阅事件也是一种跨组件通信的策略。</p>\n<h3 id=\"4-React-Router-for-URL-based-Communication\"><a href=\"#4-React-Router-for-URL-based-Communication\" class=\"headerlink\" title=\"4. React Router for URL-based Communication\"></a>4. <strong>React Router for URL-based Communication</strong></h3><p>对于基于URL的通信，可以利用React Router传递参数或使用路由状态（route state）。</p>\n<h3 id=\"5-useImperativeHandle-and-Refs-for-Function-Communication\"><a href=\"#5-useImperativeHandle-and-Refs-for-Function-Communication\" class=\"headerlink\" title=\"5. useImperativeHandle and Refs for Function Communication\"></a>5. <strong>useImperativeHandle and Refs for Function Communication</strong></h3><p>在极少数情况下，如果需要从子组件调用父组件或兄弟组件中的特定函数，可以使用<code>useImperativeHandle</code>配合<code>ref</code>。</p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>Context API</strong>是推荐的跨级通信解决方案，适用于大多数场景，简单且易于理解。</li>\n<li>对于更复杂的状态管理，引入<strong>Redux</strong>或其他第三方库是明智的选择。</li>\n<li><strong>自定义事件系统</strong>和<strong>URL传递</strong>是备选方案，适合特定场景。</li>\n<li><strong>Refs</strong>可以用于功能性的交互，但应谨慎使用，确保不违反React的单项数据流原则。</li>\n</ul>\n<h2 id=\"非嵌套关系组件的通信方式\"><a href=\"#非嵌套关系组件的通信方式\" class=\"headerlink\" title=\"非嵌套关系组件的通信方式\"></a>非嵌套关系组件的通信方式</h2><p>在React的函数式组件中，非嵌套关系组件之间的通信意味着两个组件没有直接的父子关系。这种情况下，可以采用以下几种方式进行通信：</p>\n<h3 id=\"1-Context-API-1\"><a href=\"#1-Context-API-1\" class=\"headerlink\" title=\"1. Context API\"></a>1. <strong>Context API</strong></h3><p><strong>Context API</strong>是React提供的一种无需通过props逐层传递即可跨组件共享数据的方式。适用于简单的跨级通信或全局状态管理。</p>\n<h4 id=\"创建Context-1\"><a href=\"#创建Context-1\" class=\"headerlink\" title=\"创建Context\"></a>创建Context</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; MyContext.js\nimport React, &#123; createContext, useContext, useState &#125; from &#39;react&#39;;\n\nconst MyContext &#x3D; createContext();\n\nfunction MyContextProvider(&#123; children &#125;) &#123;\n  const [sharedValue, setSharedValue] &#x3D; useState(&#39;initialValue&#39;);\n\n  return (\n    &lt;MyContext.Provider value&#x3D;&#123;&#123; sharedValue, setSharedValue &#125;&#125;&gt;\n      &#123;children&#125;\n    &lt;&#x2F;MyContext.Provider&gt;\n  );\n&#125;\n\nexport &#123; MyContext, MyContextProvider &#125;;</code></pre>\n\n<h4 id=\"使用Context-1\"><a href=\"#使用Context-1\" class=\"headerlink\" title=\"使用Context\"></a>使用Context</h4><p>在任意需要通信的组件中消费Context。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; ComponentA.js\nimport React from &#39;react&#39;;\nimport &#123; MyContext &#125; from &#39;.&#x2F;MyContext&#39;;\n\nfunction ComponentA() &#123;\n  const &#123; sharedValue &#125; &#x3D; useContext(MyContext);\n\n  return &lt;div&gt;Shared Value: &#123;sharedValue&#125;&lt;&#x2F;div&gt;;\n&#125;\n\n&#x2F;&#x2F; ComponentB.js\nimport React from &#39;react&#39;;\nimport &#123; MyContext &#125; from &#39;.&#x2F;MyContext&#39;;\n\nfunction ComponentB() &#123;\n  const &#123; setSharedValue &#125; &#x3D; useContext(MyContext);\n\n  const updateValue &#x3D; () &#x3D;&gt; &#123;\n    setSharedValue(&#39;newValue&#39;);\n  &#125;;\n\n  return (\n    &lt;button onClick&#x3D;&#123;updateValue&#125;&gt;\n      Update Shared Value\n    &lt;&#x2F;button&gt;\n  );\n&#125;</code></pre>\n\n<h3 id=\"2-Redux-or-Other-State-Management-Libraries-1\"><a href=\"#2-Redux-or-Other-State-Management-Libraries-1\" class=\"headerlink\" title=\"2. Redux or Other State Management Libraries\"></a>2. <strong>Redux or Other State Management Libraries</strong></h3><p>对于大型应用，使用<strong>Redux</strong>或其他状态管理库可以更高效地管理跨组件、跨模块的状态共享和通信。</p>\n<h3 id=\"3-Event-Bus-x2F-Pub-Sub-Pattern\"><a href=\"#3-Event-Bus-x2F-Pub-Sub-Pattern\" class=\"headerlink\" title=\"3. Event Bus &#x2F; Pub-Sub Pattern\"></a>3. <strong>Event Bus &#x2F; Pub-Sub Pattern</strong></h3><p>创建一个全局的<strong>Event Bus</strong>，允许组件订阅和发布事件，以此进行非直接关联组件间的通信。</p>\n<h3 id=\"4-Use-Callback-Refs\"><a href=\"#4-Use-Callback-Refs\" class=\"headerlink\" title=\"4. Use Callback Refs\"></a>4. <strong>Use Callback Refs</strong></h3><p>在某些场景下，可以通过<code>useRef</code>结合<code>useEffect</code>或<code>forwardRef</code>及<code>useImperativeHandle</code>，暴露子组件的某些方法给父组件或外部，实现更灵活的交互控制。</p>\n<h3 id=\"5-URL-State-with-React-Router\"><a href=\"#5-URL-State-with-React-Router\" class=\"headerlink\" title=\"5. URL State (with React Router)\"></a>5. <strong>URL State (with React Router)</strong></h3><p>通过URL传递状态，利用路由库（如React Router）的特性，在不同组件间通过导航和查询参数共享信息。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>选择哪种通信方式取决于应用的复杂度、团队偏好及具体需求。对于简单的数据共享，<strong>Context API</strong>通常是首选；而对于复杂的状态管理，则可能需要引入<strong>Redux</strong>。其他方法如<strong>Event Bus</strong>和<strong>Callback Refs</strong>则适用于更特殊的需求场景。</p>\n<h2 id=\"React-Router的实现原理是什么？\"><a href=\"#React-Router的实现原理是什么？\" class=\"headerlink\" title=\"React-Router的实现原理是什么？\"></a>React-Router的实现原理是什么？</h2><p>React Router 是一个用于在 React 应用程序中实现客户端路由的库。它使得用户能够在不重新加载页面的情况下浏览不同的界面。以下是 React Router 的核心实现原理，以 Markdown 格式展示：</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>React Router 主要依赖于以下概念和技术实现：</p>\n<ul>\n<li><p><strong>History API</strong>: 利用 HTML5 History API（<code>pushState</code>, <code>replaceState</code>）来改变浏览器的 URL 而不需要刷新页面。对于不支持这些 API 的旧浏览器，可以退回到基于 <code>hash</code> 的路由。</p>\n</li>\n<li><p><strong>动态组件渲染</strong>: 根据当前 URL 路径，React Router 会匹配预先定义好的路由规则，并渲染对应的组件。</p>\n</li>\n<li><p><strong>Context API</strong>: React Router v6 之后，大量使用 React 的 Context API 来全局管理路由状态，确保路由信息能被应用程序中的任何组件访问。</p>\n</li>\n</ul>\n<h3 id=\"实现机制\"><a href=\"#实现机制\" class=\"headerlink\" title=\"实现机制\"></a>实现机制</h3><ol>\n<li><p><strong>路由定义</strong>: 开发者通过 <code>&lt;Route&gt;</code> 组件定义一系列路由规则，每个 <code>&lt;Route&gt;</code> 组件指定一个路径（<code>path</code>）和要渲染的组件（<code>element</code>）。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Route path&#x3D;&quot;&#x2F;about&quot; element&#x3D;&#123;&lt;AboutPage &#x2F;&gt;&#125; &#x2F;&gt;</code></pre>\n</li>\n<li><p><strong>路由匹配</strong>: 当浏览器的 URL 变化时，React Router 会使用 <code>history</code> 库监听这些变化，并与已定义的路由规则进行匹配。匹配成功后，相应组件会被渲染。</p>\n</li>\n<li><p><strong>导航</strong>: 提供 <code>&lt;Link&gt;</code> 组件用于导航，它实际上生成一个指向指定路由的 <code>&lt;a&gt;</code> 标签，点击时通过 History API 更新 URL，而不是导致页面刷新。</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Link to&#x3D;&quot;&#x2F;about&quot;&gt;About Us&lt;&#x2F;Link&gt;</code></pre>\n</li>\n<li><p><strong>状态管理</strong>: React Router 使用 Context 传递路由状态，使得任何组件都能访问到当前的 <code>location</code>、<code>navigate</code> 等路由信息，无需显式地通过 props 逐层传递。</p>\n</li>\n<li><p><strong>高阶组件与 Hooks</strong>: React Router 提供如 <code>&lt;BrowserRouter&gt;</code>, <code>&lt;HashRouter&gt;</code> 等高阶组件封装应用，并通过 <code>useParams</code>, <code>useNavigate</code>, <code>useLocation</code> 等 Hooks 简化组件对路由功能的使用。</p>\n</li>\n<li><p><strong>动态路由和参数</strong>: 支持路径参数和查询参数，通过 <code>:param</code> 语法定义动态段，并通过 <code>useParams()</code> Hook 获取参数值。</p>\n</li>\n</ol>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>React Router 的实现基于现代浏览器的 History API 和 React 的高级特性，如 Context API 和 Hooks，以声明式的方式简化了客户端路由的管理，使开发者能够专注于构建应用逻辑，而非路由的底层实现。通过组件化的路由定义和自动的组件切换，React Router 实现了高度解耦和灵活的路由控制。</p>\n<h2 id=\"React-Router的路由有几种模式？\"><a href=\"#React-Router的路由有几种模式？\" class=\"headerlink\" title=\"React-Router的路由有几种模式？\"></a>React-Router的路由有几种模式？</h2><p>React Router 提供了几种不同的路由模式来适应不同的应用场景和需求。以下是主要的几种路由模式，以Markdown格式列出：</p>\n<h3 id=\"1-BrowserRouter\"><a href=\"#1-BrowserRouter\" class=\"headerlink\" title=\"1. BrowserRouter\"></a>1. BrowserRouter</h3><ul>\n<li><strong>特点</strong>：这是React Router的默认模式，利用HTML5的History API（包括<code>pushState</code>, <code>replaceState</code>以及<code>popstate</code>事件）来管理浏览器的历史记录。它使得URL看起来更干净，没有<code>#</code>符号。</li>\n<li><strong>适用场景</strong>：现代Web应用，且服务器已正确配置以支持HTML5 History API。</li>\n</ul>\n<h3 id=\"2-HashRouter\"><a href=\"#2-HashRouter\" class=\"headerlink\" title=\"2. HashRouter\"></a>2. HashRouter</h3><ul>\n<li><strong>特点</strong>：在URL中添加<code>#</code>符号作为路由的标识符。通过监听<code>hashchange</code>事件来响应路由变化。</li>\n<li><strong>适用场景</strong>：需要兼容老版本浏览器或不希望服务器端处理路由的情况，因为服务器仅需返回单个HTML文件即可。</li>\n</ul>\n<h3 id=\"3-MemoryRouter\"><a href=\"#3-MemoryRouter\" class=\"headerlink\" title=\"3. MemoryRouter\"></a>3. MemoryRouter</h3><ul>\n<li><strong>特点</strong>：不与URL交互，所有的路由状态保留在内存中，通常用于非Web环境，如测试用例或React Native开发。</li>\n<li><strong>适用场景</strong>：单元测试、服务器端渲染（SSR）预渲染时的客户端接管等无需持久化路由状态的场景。</li>\n</ul>\n<h3 id=\"4-NativeRouter\"><a href=\"#4-NativeRouter\" class=\"headerlink\" title=\"4. NativeRouter\"></a>4. NativeRouter</h3><ul>\n<li><strong>特点</strong>：主要配合React Native使用，针对原生移动应用的路由解决方案。</li>\n<li><strong>适用场景</strong>：React Native开发的移动应用程序。</li>\n</ul>\n<h3 id=\"5-StaticRouter\"><a href=\"#5-StaticRouter\" class=\"headerlink\" title=\"5. StaticRouter\"></a>5. StaticRouter</h3><ul>\n<li><strong>特点</strong>：用于服务器端渲染（Server Side Rendering, SSR），它接收一个<code>location</code>对象并提供静态的路由信息，不维护路由状态。</li>\n<li><strong>适用场景</strong>：服务端渲染应用，需要在服务器上确定要渲染的组件。</li>\n</ul>\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>React Router通过这些不同的路由器组件提供了灵活性，使得开发者可以根据项目需求选择最合适的路由模式。从基本的Web应用到移动应用，再到需要特定服务器端渲染的场景，React Router均能提供支持。</p>\n<h2 id=\"React-Router6有什么新特性\"><a href=\"#React-Router6有什么新特性\" class=\"headerlink\" title=\"React-Router6有什么新特性\"></a>React-Router6有什么新特性</h2><p>React Router v6 引入了许多新特性和改进，旨在简化路由配置和提高性能。以下是一些关键的新特性概览：</p>\n<h3 id=\"1-简化组件结构\"><a href=\"#1-简化组件结构\" class=\"headerlink\" title=\"1. 简化组件结构\"></a>1. <strong>简化组件结构</strong></h3><ul>\n<li><strong>移除 <code>&lt;Switch&gt;</code></strong>: 替换为 <code>&lt;Routes&gt;</code>，用于定义路由规则集合，只渲染第一个匹配到的路由。</li>\n<li><strong><code>&lt;Route&gt;</code> 的变更</strong>: <code>&lt;Route&gt;</code> 组件现在直接接受 <code>element</code> 属性来渲染组件，替代了之前的 <code>render</code> 或 <code>component</code> 属性。</li>\n</ul>\n<h3 id=\"2-更直观的路由声明\"><a href=\"#2-更直观的路由声明\" class=\"headerlink\" title=\"2. 更直观的路由声明\"></a>2. <strong>更直观的路由声明</strong></h3><ul>\n<li><strong>嵌套路由</strong>: 路由可以直接在 <code>&lt;Route&gt;</code> 组件内嵌套，支持更自然的路由层次结构。</li>\n<li><strong><code>index</code> 属性</strong>: 在 <code>&lt;Route&gt;</code> 上使用 <code>index</code> 属性来定义默认路由，替代了之前在 <code>&lt;Switch&gt;</code> 中的无路径 <code>&lt;Route&gt;</code>。</li>\n</ul>\n<h3 id=\"3-新的导航API\"><a href=\"#3-新的导航API\" class=\"headerlink\" title=\"3. 新的导航API\"></a>3. <strong>新的导航API</strong></h3><ul>\n<li><strong><code>useNavigate</code> 和 <code>useLocation</code></strong>: 新增Hooks，允许组件轻松地进行导航和获取当前路由信息。</li>\n<li><strong>移除 <code>&lt;Redirect&gt;</code></strong>: 使用新的 <code>&lt;Navigate&gt;</code> 组件进行导航和重定向。</li>\n</ul>\n<h3 id=\"4-改进的参数处理\"><a href=\"#4-改进的参数处理\" class=\"headerlink\" title=\"4. 改进的参数处理\"></a>4. <strong>改进的参数处理</strong></h3><ul>\n<li><strong>改进的参数解析</strong>: 更简洁地处理URL参数，使用 <code>useParams</code> Hook更容易获取动态路由参数。</li>\n</ul>\n<h3 id=\"5-更好的组合能力\"><a href=\"#5-更好的组合能力\" class=\"headerlink\" title=\"5. 更好的组合能力\"></a>5. <strong>更好的组合能力</strong></h3><ul>\n<li><strong>Hooks和Context</strong>: 更广泛地利用React Hooks和Context API，简化状态管理和组件间通信。</li>\n</ul>\n<h3 id=\"6-路由组和布局\"><a href=\"#6-路由组和布局\" class=\"headerlink\" title=\"6. 路由组和布局\"></a>6. <strong>路由组和布局</strong></h3><ul>\n<li><strong>更灵活的布局管理</strong>: 支持更复杂的布局模式，无需额外的第三方库，通过嵌套路由直接实现。</li>\n</ul>\n<h3 id=\"7-简化API和配置\"><a href=\"#7-简化API和配置\" class=\"headerlink\" title=\"7. 简化API和配置\"></a>7. <strong>简化API和配置</strong></h3><ul>\n<li><strong>减少API surface</strong>: 整体上减少了API的数量，使得学习曲线更加平缓，提高了开发效率。</li>\n<li><strong>改进的默认导出</strong>: 重要组件如 <code>&lt;BrowserRouter&gt;</code>、<code>&lt;Route&gt;</code> 现在作为默认导出，简化了导入语句。</li>\n</ul>\n<h3 id=\"8-更好的类型支持\"><a href=\"#8-更好的类型支持\" class=\"headerlink\" title=\"8. 更好的类型支持\"></a>8. <strong>更好的类型支持</strong></h3><ul>\n<li>对TypeScript的支持得到加强，提供了更精确的类型定义，帮助开发者避免错误并提升开发体验。</li>\n</ul>\n<p>React Router v6通过这些改进，致力于提供一个更简洁、强大且易于维护的路由解决方案，进一步提升了React应用的开发体验和性能。</p>\n<h2 id=\"对-React-Hook-的理解，它的实现原理是什么\"><a href=\"#对-React-Hook-的理解，它的实现原理是什么\" class=\"headerlink\" title=\"对 React Hook 的理解，它的实现原理是什么\"></a>对 React Hook 的理解，它的实现原理是什么</h2><p>React Hooks 是 React 16.8 版本引入的一个重要特性，它们允许你在不编写 class 的情况下使用 state 和其他 React 特性。Hooks 使得函数组件的功能更加丰富，可以管理状态、执行副作用操作、复用逻辑等，从而减少了对 class 组件的依赖。下面是关于 React Hooks 的理解和实现原理的概述。</p>\n<h3 id=\"对-React-Hook-的理解\"><a href=\"#对-React-Hook-的理解\" class=\"headerlink\" title=\"对 React Hook 的理解\"></a>对 React Hook 的理解</h3><ul>\n<li><strong>目的</strong>: Hooks 设计的初衷是为了简化状态逻辑并在函数组件中引入生命周期方法等功能，同时促进代码的复用和可维护性。</li>\n<li><strong>种类</strong>: 主要有两类基础 Hook：内置 Hook（如 <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, <code>useRef</code> 等）和自定义 Hook，后者允许你封装和复用状态逻辑。</li>\n<li><strong>使用限制</strong>: Hooks 必须在函数组件或自定义 Hook 中调用，并且总是在组件的最外层调用，不能在循环、条件或嵌套函数中调用。</li>\n</ul>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><ul>\n<li><p><strong>闭包</strong>: Hooks 的实现依赖于 JavaScript 的闭包特性。每次组件渲染时，React 会维护一个 Hook 调用序列，确保每次渲染时按照相同的顺序调用 Hook，以此来维护 Hook 之间的状态关联。</p>\n</li>\n<li><p><strong>Fiber 架构</strong>: Hooks 的状态管理与 Fiber 架构紧密相关。Fiber 是 React 内部用于调度渲染和更新的一种数据结构。每个函数组件都有一个 Fiber 节点，Hook 状态会被附着在这个 Fiber 上，随着 Fiber 树的遍历和更新，React 能够准确地追踪和更新 Hook 状态。</p>\n</li>\n<li><p><strong>useState</strong>: <code>useState</code> Hook 内部使用了一个数组来保存状态值和更新状态的函数。每当状态更新时，React 会安排组件重新渲染，并在下次渲染时使用新的状态值。</p>\n</li>\n<li><p><strong>useEffect</strong>: <code>useEffect</code> 用于处理副作用，如数据获取、订阅或者手动修改DOM等。它通过注册一个在渲染完成后执行的函数，并根据依赖数组来决定何时重新执行副作用逻辑，确保副作用与依赖项的变化同步。</p>\n</li>\n<li><p><strong>其他 Hook</strong>: 如 <code>useContext</code>, <code>useReducer</code>, <code>useCallback</code>, <code>useMemo</code> 等，各有特定用途，但实现原理大都基于闭包和Fiber节点上的状态管理。</p>\n</li>\n</ul>\n<h3 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>React Hooks 的实现原理是建立在 JavaScript 闭包、React 的 Fiber 架构之上，通过精心设计的API，使得状态管理和生命周期逻辑能够在函数组件中得以实现，极大地增强了React应用的开发效率和组件的可维护性。</p>\n<h2 id=\"为什么-useState-要使用数组而不是对象\"><a href=\"#为什么-useState-要使用数组而不是对象\" class=\"headerlink\" title=\"为什么 useState 要使用数组而不是对象\"></a>为什么 useState 要使用数组而不是对象</h2><p><code>useState</code> Hook 选择返回数组而不是对象，主要基于以下几个原因：</p>\n<ol>\n<li><p><strong>解构赋值的灵活性</strong>:</p>\n<ul>\n<li>数组解构允许开发者自由命名解构后的变量。使用数组时，你可以按需命名状态变量和更新函数，比如 <code>const [count, setCount] = useState(0);</code>，这提高了代码的可读性和易用性。</li>\n</ul>\n</li>\n<li><p><strong>顺序一致性</strong>:</p>\n<ul>\n<li>数组元素的位置固定，这确保了状态值和其对应的更新函数之间有一一对应的关系，避免了因属性名错误导致的问题。对象属性没有固定的顺序，可能会引发意外的错误或混乱。</li>\n</ul>\n</li>\n<li><p><strong>简洁性和一致性</strong>:</p>\n<ul>\n<li>数组结构简洁明了，易于理解和使用，符合函数式编程风格，与React Hooks推崇的简洁API设计理念相契合。</li>\n</ul>\n</li>\n<li><p><strong>避免命名冲突</strong>:</p>\n<ul>\n<li>如果 <code>useState</code> 返回的是对象，那么每次使用都需要关心对象的键名，可能需要重命名以避免覆盖其他Hook的返回值，尤其是在使用多个状态Hook时。</li>\n</ul>\n</li>\n<li><p><strong>便于记忆和教学</strong>:</p>\n<ul>\n<li>习惯JavaScript的开发者对数组解构很熟悉，这降低了学习曲线，使得新开发者能更快上手。</li>\n</ul>\n</li>\n<li><p><strong>ES6特性利用</strong>:</p>\n<ul>\n<li>利用了ES6的解构赋值特性，促进了现代JavaScript语法的采用，数组解构比对象解构在某些场景下更为直观和灵活。</li>\n</ul>\n</li>\n</ol>\n<p>总结来说，通过使用数组，<code>useState</code> 提供了一种既简洁又强大的方式来管理组件状态，同时也充分利用了JavaScript语言特性，提升了开发者的编码体验。</p>\n<h2 id=\"React-Hooks-解决了哪些问题？\"><a href=\"#React-Hooks-解决了哪些问题？\" class=\"headerlink\" title=\"React Hooks 解决了哪些问题？\"></a>React Hooks 解决了哪些问题？</h2><p>React Hooks 解决了前端开发中遇到的几个关键问题，主要体现在以下几个方面：</p>\n<ol>\n<li><p><strong>状态逻辑复用困难</strong>：</p>\n<ul>\n<li>在 Hooks 之前，状态逻辑（如状态管理、生命周期方法）通常绑定在类组件中，难以在组件间共享。Hooks 允许将状态逻辑抽象成独立的函数（自定义 Hooks），使得状态逻辑可以在多个组件间轻松复用，提高了代码的模块化和可维护性。</li>\n</ul>\n</li>\n<li><p><strong>类组件复杂性</strong>：</p>\n<ul>\n<li>类组件结合了状态、生命周期方法和呈现逻辑，随着功能增加，组件变得越来越复杂，难以理解和维护。Hooks 通过将这些关注点分离到不同的函数中，使得组件更简洁，专注于 UI 的呈现，同时保持功能性代码的组织清晰。</li>\n</ul>\n</li>\n<li><p><strong>函数组件功能受限</strong>：</p>\n<ul>\n<li>早期的函数组件只能作为纯粹的呈现组件，无法直接管理状态或执行副作用操作。Hooks 引入后，函数组件获得了与类组件相同的能力，包括状态管理（<code>useState</code>）、生命周期操作（<code>useEffect</code>）、上下文消费（<code>useContext</code>）等，使得函数组件成为构建组件的主要方式。</li>\n</ul>\n</li>\n<li><p><strong>测试复杂度</strong>：</p>\n<ul>\n<li>类组件的 <code>this</code> 关键字和生命周期方法增加了测试的复杂度。Hooks 由于其纯粹的函数性质，使得组件更容易测试，因为它们不依赖于实例或生命周期方法。</li>\n</ul>\n</li>\n<li><p><strong>性能优化难题</strong>：</p>\n<ul>\n<li>Hooks 提供了如 <code>useCallback</code> 和 <code>useMemo</code> 这样的工具，帮助开发者更细粒度地控制组件的渲染性能，避免不必要的计算和重新渲染。</li>\n</ul>\n</li>\n<li><p><strong>代码可读性和可维护性</strong>：</p>\n<ul>\n<li>通过减少类和生命周期方法的使用，Hooks 促使代码更加扁平化，逻辑分块更加清晰，便于阅读和维护。</li>\n</ul>\n</li>\n</ol>\n<p>综上所述，React Hooks 不仅简化了状态逻辑的管理，还促进了组件的复用，降低了复杂度，提升了开发效率和代码质量，是现代 React 开发不可或缺的一部分。</p>\n<h2 id=\"React-Hook-的使用限制有哪些？\"><a href=\"#React-Hook-的使用限制有哪些？\" class=\"headerlink\" title=\"React Hook 的使用限制有哪些？\"></a>React Hook 的使用限制有哪些？</h2><p>React Hooks 的使用有一些明确的限制，这些限制旨在保持代码的可预测性和避免潜在的错误。主要的使用限制包括：</p>\n<ol>\n<li><p><strong>只在函数组件或自定义 Hook 中调用</strong>：<br>Hooks 不能在普通的 JavaScript 函数中或类组件中使用。它们专为 React 函数组件设计，以提供状态管理和副作用处理等功能。</p>\n</li>\n<li><p><strong>调用顺序固定</strong>：<br>在一个组件的渲染过程中，Hooks 必须按照完全相同的顺序被调用。React 使用这个顺序来对应每次渲染时的状态。这意味着你不能在条件语句、循环或嵌套函数中随意调用 Hooks，因为这可能导致 Hook 调用顺序在不同渲染之间发生变化。</p>\n</li>\n<li><p><strong>不要在循环、条件或嵌套函数中调用 Hook</strong>：<br>由于 Hooks 依赖于调用顺序，任何可能改变 Hooks 调用顺序的逻辑都是不允许的。这意味着你需要将 Hook 调用放在组件的最外层，避免在条件判断、循环或递归等动态控制流中使用。</p>\n</li>\n</ol>\n<p>这些限制确保了 React 能够准确地跟踪每个 Hook 的状态，并在重新渲染时恢复到正确的状态，即使组件在多次渲染之间可能经历了不同的代码路径。违反这些规则将会导致错误，React 会在开发模式下抛出警告或错误来帮助开发者识别并修正问题。</p>\n<h2 id=\"useEffect-与-useLayoutEffect-的区别\"><a href=\"#useEffect-与-useLayoutEffect-的区别\" class=\"headerlink\" title=\"useEffect 与 useLayoutEffect 的区别\"></a>useEffect 与 useLayoutEffect 的区别</h2><p><code>useEffect</code> 和 <code>useLayoutEffect</code> 都是 React Hooks 中用于执行副作用操作的函数，但它们之间存在一些关键区别，主要体现在执行时机和对浏览器渲染流程的影响上：</p>\n<ol>\n<li><p><strong>执行时机</strong>：</p>\n<ul>\n<li><p><strong>useEffect</strong>: 它是异步执行的，意味着它不会阻塞浏览器渲染。<code>useEffect</code> 的回调函数会在浏览器完成所有 DOM 更新并且准备绘制到屏幕上之后的微任务队列中执行。这使得它适合执行那些不需要立即影响渲染结果的操作，如数据获取、设置定时器、事件监听器的添加&#x2F;移除等。</p>\n</li>\n<li><p><strong>useLayoutEffect</strong>: 相比之下，它是同步执行的，会在所有 DOM 变更完成后立即执行，但在浏览器实际绘制之前。这意味着它会阻塞浏览器渲染，直到其回调函数执行完毕。因此，<code>useLayoutEffect</code> 适用于那些需要在渲染结果中立即体现的副作用操作，比如测量布局或者同步更新DOM以避免视觉上的闪烁或跳变。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对渲染流程的影响</strong>：</p>\n<ul>\n<li><strong>useEffect</strong>: 因为它是异步的，不会延迟页面的渲染，用户界面可以更快地展示给用户，尽管之后可能因为副作用的执行而发生更新。</li>\n<li><strong>useLayoutEffect</strong>: 由于同步执行且发生在浏览器渲染之前，它会阻塞渲染过程，直到副作用处理完成。这可能会导致用户感受到界面渲染的延迟，但确保了副作用执行后界面的一致性。</li>\n</ul>\n</li>\n<li><p><strong>应用场景</strong>：</p>\n<ul>\n<li>通常情况下，大多数副作用处理应使用 <code>useEffect</code>，因为它不会影响用户体验的流畅性。</li>\n<li>当需要在渲染结果中立刻反映出某些副作用（例如调整DOM以保证UI的一致性）时，应使用 <code>useLayoutEffect</code>。</li>\n</ul>\n</li>\n</ol>\n<p>总之，两者之间的选择取决于你的副作用是否需要在渲染流程中同步完成，以及是否能够接受潜在的渲染阻塞。</p>\n<h2 id=\"对虚拟-DOM-的理解？虚拟-DOM-主要做了什么？虚拟-DOM-本身是什么？\"><a href=\"#对虚拟-DOM-的理解？虚拟-DOM-主要做了什么？虚拟-DOM-本身是什么？\" class=\"headerlink\" title=\"对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？\"></a>对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？</h2><p>虚拟 DOM（Virtual DOM）是一种编程概念，主要在现代前端开发框架如React、Vue中被广泛应用，其核心目标是为了提高Web应用的性能和开发效率。以下是关于虚拟 DOM 的几个关键点，帮助您加深理解：</p>\n<h3 id=\"虚拟-DOM-本身是什么？\"><a href=\"#虚拟-DOM-本身是什么？\" class=\"headerlink\" title=\"虚拟 DOM 本身是什么？\"></a>虚拟 DOM 本身是什么？</h3><p>虚拟 DOM 是一种轻量级的内存数据结构，它使用普通的 JavaScript 对象来模拟真实 DOM（Document Object Model）树。这些对象代表了实际 DOM 元素及其属性，如标签名、属性、子元素等，但它们存在于内存中而非实际渲染到页面上。由于是纯数据结构，对虚拟 DOM 的操作相比直接操作真实 DOM 更为高效。</p>\n<h3 id=\"虚拟-DOM-主要做了什么？\"><a href=\"#虚拟-DOM-主要做了什么？\" class=\"headerlink\" title=\"虚拟 DOM 主要做了什么？\"></a>虚拟 DOM 主要做了什么？</h3><ol>\n<li><p><strong>减少 DOM 操作</strong>：通过在内存中操作虚拟 DOM 而不是直接操作真实的浏览器 DOM，可以减少昂贵的 DOM 操作次数。DOM 操作是耗时的，频繁操作会影响页面性能。</p>\n</li>\n<li><p><strong>高效更新</strong>：当应用状态改变时，框架会重新生成新的虚拟 DOM 树，然后通过“diff”算法比较新旧虚拟 DOM 之间的差异。这个差异计算过程非常快速，因为它仅在内存中进行。计算出最小的变更集后，框架仅将这些差异应用到真实 DOM 上，从而更新用户界面。</p>\n</li>\n<li><p><strong>批量处理</strong>：一些框架利用虚拟 DOM 进行批量更新，收集一段时间内的多个状态变更，然后一次性应用到真实 DOM，进一步减少重绘和回流的次数。</p>\n</li>\n<li><p><strong>简化开发</strong>：开发者无需直接关注如何手动更新 DOM，而是专注于描述应用的状态和 UI 如何响应状态变化，提高了代码的可读性和可维护性。</p>\n</li>\n</ol>\n<h3 id=\"为什么需要虚拟-DOM？\"><a href=\"#为什么需要虚拟-DOM？\" class=\"headerlink\" title=\"为什么需要虚拟 DOM？\"></a>为什么需要虚拟 DOM？</h3><p>在React、Vue等框架出现之前，直接操作DOM往往涉及大量的遍历和更新操作，这不仅效率低下，而且容易出错。虚拟 DOM 的引入，通过在内存中对DOM结构的抽象表示，实现了对DOM操作的优化，极大提升了Web应用的渲染性能和开发体验。它让开发者能够以声明式的方式编写视图逻辑，而将复杂的DOM管理留给框架处理。</p>\n<h2 id=\"React-diff-算法的原理是什么？\"><a href=\"#React-diff-算法的原理是什么？\" class=\"headerlink\" title=\"React diff 算法的原理是什么？\"></a>React diff 算法的原理是什么？</h2><p>React diff 算法，也称为 Reconciliation（调和）过程，是React框架中用于比较新旧虚拟DOM树并高效更新UI的核心机制。其主要目的是通过识别出最小必要变更，减少对实际DOM的操作，从而提升应用性能。以下是React diff算法的一些核心原理和策略：</p>\n<ol>\n<li><p><strong>分层比较</strong>：React的diff算法并非对整个DOM树进行遍历比较，而是采用分层的策略，从根节点开始逐层比较。如果某一层的节点没有变化，则其下的子树也会被认为是不变的，这样可以跳过这些子树的比较，大大减少了比较的范围。</p>\n</li>\n<li><p><strong>同层节点比较</strong>：对于同层级的节点，React会按顺序比较它们。如果遇到相同的节点类型和key值，则认为这两个节点可以复用，只需比较它们的属性是否有变化。如果有不同类型的节点或者key值不匹配的节点，则认为需要替换该节点及其所有子节点。</p>\n</li>\n<li><p><strong>Key的作用</strong>：React允许开发者为列表中的每个元素指定一个唯一的key属性。利用这些key，diff算法能更高效地识别哪些元素是新增的、删除的或是移动的，而不是简单地认为整个列表都发生了变化。</p>\n</li>\n<li><p><strong>Web Components的优化</strong>：对于Web Components这样的自封闭组件，React假设它们内部的实现不会影响外部，因此除非组件自身标记为dirty，否则不会进入其内部进行diff。</p>\n</li>\n<li><p><strong>性能优化策略</strong>：React的diff算法经过优化，其平均时间复杂度从原本理论上的O(n^3)降低到了接近O(n)。这是通过上述策略以及一些内部优化实现的，比如对非文本节点的变更记录、避免不必要的深度遍历等。</p>\n</li>\n<li><p><strong>中断与调度</strong>：React的diff和更新过程可以通过scheduler进行中断和调度，使得UI更新可以按照优先级或者批处理进行，进一步优化性能和用户体验。</p>\n</li>\n</ol>\n<p>总之，React diff算法的设计围绕着最小化DOM操作和优化更新性能，通过一系列智能的比较策略和优化手段，确保应用能够快速响应状态变化并高效渲染用户界面。</p>\n<h2 id=\"React-key-是干嘛用的-为什么要加？key-主要是解决哪一类问题的\"><a href=\"#React-key-是干嘛用的-为什么要加？key-主要是解决哪一类问题的\" class=\"headerlink\" title=\"React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的\"></a>React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的</h2><p>React中的<code>key</code>属性主要用于以下目的：</p>\n<ol>\n<li><p><strong>高效更新列表</strong>: 当React需要更新一个元素列表时，如在遍历数组并渲染列表项时，<code>key</code>帮助React识别哪些元素是新增的、修改过的或被移除的。没有<code>key</code>，React将不得不逐个比较每个子元素来找出差异，这会非常低效。而通过使用<code>key</code>，React可以快速定位到变化的部分，只更新必要的元素，从而优化性能。</p>\n</li>\n<li><p><strong>元素复用策略</strong>: React利用<code>key</code>来决定如何复用已经存在的元素。当列表中的元素顺序发生变化时，React会尝试根据<code>key</code>来移动现有元素而不是销毁并重新创建，这能减少DOM操作，提高性能。如果没有<code>key</code>，React可能无法正确识别哪些元素应该被移动，从而导致不必要的组件销毁和重建。</p>\n</li>\n<li><p><strong>避免原地复用副作用</strong>: 在列表渲染中，若不使用<code>key</code>或使用不恰当的<code>key</code>，React可能会错误地复用组件，导致组件状态混乱。正确的<code>key</code>值确保每个组件实例与其对应的数据一一对应，防止状态交叉污染。</p>\n</li>\n<li><p><strong>辅助Diff算法</strong>: <code>key</code>是React diff算法的一个重要输入。它帮助算法快速识别哪些部分的DOM树需要被更新，哪些可以保持不变。通过比较元素的<code>key</code>，React可以跳过没有变化的部分，直接聚焦于有变动的地方，从而显著提高渲染效率。</p>\n</li>\n</ol>\n<p>总结来说，<code>key</code>主要是解决列表渲染中的性能和状态管理问题，确保用户界面能够迅速响应数据变化的同时，维持良好的性能表现和正确的组件状态。正确的使用<code>key</code>是React应用性能优化的关键实践之一。</p>\n<h2 id=\"React-设计思路，它的理念是什么？\"><a href=\"#React-设计思路，它的理念是什么？\" class=\"headerlink\" title=\"React 设计思路，它的理念是什么？\"></a>React 设计思路，它的理念是什么？</h2><p>React 的设计思路和理念主要围绕以下几个核心概念：</p>\n<ol>\n<li><p><strong>组件化开发</strong>：React 鼓励将用户界面分解为可复用的组件。每个组件负责管理自己的状态（state）和行为（通过props接收外部输入），这有助于提高代码的模块化、可维护性和可测试性。</p>\n</li>\n<li><p><strong>声明式编程</strong>：React 推崇声明式编程风格，开发者只需描述应用的最终状态（即UI应当如何展现），而不用详细说明如何达到那个状态。这种编程方式使得代码逻辑更加清晰，易于理解和维护。</p>\n</li>\n<li><p><strong>虚拟 DOM</strong>：React 引入虚拟 DOM 作为真实 DOM 的轻量级内存表示，通过对比新旧虚拟 DOM 的差异来最小化实际的 DOM 操作，从而提高性能。</p>\n</li>\n<li><p><strong>单向数据流</strong>：React 应用倾向于使用单向数据流，父组件向子组件传递数据（通过props），子组件通过回调通知父组件状态变化，这有助于追踪数据变化的源头，简化数据管理。</p>\n</li>\n<li><p><strong>状态管理</strong>：React 自身并不直接提供全局状态管理方案，但鼓励通过外部库（如 Redux）或使用 React 自带的 Context API 来集中管理应用状态，保持组件间通信的清晰和高效。</p>\n</li>\n<li><p><strong>函数式编程和Hooks</strong>：React 通过引入Hooks，使得函数组件也能拥有生命周期方法和状态管理能力，鼓励函数式编程风格，使得组件更简洁、易于测试。</p>\n</li>\n<li><p><strong>渐进式增强</strong>：React 可以逐步引入到现有项目中，不需要全盘重构，支持逐步迁移至现代Web开发模式。</p>\n</li>\n<li><p><strong>重视性能</strong>：React 设计了许多性能优化手段，如PureComponent、React.memo、shouldComponentUpdate等，帮助开发者构建高性能的应用。</p>\n</li>\n</ol>\n<p>综上所述，React 的设计理念在于通过组件化、声明式编程、虚拟 DOM 和现代JavaScript特性，提供了一套高效、灵活且可维护的前端开发框架，使得开发者能够更专注于构建用户界面和逻辑，而不必过多担心底层细节。</p>\n<h2 id=\"React必须使用JSX吗？\"><a href=\"#React必须使用JSX吗？\" class=\"headerlink\" title=\"React必须使用JSX吗？\"></a>React必须使用JSX吗？</h2><p>React 不强制要求使用 JSX，但它被广泛推荐并已成为React开发中的标准实践，主要原因在于JSX提供了更加清晰和便捷的方式来描述组件的结构。JSX 是一种语法糖，它允许你以类似HTML的语法编写代码，实际上这些代码会被转换成调用 <code>React.createElement()</code> 方法的JavaScript代码。</p>\n<p>如果不使用JSX，你仍然可以使用React通过纯JavaScript方式来创建元素和组件，比如使用 <code>React.createElement()</code> 函数来手动构建虚拟DOM节点。例如，一个简单的React组件可以用下面两种方式编写：</p>\n<p><strong>使用JSX:</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function Welcome(props) &#123;\n  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;&#x2F;h1&gt;;\n&#125;</code></pre>\n\n<p><strong>不使用JSX:</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function Welcome(props) &#123;\n  return React.createElement(\n    &#39;h1&#39;,\n    null,\n    &#96;Hello, $&#123;props.name&#125;&#96;\n  );\n&#125;</code></pre>\n\n<p>尽管不使用JSX完全可行，但在大多数情况下，JSX提供的简洁性和可读性使得开发效率更高，因此成为React开发者首选的编写方式。然而，在某些特定场景下，如在不能或不希望使用JSX转换工具的环境，或者对性能有极高度要求且需手动优化的情况，直接使用 <code>React.createElement()</code> 或其他方法来构造元素也是合理的。</p>\n","text":"ReactReact 事件机制React 使用自己的事件系统，它是对浏览器原生事件系统的一个轻量级封装，旨在提高性能并提供更好的跨浏览器兼容性。下面是React事件机制的核心特点和工作原理： 事件命名约定 驼峰命名：React 使用驼峰命名法（camelCase）来命名事件处理器...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"28 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React\"><span class=\"toc-text\">React</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">React 事件机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">事件命名约定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">事件处理函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%88Event-Delegation%EF%BC%89\"><span class=\"toc-text\">事件委托（Event Delegation）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">阻止默认行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">传递参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9\"><span class=\"toc-text\">跨浏览器兼容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">性能优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%99%AE%E9%80%9A-HTML-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">React 事件与普通 HTML 事件的不同之处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">1. 命名约定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 事件处理方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E4%B8%8E%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3. 事件委托与合成事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">4. 阻止默认行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5. 合成事件对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">6. 执行顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">7. 性能优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">React 组件中事件代理的实现与原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">实现方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">原理说明</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8React%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84render%EF%BC%9F\"><span class=\"toc-text\">在React中如何避免不必要的render？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-React-memo\"><span class=\"toc-text\">1. 使用 React.memo</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%A9%E7%94%A8-useMemo-%E7%BC%93%E5%AD%98%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">2. 利用 useMemo 缓存计算结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%A9%E7%94%A8-useCallback-%E9%81%BF%E5%85%8D%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 利用 useCallback 避免创建新的回调函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%81%BF%E5%85%8D%E5%9C%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BA%A7%E7%94%9F%E6%96%B0%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">4. 避免在渲染过程中产生新的引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8-Context-%E5%92%8C-Redux-%E7%AD%89%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93\"><span class=\"toc-text\">5. 谨慎使用 Context 和 Redux 等状态管理库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Keys-%E5%9C%A8%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B8%AD%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">6. Keys 在列表渲染中的正确使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E4%B8%AD%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E6%8E%A7%E7%BB%84%E4%BB%B6%EF%BC%9F\"><span class=\"toc-text\">React中什么是受控组件和非控组件？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%EF%BC%88Controlled-Components%EF%BC%89\"><span class=\"toc-text\">受控组件（Controlled Components）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%EF%BC%88Uncontrolled-Components%EF%BC%89\"><span class=\"toc-text\">非受控组件（Uncontrolled Components）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">选择哪种方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%ADrefs%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9F\"><span class=\"toc-text\">React的函数式组件中refs的作用是什么？有哪些应用场景？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-forwardRef%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">React.forwardRef是什么？它有什么作用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%EF%BC%88Controlled-Components%EF%BC%89-1\"><span class=\"toc-text\">受控组件（Controlled Components）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%EF%BC%88Uncontrolled-Components%EF%BC%89-1\"><span class=\"toc-text\">非受控组件（Uncontrolled Components）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E6%96%B9%E5%BC%8F-1\"><span class=\"toc-text\">选择哪种方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%82%E5%90%8C\"><span class=\"toc-text\">类组件与函数组件的异同</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">相同点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">不同点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-setState-%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">React setState 调用的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setState%E8%B0%83%E7%94%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">setState调用原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">实现细节</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E4%B8%AD%E7%9A%84setState%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">React中的setState批量更新的过程是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setState%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">setState批量更新过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#React-18%E4%B8%AD%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">React 18中的改进</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E4%B8%ADsetState%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">React中setState的第二个参数作用是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setState%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">setState第二个参数的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E7%BB%84%E4%BB%B6%E7%9A%84state%E5%92%8Cprops%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">React组件的state和props有什么区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#React%E4%B8%ADState%E4%B8%8EProps%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">React中State与Props的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">1. 数据来源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8E%A7%E5%88%B6%E6%9D%83%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7\"><span class=\"toc-text\">2. 控制权与可变性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%BD%B1%E5%93%8D%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">3. 影响范围</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 使用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E4%B8%AD%E7%9A%84props%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AA%E8%AF%BB%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">React中的props为什么是只读的？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#React%E4%B8%ADProps%E5%8F%AA%E8%AF%BB%E6%80%A7%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">React中Props只读性的原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">父子组件的通信方式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%EF%BC%88Props%EF%BC%89\"><span class=\"toc-text\">1. 父组件向子组件传递数据（Props）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">父组件示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">子组件示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF%EF%BC%88%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">2. 子组件向父组件传递信息（回调函数）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B%EF%BC%88%E5%8C%85%E5%90%AB%E5%9B%9E%E8%B0%83%EF%BC%89\"><span class=\"toc-text\">父组件示例（包含回调）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B%EF%BC%88%E8%B0%83%E7%94%A8%E5%9B%9E%E8%B0%83%EF%BC%89\"><span class=\"toc-text\">子组件示例（调用回调）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8useContext-useReducer-useState%E4%B8%8EuseEffect%E8%BF%9B%E8%A1%8C%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%EF%BC%88%E9%AB%98%E7%BA%A7%E9%80%9A%E4%BF%A1%EF%BC%89\"><span class=\"toc-text\">使用useContext, useReducer, useState与useEffect进行状态管理（高级通信）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E7%BA%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">跨级组件的通信方式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Context-API\"><span class=\"toc-text\">1. Context API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAContext\"><span class=\"toc-text\">创建Context</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Context\"><span class=\"toc-text\">使用Context</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Redux-or-Other-State-Management-Libraries\"><span class=\"toc-text\">2. Redux or Other State Management Libraries</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Custom-Event-Bus-x2F-Pub-Sub\"><span class=\"toc-text\">3. Custom Event Bus &#x2F; Pub-Sub</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-React-Router-for-URL-based-Communication\"><span class=\"toc-text\">4. React Router for URL-based Communication</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-useImperativeHandle-and-Refs-for-Function-Communication\"><span class=\"toc-text\">5. useImperativeHandle and Refs for Function Communication</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">非嵌套关系组件的通信方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Context-API-1\"><span class=\"toc-text\">1. Context API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAContext-1\"><span class=\"toc-text\">创建Context</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Context-1\"><span class=\"toc-text\">使用Context</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Redux-or-Other-State-Management-Libraries-1\"><span class=\"toc-text\">2. Redux or Other State Management Libraries</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Event-Bus-x2F-Pub-Sub-Pattern\"><span class=\"toc-text\">3. Event Bus &#x2F; Pub-Sub Pattern</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Use-Callback-Refs\"><span class=\"toc-text\">4. Use Callback Refs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-URL-State-with-React-Router\"><span class=\"toc-text\">5. URL State (with React Router)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Router%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">React-Router的实现原理是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">实现机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Router%E7%9A%84%E8%B7%AF%E7%94%B1%E6%9C%89%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">React-Router的路由有几种模式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-BrowserRouter\"><span class=\"toc-text\">1. BrowserRouter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-HashRouter\"><span class=\"toc-text\">2. HashRouter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-MemoryRouter\"><span class=\"toc-text\">3. MemoryRouter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-NativeRouter\"><span class=\"toc-text\">4. NativeRouter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-StaticRouter\"><span class=\"toc-text\">5. StaticRouter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Router6%E6%9C%89%E4%BB%80%E4%B9%88%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">React-Router6有什么新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E5%8C%96%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1. 简化组件结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9B%B4%E7%9B%B4%E8%A7%82%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">2. 更直观的路由声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%96%B0%E7%9A%84%E5%AF%BC%E8%88%AAAPI\"><span class=\"toc-text\">3. 新的导航API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%94%B9%E8%BF%9B%E7%9A%84%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4. 改进的参数处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%BB%84%E5%90%88%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">5. 更好的组合能力</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%B7%AF%E7%94%B1%E7%BB%84%E5%92%8C%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">6. 路由组和布局</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E7%AE%80%E5%8C%96API%E5%92%8C%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">7. 简化API和配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">8. 更好的类型支持</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-React-Hook-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">对 React Hook 的理解，它的实现原理是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9-React-Hook-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 React Hook 的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-useState-%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">为什么 useState 要使用数组而不是对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Hooks-%E8%A7%A3%E5%86%B3%E4%BA%86%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">React Hooks 解决了哪些问题？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Hook-%E7%9A%84%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">React Hook 的使用限制有哪些？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useEffect-%E4%B8%8E-useLayoutEffect-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">useEffect 与 useLayoutEffect 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%99%9A%E6%8B%9F-DOM-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%99%9A%E6%8B%9F-DOM-%E4%B8%BB%E8%A6%81%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F%E8%99%9A%E6%8B%9F-DOM-%E6%9C%AC%E8%BA%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F-DOM-%E6%9C%AC%E8%BA%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">虚拟 DOM 本身是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F-DOM-%E4%B8%BB%E8%A6%81%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">虚拟 DOM 主要做了什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%99%9A%E6%8B%9F-DOM%EF%BC%9F\"><span class=\"toc-text\">为什么需要虚拟 DOM？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-diff-%E7%AE%97%E6%B3%95%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">React diff 算法的原理是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-key-%E6%98%AF%E5%B9%B2%E5%98%9B%E7%94%A8%E7%9A%84-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0%EF%BC%9Fkey-%E4%B8%BB%E8%A6%81%E6%98%AF%E8%A7%A3%E5%86%B3%E5%93%AA%E4%B8%80%E7%B1%BB%E9%97%AE%E9%A2%98%E7%9A%84\"><span class=\"toc-text\">React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%EF%BC%8C%E5%AE%83%E7%9A%84%E7%90%86%E5%BF%B5%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">React 设计思路，它的理念是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8JSX%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">React必须使用JSX吗？</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"interview-computer-network","uid":"888bd5308fbcbb0b07f6bb2fddc55ca5","slug":"interview-computer-network","date":"2024-05-30T15:00:54.000Z","updated":"2024-06-04T06:39:25.229Z","comments":true,"path":"api/articles/interview-computer-network.json","keywords":null,"cover":null,"text":"计算机网络GET和POST的请求的区别 数据位置：GET请求将参数附加在URL中，作为查询字符串；POST请求将参数放在请求体（request body）中。 数据大小：GET请求受URL长度限制，不适合传输大量数据；POST请求理论上无大小限制，更适合大数据量传输。 幂等性：G...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"interview-react-native","uid":"f16f712f5af1584293fcdaa3e7e5676d","slug":"interview-react-native","date":"2024-05-30T14:59:22.000Z","updated":"2024-05-30T14:59:35.324Z","comments":true,"path":"api/articles/interview-react-native.json","keywords":null,"cover":null,"text":"React NativeReact Native (RN) 的主要优势有哪些？ 跨平台开发：允许使用单一代码库为iOS和Android创建原生应用，显著降低开发成本和时间。 原生性能：虽然使用JavaScript编写，但通过桥接调用原生代码，能够接近原生应用的性能体验。 热重载：...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}