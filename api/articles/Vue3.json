{"title":"Vue3","uid":"3a4eda1192ec992162144e15ab7e2ec5","slug":"Vue3","date":"2023-02-25T15:36:05.000Z","updated":"2023-03-22T14:20:14.973Z","comments":true,"path":"api/articles/Vue3.json","keywords":null,"cover":"https://www.nickagas.com/wp-content/uploads/60fca23c22c4.jpg","content":"<h2 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h2><h3 id=\"使用-vite\"><a href=\"#使用-vite\" class=\"headerlink\" title=\"使用 vite\"></a>使用 vite</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>创建工程<br>npm init vite-app <project-name><br>进入工程目录<br>cd <project-name><br>安装依赖<br>npm install<br>运行<br>npm run dev</p></blockquote>\n<h2 id=\"常用的-Composition-Api\"><a href=\"#常用的-Composition-Api\" class=\"headerlink\" title=\"常用的 Composition Api\"></a>常用的 Composition Api</h2><h3 id=\"setup\"><a href=\"#setup\" class=\"headerlink\" title=\"setup()\"></a>setup()</h3><p>setup 函数的两种返回值：</p>\n<ul>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。</li>\n<li>若返回一个渲染函数：则可以自定义渲染内容。</li>\n</ul>\n<p><em>Pay Attention!</em></p>\n<ul>\n<li>尽量不要与 Vue2.x 配置混用 Vue2.x 配置（data、methos、computed…）中可以访问到 setup 中的属性、方法。</li>\n<li>但在 setup 中不能访问到 Vue2.x 配置（data、methos、computed…）</li>\n<li>如果有重名, setup 优先。</li>\n<li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li>\n<li>setup 执行的时机：在 beforeCreate 之前执行一次，this 是 undefined。</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>  <em>setup 的参数</em></p>\n<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象</li>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 this.$attrs。</li>\n<li>slots: 收到的插槽内容, 相当于 this.$slots。</li>\n<li>emit: 分发自定义事件的函数, 相当于 this.$emit。</li>\n</ul>\n</p>\n</div>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref()\"></a>ref()</h3><p>作用: 定义一个响应式的数据<br>语法:</p>\n<ul>\n<li>const xxx &#x3D; ref(initValue)</li>\n<li>创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）。</li>\n<li>JS 中操作数据： xxx.value</li>\n<li>模板中读取数据: 不需要.value，直接：<div></div><br>备注：</li>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠 Object.defineProperty()的 get 与 set 完成的。</li>\n<li>对象类型的数据：内部 “ 求助 ” 了 Vue3.0 中的一个新函数—— reactive 函数。</li>\n</ul>\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive()\"></a>reactive()</h3><p>作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用 ref 函数）<br>语法：</p>\n<ul>\n<li>const 代理对象&#x3D; reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）</li>\n<li>reactive 定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"不常用的-Composition-Api\"><a href=\"#不常用的-Composition-Api\" class=\"headerlink\" title=\"不常用的 Composition Api\"></a>不常用的 Composition Api</h2><h3 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef()\"></a>toRef()</h3><p>作用：</p>\n<ul>\n<li>创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。<br>语法：</li>\n<li>const name &#x3D; toRef(person,’name’)<br>应用:</li>\n<li>要将响应式对象中的某个属性单独提供给外部使用时。<br>扩展：</li>\n<li>toRefs 与 toRef 功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)</li>\n</ul>\n<h3 id=\"shallowReactive-与-shallowRef\"><a href=\"#shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"shallowReactive() 与 shallowRef()\"></a>shallowReactive() 与 shallowRef()</h3><p>shallowReactive：</p>\n<ul>\n<li>只处理对象最外层属性的响应式（浅响应式）。</li>\n</ul>\n<p>shallowRef：</p>\n<ul>\n<li>只处理基本数据类型的响应式, 不进行对象的响应式处理。</li>\n</ul>\n<p>什么时候使用?</p>\n<p>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。<br>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</p>\n<h3 id=\"readonly-与-shallowReadonly\"><a href=\"#readonly-与-shallowReadonly\" class=\"headerlink\" title=\"readonly() 与 shallowReadonly()\"></a>readonly() 与 shallowReadonly()</h3><p>readonly:</p>\n<ul>\n<li>让一个响应式数据变为只读的（深只读）。<br>shallowReadonly：</li>\n<li>让一个响应式数据变为只读的（浅只读）。<br>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h3 id=\"toRaw-与-markRaw\"><a href=\"#toRaw-与-markRaw\" class=\"headerlink\" title=\"toRaw() 与 markRaw()\"></a>toRaw() 与 markRaw()</h3><p>toRaw：<br>作用：</p>\n<ul>\n<li>将一个由 reactive 生成的响应式对象转为普通对象。<br>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。<br>markRaw：<br>作用：</li>\n<li>标记一个对象，使其永远不会再成为响应式对象。<br>应用场景:<br>有些值不应被设置为响应式的，例如复杂的第三方类库等。<br>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ul>\n<h3 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef()\"></a>customRef()</h3><p>作用：</p>\n<ul>\n<li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。<br><em>Example↓</em></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>实现输入框的防抖</span></div><code class=\"language-javascript\">&lt;template&gt;\n\t&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;\n\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\n\timport &#123;ref,customRef&#125; from &#39;vue&#39;\n\texport default &#123;\n\t\tname:&#39;Demo&#39;,\n\t\tsetup()&#123;\n\t\t\t&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref\n\t\t\t&#x2F;&#x2F;自定义一个myRef\n\t\t\tfunction myRef(value,delay)&#123;\n\t\t\t\tlet timer\n\t\t\t\t&#x2F;&#x2F;通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)&#x3D;&gt;&#123;\n\t\t\t\t\treturn&#123;\n\t\t\t\t\t\tget()&#123;\n\t\t\t\t\t\t\ttrack() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tset(newValue)&#123;\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer &#x3D; setTimeout(()&#x3D;&gt;&#123;\n\t\t\t\t\t\t\t\tvalue &#x3D; newValue\n\t\t\t\t\t\t\t\ttrigger() &#x2F;&#x2F;告诉Vue去更新界面\n\t\t\t\t\t\t\t&#125;,delay)\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;)\n\t\t\t&#125;\n\t\t\tlet keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref\n\t\t\treturn &#123;\n\t\t\t\tkeyword\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"检测型-Api\"><a href=\"#检测型-Api\" class=\"headerlink\" title=\"检测型 Api\"></a>检测型 Api</h3><p>isRef:</p>\n<ul>\n<li>检查一个值是否为一个 ref 对象<br>isReactive:</li>\n<li>检查一个对象是否是由 reactive 创建的响应式代理<br>isReadonly:</li>\n<li>检查一个对象是否是由 readonly 创建的只读代理<br>isProxy:</li>\n<li>检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</li>\n</ul>\n<h2 id=\"Computed-amp-Watch-amp-WatchEffect\"><a href=\"#Computed-amp-Watch-amp-WatchEffect\" class=\"headerlink\" title=\"Computed &amp; Watch &amp; WatchEffect\"></a>Computed &amp; Watch &amp; WatchEffect</h2><h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>写法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;computed&#125; from &#39;vue&#39;\n\nsetup()&#123;\n    ...\n\t&#x2F;&#x2F;计算属性——简写\n    let fullName &#x3D; computed(()&#x3D;&gt;&#123;\n        return person.firstName + &#39;-&#39; + person.lastName\n    &#125;)\n    &#x2F;&#x2F;计算属性——完整\n    let fullName &#x3D; computed(&#123;\n        get()&#123;\n            return person.firstName + &#39;-&#39; + person.lastName\n        &#125;,\n        set(value)&#123;\n            const nameArr &#x3D; value.split(&#39;-&#39;)\n            person.firstName &#x3D; nameArr[0]\n            person.lastName &#x3D; nameArr[1]\n        &#125;\n    &#125;)\n&#125;</code></pre>\n\n<h3 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h3><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p><strong>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</strong><br><strong>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</strong></p>\n</div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;情况一：监视ref定义的响应式数据\nwatch(\n  sum,\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&quot;sum变化了&quot;, newValue, oldValue);\n  &#125;,\n  &#123; immediate: true &#125;\n);\n\n&#x2F;&#x2F;情况二：监视多个ref定义的响应式数据\nwatch([sum, msg], (newValue, oldValue) &#x3D;&gt; &#123;\n  console.log(&quot;sum或msg变化了&quot;, newValue, oldValue);\n&#125;);\n\n&#x2F;* 情况三：监视reactive定义的响应式数据\n\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！\n\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 \n*&#x2F;\nwatch(\n  person,\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&quot;person变化了&quot;, newValue, oldValue);\n  &#125;,\n  &#123; immediate: true, deep: false &#125;\n); &#x2F;&#x2F;此处的deep配置不再奏效\n\n&#x2F;&#x2F;情况四：监视reactive定义的响应式数据中的某个属性\nwatch(\n  () &#x3D;&gt; person.job,\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&quot;person的job变化了&quot;, newValue, oldValue);\n  &#125;,\n  &#123; immediate: true, deep: true &#125;\n);\n\n&#x2F;&#x2F;情况五：监视reactive定义的响应式数据中的某些属性\nwatch(\n  [() &#x3D;&gt; person.job, () &#x3D;&gt; person.name],\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&quot;person的job变化了&quot;, newValue, oldValue);\n  &#125;,\n  &#123; immediate: true, deep: true &#125;\n);\n\n&#x2F;&#x2F;特殊情况\nwatch(\n  () &#x3D;&gt; person.job,\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&quot;person的job变化了&quot;, newValue, oldValue);\n  &#125;,\n  &#123; deep: true &#125;\n); &#x2F;&#x2F;此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</code></pre>\n\n<h3 id=\"WatchEffect\"><a href=\"#WatchEffect\" class=\"headerlink\" title=\"WatchEffect\"></a>WatchEffect</h3><p>watch 的套路是：</p>\n<ul>\n<li>既要指明监视的属性，也要指明监视的回调。</li>\n</ul>\n<p>watchEffect 的套路是：</p>\n<ul>\n<li>不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li>\n</ul>\n<p>watchEffect 有点像 computed：</p>\n<ul>\n<li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。\nwatchEffect(() &#x3D;&gt; &#123;\n  const x1 &#x3D; sum.value;\n  const x2 &#x3D; person.age;\n  console.log(&quot;watchEffect配置的回调执行了&quot;);\n&#125;);</code></pre>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>mounted&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<strong>onMounted</strong><br>beforeUpdate&#x3D;&#x3D;&#x3D;&gt;<strong>onBeforeUpdate</strong><br>updated &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<strong>onUpdated</strong><br>beforeUnmount &#x3D;&#x3D;&gt;<strong>onBeforeUnmount</strong><br>unmounted &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<strong>onUnmounted</strong><br>beforeCreate&#x3D;&#x3D;&#x3D;&gt;<strong>setup()</strong><br>created&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<strong>setup()</strong></p>\n<h2 id=\"自定义-Hook-函数\"><a href=\"#自定义-Hook-函数\" class=\"headerlink\" title=\"自定义 Hook 函数\"></a>自定义 Hook 函数</h2><ul>\n<li>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</li>\n<li>类似于 vue2.x 中的 mixin。</li>\n<li>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</li>\n</ul>\n<h2 id=\"好用的传值\"><a href=\"#好用的传值\" class=\"headerlink\" title=\"好用的传值\"></a>好用的传值</h2><p>provide 与 inject<br>作用：</p>\n<ul>\n<li>实现祖与后代组件间通信<br>套路：</li>\n<li>父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据,其实子组件可以用，但是 prop 更简单，别给自己找麻烦</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>具体写法——祖组件</span></div><code class=\"language-javascript\">setup()&#123;\n    ......\n    let car &#x3D; reactive(&#123;name:&#39;奔驰&#39;,price:&#39;40万&#39;&#125;)\n    provide(&#39;car&#39;,car)\n    ......\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>具体写法——后代组件</span></div><code class=\"language-javascript\">setup(props,context)&#123;\n    ......\n    const car &#x3D; inject(&#39;car&#39;)\n    return &#123;car&#125;\n    ......\n&#125;</code></pre>\n\n<h2 id=\"新的组件-x2F-标签\"><a href=\"#新的组件-x2F-标签\" class=\"headerlink\" title=\"新的组件&#x2F;标签\"></a>新的组件&#x2F;标签</h2><h3 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h3><p><Fragment></Fragment></p>\n<ul>\n<li>在 Vue2 中: 组件必须有一个根标签</li>\n<li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h3 id=\"Teleport\"><a href=\"#Teleport\" class=\"headerlink\" title=\"Teleport\"></a>Teleport</h3><p><Teleport></Teleport><br>一种能够将我们的组件 html 结构移动到指定位置的技术。<br><em>无视所在盒子的 position，指哪打哪，其中“to”属性就是告诉代码依托于谁定位</em></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>Example</span></div><code class=\"language-javascript\">&lt;teleport to&#x3D;&quot;body&quot;&gt;\n\t&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;\n\t\t&lt;div class&#x3D;&quot;dialog&quot;&gt;\n\t\t\t&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;\n\t\t\t&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;\n\t\t&lt;&#x2F;div&gt;\n\t&lt;&#x2F;div&gt;\n&lt;&#x2F;teleport&gt;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此例中，就直接将 body 作为参考位置</p></blockquote>\n<h3 id=\"Suspense\"><a href=\"#Suspense\" class=\"headerlink\" title=\"Suspense\"></a>Suspense</h3><p><Suspense></Suspense><br>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n<p><em>异步引入组件</em><br>import {defineAsyncComponent} from ‘vue’<br>const Child &#x3D; defineAsyncComponent(()&#x3D;&gt;import(‘.&#x2F;components&#x2F;Child.vue’))</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>使用 Suspense 包裹组件，并配置好 default 与 fallback</p>\n</div>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app&quot;&gt;\n    &lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;\n    &lt;Suspense&gt;\n      &lt;template v-slot:default&gt;\n        &lt;Child &#x2F;&gt;\n      &lt;&#x2F;template&gt;\n      &lt;template v-slot:fallback&gt;\n        &lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;\n      &lt;&#x2F;template&gt;\n    &lt;&#x2F;Suspense&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<h2 id=\"全局-Api-的转移\"><a href=\"#全局-Api-的转移\" class=\"headerlink\" title=\"全局 Api 的转移\"></a>全局 Api 的转移</h2><table>\n<thead>\n<tr>\n<th>2.x 全局 API（Vue）</th>\n<th>3.x 实例 API (app)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td>移除</td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody></table>\n","text":"创建工程使用 vite 创建工程npm init vite-app 进入工程目录cd 安装依赖npm install运行npm run dev 常用的 Composition Apisetup()setup 函数的两种返回值： 若返回一个对象，则对象中的属性、方法, 在模板中均可...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"Tecnology","slug":"Tecnology","count":8,"path":"api/categories/Tecnology.json"},{"name":"Vue","slug":"Tecnology/Vue","count":3,"path":"api/categories/Tecnology/Vue.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":8,"path":"api/tags/tecnology.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">创建工程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-vite\"><span class=\"toc-text\">使用 vite</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84-Composition-Api\"><span class=\"toc-text\">常用的 Composition Api</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setup\"><span class=\"toc-text\">setup()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ref\"><span class=\"toc-text\">ref()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reactive\"><span class=\"toc-text\">reactive()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-Composition-Api\"><span class=\"toc-text\">不常用的 Composition Api</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#toRef\"><span class=\"toc-text\">toRef()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shallowReactive-%E4%B8%8E-shallowRef\"><span class=\"toc-text\">shallowReactive() 与 shallowRef()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#readonly-%E4%B8%8E-shallowReadonly\"><span class=\"toc-text\">readonly() 与 shallowReadonly()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#toRaw-%E4%B8%8E-markRaw\"><span class=\"toc-text\">toRaw() 与 markRaw()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#customRef\"><span class=\"toc-text\">customRef()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8B%E5%9E%8B-Api\"><span class=\"toc-text\">检测型 Api</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Computed-amp-Watch-amp-WatchEffect\"><span class=\"toc-text\">Computed &amp; Watch &amp; WatchEffect</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Computed\"><span class=\"toc-text\">Computed</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Watch\"><span class=\"toc-text\">Watch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WatchEffect\"><span class=\"toc-text\">WatchEffect</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-Hook-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">自定义 Hook 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E7%94%A8%E7%9A%84%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">好用的传值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E7%9A%84%E7%BB%84%E4%BB%B6-x2F-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">新的组件&#x2F;标签</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fragment\"><span class=\"toc-text\">Fragment</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Teleport\"><span class=\"toc-text\">Teleport</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Suspense\"><span class=\"toc-text\">Suspense</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80-Api-%E7%9A%84%E8%BD%AC%E7%A7%BB\"><span class=\"toc-text\">全局 Api 的转移</span></a></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"TypeScript","uid":"0aaa27c48e7b40c2bc96b31fb70803da","slug":"TypeScript","date":"2023-03-05T04:07:57.000Z","updated":"2023-03-22T14:20:26.175Z","comments":true,"path":"api/articles/TypeScript.json","keywords":null,"cover":"https://static.frontendmasters.com/resources/2017-09-15-typescript/thumb.jpg","text":"TS 简介 TypeScript 是 JavaScript 的超集。 它对 JS 进行了扩展，向 JS 中引入了类型的概念，并添加了许多新的特性。 TS 代码需要通过编译器编译为 JS，然后再交由 JS 解析器执行。 TS 完全兼容 JS，换言之，任何的 JS 代码都可以直接当成...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"Tecnology","slug":"Tecnology","count":8,"path":"api/categories/Tecnology.json"},{"name":"Gadgets","slug":"Tecnology/Gadgets","count":2,"path":"api/categories/Tecnology/Gadgets.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":8,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"四载求学路，功名终已成","uid":"7e72fed44435aa241098215766c6357c","slug":"end-of-university-life","date":"2023-02-23T14:42:44.000Z","updated":"2023-02-23T15:45:03.349Z","comments":true,"path":"api/articles/end-of-university-life.json","keywords":null,"cover":"https://images5.alphacoders.com/116/thumbbig-1168138.webp","text":"离津四载，历历在目 2月2日是我 期末考试的最后一天。当黑色的水笔在白色的答题纸上落下最后的一个句号时，画上了我学生时代的句号。没有数不尽的课堂签到，没有数不尽的宿舍查寝，没有数不尽的考试作业。同时也没有了睡到自然醒的偷偷窃喜的早晨，也没有廉价的饭菜，也没有落日余晖下，课堂钟声交...","link":"","photos":[],"count_time":{"symbolsCount":995,"symbolsTime":"1 mins."},"categories":[{"name":"Essays","slug":"Essays","count":2,"path":"api/categories/Essays.json"}],"tags":[{"name":"随笔","slug":"随笔","count":2,"path":"api/tags/随笔.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}