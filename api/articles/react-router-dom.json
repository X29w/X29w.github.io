{"title":"React-Router-Dom","uid":"1b063f23855641c095e348bf57d4f4f2","slug":"react-router-dom","date":"2023-03-22T14:10:34.000Z","updated":"2023-03-22T14:19:53.884Z","comments":true,"path":"api/articles/react-router-dom.json","keywords":null,"cover":"https://blog.mycode.website/wp-content/uploads/2017/10/complex-layouts.jpg","content":"<h2 id=\"React-Router-Dom-5\"><a href=\"#React-Router-Dom-5\" class=\"headerlink\" title=\"React-Router-Dom 5\"></a>React-Router-Dom 5</h2><p><a href=\"https://react-router.docschina.org/\">查看印记中文网站关于 React-Router-Dom 的介绍</a></p>\n<h3 id=\"路由的基本使用\"><a href=\"#路由的基本使用\" class=\"headerlink\" title=\"路由的基本使用\"></a>路由的基本使用</h3><p>index.js&#x2F;index.ts 入口文件中</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">ReactDOM.render(\n  &lt;React.StrictMode&gt;\n    &#123;&#x2F;* &lt;App&gt; 外侧包裹一个 &lt;BrowserRouter&gt; 或 &lt;HashRouter&gt; *&#x2F;&#125;\n    &lt;BrowserRouter&gt;\n      &lt;App &#x2F;&gt;\n    &lt;&#x2F;BrowserRouter&gt;\n  &lt;&#x2F;React.StrictMode&gt;,\n  document.getElementById(&quot;root&quot;)\n);</code></pre>\n\n<p>App.jsx 中</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;div className&#x3D;&quot;container-wrap&quot;&gt;\n  &lt;div className&#x3D;&quot;left&quot;&gt;\n    &lt;Link to&#x3D;&quot;&#x2F;about&quot;&gt;about&lt;&#x2F;Link&gt;\n    &lt;hr &#x2F;&gt;\n    &lt;Link to&#x3D;&quot;&#x2F;home&quot;&gt;home&lt;&#x2F;Link&gt;\n  &lt;&#x2F;div&gt;\n  &lt;div className&#x3D;&quot;main&quot;&gt;\n    &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125;&gt;&lt;&#x2F;Route&gt;\n    &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"路由组件与一般组件\"><a href=\"#路由组件与一般组件\" class=\"headerlink\" title=\"路由组件与一般组件\"></a>路由组件与一般组件</h3><ul>\n<li>写法不同：<ul>\n<li>一般组件：<Demo/></li>\n<li>路由组件：<Route path=\"/about\" component={About}></Route></li>\n</ul>\n</li>\n<li>存放位置不同：<ul>\n<li>一般组件：components</li>\n<li>路由组件：pages</li>\n</ul>\n</li>\n<li>接收到的 props 不同：<ul>\n<li>一般组件：写组件时传递什么就收到什么</li>\n<li>路由组件：<ul>\n<li>history:<ul>\n<li>go、goBack、goForward、push、replace</li>\n</ul>\n</li>\n<li>location：<ul>\n<li>pathname、search、state</li>\n</ul>\n</li>\n<li>match：<ul>\n<li>params、path、url</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"的使用及其封装\"><a href=\"#的使用及其封装\" class=\"headerlink\" title=\" 的使用及其封装\"></a><NavLink/> 的使用及其封装</h3><p>导航链接如果使用 <NavLink>，那么跳转到当前页面时，会自动给当前 <NavLink> 添加一个 <code>class：active</code><br>也可以通过 <code>activeClassName</code> 属性指定 class</p>\n<p><strong>使用</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;NavLink to&#x3D;&quot;&#x2F;about&quot;&gt;about&lt;&#x2F;NavLink&gt;\n\n&lt;NavLink activeClassName&#x3D;&quot;current&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;about&lt;&#x2F;NavLink&gt;</code></pre>\n\n<p><strong>封装</strong><br>标签体内容是一个特殊的标签属性，可以通过 this.props.children 拿到，设置 children 属性相当于设置了标签体内容</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; NavLink &#125; from &quot;react-router-dom&quot;;\n\nexport default class MyNavLink extends Component &#123;\n  render() &#123;\n    return &lt;NavLink className&#x3D;&quot;link&quot; &#123;...this.props&#125; &#x2F;&gt;;\n  &#125;\n&#125;</code></pre>\n\n<p><strong>封装后使用</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;MyNavLink to&#x3D;&quot;&#x2F;about&quot;&gt;about&lt;&#x2F;MyNavLink&gt;</code></pre>\n\n<h3 id=\"的使用\"><a href=\"#的使用\" class=\"headerlink\" title=\"的使用\"></a><Switch/>的使用</h3><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; 2个组件都会展示\n&lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;\n&lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Test&#125;&gt;&lt;&#x2F;Route&gt;\n\n&#x2F;&#x2F; 用 &lt;Switch&gt; 包裹一下，匹配到了就不继续匹配了\n&lt;Switch&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;\n&lt;&#x2F;Switch&gt;</code></pre>\n\n<h3 id=\"路由的模糊匹配与严格匹配\"><a href=\"#路由的模糊匹配与严格匹配\" class=\"headerlink\" title=\"路由的模糊匹配与严格匹配\"></a>路由的模糊匹配与严格匹配</h3><p>默认模糊匹配，尽量不开启严格匹配<br><code>/home/a/b </code>可以匹配 <code>/home</code><br><code>/a/home/b</code> 不能匹配 <code>/home</code><br><NavLink> 中的 to 属性，必须以 <Route> 中指定的 path 开头，才能匹配成功</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; 开启严格匹配，必须完全相等\n&lt;Route exact path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</code></pre>\n\n<h3 id=\"Redirect-的使用\"><a href=\"#Redirect-的使用\" class=\"headerlink\" title=\"Redirect 的使用\"></a>Redirect 的使用</h3><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Switch&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;\n\t&#x2F;&#x2F; 重定向 写在最下面  如果前面的都没匹配到，就重定向到 &lt;Redirect&gt; 指定的路径，兜底作用\n  &lt;Redirect to&#x3D;&quot;&#x2F;about&quot;&#x2F;&gt;\n&lt;&#x2F;Switch&gt;</code></pre>\n\n<h3 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h3><p>注册子路由时要在前面加上父路由<br>路由的匹配顺序是按注册顺序进行的</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;&gt;\n  &lt;div&gt;\n    &lt;h3&gt;home&lt;&#x2F;h3&gt;\n    &lt;MyNavLink to&#x3D;&quot;&#x2F;home&#x2F;message&quot;&gt;message&lt;&#x2F;MyNavLink&gt;\n    &lt;MyNavLink to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;news&lt;&#x2F;MyNavLink&gt;\n  &lt;&#x2F;div&gt;\n  &lt;Switch&gt;\n    &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;message&quot; component&#x3D;&#123;Message&#125;&gt;&lt;&#x2F;Route&gt;\n    &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;news&quot; component&#x3D;&#123;News&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;&#x2F;Switch&gt;\n&lt;&#x2F;&gt;</code></pre>\n\n<h3 id=\"向路由组件传递参数\"><a href=\"#向路由组件传递参数\" class=\"headerlink\" title=\"向路由组件传递参数\"></a>向路由组件传递参数</h3><ul>\n<li>params 参数 路由中包含参数， <code>/xx/val1/val2</code></li>\n<li>search 参数 <code>/xx?key1=val1&amp;key2=val2</code></li>\n<li>state 参数 路由中不显示参数 <code>HashRouter</code> 时，刷新页面会丢失参数</li>\n</ul>\n<details class=\"custom-details\">\n<summary>三种参数的举例</summary>\n<p><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;div&gt;\n  &#123;messageArr.map((msg) &#x3D;&gt; &#123;\n    return (\n      &lt;div key&#x3D;&#123;msg.id&#125;&gt;\n        &#123;&#x2F;* 传递 params 参数 *&#x2F;&#125;\n        &#123;&#x2F;* &lt;Link to&#x3D;&#123;&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;msg.id&#125;&#x2F;$&#123;msg.title&#125;&#96;&#125;&gt;&#123;msg.title&#125;&lt;&#x2F;Link&gt; *&#x2F;&#125;\n\n        &#123;&#x2F;* 传递 search 参数 *&#x2F;&#125;\n        &#123;&#x2F;* &lt;Link to&#x3D;&#123;&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;msg.id&#125;&amp;title&#x3D;$&#123;msg.title&#125;&#96;&#125;&gt;&#123;msg.title&#125;&lt;&#x2F;Link&gt; *&#x2F;&#125;\n\n        &#123;&#x2F;* 传递 state 参数 *&#x2F;&#125;\n        &lt;Link\n          to&#x3D;&#123;&#123;\n            pathname: &quot;&#x2F;home&#x2F;message&#x2F;detail&quot;,\n            state: &#123; id: msg.id, title: msg.title &#125;,\n          &#125;&#125;\n        &gt;\n          &#123;msg.title&#125;\n        &lt;&#x2F;Link&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;)&#125;\n  &lt;hr &#x2F;&gt;\n  &#123;&#x2F;* 声明接收 params 参数 *&#x2F;&#125;\n  &#123;&#x2F;* &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;:id&#x2F;:title&quot; component&#x3D;&#123;Detail&#125;&#x2F;&gt; *&#x2F;&#125;\n\n  &#123;&#x2F;* search 参数无需声明接收 *&#x2F;&#125;\n  &#123;&#x2F;* &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&quot; component&#x3D;&#123;Detail&#125;&#x2F;&gt; *&#x2F;&#125;\n\n  &#123;&#x2F;* state 参数无需声明接收 *&#x2F;&#125;\n  &lt;Route path&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&quot; component&#x3D;&#123;Detail&#125; &#x2F;&gt;\n&lt;&#x2F;div&gt;;\n\n&#x2F;&#x2F; 接收 params 参数\n&#x2F;&#x2F; const &#123;id, title&#125; &#x3D; this.props.match.params\n\n&#x2F;&#x2F; 接收 search 参数\n&#x2F;&#x2F; const &#123;search&#125; &#x3D; this.props.location\n&#x2F;&#x2F; const &#123;id, title&#125; &#x3D; qs.parse(search.slice(1))\n\n&#x2F;&#x2F; 接收 search 参数\nconst &#123; id, title &#125; &#x3D; this.props.location.state || &#123;&#125;;</code></pre>\n\n</p>\n</details>\n<p><code>key=value&amp;key2=value2</code> 形式叫 <code>urlencode</code> 编码</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import qs from &quot;querystring&quot;;\n\nlet obj &#x3D; &#123; a: 1, b: 2 &#125;;\n\nlet str &#x3D; qs.string(obj);\n\nobj &#x3D; qs.parse(str);</code></pre>\n\n<p><strong>Push&amp;Replace</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Link to&#x3D;&#123;&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;msg.id&#125;&#x2F;$&#123;msg.title&#125;&#96;&#125;&gt;&#123;msg.title&#125;&lt;&#x2F;Link&gt;\n\n&lt;Link replace&#x3D;&#123;true&#125; to&#x3D;&#123;&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;msg.id&#125;&#x2F;$&#123;msg.title&#125;&#96;&#125;&gt;&#123;msg.title&#125;&lt;&#x2F;Link&gt;</code></pre>\n\n<h3 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h3><details class=\"custom-details\">\n<summary>编程式路由导航举例</summary>\n<p><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">pushShow &#x3D; (id, title) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; push 跳转 + 携带 params 参数\n    &#x2F;&#x2F; this.props.history.push(&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;id&#125;&#x2F;$&#123;title&#125;&#96;)\n\n    &#x2F;&#x2F; push 跳转 + 携带 search 参数\n    &#x2F;&#x2F; this.props.history.push(&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;id&#125;&amp;title&#x3D;$&#123;title&#125;&#96;)\n\n    &#x2F;&#x2F; push 跳转 + 携带 state 参数\n    this.props.history.push(&#96;&#x2F;home&#x2F;message&#x2F;detail&#96;, &#123;id, title&#125;)\n&#125;\n\nreplaceShow &#x3D; (id, title) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; replace 跳转 + 携带 params 参数\n    &#x2F;&#x2F; this.props.history.replace(&#96;&#x2F;home&#x2F;message&#x2F;detail&#x2F;$&#123;id&#125;&#x2F;$&#123;title&#125;&#96;)\n\n    &#x2F;&#x2F; replace 跳转 + 携带 search 参数\n    &#x2F;&#x2F; this.props.history.replace(&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;id&#125;&amp;title&#x3D;$&#123;title&#125;&#96;)\n\n    &#x2F;&#x2F; replace 跳转 + 携带 state 参数\n    this.props.history.replace(&#96;&#x2F;home&#x2F;message&#x2F;detail&#96;, &#123;id, title&#125;)\n&#125;\n\n&lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.pushShow(msg.id, msg.title)&#125;&gt;push 查看&lt;&#x2F;button&gt;\n&lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.replaceShow(msg.id, msg.title)&#125;&gt;replace 查看&lt;&#x2F;button&gt;\n\n&#x2F;&#x2F; 前进一步\nthis.props.history.goForward()\n&#x2F;&#x2F; 后退一步\nthis.props.history.goBack()\n&#x2F;&#x2F; 前进一步\nthis.props.history.go(1)</code></pre>\n\n</p>\n</details>\n<h3 id=\"WitshRouter-的使用\"><a href=\"#WitshRouter-的使用\" class=\"headerlink\" title=\"WitshRouter 的使用\"></a>WitshRouter 的使用</h3><p>withRouter 可以加工一般组件，让一般组件具有路由组件特有的 API，history 等<br>withRouter 返回值是一个新组件</p>\n<details class=\"custom-details\">\n<summary>WitshRouter 的使用</summary>\n<p><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React, &#123; Component &#125; from &quot;react&quot;;\nimport &#123; withRouter &#125; from &quot;react-router-dom&quot;;\n\nclass Header extends Component &#123;\n  go &#x3D; () &#x3D;&gt; &#123;\n    this.props.history.goForward();\n  &#125;;\n\n  back &#x3D; () &#x3D;&gt; &#123;\n    this.props.history.goBack();\n  &#125;;\n\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;h2&gt;react-router-dom&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;this.go&#125;&gt;前进&lt;&#x2F;button&gt;\n        &lt;button onClick&#x3D;&#123;this.back&#125;&gt;后退&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nexport default withRouter(Header);</code></pre>\n\n</p>\n</details>\n<h3 id=\"BrowserRouter-与-HashRouter\"><a href=\"#BrowserRouter-与-HashRouter\" class=\"headerlink\" title=\"BrowserRouter 与 HashRouter\"></a>BrowserRouter 与 HashRouter</h3><ul>\n<li>底层原理不一样：<ul>\n<li>BrowserRouter 使用的是 H5 的 history API，不兼容 IE9 及以下版本</li>\n<li>HashRouter 使用的是 URL 的哈希值</li>\n</ul>\n</li>\n<li>path 表现形式不一样：<ul>\n<li>BrowserRouter 的路径中没有 #</li>\n<li>HashRouter 的路径中包含 #</li>\n</ul>\n</li>\n<li>刷新后对 state 参数的影响：<ul>\n<li>BrowserRouter 没有任何影响，因为 state 保存在 history 对象中</li>\n<li>HashRouter 刷新后会导致路由 state 参数的丢失</li>\n</ul>\n</li>\n<li>HashRouter 可以解决一些路径错误相关的问题，比如多级路径刷新页面后样式丢失</li>\n</ul>\n<h2 id=\"React-Router-Dom-6\"><a href=\"#React-Router-Dom-6\" class=\"headerlink\" title=\"React-Router-Dom 6\"></a>React-Router-Dom 6</h2><h3 id=\"与-v5-版本区别\"><a href=\"#与-v5-版本区别\" class=\"headerlink\" title=\"与 v5 版本区别\"></a>与 v5 版本区别</h3><ul>\n<li>内置组件的变化：移除<Switch/> ,新增<Routes/></li>\n<li>语法的变化：注册组件时，component&#x3D;{Demo} 变为 element&#x3D;{<Demo/>}</li>\n<li>新增多个 hook:useParams,useNavigate,useMatch 等</li>\n<li>官方推荐使用函数式组件了</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Routes&gt;\n  &#123;&#x2F;* caseSensitive 设置path是否大小写敏感 *&#x2F;&#125;\n  &lt;Route path&#x3D;&quot;&#x2F;EXTENSION&quot; caseSensitive&#x3D;&#123;true&#125; element&#x3D;&#123;&lt;LazyDemo &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;extension&quot; element&#x3D;&#123;&lt;ExtensionDemo &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;lazy-demo&quot; element&#x3D;&#123;&lt;LazyDemo &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;Route path&#x3D;&quot;&#x2F;react-router-v6&quot; element&#x3D;&#123;&lt;ReactRouterDomV6 &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n  &#123;&#x2F;* 这里不会继续往下匹配 *&#x2F;&#125;\n  &lt;Route path&#x3D;&quot;&#x2F;react-router-v6&quot; element&#x3D;&#123;&lt;ExtensionDemo &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n&lt;&#x2F;Routes&gt;</code></pre>\n\n<h3 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h3><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import Loading from &quot;.&#x2F;components&#x2F;Loading&quot;;\nimport &#123;lazy()&#125; from &#39;react&#39;\n&#x2F;&#x2F; 路由懒加载 1. 调用lazy\nconst LazyDemo &#x3D; lazy(() &#x3D;&gt; import(&quot;.&#x2F;pages&#x2F;ExtensionDemo&#x2F;02_lazy&quot;));\n&#123;\n  &#x2F;* 路由懒加载 2.使用Suspense *&#x2F;\n&#125;\n&lt;Suspense fallback&#x3D;&#123;&lt;Loading &#x2F;&gt;&#125;&gt;\n  &#123;&#x2F;* v5:使用的是 Switch *&#x2F;&#125;\n  &lt;Routes&gt;\n    &lt;Route path&#x3D;&quot;&#x2F;lazy-demo&quot; element&#x3D;&#123;&lt;LazyDemo &#x2F;&gt;&#125;&gt;&lt;&#x2F;Route&gt;\n  &lt;&#x2F;Routes&gt;\n&lt;&#x2F;Suspense&gt;;</code></pre>\n\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><p>v6 使用<Navigator to=\"/xxx\">替代 v5 的<Redirect to=\"/xxx\" /></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;Route path&#x3D;&quot;&#x2F;&quot; element&#x3D;&#123;&lt;Navigate to&#x3D;&quot;react-router-v6&quot;&gt;&lt;&#x2F;Navigate&gt;&#125;&gt;&lt;&#x2F;Route&gt;</code></pre>\n\n<h3 id=\"使用-useRoutes-配置路由链路表\"><a href=\"#使用-useRoutes-配置路由链路表\" class=\"headerlink\" title=\"使用 useRoutes 配置路由链路表\"></a>使用 useRoutes 配置路由链路表</h3><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#x2F;&#x2F; 根据配置生成链路表\nconst allElement &#x3D; useRoutes(routes);\n&lt;Suspense fallback&#x3D;&#123;&lt;Loading &#x2F;&gt;&#125;&gt;\n  &#123;&#x2F;* 路由链路表 *&#x2F;&#125;\n  &#123;allElement&#125;\n&lt;&#x2F;Suspense&gt;;</code></pre>\n\n<h3 id=\"嵌套路由-1\"><a href=\"#嵌套路由-1\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h3><p>路由链路表父路由添加 children 字段（和 vue-router 类似）</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#123;\n  path: &#39;&#x2F;react-router-v6&#39;,\n    element: &lt;ReactRouterDomV6 &#x2F;&gt;,\n    &#x2F;&#x2F; 嵌套路由，父组件需要一个位置&lt;Outlet &#x2F;&gt;来展示\n    children: [\n      &#123;\n        path: &#39;child&#39;,\n        element: &lt;Child &#x2F;&gt;,\n      &#125;,\n    ],\n  &#125;,</code></pre>\n\n<h3 id=\"路由传参-params\"><a href=\"#路由传参-params\" class=\"headerlink\" title=\"路由传参 params\"></a>路由传参 params</h3><p><strong>定义路由参数</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&#123;\n   path: &#39;use-params&#x2F;:id&#x2F;:name&#39;,\n   element: &lt;UseParamsDemo &#x2F;&gt;,\n &#125;</code></pre>\n\n<p><strong>获取路由参数</strong><br>第一种：<code>useParams()</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#x2F;&#x2F; 返回值：\n&#123;\n  &quot;id&quot;: &quot;id1&quot;,\n  &quot;name&quot;: &quot;name2&quot;\n&#125;</code></pre>\n\n<p>第二种：<code>useMatch()</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#x2F;&#x2F; 返回值\n&#123;\n  &quot;params&quot;: &#123;\n    &quot;id&quot;: &quot;id1&quot;,\n    &quot;name&quot;: &quot;name2&quot;\n  &#125;,\n  &quot;pathname&quot;: &quot;&#x2F;react-router-v6&#x2F;use-params&#x2F;id1&#x2F;name2&quot;,\n  &quot;pathnameBase&quot;: &quot;&#x2F;react-router-v6&#x2F;use-params&#x2F;id1&#x2F;name2&quot;,\n  &quot;pattern&quot;: &#123;\n    &quot;path&quot;: &quot;&#x2F;react-router-v6&#x2F;use-params&#x2F;:id&#x2F;:name&quot;,\n    &quot;caseSensitive&quot;: false,\n    &quot;end&quot;: true\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"路由参数-search\"><a href=\"#路由参数-search\" class=\"headerlink\" title=\"路由参数 search\"></a>路由参数 search</h3><p><strong>传参</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;NavLink className&#x3D;&#123;linkClass&#125; to&#x3D;&quot;.&#x2F;use-search-params?id&#x3D;1&amp;name&#x3D;abc&amp;title&#x3D;xxx&quot;&gt;\n  useSearchParams\n&lt;&#x2F;NavLink&gt;</code></pre>\n\n<p><strong>取值</strong></p>\n<details class=\"custom-details\">\n<summary>取值示例</summary>\n<p><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">import React from &quot;react&quot;;\nimport &#123; useLocation, useSearchParams &#125; from &quot;react-router-dom&quot;;\n\nexport default function useSearchParamsDemo() &#123;\n  const [search, setSearch] &#x3D; useSearchParams();\n  const id &#x3D; search.get(&quot;id&quot;);\n  const name &#x3D; search.get(&quot;name&quot;);\n  const title &#x3D; search.get(&quot;title&quot;);\n  console.log(id, name, title);\n  &#x2F;&#x2F; 也可从location获取\n  const location &#x3D; useLocation();\n  console.log(location);\n  const handleClick &#x3D; () &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 会替换url?后面所有参数\n    setSearch(&quot;id&#x3D;1&amp;name&#x3D;abc&amp;title&#x3D;xxx&quot;);\n  &#125;;\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;useSearchParams&lt;&#x2F;h3&gt;\n      &lt;div&gt;\n        &#123;id&#125;,&#123;name&#125;,&#123;title&#125;\n      &lt;&#x2F;div&gt;\n      &lt;div&gt;\n        &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;设置search&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;</code></pre>\n\n</p>\n</details>\n<h3 id=\"路由参数-state\"><a href=\"#路由参数-state\" class=\"headerlink\" title=\"路由参数 state\"></a>路由参数 state</h3><p><strong>传参</strong></p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;NavLink\n  className&#x3D;&#123;linkClass&#125;\n  to&#x3D;&#123;&#123; pathname: &quot;.&#x2F;state-params&quot;, state: &#123; name: &quot;curry&quot; &#125; &#125;&#125;\n&gt;\n  传入state路由参数\n&lt;&#x2F;NavLink&gt;</code></pre>\n\n<p><strong>取值</strong><br>通过 <code>useLocation().state</code>获取</p>\n<h3 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h3><p>v6 版本中，不区分普通组件还是路由组件，都使用 <code>const navigete = useNavigete()</code>,普通组件不再使用<code>withRouter()</code></p>\n<h3 id=\"额外的-Hooks\"><a href=\"#额外的-Hooks\" class=\"headerlink\" title=\"额外的 Hooks\"></a>额外的 Hooks</h3><ul>\n<li>useInRouterContext()：判断是否在路由环境下，一般用于第三方组件库封装</li>\n<li>useNavigeteType(): 返回跳转模式 PUSH | REPLACE | POP (刷新时)</li>\n<li>useOutlet():用来呈现当前组件中渲染的嵌套路由（路由对象）</li>\n<li>useResolvedPath(‘&#x2F;react-router-v6&#x2F;use-params&#x2F;id1&#x2F;name2?title&#x3D;解析 url#hashcode123’),用来解析任何路径</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;pathname&quot;: &quot;&#x2F;react-router-v6&#x2F;use-params&#x2F;id1&#x2F;name2&quot;,\n  &quot;search&quot;: &quot;?title&#x3D;解析url&quot;,\n  &quot;hash&quot;: &quot;#hashcode123&quot;\n&#125;</code></pre>\n\n","text":"React-Router-Dom 5查看印记中文网站关于 React-Router-Dom 的介绍 路由的基本使用index.js&#x2F;index.ts 入口文件中 ReactDOM.render( &lt;React.StrictMode&gt; &#123;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Tecnology","slug":"Tecnology","count":8,"path":"api/categories/Tecnology.json"},{"name":"React","slug":"Tecnology/React","count":3,"path":"api/categories/Tecnology/React.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":8,"path":"api/tags/tecnology.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Router-Dom-5\"><span class=\"toc-text\">React-Router-Dom 5</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">路由的基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%B8%8E%E4%B8%80%E8%88%AC%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">路由组件与一般组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%B0%81%E8%A3%85\"><span class=\"toc-text\"> 的使用及其封装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E4%B8%8E%E4%B8%A5%E6%A0%BC%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">路由的模糊匹配与严格匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redirect-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Redirect 的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">嵌套路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">向路由组件传递参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">编程式路由导航</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WitshRouter-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">WitshRouter 的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BrowserRouter-%E4%B8%8E-HashRouter\"><span class=\"toc-text\">BrowserRouter 与 HashRouter</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React-Router-Dom-6\"><span class=\"toc-text\">React-Router-Dom 6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-v5-%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与 v5 版本区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">路由懒加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">重定向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-useRoutes-%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E9%93%BE%E8%B7%AF%E8%A1%A8\"><span class=\"toc-text\">使用 useRoutes 配置路由链路表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-1\"><span class=\"toc-text\">嵌套路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82-params\"><span class=\"toc-text\">路由传参 params</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0-search\"><span class=\"toc-text\">路由参数 search</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0-state\"><span class=\"toc-text\">路由参数 state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E5%BC%8F%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">编程式导航</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%9D%E5%A4%96%E7%9A%84-Hooks\"><span class=\"toc-text\">额外的 Hooks</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redux","uid":"0af45ef14bc511045b195273be18640c","slug":"redux","date":"2023-03-24T12:29:23.000Z","updated":"2023-03-24T12:33:42.595Z","comments":true,"path":"api/articles/redux.json","keywords":null,"cover":"https://th.bing.com/th/id/R.a3118e1ca33fffdf56eb9f49842e2779?rik=PXEmnkjI%2f6z19w&riu=http%3a%2f%2fninjadolinux.com.br%2fwp-content%2fuploads%2f2020%2f06%2fredux-cover-imgage.jpg&ehk=rKuob5QbPfHZBBYTxsJ5dPI3MoSbsY7oZ6cqUZi02sk%3d&risl=&pid=ImgRaw&r=0","text":"Redux 我们先明晰 Redux 的作用 ，实现集中式状态管理。 Redux 适用于多交互、多数据源的场景。简单理解就是复杂 从组件角度去考虑的话，当我们有以下的应用场景时，我们可以尝试采用 Redux 来实现 某个组件的状态需要共享时 一个组件需要改变其他组件的状态时 一个组...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Tecnology","slug":"Tecnology","count":8,"path":"api/categories/Tecnology.json"},{"name":"React","slug":"Tecnology/React","count":3,"path":"api/categories/Tecnology/React.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":8,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"React","uid":"d9e53d39e48f5c5aa42bf2e7c031bcd1","slug":"react","date":"2023-03-22T14:07:08.000Z","updated":"2023-03-22T14:20:32.544Z","comments":true,"path":"api/articles/react.json","keywords":null,"cover":"https://wallpaperaccess.com/full/3949089.jpg","text":"React 入门点我去官网 React 的基本使用需要的相关依赖文件 react.js：React 核心库。 react-dom.js：提供操作 DOM 的 react 扩展库。 babel.min.js：解析 JSX 语法代码转为 JS 代码的库 引入顺序为：1.react.j...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Tecnology","slug":"Tecnology","count":8,"path":"api/categories/Tecnology.json"},{"name":"React","slug":"Tecnology/React","count":3,"path":"api/categories/Tecnology/React.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":8,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}