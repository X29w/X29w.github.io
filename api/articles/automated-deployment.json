{"title":"前端自动化部署","uid":"78c733f14091289904e8c5ab0e4b1c53","slug":"automated-deployment","date":"2024-10-20T04:18:31.000Z","updated":"2024-11-23T16:49:25.153Z","comments":true,"path":"api/articles/automated-deployment.json","keywords":null,"cover":[],"content":"<p>所谓自动化部署就是当代码触发提交的时候自动部署到服务器上</p>\n<p>前置准备工作</p>\n<ul>\n<li>服务器：需要有一台可以部署代码的服务器，比如阿里云、腾讯云、GitHub Pages 等</li>\n<li>代码仓库：需要有一个代码仓库，比如 GitHub、GitLab 等</li>\n<li>会 linux</li>\n<li>懂点 Ngnix</li>\n<li>懂点 Git</li>\n</ul>\n<h2 id=\"买一台服务器\"><a href=\"#买一台服务器\" class=\"headerlink\" title=\"买一台服务器\"></a>买一台服务器</h2><ul>\n<li><p>不要贪便宜到不知名小平台买，之前我也有过投机取巧不想买大平台的服务器，因为觉得贵，但是贵有贵的道理，小平台的安装都会报错，可能对于当时的我技术还不够，不太能分析出错误的原因是什么，总之避雷就对了。</p>\n</li>\n<li><p>到阿里云我买的 99&#x2F;年的，我买的是 Alibaba Cloud Linux3，和 CentOS 没差，用就行</p>\n</li>\n<li><p>一路先确定直到支付完成就会看到有服务器的 IP 地址，记住这个 IP 地址，后面会用到。然后重置密码，记住密码，不管是脑子还是别的什么地方</p>\n</li>\n</ul>\n<h2 id=\"连接服务器\"><a href=\"#连接服务器\" class=\"headerlink\" title=\"连接服务器\"></a>连接服务器</h2><p>固定模板 ssh root@服务器 IP 地址</p>\n<h2 id=\"安装-Docker\"><a href=\"#安装-Docker\" class=\"headerlink\" title=\"安装 Docker\"></a>安装 Docker</h2><p>以下命令以此执行，无脑做就能成功</p>\n<p>**一些命令的解释: **</p>\n<ul>\n<li><p>dnf: 这是一个包管理工具，用于安装、更新和删除软件包。它是 yum 的下一代版本，提供更好的性能和依赖管理功能。</p>\n</li>\n<li><p>install: 这是 dnf 的一个子命令，用于安装指定的软件包。</p>\n</li>\n<li><p>-y: 这个选项表示自动回答“yes”给所有的提示。这意味着在安装过程中，如果有任何确认提示，使用此标志可以自动接受，避免手动干预。</p>\n</li>\n<li><p>docker-ce: 这是要安装的软件包的名称。在这里，docker-ce 指的是 Docker 的社区版（Community Edition）。Docker 是一个开源的容器化平台，用于自动化应用程序的部署、扩展和管理。</p>\n</li>\n<li><p>–nobest: 这个选项告诉 dnf 在安装时不一定选择最好的（最新的）版本来进行安装，而是可以选择可用版本中的较好版本。这在某些情况下可以避免因为依赖问题而无法安装最新版本</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>运行以下命令，安装Docker存储驱动的依赖包</span></div><code class=\"language-cmd\">dnf install -y device-mapper-persistent-data lvm2</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>运行以下命令，添加稳定的Docker软件源。</span></div><code class=\"language-cmd\">dnf config-manager --add-repo&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>运行以下命令，查看已添加的Docker软件源。</span></div><code class=\"language-cmd\">dnf list docker-ce</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>正确的返回示例如下。</span></div><code class=\"language-cmd\">docker-ce.x86_64        3:19.03.13-3.el7        docker-ce-stable</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>运行以下命令安装Docker</span></div><code class=\"language-cmd\">dnf install -y docker-ce --nobest</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>设置开机自启</span></div><code class=\"language-cmd\">sudo systemctl enable docker</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>启动docker</span></div><code class=\"language-cmd\">sudo systemctl start docker</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>检测是否安装成功 docker -v 查看版本号</span></div><code class=\"language-cmd\">docker -v</code></pre>\n\n<p><img src=\"/images/automated-deployment/1.png\" alt=\"img\"></p>\n<h2 id=\"安装-docker-compose\"><a href=\"#安装-docker-compose\" class=\"headerlink\" title=\"安装 docker-compose\"></a>安装 docker-compose</h2><pre class=\"line-numbers language-cdm\" data-language=\"cdm\"><div class=\"caption\"><span>安sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o</span><a href=\"/usr/local/bin/docker-compose\">link</a></div><code class=\"language-cdm\"></code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>对二进制文件应用可执行权限</span></div><code class=\"language-cmd\">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>检测是否安装成功 docker-compose -v 查看版本号</span></div><code class=\"language-cmd\">docker-compose -v</code></pre>\n\n<h2 id=\"安装-Nginx-镜像和-Jenkins-镜像\"><a href=\"#安装-Nginx-镜像和-Jenkins-镜像\" class=\"headerlink\" title=\"安装 Nginx 镜像和 Jenkins 镜像\"></a>安装 Nginx 镜像和 Jenkins 镜像</h2><h3 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h3><pre class=\"line-numbers language-安装Nginx\" data-language=\"安装Nginx\"><div class=\"caption\"><span>镜像</span></div><code class=\"language-安装Nginx\">docker pull nginx</code></pre>\n\n<hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>warning: 如果报错内容是 Error response from daemon: Get “<a href=\"https://registry-1.docker.io/v2/%E2%80%9C\">https://registry-1.docker.io/v2/“</a>: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 就按下方命令执行</p></blockquote>\n<p><img src=\"/images/automated-deployment/2.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>修改下这个json文件，没有就创建</span></div><code class=\"language-cmd\">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><div class=\"caption\"><span>写入以下内容</span></div><code class=\"language-json\">&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;https:&#x2F;&#x2F;2a6bf1988cb6428c877f723ec7530dbc.mirror.swr.myhuaweicloud.com&quot;,\n    &quot;https:&#x2F;&#x2F;docker.m.daocloud.io&quot;,\n    &quot;https:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,\n    &quot;https:&#x2F;&#x2F;mirror.baidubce.com&quot;,\n    &quot;https:&#x2F;&#x2F;your_preferred_mirror&quot;,\n    &quot;https:&#x2F;&#x2F;dockerhub.icu&quot;,\n    &quot;https:&#x2F;&#x2F;docker.registry.cyou&quot;,\n    &quot;https:&#x2F;&#x2F;docker-cf.registry.cyou&quot;,\n    &quot;https:&#x2F;&#x2F;dockercf.jsdelivr.fyi&quot;,\n    &quot;https:&#x2F;&#x2F;docker.jsdelivr.fyi&quot;,\n    &quot;https:&#x2F;&#x2F;dockertest.jsdelivr.fyi&quot;,\n    &quot;https:&#x2F;&#x2F;mirror.aliyuncs.com&quot;,\n    &quot;https:&#x2F;&#x2F;dockerproxy.com&quot;,\n    &quot;https:&#x2F;&#x2F;mirror.baidubce.com&quot;,\n    &quot;https:&#x2F;&#x2F;docker.m.daocloud.io&quot;,\n    &quot;https:&#x2F;&#x2F;docker.nju.edu.cn&quot;,\n    &quot;https:&#x2F;&#x2F;docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n    &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,\n    &quot;https:&#x2F;&#x2F;mirror.iscas.ac.cn&quot;,\n    &quot;https:&#x2F;&#x2F;docker.rainbond.cc&quot;\n  ]\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>重新加载配置文件</span></div><code class=\"language-cmd\">systemctl daemon-reload</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>重启docker服务</span></div><code class=\"language-cmd\">systemctl restart docker</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>检查下docker是否启动正常</span></div><code class=\"language-cmd\">systemctl status docker</code></pre>\n\n<p>这样再重新 pull Nginx 就正常了</p>\n<h3 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h3><pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>查看镜像list</span></div><code class=\"language-cmd\">docker search jenkins</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>warning:可能会报错，需要配置下镜像源<br><img src=\"/images/automated-deployment/3.png\" alt=\"img\"><br>无所谓，反正是查看列表的命令，往下走接着拉镜像</p></blockquote>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>拉取Jenkins镜像 本次镜像jenkins/jenkins:lts</span></div><code class=\"language-cmd\">docker pull jenkins&#x2F;jenkins:lts</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>就拉最新版的镜像，lts 版本是最稳定的版本，一般情况下都用这个版本，别整没有用的</p>\n</div>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>安装完成后执行docker images 查看已安装镜像</span></div><code class=\"language-cmd\">docker images</code></pre>\n\n<p><img src=\"/images/automated-deployment/5.png\" alt=\"img\"></p>\n<h2 id=\"配置目录编写\"><a href=\"#配置目录编写\" class=\"headerlink\" title=\"配置目录编写\"></a>配置目录编写</h2><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>!! 注意：这里的 docker 是放在根目录的和&#x2F;root 平级的</p>\n</div>\n<ul>\n<li>docker<ul>\n<li>compose<ul>\n<li>docker-compose.yml &#x2F;&#x2F;docker-compose 配置</li>\n</ul>\n</li>\n<li>html &#x2F;&#x2F;各环境代码目录(实际项目可能不在同一目录)<ul>\n<li>dev &#x2F;&#x2F;dev 环境代码目录</li>\n<li>prod &#x2F;&#x2F;sit 环境代码目录</li>\n</ul>\n</li>\n<li>jenkins_home &#x2F;&#x2F;Jenkins 工程目录</li>\n<li>nginx &#x2F;&#x2F;nginx 工程目录<ul>\n<li>conf<ul>\n<li>nginx.conf &#x2F;&#x2F;nginx 配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><div class=\"caption\"><span>docker-compose.yml 配置文件</span></div><code class=\"language-yaml\">version: &quot;3&quot;\n\nservices: # 容器\n  docker_jenkins:\n    privileged: true\n    user: root # root权限\n    restart: always # 重启方式\n    image: jenkins&#x2F;jenkins:lts # 使用的镜像\n    container_name: jenkins # 容器名称\n    ports: # 对外暴露的端口定义\n      - 8080:8080\n      - 50000:50000\n    volumes: # 卷挂载路径\n      - &#x2F;docker&#x2F;jenkins_home&#x2F;:&#x2F;var&#x2F;jenkins_home # 挂载到容器内的jenkins_home目录\n      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock\n      - &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\n      - &#x2F;usr&#x2F;bin&#x2F;docker:&#x2F;usr&#x2F;bin&#x2F;docker\n\n  docker_nginx_dev: # nginx-dev环境\n    restart: always\n    image: nginx\n    container_name: nginx_dev\n    ports:\n      - 8001:8001\n    volumes:\n      - &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf\n      - &#x2F;docker&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html\n      - &#x2F;docker&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx\n\n  docker_nginx_prod: # nginx-prod环境\n    restart: always\n    image: nginx\n    container_name: nginx_prod\n    ports:\n      - 8002:8002\n    volumes:\n      - &#x2F;docker&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf\n      - &#x2F;docker&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html\n      - &#x2F;docker&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</code></pre>\n\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><div class=\"caption\"><span>nginx.conf 配置文件</span></div><code class=\"language-conf\"># nginx.conf 例：\nuser  nginx;\nworker_processes  1;\n\nerror_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;\npid        &#x2F;var&#x2F;run&#x2F;nginx.pid;\n\n\nevents &#123;\n    worker_connections  1024;\n&#125;\n\n\nhttp &#123;\n    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type  application&#x2F;octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n\n    #dev环境\n    server &#123;\n            #监听的端口\n        listen  8001;\n        server_name  localhost;\n        #设置日志\n#        access_log  logs&#x2F;dev.access.log  main;\n\n        #定位到index.html\n           location &#x2F; &#123;\n               #linux下HTML文件夹,就是你的前端项目文件夹\n               root  &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;dev&#x2F;dist;\n#               root  &#x2F;home&#x2F;html&#x2F;dev&#x2F;dist;\n               #输入网址（server_name：port）后，默认的访问页面\n               index  index.html;\n               try_files $uri $uri&#x2F; &#x2F;index.html;\n           &#125;\n    &#125;\n\n    #prod环境\n    server &#123;\n            #监听的端口\n        listen  8002;\n        server_name  localhost;\n        #设置日志\n#        access_log  logs&#x2F;prod.access.log  main;\n\n        #定位到index.html\n           location &#x2F; &#123;\n               #linux下HTML文件夹,就是你的前端项目文件夹\n               root  &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;prod&#x2F;dist;\n#               root  &#x2F;home&#x2F;html&#x2F;dev&#x2F;dist;\n               #输入网址（server_name：port）后，默认的访问页面\n               index  index.html;\n               try_files $uri $uri&#x2F; &#x2F;index.html;\n           &#125;\n    &#125;\n\n\n#    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n\n\n&#125;\n</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>在 docker-compose.yml 文件所在目录下执行命令创建容器</p>\n</div>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>启动容器</span></div><code class=\"language-cmd\">docker-compose up -d</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>执行docker ps查看容器情况</span></div><code class=\"language-cmd\">docker ps</code></pre>\n\n<h2 id=\"Jenkins-配置\"><a href=\"#Jenkins-配置\" class=\"headerlink\" title=\"Jenkins 配置\"></a>Jenkins 配置</h2><p>爆坑来了！！！</p>\n<h3 id=\"阿里云安全组配置\"><a href=\"#阿里云安全组配置\" class=\"headerlink\" title=\"阿里云安全组配置\"></a>阿里云安全组配置</h3><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>此时通过 ip:8080 打不开 jenkins 的，因为阿里云那边需要手动加上要访问那个端口，就放行哪个端口<br><img src=\"/images/automated-deployment/6.png\" alt=\"img\"></p>\n</div>\n<h3 id=\"防火墙配置\"><a href=\"#防火墙配置\" class=\"headerlink\" title=\"防火墙配置\"></a>防火墙配置</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>输入命令开启防火墙和 8080 端口</p></blockquote>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>检查防火墙装填</span></div><code class=\"language-cmd\">sudo systemctl status firewalld</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>开启防火墙</span></div><code class=\"language-cmd\">sudo systemctl start firewalld</code></pre>\n\n<pre class=\"line-numbers language-设置开机自动启动防火墙\" data-language=\"设置开机自动启动防火墙\"><code class=\"language-设置开机自动启动防火墙\">sudo systemctl enable firewalld</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>开启8080端口</span></div><code class=\"language-cmd\">sudo firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</code></pre>\n\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><div class=\"caption\"><span>重启防火墙</span></div><code class=\"language-cmd\">sudo firewall-cmd --reload</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>后面每开放一个端口就要到安全组手动配置一下，然后防火墙开启端口，防火墙 reload 一下，三步，每一步都不能少</p>\n</div>\n<h3 id=\"Jenkins-初次密码\"><a href=\"#Jenkins-初次密码\" class=\"headerlink\" title=\"Jenkins 初次密码\"></a>Jenkins 初次密码</h3><p>在容器启动后，可以在浏览器输入服务器 ip:8080 进入 jenkins 管理界面。<br>至此，jenkins 配置完成。</p>\n<p>密码在 <code>docker/jenkins_home/secrets/initialAdminPassword</code><br>可以通过命令：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">cat &#x2F;docker&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword</code></pre>\n\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><p>在对应目录<code>/docker/html/dev/dist</code>、<code>/docker/html/prod/dist</code>各新建一个 index.html</p>\n<p>经过上述步骤之后，可以通过 ip+对应的 nignx 端口访问到对应的环境的页面。</p>\n<p><img src=\"/images/automated-deployment/7.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/8.png\" alt=\"img\"></p>\n<h2 id=\"Jenkins-进入后的配置\"><a href=\"#Jenkins-进入后的配置\" class=\"headerlink\" title=\"Jenkins 进入后的配置\"></a>Jenkins 进入后的配置</h2><h3 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h3><ul>\n<li>local（可选。将界面设置为中文）</li>\n<li>GitHub</li>\n<li>publish over SSH (用来连接远程服务器的)</li>\n<li>NodeJs</li>\n</ul>\n<p>下载插件后，Jenkins 需要重启<br>地址栏输入<code>ip:端口/restart</code></p>\n<p><img src=\"/images/automated-deployment/9.png\" alt=\"img\"></p>\n<h3 id=\"Publish-Over-SSH-配置\"><a href=\"#Publish-Over-SSH-配置\" class=\"headerlink\" title=\"Publish Over SSH 配置\"></a>Publish Over SSH 配置</h3><p>第一步<br><img src=\"/images/automated-deployment/10.png\" alt=\"img\"></p>\n<p>第二步 进去找到 Publish Over SSH</p>\n<p>第三步 点击 Publish Over SSH 下方的 SSH Server,点击新增<br><img src=\"/images/automated-deployment/11.png\" alt=\"img\"></p>\n<p>第四步 点击高级<br><img src=\"/images/automated-deployment/12.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/13.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/14.png\" alt=\"img\"></p>\n<h3 id=\"NodeJs-配置\"><a href=\"#NodeJs-配置\" class=\"headerlink\" title=\"NodeJs 配置\"></a>NodeJs 配置</h3><p><img src=\"/images/automated-deployment/15.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/16.png\" alt=\"img\"></p>\n<h3 id=\"添加凭据\"><a href=\"#添加凭据\" class=\"headerlink\" title=\"添加凭据\"></a>添加凭据</h3><p>添加凭据（账号密码）是为了方便后续使用</p>\n<p><img src=\"/images/automated-deployment/17.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/18.png\" alt=\"img\"></p>\n<h3 id=\"添加-github-账号密码\"><a href=\"#添加-github-账号密码\" class=\"headerlink\" title=\"添加 github 账号密码\"></a>添加 github 账号密码</h3><p><img src=\"/images/automated-deployment/19.png\" alt=\"img\"></p>\n<h2 id=\"创建-job\"><a href=\"#创建-job\" class=\"headerlink\" title=\"创建 job\"></a>创建 job</h2><h3 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a>源码管理</h3><p><img src=\"/images/automated-deployment/20.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/21.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/22.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/23.png\" alt=\"img\"></p>\n<p>应用保存后，点击立即构建</p>\n<p><img src=\"/images/automated-deployment/24.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/25.png\" alt=\"img\"></p>\n<p><code>无论是否成功，都可以在构建记录控制台查看</code></p>\n<p><img src=\"/images/automated-deployment/26.png\" alt=\"img\"></p>\n<h2 id=\"Github-WebHooks-配置\"><a href=\"#Github-WebHooks-配置\" class=\"headerlink\" title=\"Github WebHooks 配置\"></a>Github WebHooks 配置</h2><h3 id=\"webhooks-配置\"><a href=\"#webhooks-配置\" class=\"headerlink\" title=\"webhooks 配置\"></a>webhooks 配置</h3><p><img src=\"/images/automated-deployment/27.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/28.png\" alt=\"img\"></p>\n<h3 id=\"创建一个-Personal-access-tokens\"><a href=\"#创建一个-Personal-access-tokens\" class=\"headerlink\" title=\"创建一个 Personal access tokens\"></a>创建一个 Personal access tokens</h3><p><img src=\"/images/automated-deployment/29.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/30.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/31.png\" alt=\"img\"></p>\n<h3 id=\"配置-jenkins\"><a href=\"#配置-jenkins\" class=\"headerlink\" title=\"配置 jenkins\"></a>配置 jenkins</h3><p>进入一个 job</p>\n<p><img src=\"/images/automated-deployment/32.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/33.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/34.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/35.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/36.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/37.png\" alt=\"img\"></p>\n<p><img src=\"/images/automated-deployment/38.png\" alt=\"img\"><br>(图片说明：描述就是取一个名称)</p>\n<p><img src=\"/images/automated-deployment/39.png\" alt=\"img\"></p>\n<h2 id=\"Build-Steps\"><a href=\"#Build-Steps\" class=\"headerlink\" title=\"Build Steps\"></a>Build Steps</h2><p>在&#x2F;docker&#x2F;jenkins_home&#x2F;workspace&#x2F;gitlab_web,每次构建对应代码都会同步更新，由于代码没有在 git 上传 node_moudle 文件夹，所以后续需要在服务器重新安装 node_moudle<br><img src=\"/images/automated-deployment/40.png\" alt=\"img\"></p>\n<h3 id=\"Execute-NodeJS-script\"><a href=\"#Execute-NodeJS-script\" class=\"headerlink\" title=\"Execute NodeJS script\"></a>Execute NodeJS script</h3><p>这里选的 node 是上面配置的<br><img src=\"/images/automated-deployment/41.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/42.png\" alt=\"img\"></p>\n<p>点击应用后保存，然后点击立即构建，此次时间会<code>长一点</code>，此时构建会去自动安装对应的 nodejs 安装包到 jenkins 目录并配置好环境变量，注意尽量与<code>本地开发环境的node版本一致</code>，为了保持环境同步，等待构建好后再执行下一步</p>\n<p><img src=\"/images/automated-deployment/43.png\" alt=\"img\"></p>\n<p>应用保存并构建成功后，可以进入下一步</p>\n<h3 id=\"Shell-命令\"><a href=\"#Shell-命令\" class=\"headerlink\" title=\"Shell 命令\"></a>Shell 命令</h3><p><img src=\"/images/automated-deployment/44.png\" alt=\"img\"></p>\n<p>在 shell 命令这块有的执行 node -v 都报错，此时请检查环境变量是否与服务器的环境变量有差异，执行<code>echo $PATH</code><br>第一行代码一般要添加<code>#!/bin/bash</code><br>如果环境变量有问题可能要在第二行执行刷新环境变量命令</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">source ~&#x2F;.bash_profile\nsource &#x2F;etc&#x2F;profile</code></pre>\n\n<p>上面哪个有效果用哪个<br>然后执行对应命令，验证环境可用</p>\n<p><img src=\"/images/automated-deployment/45.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#!&#x2F;bin&#x2F;bash\n\nnode -v\nnpm -v\necho $PATH</code></pre>\n\n<p>保存之后回到桌面在此构建一次<br>上述命令如成功执行，进行下一步</p>\n<h3 id=\"安装node-moule并build打包\"><a href=\"#安装node-moule并build打包\" class=\"headerlink\" title=\"安装node_moule并build打包\"></a>安装node_moule并build打包</h3><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>先自己本地build一下，看看哪里有问题</p>\n</div>\n<p>修改job的shell配置</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">node -v\nnpm -v\n\nnpm i \nnpm run build:dev</code></pre>\n\n<p><img src=\"/images/automated-deployment/46.png\" alt=\"img\"></p>\n<p>此时服务器代码出现dist文件夹<br><img src=\"/images/automated-deployment/47.png\" alt=\"img\"><br>目录在&#x2F;docker&#x2F;jenkins_home&#x2F;workspace&#x2F;github_test_web</p>\n<h3 id=\"代码自动部署到对应环境项目目录\"><a href=\"#代码自动部署到对应环境项目目录\" class=\"headerlink\" title=\"代码自动部署到对应环境项目目录\"></a>代码自动部署到对应环境项目目录</h3><p>同一服务器可以用<code>cp</code>命令，可以参考linux cp命令</p>\n<p>此处为另一种方式：压缩包ssh传输，因为使用cp命令到&#x2F;docker&#x2F;html&#x2F;dev目录报错了，遂采用第二种方式</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">#!&#x2F;bin&#x2F;bash\n\nnode -v \nnpm -v \nnpm i\nnpm run build:dev\nrm -rf dist.tar\ntar -zcvf dist.tar .&#x2F;dist</code></pre>\n\n<p>构建成功后多了个dist.tar文件<br><img src=\"/images/automated-deployment/48.png\" alt=\"img\"></p>\n<h3 id=\"连接SSH服务器\"><a href=\"#连接SSH服务器\" class=\"headerlink\" title=\"连接SSH服务器\"></a>连接SSH服务器</h3><p>系统配置已经设置过ssh相关配置再操作下面，如未设置，请往上翻 <code>Publish Over SSH</code></p>\n<p><img src=\"/images/automated-deployment/49.png\" alt=\"img\"><br><img src=\"/images/automated-deployment/50.png\" alt=\"img\"></p>\n<p>字段说明：<br><code>Source files</code>：准备发送的文件，该文件是相对于这个项目的workspace目录。例如要发送<code>/docker/jenkins_home/workspace/gitlab_web/dist.tar</code>到目标目录，则设置Source files为dist.tar<br><code>Remove prefix</code>：目标文件前缀添加，例如要操作src下面的某个文件，就设置成src,本案例是跟目录，无需设置<br><code>Remote directory</code>：目标目录，本案例要复制到dev环境下的dist文件，<code>/docker/html/dev</code><br><code>Exec command</code>：最后执行的命令，可在这里进行解压，删除，复制等操作</p>\n<p>执行构建后，对应目录已经有了一个dist.tar文件</p>\n<p><img src=\"/images/automated-deployment/51.png\" alt=\"img\"></p>\n<p>这样肯定是不行的，还需要删除原有dist文件夹，解压dist.tar,再删除dist.tar,最终命令如下<br>修改刚才配置的ssh最下方有个Exec command</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">cd &#x2F;docker&#x2F;html&#x2F;dev\nrm  -rf   dist&#x2F;\ntar zxvf dist.tar\nrm dist.tar</code></pre>\n<p>至此，shell命令执行结束，目前的效果是:<br>gitlab 项目dev分支git提交后，触发jenkins自动构建，自动构建会先在服务器从gitlab的dev分支拉取最新代码，执行build打包后生成dist.tar文件，然后通过ssh将对应dist.tar发送到对应dev环境的项目目录解压dist.tar并更新对应文件，实现自动更新dev环境</p>\n","feature":true,"text":"所谓自动化部署就是当代码触发提交的时候自动部署到服务器上 前置准备工作 服务器：需要有一台可以部署代码的服务器，比如阿里云、腾讯云、GitHub Pages 等 代码仓库：需要有一个代码仓库，比如 GitHub、GitLab 等 会 linux 懂点 Ngnix 懂点 Git 买...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Academic","slug":"Academic","count":1,"path":"api/categories/Academic.json"}],"tags":[{"name":"docker","slug":"docker","count":1,"path":"api/tags/docker.json"},{"name":"nginx","slug":"nginx","count":1,"path":"api/tags/nginx.json"},{"name":"jenkins","slug":"jenkins","count":1,"path":"api/tags/jenkins.json"},{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%B0%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">买一台服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">连接服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Docker\"><span class=\"toc-text\">安装 Docker</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-docker-compose\"><span class=\"toc-text\">安装 docker-compose</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Nginx-%E9%95%9C%E5%83%8F%E5%92%8C-Jenkins-%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">安装 Nginx 镜像和 Jenkins 镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Nginx\"><span class=\"toc-text\">安装 Nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Jenkins\"><span class=\"toc-text\">安装 Jenkins</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95%E7%BC%96%E5%86%99\"><span class=\"toc-text\">配置目录编写</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Jenkins-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Jenkins 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E5%85%A8%E7%BB%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">阿里云安全组配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">防火墙配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jenkins-%E5%88%9D%E6%AC%A1%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">Jenkins 初次密码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nginx-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Nginx 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Jenkins-%E8%BF%9B%E5%85%A5%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Jenkins 进入后的配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">下载插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Publish-Over-SSH-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Publish Over SSH 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NodeJs-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">NodeJs 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%87%AD%E6%8D%AE\"><span class=\"toc-text\">添加凭据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0-github-%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">添加 github 账号密码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-job\"><span class=\"toc-text\">创建 job</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">源码管理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Github-WebHooks-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Github WebHooks 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#webhooks-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">webhooks 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Personal-access-tokens\"><span class=\"toc-text\">创建一个 Personal access tokens</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-jenkins\"><span class=\"toc-text\">配置 jenkins</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Build-Steps\"><span class=\"toc-text\">Build Steps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Execute-NodeJS-script\"><span class=\"toc-text\">Execute NodeJS script</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Shell-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Shell 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85node-moule%E5%B9%B6build%E6%89%93%E5%8C%85\"><span class=\"toc-text\">安装node_moule并build打包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E5%AF%B9%E5%BA%94%E7%8E%AF%E5%A2%83%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">代码自动部署到对应环境项目目录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5SSH%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">连接SSH服务器</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"React-Principle","uid":"6f35d21607cc4ac40e0305fd85e2df31","slug":"React-Principle","date":"2024-11-23T16:50:47.000Z","updated":"2024-11-24T15:21:08.030Z","comments":true,"path":"api/articles/React-Principle.json","keywords":null,"cover":null,"text":"React-Principle此文章旨在于剖析 React 的一些基本原理，帮助读者更好地理解 React 的工作原理。并写出属于自己的 React 代码。 前置任务搭建目录以及配置一些工具First of all！ ├── packages| ├── react| | ├── ...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[{"name":"React","slug":"React","count":1,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}