{"title":"interview-css","uid":"22d898182469a084004dd0b5135b46c1","slug":"interview-css","date":"2024-12-28T06:03:24.000Z","updated":"2024-12-28T06:42:34.880Z","comments":true,"path":"api/articles/interview-css.json","keywords":null,"cover":"/images/interview-css/cover.png","content":"<h1 id=\"一、CSS-基础\"><a href=\"#一、CSS-基础\" class=\"headerlink\" title=\"一、CSS 基础\"></a>一、CSS 基础</h1><h2 id=\"CSS-选择器及其优先级\"><a href=\"#CSS-选择器及其优先级\" class=\"headerlink\" title=\"CSS 选择器及其优先级\"></a>CSS 选择器及其优先级</h2><p>CSS 选择器用于选择 HTML 元素并应用样式。选择器的种类繁多，每种选择器都有其特定的用途和优先级。以下是常见的 CSS 选择器及其优先级的详细介绍。</p>\n<h3 id=\"1-常见的-CSS-选择器\"><a href=\"#1-常见的-CSS-选择器\" class=\"headerlink\" title=\"1. 常见的 CSS 选择器\"></a>1. 常见的 CSS 选择器</h3><ul>\n<li><p><strong>通用选择器</strong> (<code>*</code>)：</p>\n<ul>\n<li>选择所有元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">* &#123;\n  margin: 0;\n  padding: 0;\n&#125;</code></pre>\n</li>\n<li><p><strong>类型选择器</strong>（元素选择器）：</p>\n<ul>\n<li>选择特定类型的元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n  color: blue;\n&#125;</code></pre>\n</li>\n<li><p><strong>类选择器</strong> (<code>.</code>)：</p>\n<ul>\n<li>选择具有特定类的元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.my-class &#123;\n  font-size: 16px;\n&#125;</code></pre>\n</li>\n<li><p><strong>ID 选择器</strong> (<code>#</code>)：</p>\n<ul>\n<li>选择具有特定 ID 的元素。ID 在文档中应唯一。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">#my-id &#123;\n  background-color: yellow;\n&#125;</code></pre>\n</li>\n<li><p><strong>属性选择器</strong>：</p>\n<ul>\n<li>选择具有特定属性的元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">input[type&#x3D;&quot;text&quot;] &#123;\n  border: 1px solid black;\n&#125;</code></pre>\n</li>\n<li><p><strong>伪类选择器</strong>：</p>\n<ul>\n<li>选择元素的特定状态。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">a:hover &#123;\n  color: red;\n&#125;</code></pre>\n</li>\n<li><p><strong>伪元素选择器</strong>：</p>\n<ul>\n<li>选择元素的特定部分。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p::first-line &#123;\n  font-weight: bold;\n&#125;</code></pre>\n</li>\n<li><p><strong>组合选择器</strong>：</p>\n<ul>\n<li>组合多个选择器。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">div &gt; p &#123;\n  margin: 10px;\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-CSS-选择器的优先级\"><a href=\"#2-CSS-选择器的优先级\" class=\"headerlink\" title=\"2. CSS 选择器的优先级\"></a>2. CSS 选择器的优先级</h3><p>CSS 的优先级（或特指权重）决定了当多个选择器应用于同一元素时，哪个选择器的样式会生效。优先级的计算规则如下：</p>\n<ol>\n<li><p><strong>内联样式</strong>：直接在元素的 <code>style</code> 属性中定义的样式，优先级最高。</p>\n<ul>\n<li>权重：1000</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p style&#x3D;&quot;color: red;&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</code></pre>\n</li>\n<li><p><strong>ID 选择器</strong>：每个 ID 选择器的权重为 100。</p>\n<ul>\n<li>权重：100</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">#my-id &#123;\n  color: blue;\n&#125;</code></pre>\n</li>\n<li><p><strong>类选择器、伪类选择器和属性选择器</strong>：每个类、伪类或属性选择器的权重为 10。</p>\n<ul>\n<li>权重：10</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.my-class &#123;\n  color: green;\n&#125;</code></pre>\n</li>\n<li><p><strong>类型选择器</strong>（元素选择器）和伪元素选择器：每个类型选择器的权重为 1。</p>\n<ul>\n<li>权重：1</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n  color: black;\n&#125;</code></pre>\n</li>\n<li><p><strong>通用选择器</strong>（<code>*</code>）和组合选择器的权重为 0。</p>\n</li>\n</ol>\n<h3 id=\"3-优先级示例\"><a href=\"#3-优先级示例\" class=\"headerlink\" title=\"3. 优先级示例\"></a>3. 优先级示例</h3><p>假设有以下 CSS 规则：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n    color: black; &#x2F;* 权重 1 *&#x2F;\n&#125;\n\n.my-class &#123;\n    color: green; &#x2F;* 权重 10 *&#x2F;\n&#125;\n\n#my-id &#123;\n    color: blue; &#x2F;* 权重 100 *&#x2F;\n&#125;\n\np#my-id &#123;\n    color: red; &#x2F;* 权重 101 *&#x2F;\n&#125;\n\n&lt;p id&#x3D;&quot;my-id&quot; class&#x3D;&quot;my-class&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</code></pre>\n\n<p>在这个例子中，段落的最终颜色将是 <strong>红色</strong>，因为 <code>p#my-id</code> 的权重（101）高于其他选择器。</p>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li>CSS 选择器用于选择 HTML 元素并应用样式，种类繁多，包括通用选择器、类型选择器、类选择器、ID 选择器等。</li>\n<li>CSS 的优先级决定了当多个选择器应用于同一元素时，哪个选择器的样式会生效。优先级从高到低依次为内联样式、ID 选择器、类选择器、类型选择器和通用选择器。</li>\n</ul>\n<h2 id=\"CSS-中可继承与不可继承属性有哪些\"><a href=\"#CSS-中可继承与不可继承属性有哪些\" class=\"headerlink\" title=\"CSS 中可继承与不可继承属性有哪些\"></a>CSS 中可继承与不可继承属性有哪些</h2><p>在 CSS 中，某些属性是可继承的，而另一些属性则不可继承。理解这些属性的继承特性对于编写有效的样式表非常重要。以下是可继承和不可继承属性的详细分类。</p>\n<h3 id=\"1-可继承属性\"><a href=\"#1-可继承属性\" class=\"headerlink\" title=\"1. 可继承属性\"></a>1. 可继承属性</h3><p>可继承属性是指当一个元素的样式被设置时，其子元素会自动继承这些样式。常见的可继承属性包括：</p>\n<ul>\n<li><p><strong>文本相关属性</strong>：</p>\n<ul>\n<li><code>color</code>：文本颜色</li>\n<li><code>font-family</code>：字体系列</li>\n<li><code>font-size</code>：字体大小</li>\n<li><code>font-style</code>：字体样式（如斜体）</li>\n<li><code>font-variant</code>：字体变体（如小型大写字母）</li>\n<li><code>font-weight</code>：字体粗细</li>\n<li><code>line-height</code>：行高</li>\n<li><code>text-align</code>：文本对齐方式</li>\n<li><code>text-indent</code>：文本缩进</li>\n<li><code>text-transform</code>：文本转换（如大写）</li>\n<li><code>white-space</code>：空白处理</li>\n<li><code>word-spacing</code>：单词间距</li>\n</ul>\n</li>\n<li><p><strong>列表相关属性</strong>：</p>\n<ul>\n<li><code>list-style</code>：列表样式</li>\n<li><code>list-style-type</code>：列表项的样式类型</li>\n<li><code>list-style-position</code>：列表项的位置</li>\n</ul>\n</li>\n<li><p><strong>其他</strong>：</p>\n<ul>\n<li><code>visibility</code>：可见性</li>\n<li><code>quotes</code>：引用样式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-不可继承属性\"><a href=\"#2-不可继承属性\" class=\"headerlink\" title=\"2. 不可继承属性\"></a>2. 不可继承属性</h3><p>不可继承属性是指当一个元素的样式被设置时，其子元素不会自动继承这些样式。常见的不可继承属性包括：</p>\n<ul>\n<li><p><strong>盒模型相关属性</strong>：</p>\n<ul>\n<li><code>margin</code>：外边距</li>\n<li><code>padding</code>：内边距</li>\n<li><code>border</code>：边框</li>\n<li><code>width</code>：宽度</li>\n<li><code>height</code>：高度</li>\n<li><code>overflow</code>：溢出处理</li>\n</ul>\n</li>\n<li><p><strong>背景相关属性</strong>：</p>\n<ul>\n<li><code>background</code>：背景样式</li>\n<li><code>background-color</code>：背景颜色</li>\n<li><code>background-image</code>：背景图像</li>\n<li><code>background-position</code>：背景位置</li>\n<li><code>background-repeat</code>：背景重复方式</li>\n</ul>\n</li>\n<li><p><strong>定位相关属性</strong>：</p>\n<ul>\n<li><code>position</code>：定位方式</li>\n<li><code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>：定位偏移量</li>\n</ul>\n</li>\n<li><p><strong>显示相关属性</strong>：</p>\n<ul>\n<li><code>display</code>：显示类型</li>\n<li><code>visibility</code>：可见性（虽然可继承，但在某些情况下会被覆盖）</li>\n</ul>\n</li>\n<li><p><strong>其他</strong>：</p>\n<ul>\n<li><code>float</code>：浮动</li>\n<li><code>clear</code>：清除浮动</li>\n<li><code>z-index</code>：堆叠顺序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-继承的控制\"><a href=\"#3-继承的控制\" class=\"headerlink\" title=\"3. 继承的控制\"></a>3. 继承的控制</h3><p>虽然某些属性是可继承的，但开发者可以通过使用 <code>inherit</code>、<code>initial</code> 和 <code>unset</code> 关键字来控制继承行为：</p>\n<ul>\n<li><p>**<code>inherit</code>**：强制子元素继承父元素的属性值。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.child &#123;\n  color: inherit; &#x2F;* 继承父元素的颜色 *&#x2F;\n&#125;</code></pre>\n</li>\n<li><p>**<code>initial</code>**：将属性设置为其默认值。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.child &#123;\n  color: initial; &#x2F;* 设置为默认颜色 *&#x2F;\n&#125;</code></pre>\n</li>\n<li><p>**<code>unset</code>**：将属性重置为其自然值（如果是可继承的则继承，如果是不可继承的则为初始值）。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.child &#123;\n  color: unset; &#x2F;* 根据属性类型决定 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"4-总结-1\"><a href=\"#4-总结-1\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>可继承属性</strong>：如 <code>color</code>、<code>font-family</code>、<code>line-height</code> 等，子元素会自动继承父元素的样式。</li>\n<li><strong>不可继承属性</strong>：如 <code>margin</code>、<code>padding</code>、<code>border</code> 等，子元素不会自动继承父元素的样式。</li>\n<li>通过使用 <code>inherit</code>、<code>initial</code> 和 <code>unset</code> 关键字，开发者可以控制属性的继承行为。</li>\n</ul>\n<h2 id=\"display-的属性值及其作用\"><a href=\"#display-的属性值及其作用\" class=\"headerlink\" title=\"display 的属性值及其作用\"></a>display 的属性值及其作用</h2><p><code>display</code> 属性是 CSS 中一个非常重要的属性，用于控制元素的显示类型。它决定了元素在文档流中的表现方式，包括如何占据空间、如何与其他元素交互等。以下是 <code>display</code> 属性的常见值及其作用：</p>\n<h3 id=\"1-常见的-display-属性值\"><a href=\"#1-常见的-display-属性值\" class=\"headerlink\" title=\"1. 常见的 display 属性值\"></a>1. 常见的 <code>display</code> 属性值</h3><h4 id=\"1-1-block\"><a href=\"#1-1-block\" class=\"headerlink\" title=\"1.1 block\"></a>1.1 <code>block</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为块级元素。块级元素会在新行上开始，并占据整个行的宽度。</li>\n<li><strong>示例</strong>：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 等默认都是块级元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">div &#123;\n  display: block;\n&#125;</code></pre>\n\n<h4 id=\"1-2-inline\"><a href=\"#1-2-inline\" class=\"headerlink\" title=\"1.2 inline\"></a>1.2 <code>inline</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为行内元素。行内元素不会在新行上开始，只占据其内容的宽度。</li>\n<li><strong>示例</strong>：<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code> 等默认都是行内元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">span &#123;\n  display: inline;\n&#125;</code></pre>\n\n<h4 id=\"1-3-inline-block\"><a href=\"#1-3-inline-block\" class=\"headerlink\" title=\"1.3 inline-block\"></a>1.3 <code>inline-block</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为行内块级元素。元素在同一行内显示，但可以设置宽度和高度。</li>\n<li><strong>示例</strong>：适用于需要在同一行内排列的块级元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box &#123;\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n&#125;</code></pre>\n\n<h4 id=\"1-4-none\"><a href=\"#1-4-none\" class=\"headerlink\" title=\"1.4 none\"></a>1.4 <code>none</code></h4><ul>\n<li><strong>作用</strong>：完全隐藏元素，元素不会占据任何空间。</li>\n<li><strong>示例</strong>：用于动态显示和隐藏元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.hidden &#123;\n  display: none;\n&#125;</code></pre>\n\n<h4 id=\"1-5-flex\"><a href=\"#1-5-flex\" class=\"headerlink\" title=\"1.5 flex\"></a>1.5 <code>flex</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为弹性盒子容器。允许使用 Flexbox 布局模型来控制子元素的排列和对齐。</li>\n<li><strong>示例</strong>：适用于需要灵活布局的场景。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  display: flex;\n&#125;</code></pre>\n\n<h4 id=\"1-6-grid\"><a href=\"#1-6-grid\" class=\"headerlink\" title=\"1.6 grid\"></a>1.6 <code>grid</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为网格容器。允许使用 CSS Grid 布局模型来控制子元素的排列和对齐。</li>\n<li><strong>示例</strong>：适用于需要网格布局的场景。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  display: grid;\n&#125;</code></pre>\n\n<h4 id=\"1-7-table\"><a href=\"#1-7-table\" class=\"headerlink\" title=\"1.7 table\"></a>1.7 <code>table</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为表格元素，类似于 HTML 中的 <code>&lt;table&gt;</code> 元素。</li>\n<li><strong>示例</strong>：用于创建表格布局。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.table &#123;\n  display: table;\n&#125;</code></pre>\n\n<h4 id=\"1-8-table-row\"><a href=\"#1-8-table-row\" class=\"headerlink\" title=\"1.8 table-row\"></a>1.8 <code>table-row</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为表格行，类似于 HTML 中的 <code>&lt;tr&gt;</code> 元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.row &#123;\n  display: table-row;\n&#125;</code></pre>\n\n<h4 id=\"1-9-table-cell\"><a href=\"#1-9-table-cell\" class=\"headerlink\" title=\"1.9 table-cell\"></a>1.9 <code>table-cell</code></h4><ul>\n<li><strong>作用</strong>：将元素设置为表格单元格，类似于 HTML 中的 <code>&lt;td&gt;</code> 元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.cell &#123;\n  display: table-cell;\n&#125;</code></pre>\n\n<h3 id=\"2-总结\"><a href=\"#2-总结\" class=\"headerlink\" title=\"2. 总结\"></a>2. 总结</h3><ul>\n<li><code>display</code> 属性用于控制元素的显示类型，影响元素在文档流中的表现。</li>\n<li>常见的值包括 <code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>none</code>、<code>flex</code>、<code>grid</code>、<code>table</code>、<code>table-row</code> 和 <code>table-cell</code>。</li>\n<li>选择合适的 <code>display</code> 属性值可以帮助实现所需的布局和样式效果。</li>\n</ul>\n<h2 id=\"隐藏元素的方法有哪些\"><a href=\"#隐藏元素的方法有哪些\" class=\"headerlink\" title=\"隐藏元素的方法有哪些\"></a>隐藏元素的方法有哪些</h2><p>在 CSS 和 HTML 中，有多种方法可以隐藏元素。以下是一些常见的隐藏元素的方法及其适用场景：</p>\n<h3 id=\"1-使用-CSS-display-属性\"><a href=\"#1-使用-CSS-display-属性\" class=\"headerlink\" title=\"1. 使用 CSS display 属性\"></a>1. 使用 CSS <code>display</code> 属性</h3><ul>\n<li>**<code>display: none;</code>**：<ul>\n<li>完全隐藏元素，元素不会占据任何空间。</li>\n<li>适用于需要动态显示和隐藏元素的场景。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.hidden &#123;\n  display: none;\n&#125;</code></pre>\n\n<h3 id=\"2-使用-CSS-visibility-属性\"><a href=\"#2-使用-CSS-visibility-属性\" class=\"headerlink\" title=\"2. 使用 CSS visibility 属性\"></a>2. 使用 CSS <code>visibility</code> 属性</h3><ul>\n<li>**<code>visibility: hidden;</code>**：<ul>\n<li>隐藏元素，但仍然占据空间。元素在页面上不可见，但其位置仍然保留。</li>\n<li>适用于需要保留布局但不希望显示元素的场景。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.hidden &#123;\n  visibility: hidden;\n&#125;</code></pre>\n\n<h3 id=\"3-使用-CSS-opacity-属性\"><a href=\"#3-使用-CSS-opacity-属性\" class=\"headerlink\" title=\"3. 使用 CSS opacity 属性\"></a>3. 使用 CSS <code>opacity</code> 属性</h3><ul>\n<li>**<code>opacity: 0;</code>**：<ul>\n<li>将元素的透明度设置为 0，使其不可见，但仍然占据空间并可以响应事件。</li>\n<li>适用于需要保留元素的布局和交互，但希望其不可见的场景。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.hidden &#123;\n  opacity: 0;\n&#125;</code></pre>\n\n<h3 id=\"4-使用-CSS-position-属性\"><a href=\"#4-使用-CSS-position-属性\" class=\"headerlink\" title=\"4. 使用 CSS position 属性\"></a>4. 使用 CSS <code>position</code> 属性</h3><ul>\n<li>**<code>position: absolute;</code> 和 <code>left: -9999px;</code>**：<ul>\n<li>将元素移出视口，使其不可见，但仍然占据空间。</li>\n<li>适用于需要隐藏元素但仍希望其在 DOM 中存在的场景。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.hidden &#123;\n  position: absolute;\n  left: -9999px;\n&#125;</code></pre>\n\n<h3 id=\"5-使用-HTML-属性\"><a href=\"#5-使用-HTML-属性\" class=\"headerlink\" title=\"5. 使用 HTML 属性\"></a>5. 使用 HTML 属性</h3><ul>\n<li><strong><code>hidden</code> 属性</strong>：<ul>\n<li>HTML5 中的 <code>hidden</code> 属性可以直接在元素上使用，表示该元素是隐藏的。</li>\n<li>适用于需要在 HTML 中直接标记元素为隐藏的场景。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div hidden&gt;这个元素是隐藏的&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"6-使用-JavaScript\"><a href=\"#6-使用-JavaScript\" class=\"headerlink\" title=\"6. 使用 JavaScript\"></a>6. 使用 JavaScript</h3><ul>\n<li><strong>通过 JavaScript 修改样式</strong>：<ul>\n<li>可以使用 JavaScript 动态修改元素的样式来隐藏元素。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document.getElementById(&quot;myElement&quot;).style.display &#x3D; &quot;none&quot;;</code></pre>\n\n<ul>\n<li><strong>通过 JavaScript 设置 <code>hidden</code> 属性</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document.getElementById(&quot;myElement&quot;).hidden &#x3D; true;</code></pre>\n\n<h3 id=\"7-使用媒体查询\"><a href=\"#7-使用媒体查询\" class=\"headerlink\" title=\"7. 使用媒体查询\"></a>7. 使用媒体查询</h3><ul>\n<li><strong>在响应式设计中使用媒体查询</strong>：<ul>\n<li>根据视口大小隐藏元素，适用于响应式布局。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@media (max-width: 600px) &#123;\n  .hidden &#123;\n    display: none;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"8-总结\"><a href=\"#8-总结\" class=\"headerlink\" title=\"8. 总结\"></a>8. 总结</h3><ul>\n<li>**<code>display: none;</code>**：完全隐藏元素，不占据空间。</li>\n<li>**<code>visibility: hidden;</code>**：隐藏元素，仍占据空间。</li>\n<li>**<code>opacity: 0;</code>**：元素透明，但仍占据空间。</li>\n<li>**<code>position: absolute; left: -9999px;</code>**：将元素移出视口。</li>\n<li><strong><code>hidden</code> 属性</strong>：HTML5 中的隐藏标记。</li>\n<li><strong>JavaScript</strong>：动态修改样式或属性。</li>\n<li><strong>媒体查询</strong>：根据视口大小隐藏元素。</li>\n</ul>\n<h2 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和@import 的区别\"></a>link 和@import 的区别</h2><p>在 CSS 中，<code>&lt;link&gt;</code> 标签和 <code>@import</code> 语句都是用于引入外部样式表的方式，但它们之间有一些重要的区别。以下是对这两者的详细比较：</p>\n<h3 id=\"1-lt-link-gt-标签\"><a href=\"#1-lt-link-gt-标签\" class=\"headerlink\" title=\"1. &lt;link&gt; 标签\"></a>1. <code>&lt;link&gt;</code> 标签</h3><ul>\n<li><p><strong>用法</strong>：</p>\n<ul>\n<li><code>&lt;link&gt;</code> 标签用于在 HTML 文档的 <code>&lt;head&gt;</code> 部分引入外部 CSS 文件。</li>\n<li>语法示例：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;styles.css&quot; &#x2F;&gt;</code></pre></li>\n</ul>\n</li>\n<li><p><strong>加载方式</strong>：</p>\n<ul>\n<li><code>&lt;link&gt;</code> 标签在页面加载时并行加载样式表，这意味着它不会阻塞页面的渲染。</li>\n<li>浏览器会在解析 HTML 时立即请求和加载样式表。</li>\n</ul>\n</li>\n<li><p><strong>优先级</strong>：</p>\n<ul>\n<li><code>&lt;link&gt;</code> 标签引入的样式表的优先级较高，尤其是在多个样式表存在时。</li>\n</ul>\n</li>\n<li><p><strong>适用场景</strong>：</p>\n<ul>\n<li>适用于在 HTML 文档中引入多个外部样式表，通常是推荐的方式。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-import-语句\"><a href=\"#2-import-语句\" class=\"headerlink\" title=\"2. @import 语句\"></a>2. <code>@import</code> 语句</h3><ul>\n<li><p><strong>用法</strong>：</p>\n<ul>\n<li><code>@import</code> 语句用于在 CSS 文件中引入其他 CSS 文件。</li>\n<li>语法示例：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@import url(&quot;styles.css&quot;);</code></pre></li>\n</ul>\n</li>\n<li><p><strong>加载方式</strong>：</p>\n<ul>\n<li><code>@import</code> 语句会在 CSS 文件被解析时加载样式表，这意味着它会阻塞页面的渲染，直到所有的样式表都被加载。</li>\n<li>这可能导致页面加载速度变慢，尤其是在有多个 <code>@import</code> 语句时。</li>\n</ul>\n</li>\n<li><p><strong>优先级</strong>：</p>\n<ul>\n<li><code>@import</code> 引入的样式表的优先级较低，通常在同一 CSS 文件中定义的样式优先级更高。</li>\n</ul>\n</li>\n<li><p><strong>适用场景</strong>：</p>\n<ul>\n<li>适用于在 CSS 文件中组织和管理样式，尤其是在需要将样式分割成多个文件时。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-主要区别总结\"><a href=\"#3-主要区别总结\" class=\"headerlink\" title=\"3. 主要区别总结\"></a>3. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th><code>&lt;link&gt;</code> 标签</th>\n<th><code>@import</code> 语句</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>位置</strong></td>\n<td>在 HTML 文档的 <code>&lt;head&gt;</code> 部分</td>\n<td>在 CSS 文件中</td>\n</tr>\n<tr>\n<td><strong>加载方式</strong></td>\n<td>并行加载，不阻塞渲染</td>\n<td>顺序加载，阻塞渲染</td>\n</tr>\n<tr>\n<td><strong>优先级</strong></td>\n<td>较高</td>\n<td>较低</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>引入多个外部样式表</td>\n<td>在 CSS 文件中组织样式</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-2\"><a href=\"#4-总结-2\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li>使用 <code>&lt;link&gt;</code> 标签是引入外部样式表的推荐方式，因为它可以并行加载样式表，提升页面加载性能。</li>\n<li><code>@import</code> 语句适合在 CSS 文件中组织样式，但由于其阻塞加载的特性，可能会影响页面的渲染速度。</li>\n</ul>\n<h2 id=\"transition-和-animation-的区别\"><a href=\"#transition-和-animation-的区别\" class=\"headerlink\" title=\"transition 和 animation 的区别\"></a>transition 和 animation 的区别</h2><p>在 CSS 中，<code>transition</code> 和 <code>animation</code> 都用于创建元素的动态效果，但它们之间有一些重要的区别。以下是对这两者的详细比较：</p>\n<h3 id=\"1-transition\"><a href=\"#1-transition\" class=\"headerlink\" title=\"1. transition\"></a>1. <code>transition</code></h3><ul>\n<li><p><strong>定义</strong>：<code>transition</code> 是一种用于在元素的状态变化时平滑过渡的效果。它允许你定义在特定属性变化时的过渡效果。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<ul>\n<li><p>需要在元素的样式中定义 <code>transition</code> 属性，并指定要过渡的属性、持续时间、延迟等。</p>\n</li>\n<li><p>语法示例：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box &#123;\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  transition: background-color 0.5s ease, width 0.5s ease;\n&#125;\n\n.box:hover &#123;\n  background-color: red;\n  width: 200px;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p><strong>触发方式</strong>：</p>\n<ul>\n<li><code>transition</code> 通常在元素的状态变化时触发，例如通过伪类（如 <code>:hover</code>、<code>:focus</code>）或 JavaScript 事件。</li>\n</ul>\n</li>\n<li><p><strong>控制</strong>：</p>\n<ul>\n<li>过渡效果是一次性的，通常只在状态变化时发生。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-animation\"><a href=\"#2-animation\" class=\"headerlink\" title=\"2. animation\"></a>2. <code>animation</code></h3><ul>\n<li><p><strong>定义</strong>：<code>animation</code> 是一种更复杂的效果，允许你创建多帧动画。它可以在元素的生命周期内持续运行，并且可以定义多个关键帧。</p>\n</li>\n<li><p><strong>用法</strong>：</p>\n<ul>\n<li><p>需要定义 <code>@keyframes</code> 规则来描述动画的关键帧，然后在元素的样式中使用 <code>animation</code> 属性来应用动画。</p>\n</li>\n<li><p>语法示例：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@keyframes example &#123;\n  0% &#123;\n    background-color: blue;\n    width: 100px;\n  &#125;\n  50% &#123;\n    background-color: red;\n    width: 200px;\n  &#125;\n  100% &#123;\n    background-color: blue;\n    width: 100px;\n  &#125;\n&#125;\n\n.box &#123;\n  animation: example 2s infinite;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p><strong>触发方式</strong>：</p>\n<ul>\n<li><code>animation</code> 可以在页面加载时自动开始，也可以通过 JavaScript 控制开始和停止。</li>\n</ul>\n</li>\n<li><p><strong>控制</strong>：</p>\n<ul>\n<li>动画可以循环、反向播放、延迟等，提供更丰富的控制选项。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-主要区别总结-1\"><a href=\"#3-主要区别总结-1\" class=\"headerlink\" title=\"3. 主要区别总结\"></a>3. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th><code>transition</code></th>\n<th><code>animation</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>定义</strong></td>\n<td>用于状态变化的平滑过渡</td>\n<td>用于创建多帧动画</td>\n</tr>\n<tr>\n<td><strong>用法</strong></td>\n<td>通过 <code>transition</code> 属性定义</td>\n<td>通过 <code>@keyframes</code> 和 <code>animation</code> 属性定义</td>\n</tr>\n<tr>\n<td><strong>触发方式</strong></td>\n<td>状态变化时触发（如 <code>:hover</code>）</td>\n<td>可以自动开始或通过 JavaScript 控制</td>\n</tr>\n<tr>\n<td><strong>控制</strong></td>\n<td>一次性过渡</td>\n<td>可以循环、反向播放、延迟等</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-3\"><a href=\"#4-总结-3\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong><code>transition</code></strong> 适合用于简单的状态变化效果，提供平滑的过渡。</li>\n<li><strong><code>animation</code></strong> 适合用于更复杂的动画效果，允许定义多个关键帧和丰富的控制选项。</li>\n</ul>\n<h2 id=\"伪元素和伪类的区别和作用？\"><a href=\"#伪元素和伪类的区别和作用？\" class=\"headerlink\" title=\"伪元素和伪类的区别和作用？\"></a>伪元素和伪类的区别和作用？</h2><p>在 CSS 中，伪元素和伪类都是用于选择和样式化元素的特殊选择器，但它们的用途和语法有所不同。以下是对伪元素和伪类的详细比较，包括它们的定义、作用和主要区别。</p>\n<h3 id=\"1-伪类（Pseudo-class）\"><a href=\"#1-伪类（Pseudo-class）\" class=\"headerlink\" title=\"1. 伪类（Pseudo-class）\"></a>1. 伪类（Pseudo-class）</h3><ul>\n<li><p><strong>定义</strong>：伪类是用于选择处于特定状态的元素的选择器。它们通常用于表示元素的交互状态或特定条件下的样式。</p>\n</li>\n<li><p><strong>语法</strong>：伪类以冒号（<code>:</code>）开头，后面跟着伪类的名称。</p>\n</li>\n<li><p><strong>常见的伪类</strong>：</p>\n<ul>\n<li><code>:hover</code>：当鼠标悬停在元素上时应用样式。</li>\n<li><code>:focus</code>：当元素获得焦点时应用样式（如输入框）。</li>\n<li><code>:active</code>：当元素被激活（如被点击）时应用样式。</li>\n<li><code>:nth-child(n)</code>：选择父元素的第 n 个子元素。</li>\n<li><code>:first-child</code>：选择父元素的第一个子元素。</li>\n<li><code>:last-child</code>：选择父元素的最后一个子元素。</li>\n</ul>\n</li>\n<li><p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">a:hover &#123;\n  color: red; &#x2F;* 当鼠标悬停在链接上时，链接变为红色 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"2-伪元素（Pseudo-element）\"><a href=\"#2-伪元素（Pseudo-element）\" class=\"headerlink\" title=\"2. 伪元素（Pseudo-element）\"></a>2. 伪元素（Pseudo-element）</h3><ul>\n<li><p><strong>定义</strong>：伪元素用于选择元素的特定部分或创建虚拟元素。它们允许开发者对元素的某些部分进行样式化，而不需要在 HTML 中添加额外的元素。</p>\n</li>\n<li><p><strong>语法</strong>：伪元素以双冒号（<code>::</code>）开头，后面跟着伪元素的名称（在 CSS2 中使用单冒号 <code>:</code>，但在 CSS3 中推荐使用双冒号）。</p>\n</li>\n<li><p><strong>常见的伪元素</strong>：</p>\n<ul>\n<li><code>::before</code>：在元素的内容之前插入内容。</li>\n<li><code>::after</code>：在元素的内容之后插入内容。</li>\n<li><code>::first-line</code>：选择元素的第一行文本。</li>\n<li><code>::first-letter</code>：选择元素的第一个字母。</li>\n</ul>\n</li>\n<li><p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p::first-line &#123;\n  font-weight: bold; &#x2F;* 将段落的第一行文本加粗 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"3-主要区别总结-2\"><a href=\"#3-主要区别总结-2\" class=\"headerlink\" title=\"3. 主要区别总结\"></a>3. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>伪类（Pseudo-class）</th>\n<th>伪元素（Pseudo-element）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>定义</strong></td>\n<td>选择处于特定状态的元素</td>\n<td>选择元素的特定部分或创建虚拟元素</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td>以单冒号 <code>:</code> 开头</td>\n<td>以双冒号 <code>::</code> 开头</td>\n</tr>\n<tr>\n<td><strong>作用</strong></td>\n<td>用于表示元素的交互状态</td>\n<td>用于样式化元素的特定部分</td>\n</tr>\n<tr>\n<td><strong>示例</strong></td>\n<td><code>a:hover</code></td>\n<td><code>p::first-line</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-4\"><a href=\"#4-总结-4\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>伪类</strong> 主要用于选择元素在特定状态下的样式，适合处理用户交互。</li>\n<li><strong>伪元素</strong> 主要用于选择元素的特定部分或创建虚拟内容，适合对元素的结构进行样式化。</li>\n</ul>\n<h2 id=\"对-requestAnimationframe-的理解\"><a href=\"#对-requestAnimationframe-的理解\" class=\"headerlink\" title=\"对 requestAnimationframe 的理解\"></a>对 requestAnimationframe 的理解</h2><p><code>requestAnimationFrame</code> 是一个用于创建高效动画的 JavaScript 方法。它提供了一种在浏览器的下一个重绘周期中执行动画的机制，能够提高动画的性能和流畅度。以下是对 <code>requestAnimationFrame</code> 的详细理解，包括其工作原理、优点和使用示例。</p>\n<h3 id=\"1-工作原理\"><a href=\"#1-工作原理\" class=\"headerlink\" title=\"1. 工作原理\"></a>1. 工作原理</h3><ul>\n<li><strong>浏览器优化</strong>：<code>requestAnimationFrame</code> 告诉浏览器你希望在下一个重绘周期执行一个动画。浏览器会在适当的时间调用指定的回调函数，通常是在浏览器准备好重绘时。</li>\n<li><strong>帧率控制</strong>：使用 <code>requestAnimationFrame</code> 可以使动画与浏览器的刷新率同步，通常为 60fps（每秒 60 帧），从而避免了由于 JavaScript 的执行时间不一致而导致的动画卡顿。</li>\n<li><strong>自动暂停</strong>：当用户切换到其他标签页时，<code>requestAnimationFrame</code> 会自动暂停，避免了不必要的计算和资源浪费。</li>\n</ul>\n<h3 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h3><ul>\n<li><strong>性能优化</strong>：由于 <code>requestAnimationFrame</code> 与浏览器的重绘周期同步，能够有效减少 CPU 和 GPU 的负担，提高动画的性能。</li>\n<li><strong>流畅度</strong>：通过与浏览器的刷新率同步，动画效果更加平滑，避免了使用 <code>setTimeout</code> 或 <code>setInterval</code> 时可能出现的抖动和不一致。</li>\n<li><strong>节省资源</strong>：在不需要更新动画时（如用户切换标签页），<code>requestAnimationFrame</code> 会自动停止调用，从而节省资源。</li>\n</ul>\n<h3 id=\"3-使用示例\"><a href=\"#3-使用示例\" class=\"headerlink\" title=\"3. 使用示例\"></a>3. 使用示例</h3><p>以下是一个简单的使用 <code>requestAnimationFrame</code> 创建动画的示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;requestAnimationFrame 示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      #box &#123;\n        width: 100px;\n        height: 100px;\n        background-color: blue;\n        position: absolute;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;script&gt;\n      const box &#x3D; document.getElementById(&quot;box&quot;);\n      let position &#x3D; 0;\n\n      function animate() &#123;\n        position +&#x3D; 2; &#x2F;&#x2F; 每次移动 2 像素\n        box.style.transform &#x3D; &#96;translateX($&#123;position&#125;px)&#96;;\n\n        &#x2F;&#x2F; 当 box 移动到屏幕外时重置位置\n        if (position &lt; window.innerWidth) &#123;\n          requestAnimationFrame(animate); &#x2F;&#x2F; 请求下一帧\n        &#125; else &#123;\n          position &#x3D; 0; &#x2F;&#x2F; 重置位置\n          requestAnimationFrame(animate); &#x2F;&#x2F; 重新开始动画\n        &#125;\n      &#125;\n\n      requestAnimationFrame(animate); &#x2F;&#x2F; 启动动画\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-5\"><a href=\"#4-总结-5\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><code>requestAnimationFrame</code> 是一个用于创建高效动画的 JavaScript 方法，能够与浏览器的重绘周期同步，提供流畅的动画效果。</li>\n<li>它的优点包括性能优化、流畅度和资源节省，适合用于需要频繁更新的动画场景。</li>\n<li>使用 <code>requestAnimationFrame</code> 可以显著提高动画的表现，避免使用传统的定时器方法（如 <code>setTimeout</code> 和 <code>setInterval</code>）时可能出现的问题。</li>\n</ul>\n<h2 id=\"对盒模型的理解\"><a href=\"#对盒模型的理解\" class=\"headerlink\" title=\"对盒模型的理解\"></a>对盒模型的理解</h2><p>在 CSS 中，<strong>盒模型</strong>（Box Model）是一个重要的概念，用于描述网页元素的布局和尺寸。每个 HTML 元素都被视为一个矩形盒子，盒模型定义了这个盒子的内容、内边距、边框和外边距。理解盒模型对于网页设计和布局至关重要。以下是对盒模型的详细理解：</p>\n<h3 id=\"1-盒模型的组成部分\"><a href=\"#1-盒模型的组成部分\" class=\"headerlink\" title=\"1. 盒模型的组成部分\"></a>1. 盒模型的组成部分</h3><p>盒模型主要由以下四个部分组成：</p>\n<ol>\n<li><p><strong>内容（Content）</strong>：</p>\n<ul>\n<li>这是盒子的实际内容区域，包含文本、图像等。</li>\n<li>内容的大小由 <code>width</code> 和 <code>height</code> 属性控制。</li>\n</ul>\n</li>\n<li><p><strong>内边距（Padding）</strong>：</p>\n<ul>\n<li>内边距是内容与边框之间的空间，用于增加内容的可读性。</li>\n<li>内边距的大小可以通过 <code>padding</code> 属性设置，可以单独设置四个方向的内边距（<code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code>）。</li>\n</ul>\n</li>\n<li><p><strong>边框（Border）</strong>：</p>\n<ul>\n<li>边框是围绕内容和内边距的线条，可以设置边框的宽度、样式和颜色。</li>\n<li>边框的大小可以通过 <code>border</code> 属性设置，可以单独设置四个方向的边框（<code>border-top</code>、<code>border-right</code>、<code>border-bottom</code>、<code>border-left</code>）。</li>\n</ul>\n</li>\n<li><p><strong>外边距（Margin）</strong>：</p>\n<ul>\n<li>外边距是盒子与其他元素之间的空间，用于控制元素之间的距离。</li>\n<li>外边距的大小可以通过 <code>margin</code> 属性设置，可以单独设置四个方向的外边距（<code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code>）。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-盒模型的示意图\"><a href=\"#2-盒模型的示意图\" class=\"headerlink\" title=\"2. 盒模型的示意图\"></a>2. 盒模型的示意图</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">+---------------------------+\n|         Margin            |  &lt;-- 外边距\n|  +---------------------+  |\n|  |      Border         |  |  &lt;-- 边框\n|  |  +--------------+   |  |\n|  |  |   Padding    |   |  |  &lt;-- 内边距\n|  |  |  +--------+  |   |  |\n|  |  |  | Content |  |   |  |\n|  |  |  +--------+  |   |  |\n|  |  +--------------+   |  |\n|  +---------------------+  |\n+---------------------------+</code></pre>\n\n<h3 id=\"3-盒模型的计算\"><a href=\"#3-盒模型的计算\" class=\"headerlink\" title=\"3. 盒模型的计算\"></a>3. 盒模型的计算</h3><p>在 CSS 中，盒模型的计算方式会影响元素的实际尺寸。默认情况下，盒模型的计算方式是 <strong>标准盒模型</strong>（content-box），即 <code>width</code> 和 <code>height</code> 只包括内容区域，不包括内边距、边框和外边距。</p>\n<ul>\n<li><p><strong>标准盒模型</strong>（content-box）：</p>\n<ul>\n<li><code>width</code> 和 <code>height</code> 只包括内容区域。</li>\n<li>计算公式：<pre class=\"line-numbers language-none\"><code class=\"language-none\">总宽度 &#x3D; width + padding-left + padding-right + border-left + border-right + margin-left + margin-right\n总高度 &#x3D; height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom</code></pre></li>\n</ul>\n</li>\n<li><p><strong>替代盒模型</strong>（border-box）：</p>\n<ul>\n<li>使用 <code>box-sizing: border-box;</code> 可以改变盒模型的计算方式，使 <code>width</code> 和 <code>height</code> 包括内边距和边框。</li>\n<li>计算公式：<pre class=\"line-numbers language-none\"><code class=\"language-none\">总宽度 &#x3D; width (包括内边距和边框)\n总高度 &#x3D; height (包括内边距和边框)</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-使用示例\"><a href=\"#4-使用示例\" class=\"headerlink\" title=\"4. 使用示例\"></a>4. 使用示例</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box &#123;\n  width: 200px; &#x2F;* 内容宽度 *&#x2F;\n  height: 100px; &#x2F;* 内容高度 *&#x2F;\n  padding: 20px; &#x2F;* 内边距 *&#x2F;\n  border: 5px solid black; &#x2F;* 边框 *&#x2F;\n  margin: 10px; &#x2F;* 外边距 *&#x2F;\n  box-sizing: border-box; &#x2F;* 使用替代盒模型 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>盒模型</strong> 是 CSS 中描述元素布局和尺寸的基本概念，由内容、内边距、边框和外边距组成。</li>\n<li>理解盒模型的组成部分和计算方式对于网页设计和布局至关重要，能够帮助开发者更好地控制元素的显示和间距。</li>\n<li>使用 <code>box-sizing</code> 属性可以改变盒模型的计算方式，提供更灵活的布局控制。</li>\n</ul>\n<h2 id=\"为什么有时候⽤-translate-来改变位置⽽不是定位？\"><a href=\"#为什么有时候⽤-translate-来改变位置⽽不是定位？\" class=\"headerlink\" title=\"为什么有时候⽤ translate 来改变位置⽽不是定位？\"></a>为什么有时候⽤ translate 来改变位置⽽不是定位？</h2><p>在 CSS 中，使用 <code>translate</code> 来改变元素的位置与使用定位（如 <code>position: absolute</code>、<code>position: relative</code> 等）有不同的效果和优点。以下是一些原因，说明为什么在某些情况下选择使用 <code>translate</code> 而不是传统的定位方法：</p>\n<h3 id=\"1-性能优化\"><a href=\"#1-性能优化\" class=\"headerlink\" title=\"1. 性能优化\"></a>1. 性能优化</h3><ul>\n<li><strong>GPU 加速</strong>：使用 <code>transform: translate()</code> 可以利用 GPU 加速，特别是在动画和过渡效果中。浏览器通常会将使用 <code>transform</code> 的元素放入合成层，从而提高渲染性能，减少卡顿。</li>\n<li><strong>流畅的动画</strong>：<code>translate</code> 使得动画更加流畅，因为它不会影响文档流，浏览器可以更高效地处理这些变换。</li>\n</ul>\n<h3 id=\"2-不影响文档流\"><a href=\"#2-不影响文档流\" class=\"headerlink\" title=\"2. 不影响文档流\"></a>2. 不影响文档流</h3><ul>\n<li><strong>保持布局</strong>：使用 <code>translate</code> 不会改变元素在文档流中的位置。元素仍然占据原来的空间，这意味着其他元素不会受到影响。这在需要保持布局一致性时非常有用。</li>\n<li><strong>避免重排</strong>：使用 <code>translate</code> 不会导致浏览器重排（reflow），而使用定位可能会导致重排，影响性能。</li>\n</ul>\n<h3 id=\"3-简化布局\"><a href=\"#3-简化布局\" class=\"headerlink\" title=\"3. 简化布局\"></a>3. 简化布局</h3><ul>\n<li><strong>简化定位</strong>：在某些情况下，使用 <code>translate</code> 可以简化布局。例如，当需要在某个元素的基础上进行小幅度移动时，使用 <code>translate</code> 可以避免复杂的定位计算。</li>\n<li><strong>响应式设计</strong>：在响应式设计中，使用 <code>translate</code> 可以更容易地调整元素的位置，而不需要重新计算其绝对或相对位置。</li>\n</ul>\n<h3 id=\"4-组合变换\"><a href=\"#4-组合变换\" class=\"headerlink\" title=\"4. 组合变换\"></a>4. 组合变换</h3><ul>\n<li><strong>多重变换</strong>：<code>transform</code> 属性允许组合多种变换（如旋转、缩放、倾斜等），这使得在动画和交互效果中更灵活。例如，可以同时使用 <code>translate</code> 和 <code>rotate</code> 来实现复杂的效果。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: translate(50px, 100px) rotate(45deg);\n&#125;</code></pre>\n\n<h3 id=\"5-适用场景\"><a href=\"#5-适用场景\" class=\"headerlink\" title=\"5. 适用场景\"></a>5. 适用场景</h3><ul>\n<li><strong>动画和过渡</strong>：在需要平滑过渡或动画效果时，<code>translate</code> 是一个理想的选择。</li>\n<li><strong>悬浮效果</strong>：在悬浮效果中，使用 <code>translate</code> 可以轻松实现元素的移动，而不影响其他元素的布局。</li>\n</ul>\n<h3 id=\"6-示例\"><a href=\"#6-示例\" class=\"headerlink\" title=\"6. 示例\"></a>6. 示例</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box &#123;\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n  position: relative; &#x2F;* 仍然可以使用定位 *&#x2F;\n  transition: transform 0.3s; &#x2F;* 添加过渡效果 *&#x2F;\n&#125;\n\n.box:hover &#123;\n  transform: translate(20px, 20px); &#x2F;* 鼠标悬停时移动 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><ul>\n<li>使用 <code>translate</code> 来改变元素的位置在性能、布局和动画效果上具有明显的优势。</li>\n<li><code>translate</code> 不会影响文档流，避免了重排，适合用于动画和响应式设计。</li>\n<li>在需要保持元素原始位置的同时进行小幅度移动时，<code>translate</code> 是一个理想的选择。</li>\n</ul>\n<h2 id=\"li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\"><a href=\"#li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\" class=\"headerlink\" title=\"li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\"></a>li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</h2><p>在 HTML 中，<code>&lt;li&gt;</code>（列表项）之间的空白间隔通常是由以下几个原因引起的：</p>\n<h3 id=\"1-默认的-margin-和-padding\"><a href=\"#1-默认的-margin-和-padding\" class=\"headerlink\" title=\"1. 默认的 margin 和 padding\"></a>1. 默认的 <code>margin</code> 和 <code>padding</code></h3><ul>\n<li><strong>浏览器的默认样式</strong>：大多数浏览器对 <code>&lt;ul&gt;</code> 和 <code>&lt;ol&gt;</code> 列表及其子元素 <code>&lt;li&gt;</code> 应用了一些默认的 <code>margin</code> 和 <code>padding</code>。这可能导致列表项之间出现额外的空白。</li>\n</ul>\n<h3 id=\"2-行内元素的空白\"><a href=\"#2-行内元素的空白\" class=\"headerlink\" title=\"2. 行内元素的空白\"></a>2. 行内元素的空白</h3><ul>\n<li><strong>行内元素的空白</strong>：如果 <code>&lt;li&gt;</code> 元素的内容是行内元素（如文本或 <code>&lt;span&gt;</code>），在 HTML 源代码中，<code>&lt;li&gt;</code> 标签之间的空格、换行或其他空白字符会被浏览器渲染为空白。这是因为 HTML 中的空白字符（如空格、换行）在渲染时会被视为实际的空白。</li>\n</ul>\n<h3 id=\"3-解决方法\"><a href=\"#3-解决方法\" class=\"headerlink\" title=\"3. 解决方法\"></a>3. 解决方法</h3><p>以下是几种常见的解决方法，可以消除或减少 <code>&lt;li&gt;</code> 之间的空白间隔：</p>\n<h4 id=\"1-使用-CSS-重置-margin-和-padding\"><a href=\"#1-使用-CSS-重置-margin-和-padding\" class=\"headerlink\" title=\"1. 使用 CSS 重置 margin 和 padding\"></a>1. 使用 CSS 重置 <code>margin</code> 和 <code>padding</code></h4><p>可以通过 CSS 重置 <code>&lt;ul&gt;</code> 和 <code>&lt;ol&gt;</code> 的 <code>margin</code> 和 <code>padding</code>，以及 <code>&lt;li&gt;</code> 的 <code>margin</code> 和 <code>padding</code>：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">ul,\nol &#123;\n  margin: 0; &#x2F;* 重置外边距 *&#x2F;\n  padding: 0; &#x2F;* 重置内边距 *&#x2F;\n&#125;\n\nli &#123;\n  margin: 0; &#x2F;* 重置外边距 *&#x2F;\n  padding: 0; &#x2F;* 重置内边距 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-使用-display-flex-或-display-grid\"><a href=\"#2-使用-display-flex-或-display-grid\" class=\"headerlink\" title=\"2. 使用 display: flex 或 display: grid\"></a>2. 使用 <code>display: flex</code> 或 <code>display: grid</code></h4><p>使用 Flexbox 或 Grid 布局可以更好地控制列表项之间的间距：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">ul &#123;\n  display: flex; &#x2F;* 或 display: grid; *&#x2F;\n  list-style-type: none; &#x2F;* 去掉默认的列表样式 *&#x2F;\n  padding: 0; &#x2F;* 重置内边距 *&#x2F;\n&#125;\n\nli &#123;\n  margin: 0; &#x2F;* 重置外边距 *&#x2F;\n  padding: 0; &#x2F;* 重置内边距 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"3-移除-HTML-中的空白字符\"><a href=\"#3-移除-HTML-中的空白字符\" class=\"headerlink\" title=\"3. 移除 HTML 中的空白字符\"></a>3. 移除 HTML 中的空白字符</h4><p>在 HTML 中，确保 <code>&lt;li&gt;</code> 标签之间没有多余的空格或换行：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;ul&gt;\n  &lt;li&gt;项 1&lt;&#x2F;li&gt;\n  &lt;li&gt;项 2&lt;&#x2F;li&gt;\n  &lt;li&gt;项 3&lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;</code></pre>\n\n<h4 id=\"4-使用-font-size-0（仅适用于特定情况）\"><a href=\"#4-使用-font-size-0（仅适用于特定情况）\" class=\"headerlink\" title=\"4. 使用 font-size: 0（仅适用于特定情况）\"></a>4. 使用 <code>font-size: 0</code>（仅适用于特定情况）</h4><p>在某些情况下，可以将父元素的 <code>font-size</code> 设置为 <code>0</code>，然后为子元素恢复字体大小。这可以消除行内元素之间的空白，但要小心使用，因为这会影响所有子元素的字体大小。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">ul &#123;\n  font-size: 0; &#x2F;* 消除空白 *&#x2F;\n&#125;\n\nli &#123;\n  font-size: 16px; &#x2F;* 恢复字体大小 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个完整的示例，展示了如何消除 <code>&lt;li&gt;</code> 之间的空白间隔：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;消除空白间隔示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      ul &#123;\n        margin: 0;\n        padding: 0;\n        list-style-type: none; &#x2F;* 去掉默认的列表样式 *&#x2F;\n      &#125;\n\n      li &#123;\n        margin: 0;\n        padding: 10px; &#x2F;* 添加内边距 *&#x2F;\n        background-color: lightblue; &#x2F;* 背景颜色 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;ul&gt;\n      &lt;li&gt;项 1&lt;&#x2F;li&gt;\n      &lt;li&gt;项 2&lt;&#x2F;li&gt;\n      &lt;li&gt;项 3&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-1\"><a href=\"#5-总结-1\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><code>&lt;li&gt;</code> 之间的空白间隔通常是由浏览器的默认样式、行内元素的空白字符引起的。</li>\n<li>可以通过重置 <code>margin</code> 和 <code>padding</code>、使用 Flexbox 或 Grid 布局、移除 HTML 中的空白字符等方法来解决这个问题。</li>\n</ul>\n<h2 id=\"CSS3-中有哪些新特性\"><a href=\"#CSS3-中有哪些新特性\" class=\"headerlink\" title=\"CSS3 中有哪些新特性\"></a>CSS3 中有哪些新特性</h2><p>在 CSS3 中，引入了许多新特性和功能，极大地增强了网页设计的灵活性和表现力。以下是一些主要的新特性：</p>\n<h3 id=\"1-选择器\"><a href=\"#1-选择器\" class=\"headerlink\" title=\"1. 选择器\"></a>1. 选择器</h3><ul>\n<li><strong>新增选择器</strong>：<ul>\n<li><code>:nth-child(n)</code>：选择父元素的第 n 个子元素。</li>\n<li><code>:nth-of-type(n)</code>：选择父元素中指定类型的第 n 个子元素。</li>\n<li><code>:last-child</code>、<code>:first-child</code>、<code>:first-of-type</code>、<code>:last-of-type</code>：选择特定位置的子元素。</li>\n<li><code>:not(selector)</code>：选择不匹配指定选择器的元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-盒模型\"><a href=\"#2-盒模型\" class=\"headerlink\" title=\"2. 盒模型\"></a>2. 盒模型</h3><ul>\n<li>**<code>box-sizing</code>**：<ul>\n<li>允许开发者控制盒模型的计算方式，使用 <code>box-sizing: border-box;</code> 可以使 <code>width</code> 和 <code>height</code> 包括内边距和边框。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-背景和边框\"><a href=\"#3-背景和边框\" class=\"headerlink\" title=\"3. 背景和边框\"></a>3. 背景和边框</h3><ul>\n<li><p><strong>多重背景</strong>：</p>\n<ul>\n<li>支持为元素设置多个背景图像。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">background-image: url(&quot;image1.png&quot;), url(&quot;image2.png&quot;);</code></pre>\n</li>\n<li><p><strong>圆角边框</strong>：</p>\n<ul>\n<li>使用 <code>border-radius</code> 属性可以轻松创建圆角效果。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">border-radius: 10px;</code></pre>\n</li>\n<li><p><strong>阴影效果</strong>：</p>\n<ul>\n<li>使用 <code>box-shadow</code> 和 <code>text-shadow</code> 属性可以为元素和文本添加阴影效果。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\ntext-shadow: 1px 1px 2px #000;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-文本效果\"><a href=\"#4-文本效果\" class=\"headerlink\" title=\"4. 文本效果\"></a>4. 文本效果</h3><ul>\n<li><p><strong>文本溢出</strong>：</p>\n<ul>\n<li>使用 <code>text-overflow</code> 属性可以控制文本溢出时的显示方式。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">text-overflow: ellipsis; &#x2F;* 显示省略号 *&#x2F;</code></pre>\n</li>\n<li><p><strong>字体特性</strong>：</p>\n<ul>\n<li>引入了 <code>@font-face</code> 规则，允许使用自定义字体。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@font-face &#123;\n  font-family: &quot;MyFont&quot;;\n  src: url(&quot;myfont.woff2&quot;) format(&quot;woff2&quot;);\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-变换和过渡\"><a href=\"#5-变换和过渡\" class=\"headerlink\" title=\"5. 变换和过渡\"></a>5. 变换和过渡</h3><ul>\n<li><p><strong>2D 和 3D 变换</strong>：</p>\n<ul>\n<li>使用 <code>transform</code> 属性可以对元素进行平移、旋转、缩放和倾斜等变换。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: translate(50px, 100px) rotate(45deg);</code></pre>\n</li>\n<li><p><strong>过渡效果</strong>：</p>\n<ul>\n<li>使用 <code>transition</code> 属性可以在属性变化时添加平滑过渡效果。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transition: background-color 0.3s ease;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-动画\"><a href=\"#6-动画\" class=\"headerlink\" title=\"6. 动画\"></a>6. 动画</h3><ul>\n<li><strong>关键帧动画</strong>：<ul>\n<li>使用 <code>@keyframes</code> 定义动画的关键帧，并通过 <code>animation</code> 属性应用动画。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@keyframes myAnimation &#123;\n  from &#123;\n    opacity: 0;\n  &#125;\n  to &#123;\n    opacity: 1;\n  &#125;\n&#125;\nanimation: myAnimation 2s;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-Flexbox-布局\"><a href=\"#7-Flexbox-布局\" class=\"headerlink\" title=\"7. Flexbox 布局\"></a>7. Flexbox 布局</h3><ul>\n<li><strong>弹性盒子布局</strong>：<ul>\n<li>使用 <code>display: flex;</code> 可以创建灵活的布局，支持元素的对齐和分布。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  display: flex;\n  justify-content: space-between;\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-网格布局\"><a href=\"#8-网格布局\" class=\"headerlink\" title=\"8. 网格布局\"></a>8. 网格布局</h3><ul>\n<li><strong>CSS Grid 布局</strong>：<ul>\n<li>使用 <code>display: grid;</code> 可以创建复杂的二维布局。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.grid-container &#123;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-媒体查询\"><a href=\"#9-媒体查询\" class=\"headerlink\" title=\"9. 媒体查询\"></a>9. 媒体查询</h3><ul>\n<li><strong>响应式设计</strong>：<ul>\n<li>媒体查询允许根据设备的特性（如宽度、高度、分辨率等）应用不同的样式。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@media (max-width: 600px) &#123;\n  body &#123;\n    background-color: lightblue;\n  &#125;\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-其他特性\"><a href=\"#10-其他特性\" class=\"headerlink\" title=\"10. 其他特性\"></a>10. 其他特性</h3><ul>\n<li><p><strong>渐变背景</strong>：</p>\n<ul>\n<li>使用 <code>linear-gradient</code> 和 <code>radial-gradient</code> 创建渐变背景。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">background: linear-gradient(to right, red, blue);</code></pre>\n</li>\n<li><p><strong>阴影和滤镜</strong>：</p>\n<ul>\n<li>使用 <code>filter</code> 属性可以应用图像滤镜效果。<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">filter: blur(5px);</code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"替换元素的概念及计算规则\"><a href=\"#替换元素的概念及计算规则\" class=\"headerlink\" title=\"替换元素的概念及计算规则\"></a>替换元素的概念及计算规则</h2><p>在 CSS 中，<strong>替换元素</strong>（Replaced Elements）是指那些其内容由外部资源提供的元素。这些元素的内容不是由 HTML 文档中的文本或子元素直接定义的，而是由外部文件（如图像、视频等）提供。常见的替换元素包括 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;iframe&gt;</code> 等。</p>\n<h3 id=\"1-替换元素的特点\"><a href=\"#1-替换元素的特点\" class=\"headerlink\" title=\"1. 替换元素的特点\"></a>1. 替换元素的特点</h3><ul>\n<li><strong>内容来源</strong>：替换元素的内容通常来自外部资源，而不是直接在 HTML 中定义的内容。</li>\n<li><strong>尺寸计算</strong>：替换元素的尺寸（宽度和高度）通常由其内容决定，而不是由 CSS 中的 <code>width</code> 和 <code>height</code> 属性直接控制。</li>\n<li><strong>不参与文本流</strong>：替换元素的内容不会影响周围文本的布局，通常会在文档流中占据一个矩形区域。</li>\n</ul>\n<h3 id=\"2-替换元素的计算规则\"><a href=\"#2-替换元素的计算规则\" class=\"headerlink\" title=\"2. 替换元素的计算规则\"></a>2. 替换元素的计算规则</h3><p>替换元素的计算规则主要涉及其尺寸和布局。以下是一些关键点：</p>\n<h4 id=\"2-1-尺寸计算\"><a href=\"#2-1-尺寸计算\" class=\"headerlink\" title=\"2.1 尺寸计算\"></a>2.1 尺寸计算</h4><ul>\n<li><strong>默认尺寸</strong>：替换元素的默认宽度和高度通常由其内容决定。例如，<code>&lt;img&gt;</code> 元素的尺寸由图像的实际尺寸决定。</li>\n<li><strong>CSS 控制</strong>：可以使用 CSS 的 <code>width</code> 和 <code>height</code> 属性来控制替换元素的尺寸，但这可能会导致内容失真（例如，拉伸或压缩图像）。</li>\n<li><strong>自动尺寸</strong>：如果未设置 <code>width</code> 和 <code>height</code>，替换元素会根据其内容的自然尺寸自动调整。</li>\n</ul>\n<h4 id=\"2-2-盒模型\"><a href=\"#2-2-盒模型\" class=\"headerlink\" title=\"2.2 盒模型\"></a>2.2 盒模型</h4><ul>\n<li>替换元素的盒模型与其他元素相似，但其内容区域的计算方式不同。替换元素的内容区域通常是由外部资源的尺寸决定的。</li>\n<li>可以使用 <code>margin</code>、<code>padding</code> 和 <code>border</code> 属性来控制替换元素的外观和布局。</li>\n</ul>\n<h4 id=\"2-3-影响布局\"><a href=\"#2-3-影响布局\" class=\"headerlink\" title=\"2.3 影响布局\"></a>2.3 影响布局</h4><ul>\n<li>替换元素在文档流中占据一个矩形区域，但其内容不会影响周围文本的布局。</li>\n<li>替换元素的对齐和位置可以通过 CSS 的 <code>vertical-align</code> 和 <code>float</code> 属性进行控制。</li>\n</ul>\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个简单的示例，展示了替换元素的使用：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;替换元素示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      img &#123;\n        width: 200px; &#x2F;* 控制图像的宽度 *&#x2F;\n        height: auto; &#x2F;* 保持图像的纵横比 *&#x2F;\n        border: 2px solid black; &#x2F;* 添加边框 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;替换元素示例&lt;&#x2F;h1&gt;\n    &lt;img src&#x3D;&quot;example.jpg&quot; alt&#x3D;&quot;示例图像&quot; &#x2F;&gt;\n    &lt;p&gt;这是一个段落，替换元素不会影响文本的布局。&lt;&#x2F;p&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-6\"><a href=\"#4-总结-6\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>替换元素</strong> 是指其内容由外部资源提供的元素，如 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;video&gt;</code> 等。</li>\n<li>替换元素的尺寸通常由其内容决定，可以使用 CSS 控制，但可能导致内容失真。</li>\n<li>替换元素在文档流中占据一个矩形区域，但其内容不会影响周围文本的布局。</li>\n</ul>\n<h2 id=\"常见的图片格式及使用场景\"><a href=\"#常见的图片格式及使用场景\" class=\"headerlink\" title=\"常见的图片格式及使用场景\"></a>常见的图片格式及使用场景</h2><p>在网页设计和开发中，选择合适的图片格式对于图像质量、加载速度和用户体验至关重要。以下是一些常见的图片格式及其适用场景：</p>\n<h3 id=\"1-JPEG-Joint-Photographic-Experts-Group\"><a href=\"#1-JPEG-Joint-Photographic-Experts-Group\" class=\"headerlink\" title=\"1. JPEG (Joint Photographic Experts Group)\"></a>1. JPEG (Joint Photographic Experts Group)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>有损压缩，能够有效减小文件大小。</li>\n<li>支持 16.7 百万种颜色，适合复杂的图像（如照片）。</li>\n<li>不支持透明度。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适合用于照片、风景图像和复杂的图像内容。</li>\n<li>常用于网页中的背景图像和产品图片。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-PNG-Portable-Network-Graphics\"><a href=\"#2-PNG-Portable-Network-Graphics\" class=\"headerlink\" title=\"2. PNG (Portable Network Graphics)\"></a>2. PNG (Portable Network Graphics)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>无损压缩，保留图像质量。</li>\n<li>支持透明度（包括 alpha 通道），适合需要透明背景的图像。</li>\n<li>文件大小通常比 JPEG 大。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适合用于图标、图形、插图和需要透明背景的图像。</li>\n<li>常用于网页中的图标、按钮和界面元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-GIF-Graphics-Interchange-Format\"><a href=\"#3-GIF-Graphics-Interchange-Format\" class=\"headerlink\" title=\"3. GIF (Graphics Interchange Format)\"></a>3. GIF (Graphics Interchange Format)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>支持动画，能够在同一文件中包含多帧图像。</li>\n<li>采用无损压缩，但颜色限制在 256 种颜色（8 位）。</li>\n<li>支持透明度，但不支持半透明。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适合用于简单的动画和小型图像（如图标和表情符号）。</li>\n<li>常用于社交媒体和网页中的小动画。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-SVG-Scalable-Vector-Graphics\"><a href=\"#4-SVG-Scalable-Vector-Graphics\" class=\"headerlink\" title=\"4. SVG (Scalable Vector Graphics)\"></a>4. SVG (Scalable Vector Graphics)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>基于 XML 的矢量图形格式，支持无限缩放而不失真。</li>\n<li>文件大小通常较小，适合简单图形和图标。</li>\n<li>支持动画和交互。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适合用于图标、图形、插图和需要缩放的图像。</li>\n<li>常用于网页中的图标、图形和响应式设计。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-WebP\"><a href=\"#5-WebP\" class=\"headerlink\" title=\"5. WebP\"></a>5. WebP</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>支持有损和无损压缩，能够提供更小的文件大小。</li>\n<li>支持透明度和动画。</li>\n<li>兼容性较新，部分旧浏览器可能不支持。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适合用于需要高质量和小文件大小的图像。</li>\n<li>常用于现代网页设计，尤其是在需要优化加载速度的场景。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-BMP-Bitmap\"><a href=\"#6-BMP-Bitmap\" class=\"headerlink\" title=\"6. BMP (Bitmap)\"></a>6. BMP (Bitmap)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>无压缩或简单压缩的位图格式，文件大小通常较大。</li>\n<li>不支持透明度。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>主要用于 Windows 系统中的图像处理，网页中不常用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-TIFF-Tagged-Image-File-Format\"><a href=\"#7-TIFF-Tagged-Image-File-Format\" class=\"headerlink\" title=\"7. TIFF (Tagged Image File Format)\"></a>7. TIFF (Tagged Image File Format)</h3><ul>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>支持无损压缩，适合高质量图像。</li>\n<li>文件大小通常较大，支持多种颜色深度。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>主要用于印刷和专业摄影，网页中不常用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><table>\n<thead>\n<tr>\n<th>图片格式</th>\n<th>特点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JPEG</td>\n<td>有损压缩，适合照片</td>\n<td>照片、背景图像</td>\n</tr>\n<tr>\n<td>PNG</td>\n<td>无损压缩，支持透明</td>\n<td>图标、插图、需要透明的图像</td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>支持动画，256 色限制</td>\n<td>动画、简单图像</td>\n</tr>\n<tr>\n<td>SVG</td>\n<td>矢量图形，无失真</td>\n<td>图标、图形、响应式设计</td>\n</tr>\n<tr>\n<td>WebP</td>\n<td>有损&#x2F;无损压缩，支持透明和动画</td>\n<td>现代网页设计</td>\n</tr>\n<tr>\n<td>BMP</td>\n<td>大文件，无压缩</td>\n<td>不常用于网页</td>\n</tr>\n<tr>\n<td>TIFF</td>\n<td>高质量，无损</td>\n<td>专业摄影、印刷</td>\n</tr>\n</tbody></table>\n<h2 id=\"对-CSSSprites-的理解\"><a href=\"#对-CSSSprites-的理解\" class=\"headerlink\" title=\"对 CSSSprites 的理解\"></a>对 CSSSprites 的理解</h2><p><strong>CSS Sprites</strong> 是一种优化网页性能的技术，通过将多个图像合并成一张大图像（称为“精灵图”），从而减少 HTTP 请求的数量，提高页面加载速度。以下是对 CSS Sprites 的详细理解，包括其工作原理、优点、使用方法和示例。</p>\n<h3 id=\"1-工作原理-1\"><a href=\"#1-工作原理-1\" class=\"headerlink\" title=\"1. 工作原理\"></a>1. 工作原理</h3><ul>\n<li><strong>合并图像</strong>：将多个小图像（如图标、按钮、背景等）合并成一张大图像。这样，浏览器只需加载一张图像，而不是多个小图像。</li>\n<li><strong>使用 CSS 定位</strong>：通过 CSS 的 <code>background-image</code> 和 <code>background-position</code> 属性来显示精灵图中的特定部分。通过调整背景位置，可以显示合并图像中的不同部分。</li>\n</ul>\n<h3 id=\"2-优点-1\"><a href=\"#2-优点-1\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h3><ul>\n<li><strong>减少 HTTP 请求</strong>：合并图像后，浏览器只需发起一次请求来加载精灵图，减少了请求的数量，从而提高了页面加载速度。</li>\n<li><strong>提高性能</strong>：减少请求数量可以降低服务器负担，提高页面响应速度，尤其是在移动设备上。</li>\n<li><strong>更好的管理</strong>：将多个图像合并为一张图像可以更方便地管理和维护图像资源。</li>\n</ul>\n<h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"3-1-创建精灵图\"><a href=\"#3-1-创建精灵图\" class=\"headerlink\" title=\"3.1 创建精灵图\"></a>3.1 创建精灵图</h4><p>使用图像编辑工具（如 Photoshop、GIMP 或在线工具）将多个小图像合并为一张大图像。</p>\n<h4 id=\"3-2-使用-CSS-定义背景\"><a href=\"#3-2-使用-CSS-定义背景\" class=\"headerlink\" title=\"3.2 使用 CSS 定义背景\"></a>3.2 使用 CSS 定义背景</h4><p>使用 CSS 设置精灵图的背景图像，并通过 <code>background-position</code> 属性来显示特定的图像部分。</p>\n<h3 id=\"4-示例-1\"><a href=\"#4-示例-1\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>假设我们有一个精灵图 <code>sprite.png</code>，其中包含三个图标（图标 1、图标 2、图标 3），它们的尺寸为 50x50 像素，合并后的图像宽度为 150 像素。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.icon &#123;\n  background-image: url(&quot;sprite.png&quot;);\n  background-repeat: no-repeat;\n  display: inline-block; &#x2F;* 使元素成为块级元素 *&#x2F;\n  width: 50px; &#x2F;* 图标宽度 *&#x2F;\n  height: 50px; &#x2F;* 图标高度 *&#x2F;\n&#125;\n\n&#x2F;* 图标1 *&#x2F;\n.icon1 &#123;\n  background-position: 0 0; &#x2F;* 精灵图中的位置 *&#x2F;\n&#125;\n\n&#x2F;* 图标2 *&#x2F;\n.icon2 &#123;\n  background-position: -50px 0; &#x2F;* 精灵图中的位置 *&#x2F;\n&#125;\n\n&#x2F;* 图标3 *&#x2F;\n.icon3 &#123;\n  background-position: -100px 0; &#x2F;* 精灵图中的位置 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"5-HTML-示例\"><a href=\"#5-HTML-示例\" class=\"headerlink\" title=\"5. HTML 示例\"></a>5. HTML 示例</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div class&#x3D;&quot;icon icon1&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;icon icon2&quot;&gt;&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;icon icon3&quot;&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a>6. 注意事项</h3><ul>\n<li><strong>图像尺寸</strong>：确保合并后的图像尺寸合理，避免过大的精灵图导致加载时间增加。</li>\n<li><strong>维护</strong>：在更新图标时，可能需要重新生成精灵图并更新 CSS。</li>\n<li><strong>响应式设计</strong>：在响应式设计中，可能需要考虑不同屏幕尺寸下的图标显示。</li>\n</ul>\n<h3 id=\"7-总结-1\"><a href=\"#7-总结-1\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>CSS Sprites 是一种有效的性能优化技术，通过将多个小图像合并为一张大图像，减少 HTTP 请求，提高页面加载速度。使用 CSS 的 <code>background-image</code> 和 <code>background-position</code> 属性，可以灵活地显示精灵图中的不同部分。理解和应用 CSS Sprites 可以显著提升网页的性能和用户体验。</p>\n<h2 id=\"什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x-这种图片？\"><a href=\"#什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x-这种图片？\" class=\"headerlink\" title=\"什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x 这种图片？\"></a>什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x 这种图片？</h2><p>在移动端开发中，理解物理像素、逻辑像素和像素密度的概念是非常重要的。这些概念直接影响到图像的显示质量和用户体验。以下是对这些术语的详细解释，以及为什么需要使用 <code>@2x</code>、<code>@3x</code> 这种图片的原因。</p>\n<h3 id=\"1-物理像素（Physical-Pixels）\"><a href=\"#1-物理像素（Physical-Pixels）\" class=\"headerlink\" title=\"1. 物理像素（Physical Pixels）\"></a>1. 物理像素（Physical Pixels）</h3><ul>\n<li><strong>定义</strong>：物理像素是显示设备上实际存在的最小单元，通常是显示屏上可以点亮的最小点。每个物理像素由显示器的硬件决定，通常以点（dpi）或像素（px）为单位。</li>\n<li><strong>特点</strong>：物理像素的数量取决于显示设备的分辨率。例如，一个 1920x1080 的显示器有 1920 个水平物理像素和 1080 个垂直物理像素。</li>\n</ul>\n<h3 id=\"2-逻辑像素（Logical-Pixels）\"><a href=\"#2-逻辑像素（Logical-Pixels）\" class=\"headerlink\" title=\"2. 逻辑像素（Logical Pixels）\"></a>2. 逻辑像素（Logical Pixels）</h3><ul>\n<li><strong>定义</strong>：逻辑像素是开发者在编写代码时使用的单位，通常与 CSS 中的像素（px）相对应。逻辑像素是一个抽象的概念，表示在不同设备上显示的相对大小。</li>\n<li><strong>特点</strong>：逻辑像素的数量与设备的像素密度有关。在高像素密度的设备上，逻辑像素的大小会被缩小，以便在屏幕上显示更清晰的图像。</li>\n</ul>\n<h3 id=\"3-像素密度（Pixel-Density）\"><a href=\"#3-像素密度（Pixel-Density）\" class=\"headerlink\" title=\"3. 像素密度（Pixel Density）\"></a>3. 像素密度（Pixel Density）</h3><ul>\n<li><strong>定义</strong>：像素密度是指每英寸（dpi）显示的物理像素数量，通常用 PPI（Pixels Per Inch）表示。像素密度越高，图像和文本的显示效果越清晰。</li>\n<li><strong>特点</strong>：高像素密度的设备（如 Retina 显示屏）会在同样的物理尺寸下显示更多的逻辑像素。例如，Retina 显示屏的像素密度通常是标准显示屏的 2 倍或 3 倍。</li>\n</ul>\n<h3 id=\"4-2x-和-3x-图片的使用\"><a href=\"#4-2x-和-3x-图片的使用\" class=\"headerlink\" title=\"4. @2x 和 @3x 图片的使用\"></a>4. @2x 和 @3x 图片的使用</h3><p>在移动端开发中，使用 <code>@2x</code> 和 <code>@3x</code> 这种图片是为了适应不同的像素密度设备，确保图像在高分辨率屏幕上显示清晰。</p>\n<ul>\n<li><strong>@2x 图片</strong>：表示该图像的物理尺寸是逻辑尺寸的 2 倍，适用于像素密度为 2 的设备（如 Retina 显示屏）。</li>\n<li><strong>@3x 图片</strong>：表示该图像的物理尺寸是逻辑尺寸的 3 倍，适用于像素密度为 3 的设备（如某些高端智能手机）。</li>\n</ul>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><p>假设你有一个逻辑像素为 100x100 的图标：</p>\n<ul>\n<li><strong>@1x</strong>：图标的实际尺寸为 100x100 像素。</li>\n<li><strong>@2x</strong>：图标的实际尺寸为 200x200 像素，适用于像素密度为 2 的设备。</li>\n<li><strong>@3x</strong>：图标的实际尺寸为 300x300 像素，适用于像素密度为 3 的设备。</li>\n</ul>\n<h3 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><ul>\n<li><strong>物理像素</strong> 是显示设备上实际存在的最小单元，<strong>逻辑像素</strong> 是开发者使用的单位，<strong>像素密度</strong> 是每英寸显示的物理像素数量。</li>\n<li>在移动端开发中，使用 <code>@2x</code> 和 <code>@3x</code> 图片可以确保图像在高分辨率设备上显示清晰，提升用户体验。</li>\n</ul>\n<h2 id=\"margin-和-padding-的使用场景\"><a href=\"#margin-和-padding-的使用场景\" class=\"headerlink\" title=\"margin 和 padding 的使用场景\"></a>margin 和 padding 的使用场景</h2><p>在 CSS 中，<code>margin</code> 和 <code>padding</code> 是两个重要的属性，用于控制元素的外部和内部间距。它们的使用场景和目的有所不同。以下是对 <code>margin</code> 和 <code>padding</code> 的详细解释及其使用场景。</p>\n<h3 id=\"1-margin\"><a href=\"#1-margin\" class=\"headerlink\" title=\"1. margin\"></a>1. <code>margin</code></h3><ul>\n<li><p><strong>定义</strong>：<code>margin</code> 是元素外部的空间，用于控制元素与其他元素之间的距离。它可以影响元素在文档流中的位置。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li><code>margin</code> 是透明的，不会影响元素的背景颜色。</li>\n<li>可以设置四个方向的外边距：<code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code>，也可以使用简写属性 <code>margin</code>。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li><strong>分隔元素</strong>：用于在元素之间创建空间，避免元素紧贴在一起。例如，在列表项之间添加外边距。</li>\n<li><strong>居中对齐</strong>：在块级元素上使用 <code>margin: auto;</code> 可以实现水平居中对齐。</li>\n<li><strong>外部布局</strong>：用于控制元素与其父元素或其他兄弟元素之间的距离，适合在布局中使用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-padding\"><a href=\"#2-padding\" class=\"headerlink\" title=\"2. padding\"></a>2. <code>padding</code></h3><ul>\n<li><p><strong>定义</strong>：<code>padding</code> 是元素内部的空间，用于控制元素内容与其边框之间的距离。它可以影响元素的实际尺寸。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li><code>padding</code> 是不透明的，会影响元素的背景颜色。</li>\n<li>可以设置四个方向的内边距：<code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code>，也可以使用简写属性 <code>padding</code>。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li><strong>增加可读性</strong>：在文本元素（如段落、按钮）周围添加内边距，以提高可读性和点击区域。</li>\n<li><strong>背景效果</strong>：在元素中使用 <code>padding</code> 可以确保背景颜色或图像不会紧贴内容，提供更好的视觉效果。</li>\n<li><strong>按钮样式</strong>：在按钮上使用 <code>padding</code> 来增加点击区域，使按钮看起来更大，更易于点击。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-示例-1\"><a href=\"#3-示例-1\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个简单的示例，展示了 <code>margin</code> 和 <code>padding</code> 的使用：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;Margin 和 Padding 示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .box &#123;\n        background-color: lightblue;\n        margin: 20px; &#x2F;* 外边距 *&#x2F;\n        padding: 15px; &#x2F;* 内边距 *&#x2F;\n        border: 2px solid blue;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;这是一个带有外边距和内边距的盒子。&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-7\"><a href=\"#4-总结-7\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong><code>margin</code></strong> 用于控制元素与其他元素之间的外部间距，适合用于分隔元素和布局。</li>\n<li><strong><code>padding</code></strong> 用于控制元素内部内容与边框之间的间距，适合用于提高可读性和视觉效果。</li>\n</ul>\n<h2 id=\"对-line-height-的理解及其赋值方式\"><a href=\"#对-line-height-的理解及其赋值方式\" class=\"headerlink\" title=\"对 line-height 的理解及其赋值方式\"></a>对 line-height 的理解及其赋值方式</h2><p><code>line-height</code> 是 CSS 中一个重要的属性，用于控制文本行之间的垂直间距。它影响文本的可读性和整体布局。以下是对 <code>line-height</code> 的详细理解，包括其作用、赋值方式和使用场景。</p>\n<h3 id=\"1-line-height-的作用\"><a href=\"#1-line-height-的作用\" class=\"headerlink\" title=\"1. line-height 的作用\"></a>1. <code>line-height</code> 的作用</h3><ul>\n<li><strong>控制行间距</strong>：<code>line-height</code> 定义了文本行之间的距离，影响文本的垂直对齐和可读性。</li>\n<li><strong>影响文本块的高度</strong>：<code>line-height</code> 会影响包含文本的元素的高度，增加行间距会使元素的高度增大。</li>\n<li><strong>提高可读性</strong>：适当的行间距可以提高文本的可读性，尤其是在长段落或小字体时。</li>\n</ul>\n<h3 id=\"2-赋值方式\"><a href=\"#2-赋值方式\" class=\"headerlink\" title=\"2. 赋值方式\"></a>2. 赋值方式</h3><p><code>line-height</code> 可以通过多种方式赋值，主要有以下几种：</p>\n<h4 id=\"2-1-数值（无单位）\"><a href=\"#2-1-数值（无单位）\" class=\"headerlink\" title=\"2.1 数值（无单位）\"></a>2.1 数值（无单位）</h4><ul>\n<li><strong>定义</strong>：使用无单位的数值（如 <code>1.5</code>）来设置行高。这个数值是相对于元素的字体大小的倍数。</li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n  line-height: 1.5; &#x2F;* 行高为字体大小的 1.5 倍 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"2-2-长度单位\"><a href=\"#2-2-长度单位\" class=\"headerlink\" title=\"2.2 长度单位\"></a>2.2 长度单位</h4><ul>\n<li><strong>定义</strong>：使用具体的长度单位（如 <code>px</code>、<code>em</code>、<code>rem</code> 等）来设置行高。</li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n  line-height: 24px; &#x2F;* 行高为 24 像素 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"2-3-百分比\"><a href=\"#2-3-百分比\" class=\"headerlink\" title=\"2.3 百分比\"></a>2.3 百分比</h4><ul>\n<li><strong>定义</strong>：使用百分比来设置行高，百分比是相对于元素的字体大小。</li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">p &#123;\n  line-height: 150%; &#x2F;* 行高为字体大小的 150% *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"3-使用场景\"><a href=\"#3-使用场景\" class=\"headerlink\" title=\"3. 使用场景\"></a>3. 使用场景</h3><ul>\n<li><strong>段落文本</strong>：在段落文本中，适当的 <code>line-height</code> 可以提高可读性，避免行与行之间过于紧凑。</li>\n<li><strong>标题和副标题</strong>：在标题和副标题中，使用较大的 <code>line-height</code> 可以增强视觉效果，使文本更具层次感。</li>\n<li><strong>列表和表格</strong>：在列表和表格中，适当的行高可以使内容更整齐，便于阅读。</li>\n</ul>\n<h3 id=\"4-示例-2\"><a href=\"#4-示例-2\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个简单的示例，展示了如何使用 <code>line-height</code>：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;Line Height 示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      p &#123;\n        font-size: 16px; &#x2F;* 字体大小 *&#x2F;\n        line-height: 1.5; &#x2F;* 行高为字体大小的 1.5 倍 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      这是一个段落，使用了适当的行高来提高可读性。行高的设置可以影响文本的整体布局和视觉效果。\n    &lt;&#x2F;p&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-2\"><a href=\"#5-总结-2\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><code>line-height</code> 是用于控制文本行之间垂直间距的 CSS 属性，影响文本的可读性和布局。</li>\n<li>可以通过无单位数值、长度单位和百分比来赋值。</li>\n<li>适当的行高设置可以提高文本的可读性，增强视觉效果。</li>\n</ul>\n<h2 id=\"CSS-优化和提高性能的方法有哪些？\"><a href=\"#CSS-优化和提高性能的方法有哪些？\" class=\"headerlink\" title=\"CSS 优化和提高性能的方法有哪些？\"></a>CSS 优化和提高性能的方法有哪些？</h2><p>在网页开发中，优化 CSS 和提高性能是确保网站快速加载和良好用户体验的重要步骤。以下是一些常见的 CSS 优化和性能提升的方法：</p>\n<h3 id=\"1-合并和压缩-CSS-文件\"><a href=\"#1-合并和压缩-CSS-文件\" class=\"headerlink\" title=\"1. 合并和压缩 CSS 文件\"></a>1. 合并和压缩 CSS 文件</h3><ul>\n<li><strong>合并文件</strong>：将多个 CSS 文件合并为一个文件，减少 HTTP 请求的数量，从而提高加载速度。</li>\n<li><strong>压缩文件</strong>：使用工具（如 CSSNano、CleanCSS 等）压缩 CSS 文件，去除空格、注释和不必要的字符，减小文件大小。</li>\n</ul>\n<h3 id=\"2-使用-CSS-Sprites\"><a href=\"#2-使用-CSS-Sprites\" class=\"headerlink\" title=\"2. 使用 CSS Sprites\"></a>2. 使用 CSS Sprites</h3><ul>\n<li><strong>精灵图</strong>：将多个小图像合并为一张大图像，减少图像请求的数量。通过 <code>background-position</code> 属性显示精灵图中的特定部分。</li>\n</ul>\n<h3 id=\"3-使用选择器优化\"><a href=\"#3-使用选择器优化\" class=\"headerlink\" title=\"3. 使用选择器优化\"></a>3. 使用选择器优化</h3><ul>\n<li><strong>简化选择器</strong>：使用简单的选择器（如类选择器和 ID 选择器），避免使用过于复杂的选择器（如后代选择器），以提高选择器的匹配速度。</li>\n<li><strong>避免过度使用通配符选择器</strong>（<code>*</code>），因为它会影响性能。</li>\n</ul>\n<h3 id=\"4-避免使用过多的-CSS-规则\"><a href=\"#4-避免使用过多的-CSS-规则\" class=\"headerlink\" title=\"4. 避免使用过多的 CSS 规则\"></a>4. 避免使用过多的 CSS 规则</h3><ul>\n<li><strong>减少不必要的规则</strong>：删除未使用的 CSS 规则，保持样式表的简洁性。</li>\n<li><strong>使用工具</strong>：使用工具（如 PurgeCSS）自动检测和删除未使用的 CSS。</li>\n</ul>\n<h3 id=\"5-使用-CSS-预处理器\"><a href=\"#5-使用-CSS-预处理器\" class=\"headerlink\" title=\"5. 使用 CSS 预处理器\"></a>5. 使用 CSS 预处理器</h3><ul>\n<li><strong>预处理器</strong>：使用 Sass、LESS 或 Stylus 等 CSS 预处理器，可以更好地组织和管理 CSS 代码，使用变量、嵌套和混合等功能，提高开发效率。</li>\n</ul>\n<h3 id=\"6-使用媒体查询\"><a href=\"#6-使用媒体查询\" class=\"headerlink\" title=\"6. 使用媒体查询\"></a>6. 使用媒体查询</h3><ul>\n<li><strong>响应式设计</strong>：使用媒体查询根据设备特性（如屏幕宽度）加载不同的样式，避免加载不必要的样式，提高性能。</li>\n</ul>\n<h3 id=\"7-使用-min-width-和-max-width\"><a href=\"#7-使用-min-width-和-max-width\" class=\"headerlink\" title=\"7. 使用 min-width 和 max-width\"></a>7. 使用 <code>min-width</code> 和 <code>max-width</code></h3><ul>\n<li><strong>限制宽度</strong>：使用 <code>min-width</code> 和 <code>max-width</code> 属性来限制元素的宽度，避免不必要的重排和渲染。</li>\n</ul>\n<h3 id=\"8-使用-will-change-属性\"><a href=\"#8-使用-will-change-属性\" class=\"headerlink\" title=\"8. 使用 will-change 属性\"></a>8. 使用 <code>will-change</code> 属性</h3><ul>\n<li><strong>性能优化</strong>：在需要进行动画或变换的元素上使用 <code>will-change</code> 属性，告诉浏览器该元素即将发生变化，从而进行优化。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  will-change: transform; &#x2F;* 提前告知浏览器即将进行变换 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"9-避免使用-important\"><a href=\"#9-避免使用-important\" class=\"headerlink\" title=\"9. 避免使用 !important\"></a>9. 避免使用 <code>!important</code></h3><ul>\n<li><strong>减少使用</strong>：尽量避免使用 <code>!important</code>，因为它会增加 CSS 的复杂性和维护难度，影响性能。</li>\n</ul>\n<h3 id=\"10-使用异步加载\"><a href=\"#10-使用异步加载\" class=\"headerlink\" title=\"10. 使用异步加载\"></a>10. 使用异步加载</h3><ul>\n<li><strong>异步加载 CSS</strong>：在需要时异步加载 CSS 文件，避免阻塞页面渲染。可以使用 JavaScript 动态加载样式表。</li>\n</ul>\n<h3 id=\"11-使用-font-display-属性\"><a href=\"#11-使用-font-display-属性\" class=\"headerlink\" title=\"11. 使用 font-display 属性\"></a>11. 使用 <code>font-display</code> 属性</h3><ul>\n<li><strong>字体加载优化</strong>：使用 <code>font-display</code> 属性控制字体的加载行为，避免因字体加载导致的内容闪烁。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@font-face &#123;\n  font-family: &quot;MyFont&quot;;\n  src: url(&quot;myfont.woff2&quot;) format(&quot;woff2&quot;);\n  font-display: swap; &#x2F;* 立即显示文本，使用备用字体 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"12-使用-CDN\"><a href=\"#12-使用-CDN\" class=\"headerlink\" title=\"12. 使用 CDN\"></a>12. 使用 CDN</h3><ul>\n<li><strong>内容分发网络</strong>：将 CSS 文件托管在 CDN 上，利用 CDN 的缓存和分发能力，提高加载速度。</li>\n</ul>\n<h3 id=\"13-监测和分析性能\"><a href=\"#13-监测和分析性能\" class=\"headerlink\" title=\"13. 监测和分析性能\"></a>13. 监测和分析性能</h3><ul>\n<li><strong>使用工具</strong>：使用浏览器的开发者工具（如 Chrome DevTools）监测 CSS 的加载时间和性能，识别瓶颈并进行优化。</li>\n</ul>\n<h2 id=\"CSS-预处理器-x2F-后处理器是什么？为什么要使用它们？\"><a href=\"#CSS-预处理器-x2F-后处理器是什么？为什么要使用它们？\" class=\"headerlink\" title=\"CSS 预处理器&#x2F;后处理器是什么？为什么要使用它们？\"></a>CSS 预处理器&#x2F;后处理器是什么？为什么要使用它们？</h2><p><strong>CSS 预处理器</strong>和<strong>后处理器</strong>是用于增强 CSS 开发的工具，它们提供了额外的功能和灵活性，使得编写和管理 CSS 变得更加高效和可维护。以下是对这两者的详细解释，包括它们的定义、功能和使用原因。</p>\n<h3 id=\"1-CSS-预处理器\"><a href=\"#1-CSS-预处理器\" class=\"headerlink\" title=\"1. CSS 预处理器\"></a>1. CSS 预处理器</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>CSS 预处理器是一种扩展 CSS 的语言，允许开发者使用变量、嵌套、混合、函数等编程特性来编写 CSS。预处理器在编译时将这些扩展的语法转换为标准的 CSS。</p>\n<h4 id=\"常见的-CSS-预处理器\"><a href=\"#常见的-CSS-预处理器\" class=\"headerlink\" title=\"常见的 CSS 预处理器\"></a>常见的 CSS 预处理器</h4><ul>\n<li><strong>Sass</strong>（Syntactically Awesome Style Sheets）</li>\n<li><strong>LESS</strong></li>\n<li><strong>Stylus</strong></li>\n</ul>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li><p><strong>变量</strong>：允许定义可重用的值（如颜色、字体大小等）。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">$primary-color: #3498db;\nbody &#123;\n  color: $primary-color;\n&#125;</code></pre>\n</li>\n<li><p><strong>嵌套</strong>：支持嵌套选择器，使得样式结构更清晰。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.nav &#123;\n  ul &#123;\n    list-style: none;\n  &#125;\n  li &#123;\n    display: inline-block;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p><strong>混合</strong>：允许定义可重用的样式块。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@mixin border-radius($radius) &#123;\n  -webkit-border-radius: $radius;\n  -moz-border-radius: $radius;\n  border-radius: $radius;\n&#125;\n.box &#123;\n  @include border-radius(10px);\n&#125;</code></pre>\n</li>\n<li><p><strong>函数</strong>：可以创建自定义函数来处理颜色、计算等。</p>\n</li>\n</ul>\n<h4 id=\"使用原因\"><a href=\"#使用原因\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h4><ul>\n<li><strong>提高可维护性</strong>：使用变量和混合可以减少重复代码，使样式表更易于维护。</li>\n<li><strong>增强可读性</strong>：嵌套结构使得样式层次更加清晰，便于理解。</li>\n<li><strong>减少代码量</strong>：通过重用样式和使用函数，可以减少冗余代码。</li>\n</ul>\n<h3 id=\"2-CSS-后处理器\"><a href=\"#2-CSS-后处理器\" class=\"headerlink\" title=\"2. CSS 后处理器\"></a>2. CSS 后处理器</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>CSS 后处理器是在 CSS 编写完成后，对其进行处理的工具，通常用于添加浏览器前缀、优化和压缩 CSS 代码。</p>\n<h4 id=\"常见的-CSS-后处理器\"><a href=\"#常见的-CSS-后处理器\" class=\"headerlink\" title=\"常见的 CSS 后处理器\"></a>常见的 CSS 后处理器</h4><ul>\n<li><strong>PostCSS</strong></li>\n<li><strong>Autoprefixer</strong></li>\n<li><strong>CSSNano</strong></li>\n</ul>\n<h4 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li><p><strong>自动添加浏览器前缀</strong>：根据 CSS 属性的使用情况，自动添加适当的浏览器前缀，以确保跨浏览器兼容性。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&#x2F;* 输入 *&#x2F;\ndisplay: flex;\n\n&#x2F;* 输出 *&#x2F;\n-webkit-box: flex;\n-ms-flexbox: flex;\ndisplay: flex;</code></pre>\n</li>\n<li><p><strong>优化和压缩</strong>：通过压缩和优化 CSS 代码，减少文件大小，提高加载速度。</p>\n</li>\n<li><p><strong>使用插件</strong>：PostCSS 允许使用各种插件来扩展功能，如支持未来的 CSS 特性、嵌套等。</p>\n</li>\n</ul>\n<h4 id=\"使用原因-1\"><a href=\"#使用原因-1\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h4><ul>\n<li><strong>提高兼容性</strong>：自动添加浏览器前缀可以确保样式在不同浏览器中的一致性。</li>\n<li><strong>优化性能</strong>：压缩和优化 CSS 可以减少文件大小，提高页面加载速度。</li>\n<li><strong>灵活性</strong>：后处理器可以根据项目需求灵活配置，使用不同的插件来满足特定需求。</li>\n</ul>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>CSS 预处理器</strong> 提供了编程特性（如变量、嵌套、混合等），使得 CSS 更加灵活和可维护。</li>\n<li><strong>CSS 后处理器</strong> 主要用于处理和优化已编写的 CSS，确保兼容性和性能。</li>\n<li>使用预处理器和后处理器可以显著提高开发效率，减少代码冗余，确保样式在不同浏览器中的一致性。</li>\n</ul>\n<h2 id=\"before-和-after-的双冒号和单冒号有什么区别？\"><a href=\"#before-和-after-的双冒号和单冒号有什么区别？\" class=\"headerlink\" title=\"::before 和 :after 的双冒号和单冒号有什么区别？\"></a>::before 和 :after 的双冒号和单冒号有什么区别？</h2><p>在 CSS 中，<code>::before</code> 和 <code>::after</code> 是伪元素，用于在元素的内容之前或之后插入内容。它们的语法中使用了双冒号（<code>::</code>），而在 CSS2 中，伪元素使用的是单冒号（<code>:</code>）。以下是对双冒号和单冒号的详细解释及其区别：</p>\n<h3 id=\"1-伪元素的定义\"><a href=\"#1-伪元素的定义\" class=\"headerlink\" title=\"1. 伪元素的定义\"></a>1. 伪元素的定义</h3><ul>\n<li><strong>伪元素</strong> 是一种特殊的选择器，用于选择元素的特定部分或在元素中插入内容。常见的伪元素包括 <code>::before</code>、<code>::after</code>、<code>::first-line</code> 和 <code>::first-letter</code>。</li>\n</ul>\n<h3 id=\"2-单冒号与双冒号的区别\"><a href=\"#2-单冒号与双冒号的区别\" class=\"headerlink\" title=\"2. 单冒号与双冒号的区别\"></a>2. 单冒号与双冒号的区别</h3><ul>\n<li><strong>单冒号（<code>:</code>）</strong>：在 CSS2 中，伪类和伪元素都使用单冒号。例如，<code>:hover</code> 是伪类，而 <code>:before</code> 和 <code>:after</code> 是伪元素。</li>\n<li><strong>双冒号（<code>::</code>）</strong>：在 CSS3 中，引入了双冒号来区分伪类和伪元素。伪类仍然使用单冒号，而伪元素使用双冒号。例如，<code>::before</code> 和 <code>::after</code> 是伪元素。</li>\n</ul>\n<h3 id=\"3-兼容性\"><a href=\"#3-兼容性\" class=\"headerlink\" title=\"3. 兼容性\"></a>3. 兼容性</h3><ul>\n<li><strong>浏览器支持</strong>：虽然 CSS3 推荐使用双冒号来表示伪元素，但大多数现代浏览器仍然支持单冒号的语法。因此，<code>::before</code> 和 <code>:before</code> 在大多数情况下是等效的。</li>\n<li><strong>最佳实践</strong>：为了遵循 CSS3 的标准，建议使用双冒号（<code>::before</code> 和 <code>::after</code>）来表示伪元素。</li>\n</ul>\n<h3 id=\"4-示例-3\"><a href=\"#4-示例-3\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个使用 <code>::before</code> 和 <code>::after</code> 的示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;伪元素示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .example::before &#123;\n        content: &quot;前缀 - &quot;; &#x2F;* 在元素内容之前插入内容 *&#x2F;\n        color: blue;\n      &#125;\n\n      .example::after &#123;\n        content: &quot; - 后缀&quot;; &#x2F;* 在元素内容之后插入内容 *&#x2F;\n        color: red;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;example&quot;&gt;这是一个示例文本。&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-3\"><a href=\"#5-总结-3\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>单冒号（<code>:</code>）</strong> 和 <strong>双冒号（<code>::</code>）</strong> 的主要区别在于语法标准。单冒号用于 CSS2，而双冒号是 CSS3 的推荐用法。</li>\n<li>伪类使用单冒号，伪元素使用双冒号。为了遵循现代标准，建议使用双冒号来表示伪元素。</li>\n</ul>\n<h2 id=\"display-inline-block-什么时候会显示间隙？\"><a href=\"#display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"display:inline-block 什么时候会显示间隙？\"></a>display:inline-block 什么时候会显示间隙？</h2><p>在使用 <code>display: inline-block</code> 时，元素之间可能会出现间隙，这通常是由以下几个原因引起的：</p>\n<h3 id=\"1-行内元素的空白字符\"><a href=\"#1-行内元素的空白字符\" class=\"headerlink\" title=\"1. 行内元素的空白字符\"></a>1. 行内元素的空白字符</h3><ul>\n<li><strong>HTML 中的空白字符</strong>：当使用 <code>display: inline-block</code> 的元素在 HTML 中相邻时，如果它们之间有空格、换行或其他空白字符，浏览器会将这些空白字符渲染为实际的间隙。这是因为 <code>inline-block</code> 元素被视为行内元素，它们之间的空白字符会被视为可见的空白。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: red;&quot;\n&gt;&lt;&#x2F;div&gt;\n&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: blue;&quot;\n&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<p>在上面的代码中，两个 <code>div</code> 之间的空格会导致它们之间出现间隙。</p>\n<h3 id=\"2-行高（line-height）\"><a href=\"#2-行高（line-height）\" class=\"headerlink\" title=\"2. 行高（line-height）\"></a>2. 行高（line-height）</h3><ul>\n<li><strong>行高的影响</strong>：<code>inline-block</code> 元素的行高会影响它们的垂直对齐和间距。如果行高设置得较大，可能会导致元素之间出现额外的间隙。</li>\n</ul>\n<h3 id=\"3-CSS-样式\"><a href=\"#3-CSS-样式\" class=\"headerlink\" title=\"3. CSS 样式\"></a>3. CSS 样式</h3><ul>\n<li><strong>边距（margin）</strong>：如果为 <code>inline-block</code> 元素设置了边距，尤其是垂直边距，可能会导致元素之间的间隙。</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>以下是几种常见的解决方法，可以消除或减少 <code>inline-block</code> 元素之间的间隙：</p>\n<h4 id=\"1-移除-HTML-中的空白字符\"><a href=\"#1-移除-HTML-中的空白字符\" class=\"headerlink\" title=\"1. 移除 HTML 中的空白字符\"></a>1. 移除 HTML 中的空白字符</h4><p>在 HTML 中，确保 <code>inline-block</code> 元素之间没有空格或换行：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: red;&quot;\n&gt;&lt;&#x2F;div&gt;\n&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: blue;&quot;\n&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<h4 id=\"2-使用注释\"><a href=\"#2-使用注释\" class=\"headerlink\" title=\"2. 使用注释\"></a>2. 使用注释</h4><p>在 <code>inline-block</code> 元素之间使用 HTML 注释来消除空白字符：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: red;&quot;\n&gt;&lt;&#x2F;div&gt;\n&lt;!--\n--&gt;\n&lt;div\n  style&#x3D;&quot;display: inline-block; width: 100px; height: 100px; background-color: blue;&quot;\n&gt;&lt;&#x2F;div&gt;</code></pre>\n\n<h4 id=\"3-设置字体大小为-0\"><a href=\"#3-设置字体大小为-0\" class=\"headerlink\" title=\"3. 设置字体大小为 0\"></a>3. 设置字体大小为 0</h4><p>在父元素上设置 <code>font-size: 0;</code>，然后为子元素恢复字体大小：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  font-size: 0; &#x2F;* 移除空白 *&#x2F;\n&#125;\n\n.child &#123;\n  font-size: 16px; &#x2F;* 恢复字体大小 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"4-使用负边距\"><a href=\"#4-使用负边距\" class=\"headerlink\" title=\"4. 使用负边距\"></a>4. 使用负边距</h4><p>在 <code>inline-block</code> 元素上使用负边距来消除间隙：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.child &#123;\n  margin-right: -4px; &#x2F;* 根据需要调整负边距 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"5-总结-4\"><a href=\"#5-总结-4\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><code>display: inline-block</code> 元素之间的间隙通常是由于 HTML 中的空白字符、行高或边距引起的。</li>\n<li>可以通过移除空白字符、使用注释、设置字体大小为 0 或使用负边距等方法来消除或减少这些间隙。</li>\n</ul>\n<h2 id=\"单行、多行文本溢出隐藏\"><a href=\"#单行、多行文本溢出隐藏\" class=\"headerlink\" title=\"单行、多行文本溢出隐藏\"></a>单行、多行文本溢出隐藏</h2><p>在 CSS 中，处理文本溢出是一个常见的需求，尤其是在设计响应式布局时。以下是如何处理单行和多行文本溢出隐藏的详细说明。</p>\n<h3 id=\"1-单行文本溢出隐藏\"><a href=\"#1-单行文本溢出隐藏\" class=\"headerlink\" title=\"1. 单行文本溢出隐藏\"></a>1. 单行文本溢出隐藏</h3><p>要隐藏单行文本的溢出部分，可以使用以下 CSS 属性组合：</p>\n<ul>\n<li><code>overflow: hidden;</code>：隐藏超出元素边界的内容。</li>\n<li><code>white-space: nowrap;</code>：防止文本换行。</li>\n<li><code>text-overflow: ellipsis;</code>：在文本溢出时显示省略号。</li>\n</ul>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;单行文本溢出隐藏&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .single-line &#123;\n        width: 200px; &#x2F;* 设置宽度 *&#x2F;\n        white-space: nowrap; &#x2F;* 不换行 *&#x2F;\n        overflow: hidden; &#x2F;* 隐藏溢出内容 *&#x2F;\n        text-overflow: ellipsis; &#x2F;* 溢出时显示省略号 *&#x2F;\n        border: 1px solid #ccc; &#x2F;* 边框 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;single-line&quot;&gt;这是一个很长的文本，超出部分将被隐藏。&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"2-多行文本溢出隐藏\"><a href=\"#2-多行文本溢出隐藏\" class=\"headerlink\" title=\"2. 多行文本溢出隐藏\"></a>2. 多行文本溢出隐藏</h3><p>要隐藏多行文本的溢出部分，可以使用 <code>display: -webkit-box;</code> 和 <code>-webkit-line-clamp</code> 属性。这个方法在 WebKit 浏览器（如 Chrome 和 Safari）中有效。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;多行文本溢出隐藏&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .multi-line &#123;\n        width: 200px; &#x2F;* 设置宽度 *&#x2F;\n        display: -webkit-box; &#x2F;* 使用弹性盒子布局 *&#x2F;\n        -webkit-box-orient: vertical; &#x2F;* 垂直排列 *&#x2F;\n        -webkit-line-clamp: 3; &#x2F;* 限制显示的行数 *&#x2F;\n        overflow: hidden; &#x2F;* 隐藏溢出内容 *&#x2F;\n        text-overflow: ellipsis; &#x2F;* 溢出时显示省略号 *&#x2F;\n        border: 1px solid #ccc; &#x2F;* 边框 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;multi-line&quot;&gt;\n      这是一个很长的文本，超出部分将被隐藏。这里有更多的内容，继续增加文本以测试多行溢出效果。\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h3><ul>\n<li><strong>浏览器兼容性</strong>：<code>-webkit-line-clamp</code> 是一个非标准属性，主要在 WebKit 和 Blink 引擎的浏览器中有效（如 Chrome 和 Safari）。在 Firefox 和其他浏览器中可能不支持。</li>\n<li><strong>替代方案</strong>：对于不支持 <code>-webkit-line-clamp</code> 的浏览器，可以考虑使用 JavaScript 来实现多行文本的溢出处理。</li>\n</ul>\n<h3 id=\"4-总结-8\"><a href=\"#4-总结-8\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>单行文本溢出</strong>：使用 <code>overflow: hidden;</code>、<code>white-space: nowrap;</code> 和 <code>text-overflow: ellipsis;</code> 来处理。</li>\n<li><strong>多行文本溢出</strong>：使用 <code>display: -webkit-box;</code> 和 <code>-webkit-line-clamp</code> 来限制显示的行数，并隐藏溢出部分。</li>\n</ul>\n<h2 id=\"Sass、Less-是什么？为什么要使用他们？\"><a href=\"#Sass、Less-是什么？为什么要使用他们？\" class=\"headerlink\" title=\"Sass、Less 是什么？为什么要使用他们？\"></a>Sass、Less 是什么？为什么要使用他们？</h2><p><strong>Sass</strong> 和 <strong>LESS</strong> 是两种流行的 CSS 预处理器，它们扩展了 CSS 的功能，使得样式表的编写更加灵活和高效。以下是对这两者的详细介绍，包括它们的定义、功能、优点以及使用原因。</p>\n<h3 id=\"1-Sass（Syntactically-Awesome-Style-Sheets）\"><a href=\"#1-Sass（Syntactically-Awesome-Style-Sheets）\" class=\"headerlink\" title=\"1. Sass（Syntactically Awesome Style Sheets）\"></a>1. Sass（Syntactically Awesome Style Sheets）</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Sass 是一种 CSS 预处理器，允许开发者使用更高级的语法来编写 CSS。它提供了变量、嵌套、混合、函数等功能，使得样式表的编写更加模块化和可维护。</p>\n<h4 id=\"功能-2\"><a href=\"#功能-2\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li><p><strong>变量</strong>：可以定义可重用的值（如颜色、字体大小等）。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">$primary-color: #3498db;</code></pre>\n</li>\n<li><p><strong>嵌套</strong>：支持嵌套选择器，使得样式结构更清晰。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.nav &#123;\n  ul &#123;\n    list-style: none;\n  &#125;\n  li &#123;\n    display: inline-block;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p><strong>混合</strong>：允许定义可重用的样式块。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@mixin border-radius($radius) &#123;\n  border-radius: $radius;\n&#125;</code></pre>\n</li>\n<li><p><strong>继承</strong>：支持样式的继承，减少重复代码。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.message &#123;\n  border: 1px solid #ccc;\n  padding: 10px;\n&#125;\n.success &#123;\n  @extend .message;\n  border-color: green;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><strong>提高可维护性</strong>：使用变量和混合可以减少重复代码，使样式表更易于维护。</li>\n<li><strong>增强可读性</strong>：嵌套结构使得样式层次更加清晰，便于理解。</li>\n<li><strong>减少代码量</strong>：通过重用样式和使用函数，可以减少冗余代码。</li>\n</ul>\n<h3 id=\"2-LESS\"><a href=\"#2-LESS\" class=\"headerlink\" title=\"2. LESS\"></a>2. LESS</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>LESS 是另一种 CSS 预处理器，提供类似于 Sass 的功能，允许开发者使用变量、嵌套、混合等特性来编写 CSS。</p>\n<h4 id=\"功能-3\"><a href=\"#功能-3\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li><p><strong>变量</strong>：可以定义可重用的值。</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">@primary-color: #3498db;</code></pre>\n</li>\n<li><p><strong>嵌套</strong>：支持嵌套选择器。</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">.nav &#123;\n  ul &#123;\n    list-style: none;\n  &#125;\n  li &#123;\n    display: inline-block;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p><strong>混合</strong>：允许定义可重用的样式块。</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">.border-radius(@radius) &#123;\n  border-radius: @radius;\n&#125;</code></pre>\n</li>\n<li><p><strong>运算</strong>：支持简单的数学运算。</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">width: 100px + 20px; &#x2F;* 120px *&#x2F;</code></pre></li>\n</ul>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><strong>易于学习</strong>：LESS 的语法相对简单，容易上手。</li>\n<li><strong>灵活性</strong>：支持动态样式和运算，增强了 CSS 的功能。</li>\n</ul>\n<h3 id=\"3-为什么要使用-Sass-和-LESS？\"><a href=\"#3-为什么要使用-Sass-和-LESS？\" class=\"headerlink\" title=\"3. 为什么要使用 Sass 和 LESS？\"></a>3. 为什么要使用 Sass 和 LESS？</h3><ul>\n<li><strong>提高开发效率</strong>：使用预处理器可以减少重复代码，提高开发效率，尤其是在大型项目中。</li>\n<li><strong>增强可维护性</strong>：通过使用变量、混合和嵌套，样式表的结构更加清晰，便于维护和更新。</li>\n<li><strong>支持模块化</strong>：可以将样式分割成多个文件，使用 <code>@import</code> 语句将它们组合在一起，增强了代码的组织性。</li>\n<li><strong>功能扩展</strong>：预处理器提供了许多 CSS 不具备的功能，如条件语句、循环、函数等，使得样式表的编写更加灵活。</li>\n</ul>\n<h3 id=\"4-总结-9\"><a href=\"#4-总结-9\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>Sass</strong> 和 <strong>LESS</strong> 是流行的 CSS 预处理器，提供了变量、嵌套、混合等功能，增强了 CSS 的可维护性和可读性。</li>\n<li>使用它们可以提高开发效率，减少冗余代码，支持模块化和功能扩展。</li>\n</ul>\n<h2 id=\"对媒体查询的理解？\"><a href=\"#对媒体查询的理解？\" class=\"headerlink\" title=\"对媒体查询的理解？\"></a>对媒体查询的理解？</h2><p><strong>媒体查询</strong>（Media Queries）是 CSS3 中的一项重要功能，用于实现响应式设计。它允许开发者根据不同的设备特性（如屏幕宽度、高度、分辨率等）应用不同的样式，从而使网页在各种设备上都能良好显示。以下是对媒体查询的详细理解，包括其定义、语法、使用场景和示例。</p>\n<h3 id=\"1-媒体查询的定义\"><a href=\"#1-媒体查询的定义\" class=\"headerlink\" title=\"1. 媒体查询的定义\"></a>1. 媒体查询的定义</h3><p>媒体查询是一种条件语句，允许开发者根据设备的特性（如视口宽度、设备类型、方向等）来应用特定的 CSS 样式。通过媒体查询，开发者可以为不同的设备和屏幕尺寸提供不同的样式，从而实现响应式布局。</p>\n<h3 id=\"2-媒体查询的语法\"><a href=\"#2-媒体查询的语法\" class=\"headerlink\" title=\"2. 媒体查询的语法\"></a>2. 媒体查询的语法</h3><p>媒体查询的基本语法如下：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@media media-type and (condition) &#123;\n  &#x2F;* CSS 规则 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li><strong>media-type</strong>：指定媒体类型，如 <code>screen</code>（屏幕）、<code>print</code>（打印）等。可以省略，默认是 <code>all</code>。</li>\n<li><strong>condition</strong>：指定条件，如 <code>max-width</code>、<code>min-width</code>、<code>orientation</code> 等。</li>\n</ul>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&#x2F;* 针对所有设备 *&#x2F;\n@media all &#123;\n  body &#123;\n    background-color: white;\n  &#125;\n&#125;\n\n&#x2F;* 针对屏幕设备，最大宽度为 600px *&#x2F;\n@media screen and (max-width: 600px) &#123;\n  body &#123;\n    background-color: lightblue;\n  &#125;\n&#125;\n\n&#x2F;* 针对打印设备 *&#x2F;\n@media print &#123;\n  body &#123;\n    font-size: 12pt;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-常用的媒体查询条件\"><a href=\"#3-常用的媒体查询条件\" class=\"headerlink\" title=\"3. 常用的媒体查询条件\"></a>3. 常用的媒体查询条件</h3><ul>\n<li><p><strong>宽度和高度</strong>：</p>\n<ul>\n<li><code>min-width</code>：视口宽度大于或等于指定值。</li>\n<li><code>max-width</code>：视口宽度小于或等于指定值。</li>\n<li><code>min-height</code>：视口高度大于或等于指定值。</li>\n<li><code>max-height</code>：视口高度小于或等于指定值。</li>\n</ul>\n</li>\n<li><p><strong>设备特性</strong>：</p>\n<ul>\n<li><code>orientation</code>：设备方向（<code>portrait</code> 或 <code>landscape</code>）。</li>\n<li><code>resolution</code>：设备的分辨率。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-使用场景\"><a href=\"#4-使用场景\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h3><ul>\n<li><strong>响应式设计</strong>：根据不同的屏幕尺寸和设备类型调整布局和样式，以确保良好的用户体验。</li>\n<li><strong>适配不同设备</strong>：为手机、平板和桌面设备提供不同的样式，优化内容的可读性和可访问性。</li>\n<li><strong>打印样式</strong>：为打印输出提供特定的样式，确保打印效果良好。</li>\n</ul>\n<h3 id=\"5-示例-1\"><a href=\"#5-示例-1\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><p>以下是一个简单的示例，展示如何使用媒体查询实现响应式设计：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;媒体查询示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 20px;\n      &#125;\n\n      h1 &#123;\n        color: black;\n      &#125;\n\n      &#x2F;* 针对最大宽度为 600px 的设备 *&#x2F;\n      @media screen and (max-width: 600px) &#123;\n        body &#123;\n          background-color: lightblue;\n        &#125;\n\n        h1 &#123;\n          font-size: 24px;\n        &#125;\n      &#125;\n\n      &#x2F;* 针对最大宽度为 400px 的设备 *&#x2F;\n      @media screen and (max-width: 400px) &#123;\n        body &#123;\n          background-color: lightcoral;\n        &#125;\n\n        h1 &#123;\n          font-size: 20px;\n        &#125;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎使用媒体查询！&lt;&#x2F;h1&gt;\n    &lt;p&gt;根据设备的不同，背景颜色和字体大小会有所变化。&lt;&#x2F;p&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"6-总结-1\"><a href=\"#6-总结-1\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><ul>\n<li><strong>媒体查询</strong> 是 CSS3 中的一项重要功能，允许开发者根据设备特性应用不同的样式。</li>\n<li>媒体查询的使用使得响应式设计成为可能，能够为不同设备提供优化的用户体验。</li>\n<li>通过合理使用媒体查询，可以确保网页在各种设备上都能良好显示，提高可访问性和可读性。</li>\n</ul>\n<h2 id=\"对-CSS-工程化的理解\"><a href=\"#对-CSS-工程化的理解\" class=\"headerlink\" title=\"对 CSS 工程化的理解\"></a>对 CSS 工程化的理解</h2><p><strong>CSS 工程化</strong> 是指在大型项目中，通过系统化、模块化和自动化的方式来管理和组织 CSS 代码，以提高开发效率、可维护性和可扩展性。随着项目规模的扩大，传统的 CSS 编写方式可能会导致代码混乱、重复和难以维护，因此 CSS 工程化应运而生。以下是对 CSS 工程化的详细理解，包括其核心概念、方法和工具。</p>\n<h3 id=\"1-核心概念\"><a href=\"#1-核心概念\" class=\"headerlink\" title=\"1. 核心概念\"></a>1. 核心概念</h3><ul>\n<li><p><strong>模块化</strong>：将 CSS 代码分割成多个模块，每个模块负责特定的功能或样式。这样可以提高代码的可读性和可维护性，避免样式冲突。</p>\n</li>\n<li><p><strong>可复用性</strong>：通过使用变量、混合、函数等特性，创建可复用的样式组件，减少代码重复，提高开发效率。</p>\n</li>\n<li><p><strong>命名规范</strong>：采用一致的命名规范（如 BEM、OOCSS、SMACSS 等），使得样式类名具有可读性和可预测性，便于团队协作。</p>\n</li>\n<li><p><strong>自动化</strong>：使用构建工具（如 Gulp、Webpack、Grunt 等）自动化 CSS 的编译、压缩、前缀添加等任务，提高开发效率。</p>\n</li>\n</ul>\n<h3 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2. 方法\"></a>2. 方法</h3><h4 id=\"2-1-预处理器\"><a href=\"#2-1-预处理器\" class=\"headerlink\" title=\"2.1 预处理器\"></a>2.1 预处理器</h4><p>使用 CSS 预处理器（如 Sass、LESS）来增强 CSS 的功能，支持变量、嵌套、混合等特性，使得样式表的编写更加灵活和高效。</p>\n<h4 id=\"2-2-组件化\"><a href=\"#2-2-组件化\" class=\"headerlink\" title=\"2.2 组件化\"></a>2.2 组件化</h4><p>将样式分割成独立的组件，每个组件负责特定的 UI 元素（如按钮、卡片、表单等），并通过类名进行组合。这样可以提高代码的可复用性和可维护性。</p>\n<h4 id=\"2-3-响应式设计\"><a href=\"#2-3-响应式设计\" class=\"headerlink\" title=\"2.3 响应式设计\"></a>2.3 响应式设计</h4><p>使用媒体查询和灵活的布局（如 Flexbox 和 Grid）来实现响应式设计，确保在不同设备上都有良好的用户体验。</p>\n<h4 id=\"2-4-版本控制\"><a href=\"#2-4-版本控制\" class=\"headerlink\" title=\"2.4 版本控制\"></a>2.4 版本控制</h4><p>使用版本控制系统（如 Git）来管理 CSS 代码的变更，便于团队协作和代码回滚。</p>\n<h3 id=\"3-工具\"><a href=\"#3-工具\" class=\"headerlink\" title=\"3. 工具\"></a>3. 工具</h3><h4 id=\"3-1-构建工具\"><a href=\"#3-1-构建工具\" class=\"headerlink\" title=\"3.1 构建工具\"></a>3.1 构建工具</h4><ul>\n<li><strong>Webpack</strong>：一个模块打包工具，可以处理 CSS、JavaScript、图像等资源，支持热重载和代码分割。</li>\n<li><strong>Gulp</strong>：一个流式构建工具，可以自动化 CSS 的编译、压缩、前缀添加等任务。</li>\n<li><strong>PostCSS</strong>：一个 CSS 后处理器，可以使用插件来增强 CSS 的功能，如自动添加浏览器前缀、压缩等。</li>\n</ul>\n<h4 id=\"3-2-CSS-预处理器\"><a href=\"#3-2-CSS-预处理器\" class=\"headerlink\" title=\"3.2 CSS 预处理器\"></a>3.2 CSS 预处理器</h4><ul>\n<li><strong>Sass</strong>：提供变量、嵌套、混合等功能，增强 CSS 的可维护性。</li>\n<li><strong>LESS</strong>：类似于 Sass，提供变量、嵌套和混合等功能。</li>\n</ul>\n<h4 id=\"3-3-CSS-框架\"><a href=\"#3-3-CSS-框架\" class=\"headerlink\" title=\"3.3 CSS 框架\"></a>3.3 CSS 框架</h4><ul>\n<li><strong>Bootstrap</strong>：一个流行的 CSS 框架，提供响应式布局和预定义的组件，帮助快速构建 UI。</li>\n<li><strong>Tailwind CSS</strong>：一个实用优先的 CSS 框架，允许开发者通过类名组合来构建自定义设计。</li>\n</ul>\n<h3 id=\"4-总结-10\"><a href=\"#4-总结-10\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>CSS 工程化</strong> 是一种系统化、模块化和自动化的 CSS 管理方式，旨在提高开发效率、可维护性和可扩展性。</li>\n<li>通过使用预处理器、构建工具、组件化和命名规范等方法，可以有效管理和组织 CSS 代码，适应大型项目的需求。</li>\n<li>CSS 工程化是现代前端开发的重要组成部分，有助于提升团队协作和代码质量。</li>\n</ul>\n<h2 id=\"如何判断元素是否到达可视区域\"><a href=\"#如何判断元素是否到达可视区域\" class=\"headerlink\" title=\"如何判断元素是否到达可视区域\"></a>如何判断元素是否到达可视区域</h2><p>在网页开发中，判断一个元素是否到达可视区域（即用户当前可见的部分）是一个常见的需求，尤其是在实现懒加载、滚动动画或触发特定事件时。以下是几种常用的方法来判断元素是否在可视区域内。</p>\n<h3 id=\"1-使用-getBoundingClientRect\"><a href=\"#1-使用-getBoundingClientRect\" class=\"headerlink\" title=\"1. 使用 getBoundingClientRect()\"></a>1. 使用 <code>getBoundingClientRect()</code></h3><p><code>getBoundingClientRect()</code> 方法返回一个 DOMRect 对象，该对象提供了元素的大小及其相对于视口的位置。可以通过比较元素的位置与视口的边界来判断元素是否在可视区域内。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function isElementInViewport(el) &#123;\n  const rect &#x3D; el.getBoundingClientRect();\n  return (\n    rect.top &gt;&#x3D; 0 &amp;&amp; &#x2F;&#x2F; 元素顶部在视口内\n    rect.left &gt;&#x3D; 0 &amp;&amp; &#x2F;&#x2F; 元素左侧在视口内\n    rect.bottom &lt;&#x3D;\n      (window.innerHeight || document.documentElement.clientHeight) &amp;&amp; &#x2F;&#x2F; 元素底部在视口内\n    rect.right &lt;&#x3D; (window.innerWidth || document.documentElement.clientWidth) &#x2F;&#x2F; 元素右侧在视口内\n  );\n&#125;\n\n&#x2F;&#x2F; 使用示例\nconst element &#x3D; document.querySelector(&quot;.my-element&quot;);\nif (isElementInViewport(element)) &#123;\n  console.log(&quot;元素在可视区域内&quot;);\n&#125; else &#123;\n  console.log(&quot;元素不在可视区域内&quot;);\n&#125;</code></pre>\n\n<h3 id=\"2-使用-Intersection-Observer-API\"><a href=\"#2-使用-Intersection-Observer-API\" class=\"headerlink\" title=\"2. 使用 Intersection Observer API\"></a>2. 使用 Intersection Observer API</h3><p><code>Intersection Observer</code> 是一种更现代的 API，用于异步观察目标元素与其祖先元素或视口的交叉状态。它可以有效地判断元素是否进入或离开可视区域。</p>\n<h4 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建一个 Intersection Observer 实例\nconst observer &#x3D; new IntersectionObserver((entries) &#x3D;&gt; &#123;\n  entries.forEach((entry) &#x3D;&gt; &#123;\n    if (entry.isIntersecting) &#123;\n      console.log(&quot;元素在可视区域内&quot;);\n      &#x2F;&#x2F; 可以在这里执行相关操作\n    &#125; else &#123;\n      console.log(&quot;元素不在可视区域内&quot;);\n    &#125;\n  &#125;);\n&#125;);\n\n&#x2F;&#x2F; 选择要观察的元素\nconst element &#x3D; document.querySelector(&quot;.my-element&quot;);\nobserver.observe(element);</code></pre>\n\n<h3 id=\"3-监听滚动事件\"><a href=\"#3-监听滚动事件\" class=\"headerlink\" title=\"3. 监听滚动事件\"></a>3. 监听滚动事件</h3><p>可以通过监听滚动事件来判断元素是否在可视区域内，但这种方法效率较低，可能会导致性能问题，尤其是在滚动频繁的情况下。</p>\n<h4 id=\"示例代码-2\"><a href=\"#示例代码-2\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window.addEventListener(&quot;scroll&quot;, () &#x3D;&gt; &#123;\n  const element &#x3D; document.querySelector(&quot;.my-element&quot;);\n  if (isElementInViewport(element)) &#123;\n    console.log(&quot;元素在可视区域内&quot;);\n  &#125; else &#123;\n    console.log(&quot;元素不在可视区域内&quot;);\n  &#125;\n&#125;);</code></pre>\n\n<h3 id=\"4-总结-11\"><a href=\"#4-总结-11\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li>**<code>getBoundingClientRect()</code>**：适合简单的判断，直接获取元素的位置信息。</li>\n<li>**<code>Intersection Observer API</code>**：现代且高效，适合处理多个元素的可视状态，推荐使用。</li>\n<li><strong>监听滚动事件</strong>：简单但性能较低，不推荐在高频率的滚动事件中使用。</li>\n</ul>\n<h2 id=\"z-index-属性在什么情况下会失效\"><a href=\"#z-index-属性在什么情况下会失效\" class=\"headerlink\" title=\"z-index 属性在什么情况下会失效\"></a>z-index 属性在什么情况下会失效</h2><p><code>z-index</code> 属性用于控制元素的堆叠顺序，决定了元素在 z 轴上的位置。虽然 <code>z-index</code> 是一个强大的工具，但在某些情况下，它可能会失效。以下是一些常见的情况，导致 <code>z-index</code> 属性失效的原因：</p>\n<h3 id=\"1-没有设置定位属性\"><a href=\"#1-没有设置定位属性\" class=\"headerlink\" title=\"1. 没有设置定位属性\"></a>1. 没有设置定位属性</h3><p><code>z-index</code> 只对具有定位属性的元素有效。要使 <code>z-index</code> 生效，元素必须具有以下定位属性之一：</p>\n<ul>\n<li><code>position: relative;</code></li>\n<li><code>position: absolute;</code></li>\n<li><code>position: fixed;</code></li>\n<li><code>position: sticky;</code></li>\n</ul>\n<p>如果元素没有设置这些定位属性，<code>z-index</code> 将不会生效。</p>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box1 &#123;\n  position: relative; &#x2F;* z-index 将生效 *&#x2F;\n  z-index: 1;\n&#125;\n\n.box2 &#123;\n  z-index: 2; &#x2F;* z-index 不会生效，因为没有设置定位属性 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-堆叠上下文\"><a href=\"#2-堆叠上下文\" class=\"headerlink\" title=\"2. 堆叠上下文\"></a>2. 堆叠上下文</h3><p><code>z-index</code> 的作用范围受到堆叠上下文的影响。每当创建一个新的堆叠上下文时，<code>z-index</code> 的值只在该上下文内有效。新的堆叠上下文可以通过以下方式创建：</p>\n<ul>\n<li>具有 <code>position</code> 属性且 <code>z-index</code> 不为 <code>auto</code> 的元素。</li>\n<li>具有 <code>opacity</code> 值小于 1 的元素。</li>\n<li>具有 <code>transform</code>、<code>filter</code>、<code>perspective</code> 等 CSS 属性的元素。</li>\n</ul>\n<p>在新的堆叠上下文中，<code>z-index</code> 的值只会影响该上下文内的元素，而不会影响外部元素。</p>\n<h4 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  position: relative;\n  z-index: 1; &#x2F;* 创建新的堆叠上下文 *&#x2F;\n&#125;\n\n.child &#123;\n  position: absolute;\n  z-index: 2; &#x2F;* 只在 .parent 的上下文内有效 *&#x2F;\n&#125;\n\n.other &#123;\n  position: absolute;\n  z-index: 3; &#x2F;* 可能会在 .child 之上或之下，取决于 .parent 的 z-index *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-兄弟元素的-z-index\"><a href=\"#3-兄弟元素的-z-index\" class=\"headerlink\" title=\"3. 兄弟元素的 z-index\"></a>3. 兄弟元素的 z-index</h3><p>即使两个元素都具有相同的父元素和 <code>position</code> 属性，<code>z-index</code> 的值也只在同一堆叠上下文内有效。如果两个元素在不同的堆叠上下文中，<code>z-index</code> 的值将无法比较。</p>\n<h4 id=\"示例-6\"><a href=\"#示例-6\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent1 &#123;\n  position: relative;\n  z-index: 1;\n&#125;\n\n.parent2 &#123;\n  position: relative;\n  z-index: 2;\n&#125;\n\n.child1 &#123;\n  position: absolute;\n  z-index: 3; &#x2F;* 在 .parent1 的上下文内 *&#x2F;\n&#125;\n\n.child2 &#123;\n  position: absolute;\n  z-index: 1; &#x2F;* 在 .parent2 的上下文内 *&#x2F;\n&#125;</code></pre>\n\n<p>在这个例子中，尽管 <code>child1</code> 的 <code>z-index</code> 值为 3，但由于它在不同的堆叠上下文中，<code>child2</code> 的 <code>z-index</code> 值为 1 可能会在视觉上覆盖 <code>child1</code>。</p>\n<h3 id=\"4-透明度和变换\"><a href=\"#4-透明度和变换\" class=\"headerlink\" title=\"4. 透明度和变换\"></a>4. 透明度和变换</h3><p>如果元素的 <code>opacity</code> 值小于 1，或者应用了 <code>transform</code>、<code>filter</code> 等属性，可能会创建新的堆叠上下文，从而影响 <code>z-index</code> 的效果。</p>\n<h3 id=\"5-其他-CSS-属性\"><a href=\"#5-其他-CSS-属性\" class=\"headerlink\" title=\"5. 其他 CSS 属性\"></a>5. 其他 CSS 属性</h3><p>某些 CSS 属性（如 <code>overflow</code>）也可能影响元素的可见性和堆叠顺序。例如，设置 <code>overflow: hidden;</code> 的父元素可能会裁剪其子元素，即使子元素的 <code>z-index</code> 值较高。</p>\n<h3 id=\"6-总结-2\"><a href=\"#6-总结-2\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><ul>\n<li><code>z-index</code> 只对具有定位属性的元素有效。</li>\n<li>堆叠上下文的创建会影响 <code>z-index</code> 的作用范围。</li>\n<li><code>z-index</code> 的值只在同一堆叠上下文内有效，无法跨上下文比较。</li>\n<li>透明度、变换和其他 CSS 属性可能会影响 <code>z-index</code> 的效果。</li>\n</ul>\n<h2 id=\"CSS3-中的-transform-有哪些属性\"><a href=\"#CSS3-中的-transform-有哪些属性\" class=\"headerlink\" title=\"CSS3 中的 transform 有哪些属性\"></a>CSS3 中的 transform 有哪些属性</h2><p>在 CSS3 中，<code>transform</code> 属性用于对元素进行二维或三维变换。它可以应用于任何可定位的元素，并允许开发者对元素进行平移、旋转、缩放和倾斜等操作。以下是 CSS3 中 <code>transform</code> 属性的主要变换函数：</p>\n<h3 id=\"1-2D-变换\"><a href=\"#1-2D-变换\" class=\"headerlink\" title=\"1. 2D 变换\"></a>1. 2D 变换</h3><h4 id=\"1-1-translate\"><a href=\"#1-1-translate\" class=\"headerlink\" title=\"1.1 translate()\"></a>1.1 <code>translate()</code></h4><ul>\n<li><strong>功能</strong>：平移元素的位置。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: translate(x, y);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: translate(50px, 100px); &#x2F;* 向右移动 50 像素，向下移动 100 像素 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"1-2-rotate\"><a href=\"#1-2-rotate\" class=\"headerlink\" title=\"1.2 rotate()\"></a>1.2 <code>rotate()</code></h4><ul>\n<li><strong>功能</strong>：旋转元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: rotate(angle);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: rotate(45deg); &#x2F;* 旋转 45 度 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"1-3-scale\"><a href=\"#1-3-scale\" class=\"headerlink\" title=\"1.3 scale()\"></a>1.3 <code>scale()</code></h4><ul>\n<li><strong>功能</strong>：缩放元素的大小。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: scale(sx, sy);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: scale(1.5, 2); &#x2F;* 水平放大 1.5 倍，垂直放大 2 倍 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"1-4-skew\"><a href=\"#1-4-skew\" class=\"headerlink\" title=\"1.4 skew()\"></a>1.4 <code>skew()</code></h4><ul>\n<li><strong>功能</strong>：倾斜元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: skew(x-angle, y-angle);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: skew(20deg, 10deg); &#x2F;* 水平倾斜 20 度，垂直倾斜 10 度 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"2-组合变换\"><a href=\"#2-组合变换\" class=\"headerlink\" title=\"2. 组合变换\"></a>2. 组合变换</h3><p>可以将多个变换函数组合在一起，使用空格分隔：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: translate(50px, 100px) rotate(45deg) scale(1.5);\n&#125;</code></pre>\n\n<h3 id=\"3-3D-变换\"><a href=\"#3-3D-变换\" class=\"headerlink\" title=\"3. 3D 变换\"></a>3. 3D 变换</h3><p>CSS3 还支持 3D 变换，以下是一些常用的 3D 变换函数：</p>\n<h4 id=\"3-1-translateZ\"><a href=\"#3-1-translateZ\" class=\"headerlink\" title=\"3.1 translateZ()\"></a>3.1 <code>translateZ()</code></h4><ul>\n<li><strong>功能</strong>：在 Z 轴上平移元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: translateZ(value);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: translateZ(100px); &#x2F;* 向观察者方向移动 100 像素 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-2-rotateX\"><a href=\"#3-2-rotateX\" class=\"headerlink\" title=\"3.2 rotateX()\"></a>3.2 <code>rotateX()</code></h4><ul>\n<li><strong>功能</strong>：围绕 X 轴旋转元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: rotateX(angle);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: rotateX(45deg); &#x2F;* 绕 X 轴旋转 45 度 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-3-rotateY\"><a href=\"#3-3-rotateY\" class=\"headerlink\" title=\"3.3 rotateY()\"></a>3.3 <code>rotateY()</code></h4><ul>\n<li><strong>功能</strong>：围绕 Y 轴旋转元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: rotateY(angle);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: rotateY(45deg); &#x2F;* 绕 Y 轴旋转 45 度 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h4 id=\"3-4-rotateZ\"><a href=\"#3-4-rotateZ\" class=\"headerlink\" title=\"3.4 rotateZ()\"></a>3.4 <code>rotateZ()</code></h4><ul>\n<li><strong>功能</strong>：围绕 Z 轴旋转元素（与 <code>rotate()</code> 相同）。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: rotateZ(angle);</code></pre></li>\n</ul>\n<h4 id=\"3-5-scaleZ\"><a href=\"#3-5-scaleZ\" class=\"headerlink\" title=\"3.5 scaleZ()\"></a>3.5 <code>scaleZ()</code></h4><ul>\n<li><strong>功能</strong>：在 Z 轴上缩放元素。</li>\n<li><strong>语法</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">transform: scaleZ(sx);</code></pre></li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform: scaleZ(1.5); &#x2F;* 在 Z 轴上放大 1.5 倍 *&#x2F;\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"4-变换原点\"><a href=\"#4-变换原点\" class=\"headerlink\" title=\"4. 变换原点\"></a>4. 变换原点</h3><p>可以使用 <code>transform-origin</code> 属性来设置变换的原点，默认情况下，变换是围绕元素的中心进行的。</p>\n<h4 id=\"示例-7\"><a href=\"#示例-7\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  transform-origin: top left; &#x2F;* 设置变换原点为左上角 *&#x2F;\n  transform: rotate(45deg);\n&#125;</code></pre>\n\n<h3 id=\"5-总结-5\"><a href=\"#5-总结-5\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li>CSS3 中的 <code>transform</code> 属性提供了多种变换函数，包括平移、旋转、缩放和倾斜等。</li>\n<li>可以组合多个变换函数来实现复杂的效果。</li>\n<li>支持 3D 变换，允许在三维空间中操作元素。</li>\n<li>使用 <code>transform-origin</code> 属性可以控制变换的原点。</li>\n</ul>\n<h1 id=\"二、页面布局\"><a href=\"#二、页面布局\" class=\"headerlink\" title=\"二、页面布局\"></a>二、页面布局</h1><h2 id=\"常见的-CSS-布局单位\"><a href=\"#常见的-CSS-布局单位\" class=\"headerlink\" title=\"常见的 CSS 布局单位\"></a>常见的 CSS 布局单位</h2><p>在 CSS 中，布局单位用于定义元素的尺寸、间距和位置。了解这些单位的使用场景和特点对于网页设计和开发至关重要。以下是一些常见的 CSS 布局单位及其说明：</p>\n<h3 id=\"1-绝对单位\"><a href=\"#1-绝对单位\" class=\"headerlink\" title=\"1. 绝对单位\"></a>1. 绝对单位</h3><p>绝对单位是固定的，不受其他元素或视口大小的影响。</p>\n<h4 id=\"1-1-像素（px）\"><a href=\"#1-1-像素（px）\" class=\"headerlink\" title=\"1.1 像素（px）\"></a>1.1 像素（px）</h4><ul>\n<li><strong>定义</strong>：最常用的绝对单位，表示屏幕上的一个点。</li>\n<li><strong>使用场景</strong>：适用于需要精确控制尺寸的情况，如图像、边框和字体大小。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 200px;\n  height: 100px;\n&#125;</code></pre>\n\n<h4 id=\"1-2-厘米（cm）和毫米（mm）\"><a href=\"#1-2-厘米（cm）和毫米（mm）\" class=\"headerlink\" title=\"1.2 厘米（cm）和毫米（mm）\"></a>1.2 厘米（cm）和毫米（mm）</h4><ul>\n<li><strong>定义</strong>：用于打印样式，表示实际的物理尺寸。</li>\n<li><strong>使用场景</strong>：适用于打印样式表，通常不用于屏幕显示。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 5cm; &#x2F;* 5 厘米宽 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"1-3-英寸（in）\"><a href=\"#1-3-英寸（in）\" class=\"headerlink\" title=\"1.3 英寸（in）\"></a>1.3 英寸（in）</h4><ul>\n<li><strong>定义</strong>：表示实际的物理尺寸，1 英寸等于 2.54 厘米。</li>\n<li><strong>使用场景</strong>：同样适用于打印样式。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 2in; &#x2F;* 2 英寸宽 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"1-4-点（pt）和派卡（pc）\"><a href=\"#1-4-点（pt）和派卡（pc）\" class=\"headerlink\" title=\"1.4 点（pt）和派卡（pc）\"></a>1.4 点（pt）和派卡（pc）</h4><ul>\n<li><strong>定义</strong>：点是印刷行业的单位，1 点等于 1&#x2F;72 英寸；派卡是 12 点。</li>\n<li><strong>使用场景</strong>：主要用于打印样式。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  font-size: 12pt; &#x2F;* 12 点字体大小 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-相对单位\"><a href=\"#2-相对单位\" class=\"headerlink\" title=\"2. 相对单位\"></a>2. 相对单位</h3><p>相对单位是相对于其他元素或视口的大小而变化的单位。</p>\n<h4 id=\"2-1-百分比（-）\"><a href=\"#2-1-百分比（-）\" class=\"headerlink\" title=\"2.1 百分比（%）\"></a>2.1 百分比（%）</h4><ul>\n<li><strong>定义</strong>：相对于父元素的尺寸。</li>\n<li><strong>使用场景</strong>：适用于响应式设计，能够根据父元素的大小动态调整。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 50%; &#x2F;* 宽度为父元素的 50% *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-2-em\"><a href=\"#2-2-em\" class=\"headerlink\" title=\"2.2 em\"></a>2.2 em</h4><ul>\n<li><strong>定义</strong>：相对于当前元素的字体大小。1em 等于当前元素的字体大小。</li>\n<li><strong>使用场景</strong>：适用于字体大小、内边距和边距等，能够实现相对布局。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  font-size: 2em; &#x2F;* 字体大小为父元素字体大小的 2 倍 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-3-rem\"><a href=\"#2-3-rem\" class=\"headerlink\" title=\"2.3 rem\"></a>2.3 rem</h4><ul>\n<li><strong>定义</strong>：相对于根元素（通常是 <code>&lt;html&gt;</code>）的字体大小。1rem 等于根元素的字体大小。</li>\n<li><strong>使用场景</strong>：适用于全局字体大小和布局，能够保持一致性。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  font-size: 1.5rem; &#x2F;* 字体大小为根元素字体大小的 1.5 倍 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-4-vw-和-vh\"><a href=\"#2-4-vw-和-vh\" class=\"headerlink\" title=\"2.4 vw 和 vh\"></a>2.4 vw 和 vh</h4><ul>\n<li><strong>定义</strong>：<code>vw</code> 表示视口宽度的 1%，<code>vh</code> 表示视口高度的 1%。</li>\n<li><strong>使用场景</strong>：适用于响应式设计，能够根据视口大小动态调整。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 50vw; &#x2F;* 宽度为视口宽度的 50% *&#x2F;\n  height: 100vh; &#x2F;* 高度为视口高度的 100% *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-其他单位\"><a href=\"#3-其他单位\" class=\"headerlink\" title=\"3. 其他单位\"></a>3. 其他单位</h3><h4 id=\"3-1-vmin-和-vmax\"><a href=\"#3-1-vmin-和-vmax\" class=\"headerlink\" title=\"3.1 vmin 和 vmax\"></a>3.1 vmin 和 vmax</h4><ul>\n<li><strong>定义</strong>：<code>vmin</code> 是视口宽度和高度中较小的一个的 1%，<code>vmax</code> 是较大的一个的 1%。</li>\n<li><strong>使用场景</strong>：适用于响应式设计，能够根据视口的最小或最大尺寸动态调整。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  font-size: 5vmin; &#x2F;* 字体大小为视口最小尺寸的 5% *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-总结-12\"><a href=\"#4-总结-12\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>绝对单位</strong>（如 px、cm、in）用于固定尺寸，适合精确控制。</li>\n<li><strong>相对单位</strong>（如 %、em、rem、vw、vh）适用于响应式设计，能够根据父元素或视口动态调整。</li>\n<li><strong>vmin 和 vmax</strong> 提供了更灵活的响应式设计选项。</li>\n</ul>\n<h2 id=\"px、em、rem-的区别及使用场景\"><a href=\"#px、em、rem-的区别及使用场景\" class=\"headerlink\" title=\"px、em、rem 的区别及使用场景\"></a>px、em、rem 的区别及使用场景</h2><p>在 CSS 中，<code>px</code>、<code>em</code> 和 <code>rem</code> 是三种常用的单位，用于设置元素的尺寸、间距和字体大小。它们各自有不同的特点和使用场景。以下是对这三种单位的详细解释及其区别：</p>\n<h3 id=\"1-px（像素）\"><a href=\"#1-px（像素）\" class=\"headerlink\" title=\"1. px（像素）\"></a>1. px（像素）</h3><ul>\n<li><p><strong>定义</strong>：<code>px</code> 是绝对单位，表示屏幕上的一个点。它是固定的，不会随着其他元素的变化而变化。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>不受父元素或根元素的影响，始终保持相同的大小。</li>\n<li>在不同的设备和屏幕分辨率上，<code>px</code> 的显示效果可能会有所不同。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适用于需要精确控制尺寸的情况，如图像、边框、阴影等。</li>\n<li>在设计中需要保持一致性时，使用 <code>px</code> 可以确保元素的大小不受其他因素影响。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-8\"><a href=\"#示例-8\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  width: 200px; &#x2F;* 固定宽度 *&#x2F;\n  height: 100px; &#x2F;* 固定高度 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-em\"><a href=\"#2-em\" class=\"headerlink\" title=\"2. em\"></a>2. em</h3><ul>\n<li><p><strong>定义</strong>：<code>em</code> 是相对单位，表示相对于当前元素的字体大小。1em 等于当前元素的字体大小。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>如果在一个元素上使用 <code>em</code>，它会根据该元素的字体大小进行计算。</li>\n<li>如果在嵌套元素中使用 <code>em</code>，则会继承父元素的字体大小，可能导致累积效果。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适用于需要相对调整的情况，如内边距、边距和字体大小等。</li>\n<li>在组件中使用 <code>em</code> 可以使得样式相对于组件的字体大小进行调整，增强灵活性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-9\"><a href=\"#示例-9\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  font-size: 16px; &#x2F;* 当前元素字体大小 *&#x2F;\n&#125;\n\n.child &#123;\n  font-size: 1.5em; &#x2F;* 字体大小为父元素的 1.5 倍，即 24px *&#x2F;\n  padding: 1em; &#x2F;* 内边距为当前字体大小的 1 倍，即 16px *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-rem\"><a href=\"#3-rem\" class=\"headerlink\" title=\"3. rem\"></a>3. rem</h3><ul>\n<li><p><strong>定义</strong>：<code>rem</code> 是相对单位，表示相对于根元素（通常是 <code>&lt;html&gt;</code>）的字体大小。1rem 等于根元素的字体大小。</p>\n</li>\n<li><p><strong>特点</strong>：</p>\n<ul>\n<li>不受父元素的影响，始终相对于根元素的字体大小进行计算。</li>\n<li>使得在整个文档中保持一致性，避免了 <code>em</code> 的累积效果。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong>：</p>\n<ul>\n<li>适用于全局字体大小、布局和间距等，能够保持一致性。</li>\n<li>在响应式设计中，使用 <code>rem</code> 可以方便地调整整个页面的比例。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-10\"><a href=\"#示例-10\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">html &#123;\n  font-size: 16px; &#x2F;* 根元素字体大小 *&#x2F;\n&#125;\n\n.element &#123;\n  font-size: 1.5rem; &#x2F;* 字体大小为根元素的 1.5 倍，即 24px *&#x2F;\n  margin: 2rem; &#x2F;* 外边距为根元素字体大小的 2 倍，即 32px *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-总结-13\"><a href=\"#4-总结-13\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><table>\n<thead>\n<tr>\n<th>单位</th>\n<th>定义</th>\n<th>特点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>px</code></td>\n<td>绝对单位，固定大小</td>\n<td>不受其他元素影响</td>\n<td>需要精确控制的情况，如图像、边框</td>\n</tr>\n<tr>\n<td><code>em</code></td>\n<td>相对单位，相对于当前元素的字体大小</td>\n<td>受父元素影响，可能导致累积</td>\n<td>需要相对调整的情况，如内边距、边距</td>\n</tr>\n<tr>\n<td><code>rem</code></td>\n<td>相对单位，相对于根元素的字体大小</td>\n<td>不受父元素影响，保持一致性</td>\n<td>全局字体大小、布局和响应式设计</td>\n</tr>\n</tbody></table>\n<h2 id=\"两栏布局的实现\"><a href=\"#两栏布局的实现\" class=\"headerlink\" title=\"两栏布局的实现\"></a>两栏布局的实现</h2><p>实现两栏布局是网页设计中的常见需求，通常用于将内容分为主内容区和侧边栏。以下是几种常见的实现两栏布局的方法，包括使用 CSS Flexbox、CSS Grid 和传统的浮动布局。</p>\n<h3 id=\"1-使用-CSS-Flexbox\"><a href=\"#1-使用-CSS-Flexbox\" class=\"headerlink\" title=\"1. 使用 CSS Flexbox\"></a>1. 使用 CSS Flexbox</h3><p>Flexbox 是一种现代的布局方式，适合于创建响应式布局。</p>\n<h4 id=\"示例代码-3\"><a href=\"#示例代码-3\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;两栏布局 - Flexbox&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        display: flex; &#x2F;* 使用 Flexbox 布局 *&#x2F;\n      &#125;\n      .main &#123;\n        flex: 3; &#x2F;* 主内容区占 3&#x2F;4 *&#x2F;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar &#123;\n        flex: 1; &#x2F;* 侧边栏占 1&#x2F;4 *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar&quot;&gt;侧边栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"2-使用-CSS-Grid\"><a href=\"#2-使用-CSS-Grid\" class=\"headerlink\" title=\"2. 使用 CSS Grid\"></a>2. 使用 CSS Grid</h3><p>CSS Grid 是另一种强大的布局方式，适合于创建复杂的布局。</p>\n<h4 id=\"示例代码-4\"><a href=\"#示例代码-4\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;两栏布局 - Grid&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        display: grid; &#x2F;* 使用 Grid 布局 *&#x2F;\n        grid-template-columns: 3fr 1fr; &#x2F;* 定义两列，主内容区占 3&#x2F;4，侧边栏占 1&#x2F;4 *&#x2F;\n        gap: 20px; &#x2F;* 列间距 *&#x2F;\n      &#125;\n      .main &#123;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar &#123;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar&quot;&gt;侧边栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3-使用浮动布局\"><a href=\"#3-使用浮动布局\" class=\"headerlink\" title=\"3. 使用浮动布局\"></a>3. 使用浮动布局</h3><p>虽然浮动布局是较旧的方法，但仍然可以实现两栏布局。</p>\n<h4 id=\"示例代码-5\"><a href=\"#示例代码-5\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;两栏布局 - 浮动&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        overflow: hidden; &#x2F;* 清除浮动 *&#x2F;\n      &#125;\n      .main &#123;\n        float: left; &#x2F;* 浮动到左侧 *&#x2F;\n        width: 75%; &#x2F;* 主内容区占 75% *&#x2F;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar &#123;\n        float: right; &#x2F;* 浮动到右侧 *&#x2F;\n        width: 25%; &#x2F;* 侧边栏占 25% *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar&quot;&gt;侧边栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-14\"><a href=\"#4-总结-14\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>Flexbox</strong>：适合于简单的两栏布局，易于实现响应式设计。</li>\n<li><strong>Grid</strong>：适合于更复杂的布局，提供更强大的控制能力。</li>\n<li><strong>浮动布局</strong>：虽然可以实现两栏布局，但相对较旧，使用时需要注意清除浮动。</li>\n</ul>\n<h2 id=\"三栏布局的实现\"><a href=\"#三栏布局的实现\" class=\"headerlink\" title=\"三栏布局的实现\"></a>三栏布局的实现</h2><p>实现三栏布局是网页设计中的常见需求，通常用于将内容分为左侧栏、主内容区和右侧栏。以下是几种常见的实现三栏布局的方法，包括使用 CSS Flexbox、CSS Grid 和传统的浮动布局。</p>\n<h3 id=\"1-使用-CSS-Flexbox-1\"><a href=\"#1-使用-CSS-Flexbox-1\" class=\"headerlink\" title=\"1. 使用 CSS Flexbox\"></a>1. 使用 CSS Flexbox</h3><p>Flexbox 是一种现代的布局方式，适合于创建响应式布局。</p>\n<h4 id=\"示例代码-6\"><a href=\"#示例代码-6\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;三栏布局 - Flexbox&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        display: flex; &#x2F;* 使用 Flexbox 布局 *&#x2F;\n      &#125;\n      .sidebar-left &#123;\n        flex: 1; &#x2F;* 左侧栏占 1&#x2F;4 *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n      .main &#123;\n        flex: 2; &#x2F;* 主内容区占 1&#x2F;2 *&#x2F;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar-right &#123;\n        flex: 1; &#x2F;* 右侧栏占 1&#x2F;4 *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;sidebar-left&quot;&gt;左侧栏&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar-right&quot;&gt;右侧栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"2-使用-CSS-Grid-1\"><a href=\"#2-使用-CSS-Grid-1\" class=\"headerlink\" title=\"2. 使用 CSS Grid\"></a>2. 使用 CSS Grid</h3><p>CSS Grid 是另一种强大的布局方式，适合于创建复杂的布局。</p>\n<h4 id=\"示例代码-7\"><a href=\"#示例代码-7\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;三栏布局 - Grid&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        display: grid; &#x2F;* 使用 Grid 布局 *&#x2F;\n        grid-template-columns: 1fr 2fr 1fr; &#x2F;* 左侧栏占 1&#x2F;4，主内容区占 1&#x2F;2，右侧栏占 1&#x2F;4 *&#x2F;\n        gap: 20px; &#x2F;* 列间距 *&#x2F;\n      &#125;\n      .sidebar-left &#123;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n      .main &#123;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar-right &#123;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;sidebar-left&quot;&gt;左侧栏&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar-right&quot;&gt;右侧栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3-使用浮动布局-1\"><a href=\"#3-使用浮动布局-1\" class=\"headerlink\" title=\"3. 使用浮动布局\"></a>3. 使用浮动布局</h3><p>虽然浮动布局是较旧的方法，但仍然可以实现三栏布局。</p>\n<h4 id=\"示例代码-8\"><a href=\"#示例代码-8\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;三栏布局 - 浮动&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        margin: 0;\n        font-family: Arial, sans-serif;\n      &#125;\n      .container &#123;\n        overflow: hidden; &#x2F;* 清除浮动 *&#x2F;\n      &#125;\n      .sidebar-left &#123;\n        float: left; &#x2F;* 浮动到左侧 *&#x2F;\n        width: 25%; &#x2F;* 左侧栏占 25% *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n      .main &#123;\n        float: left; &#x2F;* 浮动到中间 *&#x2F;\n        width: 50%; &#x2F;* 主内容区占 50% *&#x2F;\n        padding: 20px;\n        background-color: #f0f0f0;\n      &#125;\n      .sidebar-right &#123;\n        float: left; &#x2F;* 浮动到右侧 *&#x2F;\n        width: 25%; &#x2F;* 右侧栏占 25% *&#x2F;\n        padding: 20px;\n        background-color: #ccc;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;sidebar-left&quot;&gt;左侧栏&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;main&quot;&gt;主内容区&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;sidebar-right&quot;&gt;右侧栏&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-15\"><a href=\"#4-总结-15\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>Flexbox</strong>：适合于简单的三栏布局，易于实现响应式设计。</li>\n<li><strong>Grid</strong>：适合于更复杂的布局，提供更强大的控制能力。</li>\n<li><strong>浮动布局</strong>：虽然可以实现三栏布局，但相对较旧，使用时需要注意清除浮动。</li>\n</ul>\n<h2 id=\"水平垂直居中的实现\"><a href=\"#水平垂直居中的实现\" class=\"headerlink\" title=\"水平垂直居中的实现\"></a>水平垂直居中的实现</h2><p>在网页设计中，水平和垂直居中是常见的需求。以下是几种实现水平和垂直居中的方法，适用于不同的布局和场景。</p>\n<h3 id=\"1-使用-Flexbox\"><a href=\"#1-使用-Flexbox\" class=\"headerlink\" title=\"1. 使用 Flexbox\"></a>1. 使用 Flexbox</h3><p>Flexbox 是一种现代的布局方式，适合于实现居中对齐。</p>\n<h4 id=\"示例代码-9\"><a href=\"#示例代码-9\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Flexbox 居中&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        height: 100vh; &#x2F;* 设置高度为视口高度 *&#x2F;\n        margin: 0;\n        display: flex; &#x2F;* 使用 Flexbox 布局 *&#x2F;\n        justify-content: center; &#x2F;* 水平居中 *&#x2F;\n        align-items: center; &#x2F;* 垂直居中 *&#x2F;\n        background-color: #f0f0f0;\n      &#125;\n      .box &#123;\n        width: 200px;\n        height: 100px;\n        background-color: #3498db;\n        color: white;\n        text-align: center;\n        line-height: 100px; &#x2F;* 使文本垂直居中 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;居中内容&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"2-使用-CSS-Grid-2\"><a href=\"#2-使用-CSS-Grid-2\" class=\"headerlink\" title=\"2. 使用 CSS Grid\"></a>2. 使用 CSS Grid</h3><p>CSS Grid 也可以轻松实现居中对齐。</p>\n<h4 id=\"示例代码-10\"><a href=\"#示例代码-10\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Grid 居中&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        height: 100vh; &#x2F;* 设置高度为视口高度 *&#x2F;\n        margin: 0;\n        display: grid; &#x2F;* 使用 Grid 布局 *&#x2F;\n        place-items: center; &#x2F;* 同时水平和垂直居中 *&#x2F;\n        background-color: #f0f0f0;\n      &#125;\n      .box &#123;\n        width: 200px;\n        height: 100px;\n        background-color: #3498db;\n        color: white;\n        text-align: center;\n        line-height: 100px; &#x2F;* 使文本垂直居中 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;居中内容&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3-使用绝对定位\"><a href=\"#3-使用绝对定位\" class=\"headerlink\" title=\"3. 使用绝对定位\"></a>3. 使用绝对定位</h3><p>通过绝对定位和负边距也可以实现居中。</p>\n<h4 id=\"示例代码-11\"><a href=\"#示例代码-11\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;绝对定位居中&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        height: 100vh; &#x2F;* 设置高度为视口高度 *&#x2F;\n        margin: 0;\n        position: relative; &#x2F;* 设置相对定位 *&#x2F;\n        background-color: #f0f0f0;\n      &#125;\n      .box &#123;\n        width: 200px;\n        height: 100px;\n        background-color: #3498db;\n        color: white;\n        text-align: center;\n        line-height: 100px; &#x2F;* 使文本垂直居中 *&#x2F;\n        position: absolute; &#x2F;* 设置绝对定位 *&#x2F;\n        top: 50%; &#x2F;* 距离顶部 50% *&#x2F;\n        left: 50%; &#x2F;* 距离左侧 50% *&#x2F;\n        transform: translate(-50%, -50%); &#x2F;* 通过平移实现居中 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;居中内容&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-使用传统的行内块和文本居中\"><a href=\"#4-使用传统的行内块和文本居中\" class=\"headerlink\" title=\"4. 使用传统的行内块和文本居中\"></a>4. 使用传统的行内块和文本居中</h3><p>对于简单的文本内容，可以使用行内块和文本居中。</p>\n<h4 id=\"示例代码-12\"><a href=\"#示例代码-12\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;行内块居中&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        height: 100vh; &#x2F;* 设置高度为视口高度 *&#x2F;\n        margin: 0;\n        text-align: center; &#x2F;* 水平居中 *&#x2F;\n        line-height: 100vh; &#x2F;* 垂直居中 *&#x2F;\n        background-color: #f0f0f0;\n      &#125;\n      .box &#123;\n        display: inline-block; &#x2F;* 设置为行内块 *&#x2F;\n        width: 200px;\n        height: 100px;\n        background-color: #3498db;\n        color: white;\n        vertical-align: middle; &#x2F;* 垂直对齐 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box&quot;&gt;居中内容&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-6\"><a href=\"#5-总结-6\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>Flexbox</strong> 和 <strong>Grid</strong> 是现代布局方式，适合于实现响应式居中。</li>\n<li><strong>绝对定位</strong> 结合负边距也能实现居中，适合于固定尺寸的元素。</li>\n<li><strong>行内块</strong> 和文本居中适合于简单的文本内容。</li>\n</ul>\n<h2 id=\"如何根据设计稿进行移动端适配？\"><a href=\"#如何根据设计稿进行移动端适配？\" class=\"headerlink\" title=\"如何根据设计稿进行移动端适配？\"></a>如何根据设计稿进行移动端适配？</h2><p>根据设计稿进行移动端适配是前端开发中的重要任务，确保网站在不同设备上都能良好显示和使用。以下是一些常见的步骤和最佳实践，以帮助您根据设计稿进行移动端适配：</p>\n<h3 id=\"1-使用响应式设计\"><a href=\"#1-使用响应式设计\" class=\"headerlink\" title=\"1. 使用响应式设计\"></a>1. 使用响应式设计</h3><h4 id=\"1-1-媒体查询\"><a href=\"#1-1-媒体查询\" class=\"headerlink\" title=\"1.1 媒体查询\"></a>1.1 媒体查询</h4><p>使用 CSS 媒体查询根据不同的屏幕尺寸应用不同的样式。可以根据设计稿中指定的断点来设置样式。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&#x2F;* 默认样式（适用于桌面） *&#x2F;\nbody &#123;\n  font-size: 16px;\n&#125;\n\n&#x2F;* 针对最大宽度为 768px 的设备（平板和手机） *&#x2F;\n@media (max-width: 768px) &#123;\n  body &#123;\n    font-size: 14px; &#x2F;* 调整字体大小 *&#x2F;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"1-2-使用相对单位\"><a href=\"#1-2-使用相对单位\" class=\"headerlink\" title=\"1.2 使用相对单位\"></a>1.2 使用相对单位</h4><p>使用相对单位（如 <code>em</code>、<code>rem</code>、<code>%</code>、<code>vw</code> 和 <code>vh</code>）来设置元素的尺寸和间距，以便在不同屏幕上保持一致性。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  width: 90%; &#x2F;* 使用百分比 *&#x2F;\n  padding: 2rem; &#x2F;* 使用 rem *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-设计稿的断点分析\"><a href=\"#2-设计稿的断点分析\" class=\"headerlink\" title=\"2. 设计稿的断点分析\"></a>2. 设计稿的断点分析</h3><p>根据设计稿中不同屏幕尺寸的设计，确定适合的断点。常见的断点包括：</p>\n<ul>\n<li>手机：最大宽度 480px</li>\n<li>平板：最大宽度 768px</li>\n<li>小型桌面：最大宽度 1024px</li>\n<li>大型桌面：最大宽度 1200px</li>\n</ul>\n<h3 id=\"3-使用视口（Viewport）设置\"><a href=\"#3-使用视口（Viewport）设置\" class=\"headerlink\" title=\"3. 使用视口（Viewport）设置\"></a>3. 使用视口（Viewport）设置</h3><p>在 HTML 文档的 <code>&lt;head&gt;</code> 部分添加视口设置，以确保页面在移动设备上正确缩放。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</code></pre>\n\n<h3 id=\"4-适配字体和图像\"><a href=\"#4-适配字体和图像\" class=\"headerlink\" title=\"4. 适配字体和图像\"></a>4. 适配字体和图像</h3><h4 id=\"4-1-字体大小\"><a href=\"#4-1-字体大小\" class=\"headerlink\" title=\"4.1 字体大小\"></a>4.1 字体大小</h4><p>根据设计稿中指定的字体大小，使用媒体查询和相对单位进行调整。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">body &#123;\n  font-size: 16px; &#x2F;* 默认字体大小 *&#x2F;\n&#125;\n\n@media (max-width: 768px) &#123;\n  body &#123;\n    font-size: 14px; &#x2F;* 调整为适合手机的字体大小 *&#x2F;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"4-2-图像适配\"><a href=\"#4-2-图像适配\" class=\"headerlink\" title=\"4.2 图像适配\"></a>4.2 图像适配</h4><p>使用 CSS 的 <code>max-width</code> 属性确保图像在移动设备上不会超出其容器。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">img &#123;\n  max-width: 100%; &#x2F;* 确保图像自适应容器宽度 *&#x2F;\n  height: auto; &#x2F;* 保持图像比例 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"5-组件化设计\"><a href=\"#5-组件化设计\" class=\"headerlink\" title=\"5. 组件化设计\"></a>5. 组件化设计</h3><p>将设计稿中的元素分解为可重用的组件，使用 CSS 类和 JavaScript 进行管理。这样可以提高代码的可维护性和可重用性。</p>\n<h3 id=\"6-测试和调试\"><a href=\"#6-测试和调试\" class=\"headerlink\" title=\"6. 测试和调试\"></a>6. 测试和调试</h3><p>在不同的设备和浏览器上进行测试，确保适配效果良好。可以使用浏览器的开发者工具模拟不同的设备。</p>\n<h3 id=\"7-使用框架和库\"><a href=\"#7-使用框架和库\" class=\"headerlink\" title=\"7. 使用框架和库\"></a>7. 使用框架和库</h3><p>考虑使用响应式框架（如 Bootstrap、Foundation）或 CSS 库（如 Tailwind CSS），这些工具提供了现成的响应式组件和布局，能够加速开发过程。</p>\n<h3 id=\"8-性能优化\"><a href=\"#8-性能优化\" class=\"headerlink\" title=\"8. 性能优化\"></a>8. 性能优化</h3><p>确保移动端页面的加载速度，优化图像和资源，使用懒加载技术，减少 HTTP 请求。</p>\n<h3 id=\"9-交互和触控优化\"><a href=\"#9-交互和触控优化\" class=\"headerlink\" title=\"9. 交互和触控优化\"></a>9. 交互和触控优化</h3><p>根据设计稿中的交互设计，确保按钮和链接的可点击区域足够大，适合触控操作。通常建议可点击区域至少为 44px x 44px。</p>\n<h3 id=\"10-总结\"><a href=\"#10-总结\" class=\"headerlink\" title=\"10. 总结\"></a>10. 总结</h3><p>根据设计稿进行移动端适配需要综合考虑布局、字体、图像、交互等多个方面。通过使用响应式设计、媒体查询、相对单位和视口设置，可以确保网站在不同设备上都能良好显示和使用。测试和调试是确保适配效果的重要步骤。</p>\n<h2 id=\"对-Flex-布局的理解及其使用场景\"><a href=\"#对-Flex-布局的理解及其使用场景\" class=\"headerlink\" title=\"对 Flex 布局的理解及其使用场景\"></a>对 Flex 布局的理解及其使用场景</h2><p><strong>Flex 布局</strong>（Flexible Box Layout）是 CSS3 中的一种布局模式，旨在提供一种更有效的方式来排列、对齐和分配空间给容器中的项目。Flex 布局特别适合于一维布局（即在一条轴线上排列元素），无论是水平还是垂直方向。以下是对 Flex 布局的详细理解，包括其核心概念、属性、优点和使用场景。</p>\n<h3 id=\"1-核心概念-1\"><a href=\"#1-核心概念-1\" class=\"headerlink\" title=\"1. 核心概念\"></a>1. 核心概念</h3><p>Flex 布局的核心在于“容器”和“项目”：</p>\n<ul>\n<li><strong>容器</strong>：使用 <code>display: flex;</code> 或 <code>display: inline-flex;</code> 声明的元素，成为 Flex 容器。</li>\n<li><strong>项目</strong>：容器内的直接子元素，称为 Flex 项目。</li>\n</ul>\n<h3 id=\"2-主要属性\"><a href=\"#2-主要属性\" class=\"headerlink\" title=\"2. 主要属性\"></a>2. 主要属性</h3><h4 id=\"2-1-容器属性\"><a href=\"#2-1-容器属性\" class=\"headerlink\" title=\"2.1 容器属性\"></a>2.1 容器属性</h4><ul>\n<li>**<code>display</code>**：设置为 <code>flex</code> 或 <code>inline-flex</code>，定义一个 Flex 容器。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  display: flex; &#x2F;* 创建 Flex 容器 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>flex-direction</code>**：定义主轴的方向，决定项目的排列方式。<ul>\n<li><code>row</code>（默认）：水平从左到右排列。</li>\n<li><code>row-reverse</code>：水平从右到左排列。</li>\n<li><code>column</code>：垂直从上到下排列。</li>\n<li><code>column-reverse</code>：垂直从下到上排列。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  flex-direction: row; &#x2F;* 水平排列 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>justify-content</code>**：定义主轴上的对齐方式。<ul>\n<li><code>flex-start</code>：项目从容器的起始位置对齐。</li>\n<li><code>flex-end</code>：项目从容器的结束位置对齐。</li>\n<li><code>center</code>：项目在容器中居中对齐。</li>\n<li><code>space-between</code>：项目之间均匀分布，首尾项目靠边。</li>\n<li><code>space-around</code>：项目之间均匀分布，首尾项目与边缘有相同的间距。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  justify-content: center; &#x2F;* 水平居中对齐 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>align-items</code>**：定义交叉轴上的对齐方式。<ul>\n<li><code>flex-start</code>：项目在交叉轴的起始位置对齐。</li>\n<li><code>flex-end</code>：项目在交叉轴的结束位置对齐。</li>\n<li><code>center</code>：项目在交叉轴上居中对齐。</li>\n<li><code>baseline</code>：项目的基线对齐。</li>\n<li><code>stretch</code>（默认）：项目在交叉轴上拉伸以填满容器。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  align-items: center; &#x2F;* 垂直居中对齐 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>flex-wrap</code>**：定义项目是否换行。<ul>\n<li><code>nowrap</code>（默认）：不换行。</li>\n<li><code>wrap</code>：换行。</li>\n<li><code>wrap-reverse</code>：反向换行。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  flex-wrap: wrap; &#x2F;* 允许换行 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-2-项目属性\"><a href=\"#2-2-项目属性\" class=\"headerlink\" title=\"2.2 项目属性\"></a>2.2 项目属性</h4><ul>\n<li>**<code>flex-grow</code>**：定义项目的放大比例，默认值为 0，表示不放大。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.item &#123;\n  flex-grow: 1; &#x2F;* 项目可以放大以填充空间 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>flex-shrink</code>**：定义项目的缩小比例，默认值为 1，表示可以缩小。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.item &#123;\n  flex-shrink: 1; &#x2F;* 项目可以缩小以适应容器 *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>flex-basis</code>**：定义项目在分配多余空间之前的初始大小，默认值为 <code>auto</code>。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.item &#123;\n  flex-basis: 100px; &#x2F;* 项目的初始大小为 100px *&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>**<code>align-self</code>**：允许单个项目在交叉轴上有不同的对齐方式，覆盖 <code>align-items</code>。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.item &#123;\n  align-self: flex-end; &#x2F;* 单个项目在交叉轴上靠边对齐 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-优点\"><a href=\"#3-优点\" class=\"headerlink\" title=\"3. 优点\"></a>3. 优点</h3><ul>\n<li><strong>简化布局</strong>：Flex 布局使得复杂的布局变得简单，尤其是在处理动态内容时。</li>\n<li><strong>响应式设计</strong>：可以轻松实现响应式布局，项目可以根据容器的大小自动调整。</li>\n<li><strong>对齐和分配空间</strong>：提供了强大的对齐和空间分配功能，能够轻松实现居中、均匀分布等效果。</li>\n</ul>\n<h3 id=\"4-使用场景-1\"><a href=\"#4-使用场景-1\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h3><ul>\n<li><strong>导航栏</strong>：使用 Flex 布局可以轻松创建水平或垂直的导航菜单。</li>\n<li><strong>卡片布局</strong>：在卡片布局中，Flex 布局可以帮助实现均匀分布的卡片。</li>\n<li><strong>表单布局</strong>：在表单中，Flex 布局可以用于对齐标签和输入框。</li>\n<li><strong>响应式设计</strong>：在响应式设计中，Flex 布局可以根据屏幕大小自动调整项目的排列方式。</li>\n</ul>\n<h3 id=\"5-示例代码\"><a href=\"#5-示例代码\" class=\"headerlink\" title=\"5. 示例代码\"></a>5. 示例代码</h3><p>以下是一个简单的 Flex 布局示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Flex 布局示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .container &#123;\n        display: flex; &#x2F;* 创建 Flex 容器 *&#x2F;\n        justify-content: space-between; &#x2F;* 项目之间均匀分布 *&#x2F;\n        align-items: center; &#x2F;* 垂直居中对齐 *&#x2F;\n        height: 100px;\n        background-color: #f0f0f0;\n      &#125;\n      .item &#123;\n        width: 100px;\n        height: 50px;\n        background-color: #3498db;\n        color: white;\n        text-align: center;\n        line-height: 50px; &#x2F;* 使文本垂直居中 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;item&quot;&gt;项目 1&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;item&quot;&gt;项目 2&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;item&quot;&gt;项目 3&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"6-总结-3\"><a href=\"#6-总结-3\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>Flex 布局是一种强大的工具，适合于一维布局，能够简化复杂的布局任务。通过使用 Flexbox，开发者可以轻松实现响应式设计、对齐和空间分配等功能。理解 Flex 布局的核心概念和属性可以帮助您更好地控制网页的布局和样式。</p>\n<h2 id=\"响应式设计的概念及基本原理\"><a href=\"#响应式设计的概念及基本原理\" class=\"headerlink\" title=\"响应式设计的概念及基本原理\"></a>响应式设计的概念及基本原理</h2><p><strong>响应式设计</strong>（Responsive Design）是一种网页设计方法，旨在使网页能够在各种设备和屏幕尺寸上良好显示和使用。响应式设计通过灵活的布局、图像和 CSS 媒体查询等技术，确保用户在不同设备（如手机、平板、桌面）上都能获得良好的浏览体验。</p>\n<h3 id=\"1-响应式设计的概念\"><a href=\"#1-响应式设计的概念\" class=\"headerlink\" title=\"1. 响应式设计的概念\"></a>1. 响应式设计的概念</h3><p>响应式设计的核心思想是创建一个单一的网页布局，该布局能够根据用户的设备特性（如屏幕宽度、高度、分辨率等）自动调整和适应。这样，开发者只需维护一个代码库，而不必为每种设备创建单独的版本。</p>\n<h3 id=\"2-基本原理\"><a href=\"#2-基本原理\" class=\"headerlink\" title=\"2. 基本原理\"></a>2. 基本原理</h3><h4 id=\"2-1-媒体查询\"><a href=\"#2-1-媒体查询\" class=\"headerlink\" title=\"2.1 媒体查询\"></a>2.1 媒体查询</h4><p>媒体查询是响应式设计的关键技术之一。它允许开发者根据设备的特性（如屏幕宽度、分辨率、方向等）应用不同的 CSS 样式。通过媒体查询，可以为不同的设备设置特定的样式，从而实现布局的适应性。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&#x2F;* 默认样式（适用于桌面） *&#x2F;\nbody &#123;\n  font-size: 16px;\n&#125;\n\n&#x2F;* 针对最大宽度为 768px 的设备（平板和手机） *&#x2F;\n@media (max-width: 768px) &#123;\n  body &#123;\n    font-size: 14px; &#x2F;* 调整字体大小 *&#x2F;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"2-2-灵活的布局\"><a href=\"#2-2-灵活的布局\" class=\"headerlink\" title=\"2.2 灵活的布局\"></a>2.2 灵活的布局</h4><p>使用相对单位（如 <code>%</code>、<code>em</code>、<code>rem</code>、<code>vw</code> 和 <code>vh</code>）来设置元素的尺寸和间距，以便在不同屏幕上保持一致性。灵活的布局可以确保元素在不同设备上自适应。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  width: 90%; &#x2F;* 使用百分比 *&#x2F;\n  padding: 2rem; &#x2F;* 使用 rem *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-3-弹性图像\"><a href=\"#2-3-弹性图像\" class=\"headerlink\" title=\"2.3 弹性图像\"></a>2.3 弹性图像</h4><p>使用 CSS 的 <code>max-width</code> 属性确保图像在移动设备上不会超出其容器。这样可以使图像根据容器的大小自动调整。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">img &#123;\n  max-width: 100%; &#x2F;* 确保图像自适应容器宽度 *&#x2F;\n  height: auto; &#x2F;* 保持图像比例 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-4-视口设置\"><a href=\"#2-4-视口设置\" class=\"headerlink\" title=\"2.4 视口设置\"></a>2.4 视口设置</h4><p>在 HTML 文档的 <code>&lt;head&gt;</code> 部分添加视口设置，以确保页面在移动设备上正确缩放。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</code></pre>\n\n<h3 id=\"3-响应式设计的优点\"><a href=\"#3-响应式设计的优点\" class=\"headerlink\" title=\"3. 响应式设计的优点\"></a>3. 响应式设计的优点</h3><ul>\n<li><strong>用户体验</strong>：提供一致的用户体验，无论用户使用何种设备。</li>\n<li><strong>SEO 优势</strong>：响应式设计有助于提高搜索引擎排名，因为 Google 推荐使用响应式设计。</li>\n<li><strong>维护简便</strong>：只需维护一个代码库，减少了开发和维护的工作量。</li>\n<li><strong>适应性强</strong>：能够适应各种屏幕尺寸和设备类型，满足用户需求。</li>\n</ul>\n<h3 id=\"4-响应式设计的挑战\"><a href=\"#4-响应式设计的挑战\" class=\"headerlink\" title=\"4. 响应式设计的挑战\"></a>4. 响应式设计的挑战</h3><ul>\n<li><strong>设计复杂性</strong>：需要考虑多种设备和屏幕尺寸，设计和开发过程可能变得复杂。</li>\n<li><strong>性能问题</strong>：在某些情况下，响应式设计可能导致加载时间较长，尤其是在移动设备上。</li>\n</ul>\n<h3 id=\"5-总结-7\"><a href=\"#5-总结-7\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>响应式设计是一种现代网页设计方法，旨在使网页能够在各种设备上良好显示和使用。通过使用媒体查询、灵活的布局、弹性图像和视口设置，开发者可以创建适应性强、用户体验良好的网页。理解响应式设计的基本原理和技术可以帮助您在开发中更好地满足用户需求。</p>\n<h1 id=\"三、定位与浮动\"><a href=\"#三、定位与浮动\" class=\"headerlink\" title=\"三、定位与浮动\"></a>三、定位与浮动</h1><h2 id=\"为什么需要清除浮动？清除浮动的方式\"><a href=\"#为什么需要清除浮动？清除浮动的方式\" class=\"headerlink\" title=\"为什么需要清除浮动？清除浮动的方式\"></a>为什么需要清除浮动？清除浮动的方式</h2><p>在 CSS 中，浮动（<code>float</code>）是一种常用的布局方式，用于将元素从正常的文档流中移出并使其向左或向右对齐。然而，使用浮动布局时，可能会导致父元素的高度塌陷，无法包裹浮动的子元素。这是因为浮动元素不再占据正常的文档流，导致父元素的高度计算不准确。因此，清除浮动是必要的，以确保父元素能够正确包裹其子元素。</p>\n<h3 id=\"1-为什么需要清除浮动\"><a href=\"#1-为什么需要清除浮动\" class=\"headerlink\" title=\"1. 为什么需要清除浮动\"></a>1. 为什么需要清除浮动</h3><ul>\n<li><strong>高度塌陷</strong>：当子元素使用浮动时，父元素的高度可能会变为 0，因为浮动元素不影响父元素的高度。这会导致布局问题，影响页面的整体结构。</li>\n<li><strong>布局混乱</strong>：未清除浮动可能导致后续元素的布局混乱，影响页面的可读性和用户体验。</li>\n</ul>\n<h3 id=\"2-清除浮动的方式\"><a href=\"#2-清除浮动的方式\" class=\"headerlink\" title=\"2. 清除浮动的方式\"></a>2. 清除浮动的方式</h3><p>有几种常见的方法可以清除浮动，以下是几种常用的清除浮动的方法：</p>\n<h4 id=\"2-1-使用-overflow-属性\"><a href=\"#2-1-使用-overflow-属性\" class=\"headerlink\" title=\"2.1 使用 overflow 属性\"></a>2.1 使用 <code>overflow</code> 属性</h4><p>在父元素上设置 <code>overflow: hidden;</code> 或 <code>overflow: auto;</code>，可以清除浮动并使父元素包裹浮动的子元素。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container &#123;\n  overflow: hidden; &#x2F;* 清除浮动 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-2-使用伪元素\"><a href=\"#2-2-使用伪元素\" class=\"headerlink\" title=\"2.2 使用伪元素\"></a>2.2 使用伪元素</h4><p>使用伪元素 <code>::after</code> 创建一个清除浮动的元素。通过设置 <code>content</code> 属性和 <code>clear</code> 属性，可以清除浮动。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.container::after &#123;\n  content: &quot;&quot;; &#x2F;* 创建一个空的伪元素 *&#x2F;\n  display: table; &#x2F;* 使其成为块级元素 *&#x2F;\n  clear: both; &#x2F;* 清除浮动 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-3-使用清除浮动的类\"><a href=\"#2-3-使用清除浮动的类\" class=\"headerlink\" title=\"2.3 使用清除浮动的类\"></a>2.3 使用清除浮动的类</h4><p>可以创建一个清除浮动的类，并在需要清除浮动的元素上应用该类。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.clearfix::after &#123;\n  content: &quot;&quot;;\n  display: table;\n  clear: both;\n&#125;</code></pre>\n\n<p>使用示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div class&#x3D;&quot;container clearfix&quot;&gt;\n  &lt;div class&#x3D;&quot;box&quot; style&#x3D;&quot;float: left; width: 50%;&quot;&gt;左侧内容&lt;&#x2F;div&gt;\n  &lt;div class&#x3D;&quot;box&quot; style&#x3D;&quot;float: right; width: 50%;&quot;&gt;右侧内容&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h4 id=\"2-4-使用-clear-属性\"><a href=\"#2-4-使用-clear-属性\" class=\"headerlink\" title=\"2.4 使用 clear 属性\"></a>2.4 使用 <code>clear</code> 属性</h4><p>在浮动元素之后的元素上使用 <code>clear</code> 属性，可以清除浮动。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.clear &#123;\n  clear: both; &#x2F;* 清除左右浮动 *&#x2F;\n&#125;</code></pre>\n\n<p>使用示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div class&#x3D;&quot;container&quot;&gt;\n  &lt;div class&#x3D;&quot;box&quot; style&#x3D;&quot;float: left; width: 50%;&quot;&gt;左侧内容&lt;&#x2F;div&gt;\n  &lt;div class&#x3D;&quot;box&quot; style&#x3D;&quot;float: right; width: 50%;&quot;&gt;右侧内容&lt;&#x2F;div&gt;\n  &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;!-- 清除浮动 --&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<h3 id=\"3-总结-1\"><a href=\"#3-总结-1\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>清除浮动</strong> 是确保父元素能够正确包裹浮动子元素的重要步骤。</li>\n<li>常见的清除浮动方法包括使用 <code>overflow</code> 属性、伪元素、清除浮动的类和 <code>clear</code> 属性。</li>\n<li>选择合适的清除浮动方法可以提高布局的稳定性和可读性。</li>\n</ul>\n<h2 id=\"使用-clear-属性清除浮动的原理？\"><a href=\"#使用-clear-属性清除浮动的原理？\" class=\"headerlink\" title=\"使用 clear 属性清除浮动的原理？\"></a>使用 clear 属性清除浮动的原理？</h2><p>使用 <code>clear</code> 属性清除浮动的原理主要涉及到 CSS 的浮动模型和文档流的行为。以下是对 <code>clear</code> 属性的详细解释及其工作原理。</p>\n<h3 id=\"1-浮动的基本概念\"><a href=\"#1-浮动的基本概念\" class=\"headerlink\" title=\"1. 浮动的基本概念\"></a>1. 浮动的基本概念</h3><p>当一个元素被设置为浮动（使用 <code>float</code> 属性），它会从正常的文档流中移出，并向左或向右对齐。浮动元素不会占据其原本在文档流中的位置，这会导致其父元素的高度塌陷，因为父元素不再包含浮动的子元素。</p>\n<h3 id=\"2-clear-属性的作用\"><a href=\"#2-clear-属性的作用\" class=\"headerlink\" title=\"2. clear 属性的作用\"></a>2. <code>clear</code> 属性的作用</h3><p><code>clear</code> 属性用于控制元素的垂直位置，确保该元素不会与浮动元素重叠。它可以取以下值：</p>\n<ul>\n<li><code>none</code>（默认值）：不清除浮动。</li>\n<li><code>left</code>：清除左侧的浮动元素。</li>\n<li><code>right</code>：清除右侧的浮动元素。</li>\n<li><code>both</code>：清除左右两侧的浮动元素。</li>\n</ul>\n<h3 id=\"3-清除浮动的原理\"><a href=\"#3-清除浮动的原理\" class=\"headerlink\" title=\"3. 清除浮动的原理\"></a>3. 清除浮动的原理</h3><p>当一个元素的 <code>clear</code> 属性被设置为 <code>both</code>、<code>left</code> 或 <code>right</code> 时，浏览器会根据以下规则处理该元素：</p>\n<ol>\n<li><strong>查找浮动元素</strong>：浏览器会检查该元素之前的所有浮动元素。</li>\n<li><strong>确定位置</strong>：如果该元素的 <code>clear</code> 属性为 <code>both</code>，它会被移动到浮动元素的下方，确保它不会与任何浮动元素重叠。</li>\n<li><strong>影响文档流</strong>：清除浮动的元素会重新影响文档流，使得后续的元素能够正常排列。</li>\n</ol>\n<h3 id=\"4-示例-4\"><a href=\"#4-示例-4\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个简单的示例，展示如何使用 <code>clear</code> 属性清除浮动：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;清除浮动示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .container &#123;\n        border: 1px solid #000;\n      &#125;\n      .box &#123;\n        float: left; &#x2F;* 浮动元素 *&#x2F;\n        width: 100px;\n        height: 100px;\n        margin: 10px;\n        background-color: #3498db;\n      &#125;\n      .clear &#123;\n        clear: both; &#x2F;* 清除浮动 *&#x2F;\n        height: 0; &#x2F;* 高度为 0，保持不占空间 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;box&quot;&gt;左侧浮动&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;box&quot;&gt;右侧浮动&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;\n      &lt;!-- 清除浮动 --&gt;\n      &lt;div&gt;这是清除浮动后的内容&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-8\"><a href=\"#5-总结-8\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>浮动元素</strong>：当元素使用 <code>float</code> 属性时，它会从正常文档流中移出，导致父元素的高度塌陷。</li>\n<li><strong><code>clear</code> 属性</strong>：通过设置 <code>clear</code> 属性，可以确保后续元素不会与浮动元素重叠，从而恢复正常的文档流。</li>\n<li><strong>使用场景</strong>：在使用浮动布局时，通常需要在浮动元素之后添加一个清除浮动的元素，以确保布局的稳定性。</li>\n</ul>\n<h2 id=\"对-BFC-的理解，如何创建-BFC\"><a href=\"#对-BFC-的理解，如何创建-BFC\" class=\"headerlink\" title=\"对 BFC 的理解，如何创建 BFC\"></a>对 BFC 的理解，如何创建 BFC</h2><p><strong>BFC</strong>（Block Formatting Context，块格式化上下文）是 CSS 中的一个重要概念，用于控制块级元素的布局和清除浮动。BFC 是一个独立的渲染区域，内部的元素在这个区域内进行布局，而外部的元素不会影响到这个区域的布局。理解 BFC 的概念有助于解决一些常见的布局问题，如清除浮动、避免 margin 重叠等。</p>\n<h3 id=\"1-BFC-的特性\"><a href=\"#1-BFC-的特性\" class=\"headerlink\" title=\"1. BFC 的特性\"></a>1. BFC 的特性</h3><ul>\n<li><strong>独立性</strong>：BFC 内部的元素不会影响外部元素的布局，反之亦然。</li>\n<li><strong>清除浮动</strong>：BFC 可以包含浮动元素，确保父元素的高度能够包裹浮动子元素。</li>\n<li><strong>避免 margin 重叠</strong>：BFC 内部的元素的 margin 不会与外部元素的 margin 重叠。</li>\n</ul>\n<h3 id=\"2-BFC-的触发条件\"><a href=\"#2-BFC-的触发条件\" class=\"headerlink\" title=\"2. BFC 的触发条件\"></a>2. BFC 的触发条件</h3><p>以下是一些常见的触发 BFC 的条件：</p>\n<ol>\n<li><strong>根元素</strong>（<code>&lt;html&gt;</code>）。</li>\n<li><strong>浮动元素</strong>：<code>float</code> 属性不为 <code>none</code> 的元素。</li>\n<li><strong>绝对定位元素</strong>：<code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code> 的元素。</li>\n<li><strong>块级元素</strong>：<code>display</code> 属性为 <code>inline-block</code>、<code>table</code>、<code>table-cell</code>、<code>table-caption</code> 的元素。</li>\n<li><strong>overflow 属性</strong>：<code>overflow</code> 属性不为 <code>visible</code> 的元素（如 <code>hidden</code>、<code>auto</code>、<code>scroll</code>）。</li>\n</ol>\n<h3 id=\"3-如何创建-BFC\"><a href=\"#3-如何创建-BFC\" class=\"headerlink\" title=\"3. 如何创建 BFC\"></a>3. 如何创建 BFC</h3><p>以下是几种常见的方法来创建 BFC：</p>\n<h4 id=\"3-1-使用浮动\"><a href=\"#3-1-使用浮动\" class=\"headerlink\" title=\"3.1 使用浮动\"></a>3.1 使用浮动</h4><p>将元素的 <code>float</code> 属性设置为 <code>left</code> 或 <code>right</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.bfc &#123;\n  float: left; &#x2F;* 创建 BFC *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"3-2-使用绝对定位\"><a href=\"#3-2-使用绝对定位\" class=\"headerlink\" title=\"3.2 使用绝对定位\"></a>3.2 使用绝对定位</h4><p>将元素的 <code>position</code> 属性设置为 <code>absolute</code> 或 <code>fixed</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.bfc &#123;\n  position: absolute; &#x2F;* 创建 BFC *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"3-3-使用-display-属性\"><a href=\"#3-3-使用-display-属性\" class=\"headerlink\" title=\"3.3 使用 display 属性\"></a>3.3 使用 <code>display</code> 属性</h4><p>将元素的 <code>display</code> 属性设置为 <code>inline-block</code>、<code>table</code>、<code>table-cell</code>、<code>table-caption</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.bfc &#123;\n  display: inline-block; &#x2F;* 创建 BFC *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"3-4-使用-overflow-属性\"><a href=\"#3-4-使用-overflow-属性\" class=\"headerlink\" title=\"3.4 使用 overflow 属性\"></a>3.4 使用 <code>overflow</code> 属性</h4><p>将元素的 <code>overflow</code> 属性设置为 <code>hidden</code>、<code>auto</code> 或 <code>scroll</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.bfc &#123;\n  overflow: hidden; &#x2F;* 创建 BFC *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-示例-5\"><a href=\"#4-示例-5\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个示例，展示如何使用 BFC 来清除浮动：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;BFC 示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .container &#123;\n        border: 1px solid #000;\n      &#125;\n      .box &#123;\n        float: left; &#x2F;* 浮动元素 *&#x2F;\n        width: 100px;\n        height: 100px;\n        margin: 10px;\n        background-color: #3498db;\n      &#125;\n      .bfc &#123;\n        overflow: hidden; &#x2F;* 创建 BFC *&#x2F;\n        background-color: #f0f0f0;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;box&quot;&gt;浮动元素 1&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;box&quot;&gt;浮动元素 2&lt;&#x2F;div&gt;\n      &lt;div class&#x3D;&quot;bfc&quot;&gt;这是一个 BFC 元素，它会包裹浮动元素。&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"5-总结-9\"><a href=\"#5-总结-9\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>BFC</strong> 是一个独立的块格式化上下文，内部元素的布局不会影响外部元素，反之亦然。</li>\n<li>BFC 可以通过设置 <code>float</code>、<code>position</code>、<code>display</code> 或 <code>overflow</code> 属性来创建。</li>\n<li>理解 BFC 的特性和创建方法可以帮助解决常见的布局问题，如清除浮动和避免 margin 重叠。</li>\n</ul>\n<h2 id=\"什么是-margin-重叠问题？如何解决？\"><a href=\"#什么是-margin-重叠问题？如何解决？\" class=\"headerlink\" title=\"什么是 margin 重叠问题？如何解决？\"></a>什么是 margin 重叠问题？如何解决？</h2><p><strong>Margin 重叠问题</strong>（Margin Collapsing）是 CSS 中的一种现象，指的是当两个块级元素的外边距（margin）相遇时，它们的外边距会合并成一个外边距，而不是简单地相加。这种现象通常发生在以下几种情况下：</p>\n<h3 id=\"1-Margin-重叠的情况\"><a href=\"#1-Margin-重叠的情况\" class=\"headerlink\" title=\"1. Margin 重叠的情况\"></a>1. Margin 重叠的情况</h3><h4 id=\"1-1-垂直方向的重叠\"><a href=\"#1-1-垂直方向的重叠\" class=\"headerlink\" title=\"1.1 垂直方向的重叠\"></a>1.1 垂直方向的重叠</h4><ul>\n<li><strong>相邻的块级元素</strong>：当两个相邻的块级元素的外边距相遇时，它们的外边距会合并，取较大的外边距值。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div class&#x3D;&quot;box1&quot;&gt;Box 1&lt;&#x2F;div&gt;\n&lt;div class&#x3D;&quot;box2&quot;&gt;Box 2&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.box1 &#123;\n  margin-bottom: 20px; &#x2F;* 下外边距 *&#x2F;\n  background-color: lightblue;\n&#125;\n\n.box2 &#123;\n  margin-top: 30px; &#x2F;* 上外边距 *&#x2F;\n  background-color: lightcoral;\n&#125;</code></pre>\n\n<p>在这个例子中，<code>.box1</code> 的下外边距和 <code>.box2</code> 的上外边距会重叠，最终的外边距为 30px，而不是 50px。</p>\n<h4 id=\"1-2-父元素与子元素\"><a href=\"#1-2-父元素与子元素\" class=\"headerlink\" title=\"1.2 父元素与子元素\"></a>1.2 父元素与子元素</h4><ul>\n<li><strong>父元素的外边距与子元素的外边距</strong>：如果一个块级元素的外边距与其第一个子元素的外边距相遇，父元素的外边距会被子元素的外边距所取代。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div class&#x3D;&quot;parent&quot;&gt;\n  &lt;div class&#x3D;&quot;child&quot;&gt;Child&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  margin-top: 40px; &#x2F;* 父元素的上外边距 *&#x2F;\n  background-color: lightgreen;\n&#125;\n\n.child &#123;\n  margin-top: 20px; &#x2F;* 子元素的上外边距 *&#x2F;\n  background-color: lightyellow;\n&#125;</code></pre>\n\n<p>在这个例子中，<code>.parent</code> 的上外边距会与 <code>.child</code> 的上外边距重叠，最终的外边距为 40px，而不是 60px。</p>\n<h3 id=\"2-解决-Margin-重叠问题\"><a href=\"#2-解决-Margin-重叠问题\" class=\"headerlink\" title=\"2. 解决 Margin 重叠问题\"></a>2. 解决 Margin 重叠问题</h3><p>有几种方法可以解决 margin 重叠问题：</p>\n<h4 id=\"2-1-使用-Padding\"><a href=\"#2-1-使用-Padding\" class=\"headerlink\" title=\"2.1 使用 Padding\"></a>2.1 使用 Padding</h4><p>在父元素上添加内边距（padding），可以防止外边距重叠。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  padding-top: 1px; &#x2F;* 添加内边距 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-2-使用边框\"><a href=\"#2-2-使用边框\" class=\"headerlink\" title=\"2.2 使用边框\"></a>2.2 使用边框</h4><p>在父元素上添加边框（border），也可以防止外边距重叠。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  border-top: 1px solid transparent; &#x2F;* 添加边框 *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-3-使用-Flexbox-或-Grid\"><a href=\"#2-3-使用-Flexbox-或-Grid\" class=\"headerlink\" title=\"2.3 使用 Flexbox 或 Grid\"></a>2.3 使用 Flexbox 或 Grid</h4><p>使用 Flexbox 或 CSS Grid 布局可以避免 margin 重叠问题，因为这些布局模型会改变元素的布局方式。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  display: flex; &#x2F;* 使用 Flexbox *&#x2F;\n&#125;</code></pre>\n\n<h4 id=\"2-4-使用-BFC（块格式化上下文）\"><a href=\"#2-4-使用-BFC（块格式化上下文）\" class=\"headerlink\" title=\"2.4 使用 BFC（块格式化上下文）\"></a>2.4 使用 BFC（块格式化上下文）</h4><p>创建一个 BFC 可以防止 margin 重叠。可以通过设置 <code>overflow</code>、<code>float</code>、<code>position</code> 等属性来创建 BFC。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.parent &#123;\n  overflow: hidden; &#x2F;* 创建 BFC *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-总结-2\"><a href=\"#3-总结-2\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>Margin 重叠问题</strong> 是 CSS 中的一个常见现象，主要发生在相邻的块级元素或父子元素之间。</li>\n<li>解决 margin 重叠问题的方法包括使用内边距、边框、Flexbox、Grid 或创建 BFC。</li>\n<li>理解 margin 重叠的原理和解决方法可以帮助您更好地控制布局，避免意外的间距问题。</li>\n</ul>\n<h2 id=\"元素的层叠顺序\"><a href=\"#元素的层叠顺序\" class=\"headerlink\" title=\"元素的层叠顺序\"></a>元素的层叠顺序</h2><p>在 CSS 中，元素的层叠顺序（Stacking Order）决定了在重叠的情况下，哪些元素会在上面显示，哪些元素会在下面显示。理解层叠顺序对于处理复杂的布局和视觉效果非常重要。以下是关于元素层叠顺序的详细解释。</p>\n<h3 id=\"1-层叠顺序的基本概念\"><a href=\"#1-层叠顺序的基本概念\" class=\"headerlink\" title=\"1. 层叠顺序的基本概念\"></a>1. 层叠顺序的基本概念</h3><p>层叠顺序是指在同一位置重叠的元素的显示顺序。层叠顺序由多个因素决定，包括元素的 <code>z-index</code> 值、定位属性、文档流顺序等。</p>\n<h3 id=\"2-层叠顺序的规则\"><a href=\"#2-层叠顺序的规则\" class=\"headerlink\" title=\"2. 层叠顺序的规则\"></a>2. 层叠顺序的规则</h3><p>层叠顺序的计算遵循以下规则：</p>\n<h4 id=\"2-1-位置属性\"><a href=\"#2-1-位置属性\" class=\"headerlink\" title=\"2.1 位置属性\"></a>2.1 位置属性</h4><ul>\n<li><strong>定位属性</strong>：元素的 <code>position</code> 属性会影响其层叠顺序。具有以下定位属性的元素会创建新的层叠上下文：<ul>\n<li><code>position: relative;</code></li>\n<li><code>position: absolute;</code></li>\n<li><code>position: fixed;</code></li>\n<li><code>position: sticky;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-2-z-index-属性\"><a href=\"#2-2-z-index-属性\" class=\"headerlink\" title=\"2.2 z-index 属性\"></a>2.2 z-index 属性</h4><ul>\n<li><strong>z-index</strong>：具有 <code>z-index</code> 属性的元素会影响其层叠顺序。<code>z-index</code> 的值越大，元素越靠上。<code>z-index</code> 只对定位元素有效。<ul>\n<li>如果两个元素都具有相同的 <code>z-index</code> 值，则它们的层叠顺序由它们在文档中的顺序决定，后面的元素会覆盖前面的元素。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-文档流顺序\"><a href=\"#2-3-文档流顺序\" class=\"headerlink\" title=\"2.3 文档流顺序\"></a>2.3 文档流顺序</h4><ul>\n<li><strong>文档流顺序</strong>：如果两个元素都没有设置 <code>z-index</code>，则它们的层叠顺序由它们在文档中的顺序决定。后面的元素会覆盖前面的元素。</li>\n</ul>\n<h3 id=\"3-层叠上下文\"><a href=\"#3-层叠上下文\" class=\"headerlink\" title=\"3. 层叠上下文\"></a>3. 层叠上下文</h3><p>层叠上下文是一个独立的层叠顺序环境。每当创建一个新的层叠上下文时，所有在该上下文中的元素的层叠顺序会相对于该上下文进行计算。以下是创建层叠上下文的常见方式：</p>\n<ul>\n<li>根元素（<code>&lt;html&gt;</code>）。</li>\n<li>具有 <code>position</code> 属性且 <code>z-index</code> 不为 <code>auto</code> 的元素。</li>\n<li>具有 <code>opacity</code> 值小于 1 的元素。</li>\n<li>具有 <code>transform</code>、<code>filter</code>、<code>perspective</code> 等 CSS 属性的元素。</li>\n</ul>\n<h3 id=\"4-示例-6\"><a href=\"#4-示例-6\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个简单的示例，展示了层叠顺序的工作原理：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;层叠顺序示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .box1 &#123;\n        position: relative; &#x2F;* 创建层叠上下文 *&#x2F;\n        z-index: 1; &#x2F;* z-index 值为 1 *&#x2F;\n        width: 200px;\n        height: 200px;\n        background-color: lightblue;\n      &#125;\n      .box2 &#123;\n        position: relative; &#x2F;* 创建层叠上下文 *&#x2F;\n        z-index: 2; &#x2F;* z-index 值为 2 *&#x2F;\n        width: 200px;\n        height: 200px;\n        background-color: lightcoral;\n        margin-top: -100px; &#x2F;* 使其重叠 *&#x2F;\n      &#125;\n      .box3 &#123;\n        width: 200px;\n        height: 200px;\n        background-color: lightgreen;\n        margin-top: -100px; &#x2F;* 使其重叠 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;box1&quot;&gt;Box 1&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;box2&quot;&gt;Box 2&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;box3&quot;&gt;Box 3&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>在这个示例中：</p>\n<ul>\n<li><strong>Box 1</strong> 的 <code>z-index</code> 为 1，<strong>Box 2</strong> 的 <code>z-index</code> 为 2，因此 <strong>Box 2</strong> 会覆盖 <strong>Box 1</strong>。</li>\n<li><strong>Box 3</strong> 没有设置 <code>z-index</code>，因此它的层叠顺序由文档流决定，位于 <strong>Box 1</strong> 和 <strong>Box 2</strong> 之下。</li>\n</ul>\n<h3 id=\"5-总结-10\"><a href=\"#5-总结-10\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>层叠顺序</strong> 决定了重叠元素的显示顺序，受 <code>z-index</code>、定位属性和文档流顺序的影响。</li>\n<li><strong>层叠上下文</strong> 是一个独立的层叠顺序环境，创建新的层叠上下文会影响其中元素的层叠顺序。</li>\n<li>理解层叠顺序的规则可以帮助您更好地控制元素的显示效果，避免布局问题。</li>\n</ul>\n<h2 id=\"position-的属性有哪些，区别是什么\"><a href=\"#position-的属性有哪些，区别是什么\" class=\"headerlink\" title=\"position 的属性有哪些，区别是什么\"></a>position 的属性有哪些，区别是什么</h2><p>在 CSS 中，<code>position</code> 属性用于控制元素的定位方式。它有五个主要的取值，每个取值都有不同的行为和应用场景。以下是 <code>position</code> 属性的取值及其区别：</p>\n<h3 id=\"1-static\"><a href=\"#1-static\" class=\"headerlink\" title=\"1. static\"></a>1. <code>static</code></h3><ul>\n<li><strong>定义</strong>：默认值，元素按照正常的文档流进行定位。</li>\n<li><strong>特点</strong>：<ul>\n<li>不会受到 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性的影响。</li>\n<li>元素的排列顺序由文档流决定，后面的元素会覆盖前面的元素。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：适用于不需要特殊定位的元素。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  position: static; &#x2F;* 默认值 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-relative\"><a href=\"#2-relative\" class=\"headerlink\" title=\"2. relative\"></a>2. <code>relative</code></h3><ul>\n<li><strong>定义</strong>：相对定位，元素相对于其正常位置进行定位。</li>\n<li><strong>特点</strong>：<ul>\n<li>元素仍然占据其在文档流中的位置，但可以通过 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性进行偏移。</li>\n<li>其他元素仍然会按照正常文档流进行排列。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：适用于需要相对移动的元素，同时保留其在文档流中的位置。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  position: relative; &#x2F;* 相对定位 *&#x2F;\n  top: 10px; &#x2F;* 向下移动 10 像素 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-absolute\"><a href=\"#3-absolute\" class=\"headerlink\" title=\"3. absolute\"></a>3. <code>absolute</code></h3><ul>\n<li><strong>定义</strong>：绝对定位，元素相对于最近的已定位祖先元素进行定位（即 <code>position</code> 不为 <code>static</code> 的元素）。</li>\n<li><strong>特点</strong>：<ul>\n<li>元素脱离文档流，不占据空间。</li>\n<li>可以使用 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性进行精确定位。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：适用于需要精确控制位置的元素，如弹出菜单、工具提示等。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  position: absolute; &#x2F;* 绝对定位 *&#x2F;\n  top: 20px; &#x2F;* 距离最近的已定位祖先元素顶部 20 像素 *&#x2F;\n  left: 30px; &#x2F;* 距离最近的已定位祖先元素左侧 30 像素 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-fixed\"><a href=\"#4-fixed\" class=\"headerlink\" title=\"4. fixed\"></a>4. <code>fixed</code></h3><ul>\n<li><strong>定义</strong>：固定定位，元素相对于视口进行定位。</li>\n<li><strong>特点</strong>：<ul>\n<li>元素脱离文档流，不占据空间。</li>\n<li>无论页面滚动，元素始终保持在视口的指定位置。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：适用于需要固定在视口中的元素，如导航栏、返回顶部按钮等。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  position: fixed; &#x2F;* 固定定位 *&#x2F;\n  top: 0; &#x2F;* 距离视口顶部 0 像素 *&#x2F;\n  right: 0; &#x2F;* 距离视口右侧 0 像素 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"5-sticky\"><a href=\"#5-sticky\" class=\"headerlink\" title=\"5. sticky\"></a>5. <code>sticky</code></h3><ul>\n<li><strong>定义</strong>：粘性定位，元素在跨越特定的滚动位置时会在相对定位和固定定位之间切换。</li>\n<li><strong>特点</strong>：<ul>\n<li>元素在其父元素的范围内相对定位，直到达到指定的滚动位置，然后变为固定定位。</li>\n<li>可以使用 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性来设置粘性位置。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：适用于需要在滚动时保持可见的元素，如粘性导航栏。</li>\n</ul>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.element &#123;\n  position: sticky; &#x2F;* 粘性定位 *&#x2F;\n  top: 0; &#x2F;* 当滚动到顶部时，元素固定在视口顶部 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"6-总结-4\"><a href=\"#6-总结-4\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><table>\n<thead>\n<tr>\n<th><code>position</code> 值</th>\n<th>定义</th>\n<th>特点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static</code></td>\n<td>默认定位</td>\n<td>不受 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 影响</td>\n<td>不需要特殊定位的元素</td>\n</tr>\n<tr>\n<td><code>relative</code></td>\n<td>相对定位</td>\n<td>相对于正常位置偏移，仍占据文档流</td>\n<td>需要相对移动的元素</td>\n</tr>\n<tr>\n<td><code>absolute</code></td>\n<td>绝对定位</td>\n<td>脱离文档流，相对于最近的已定位祖先元素</td>\n<td>需要精确控制位置的元素</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td>固定定位</td>\n<td>脱离文档流，相对于视口</td>\n<td>固定在视口中的元素</td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>粘性定位</td>\n<td>在特定滚动位置切换相对和固定定位</td>\n<td>需要在滚动时保持可见的元素</td>\n</tr>\n</tbody></table>\n<p>理解 <code>position</code> 属性的不同取值及其特点，可以帮助您更好地控制元素的布局和定位。</p>\n<h2 id=\"display、float、position-的关系\"><a href=\"#display、float、position-的关系\" class=\"headerlink\" title=\"display、float、position 的关系\"></a>display、float、position 的关系</h2><p>在 CSS 中，<code>display</code>、<code>float</code> 和 <code>position</code> 是三个重要的属性，它们用于控制元素的布局和定位。虽然它们各自有不同的功能和用途，但它们之间也存在一定的关系。以下是对这三个属性的详细解释及其相互关系。</p>\n<h3 id=\"1-display-属性\"><a href=\"#1-display-属性\" class=\"headerlink\" title=\"1. display 属性\"></a>1. <code>display</code> 属性</h3><ul>\n<li><strong>定义</strong>：<code>display</code> 属性用于定义元素的显示类型，决定元素在文档流中的行为。</li>\n<li><strong>常见值</strong>：<ul>\n<li><code>block</code>：元素作为块级元素显示，独占一行。</li>\n<li><code>inline</code>：元素作为行内元素显示，不独占一行。</li>\n<li><code>inline-block</code>：元素既具有块级元素的特性，又具有行内元素的特性。</li>\n<li><code>none</code>：元素不显示，不占据空间。</li>\n<li><code>flex</code> 和 <code>grid</code>：用于创建响应式布局。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-11\"><a href=\"#示例-11\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.block &#123;\n  display: block; &#x2F;* 块级元素 *&#x2F;\n&#125;\n\n.inline &#123;\n  display: inline; &#x2F;* 行内元素 *&#x2F;\n&#125;\n\n.inline-block &#123;\n  display: inline-block; &#x2F;* 行内块元素 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"2-float-属性\"><a href=\"#2-float-属性\" class=\"headerlink\" title=\"2. float 属性\"></a>2. <code>float</code> 属性</h3><ul>\n<li><p><strong>定义</strong>：<code>float</code> 属性用于将元素从正常文档流中移出，并使其向左或向右对齐。</p>\n</li>\n<li><p><strong>常见值</strong>：</p>\n<ul>\n<li><code>left</code>：元素向左浮动。</li>\n<li><code>right</code>：元素向右浮动。</li>\n<li><code>none</code>（默认值）：元素不浮动。</li>\n</ul>\n</li>\n<li><p><strong>影响</strong>：浮动元素会脱离正常文档流，后续元素会围绕浮动元素排列。</p>\n</li>\n</ul>\n<h4 id=\"示例-12\"><a href=\"#示例-12\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.float-left &#123;\n  float: left; &#x2F;* 向左浮动 *&#x2F;\n&#125;\n\n.float-right &#123;\n  float: right; &#x2F;* 向右浮动 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"3-position-属性\"><a href=\"#3-position-属性\" class=\"headerlink\" title=\"3. position 属性\"></a>3. <code>position</code> 属性</h3><ul>\n<li><strong>定义</strong>：<code>position</code> 属性用于控制元素的定位方式。</li>\n<li><strong>常见值</strong>：<ul>\n<li><code>static</code>：默认值，元素按照正常文档流进行定位。</li>\n<li><code>relative</code>：相对定位，元素相对于其正常位置进行偏移。</li>\n<li><code>absolute</code>：绝对定位，元素相对于最近的已定位祖先元素进行定位。</li>\n<li><code>fixed</code>：固定定位，元素相对于视口进行定位。</li>\n<li><code>sticky</code>：粘性定位，元素在特定的滚动位置时切换相对和固定定位。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-13\"><a href=\"#示例-13\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">.relative &#123;\n  position: relative; &#x2F;* 相对定位 *&#x2F;\n&#125;\n\n.absolute &#123;\n  position: absolute; &#x2F;* 绝对定位 *&#x2F;\n&#125;</code></pre>\n\n<h3 id=\"4-三者之间的关系\"><a href=\"#4-三者之间的关系\" class=\"headerlink\" title=\"4. 三者之间的关系\"></a>4. 三者之间的关系</h3><ul>\n<li><p><strong>文档流</strong>：</p>\n<ul>\n<li><code>display</code> 属性决定元素在文档流中的行为。块级元素和行内元素的显示方式不同，影响后续元素的排列。</li>\n<li><code>float</code> 属性会使元素脱离正常文档流，后续元素会围绕浮动元素排列。</li>\n<li><code>position</code> 属性中的 <code>absolute</code> 和 <code>fixed</code> 定位元素也会脱离文档流，不占据空间。</li>\n</ul>\n</li>\n<li><p><strong>层叠和重叠</strong>：</p>\n<ul>\n<li>使用 <code>position</code> 属性的元素可以通过 <code>z-index</code> 属性控制层叠顺序，而 <code>float</code> 元素的层叠顺序则由文档流顺序决定。</li>\n<li><code>display</code> 属性的值（如 <code>flex</code> 和 <code>grid</code>）可以影响元素的排列方式和层叠顺序。</li>\n</ul>\n</li>\n<li><p><strong>布局方式</strong>：</p>\n<ul>\n<li><code>float</code> 通常用于实现简单的文本环绕效果，但在现代布局中，使用 <code>flex</code> 和 <code>grid</code> 更为常见。</li>\n<li><code>position</code> 属性用于精确控制元素的位置，适合需要固定或绝对定位的场景。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-总结-11\"><a href=\"#5-总结-11\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li>**<code>display</code>**：控制元素的显示类型和文档流行为。</li>\n<li>**<code>float</code>**：用于将元素从文档流中移出并进行左右对齐。</li>\n<li>**<code>position</code>**：用于控制元素的定位方式，影响元素在页面中的位置。</li>\n</ul>\n<p>理解这三个属性的关系和区别，可以帮助您更好地控制网页的布局和样式。</p>\n<h2 id=\"absolute-与-fixed-共同点与不同点\"><a href=\"#absolute-与-fixed-共同点与不同点\" class=\"headerlink\" title=\"absolute 与 fixed 共同点与不同点\"></a>absolute 与 fixed 共同点与不同点</h2><p><code>absolute</code> 和 <code>fixed</code> 是 CSS 中的两种定位方式，它们都属于 <code>position</code> 属性的取值。虽然它们有一些共同点，但也存在显著的不同之处。以下是对这两种定位方式的详细比较。</p>\n<h3 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h3><ol>\n<li><p><strong>脱离文档流</strong>：</p>\n<ul>\n<li>两者都脱离了正常的文档流。这意味着它们不会占据空间，后续的元素会按照正常文档流排列，不会受到它们的影响。</li>\n</ul>\n</li>\n<li><p><strong>使用 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性</strong>：</p>\n<ul>\n<li>两者都可以使用这些属性来精确控制元素的位置。可以通过设置这些属性来指定元素相对于其定位上下文的位置。</li>\n</ul>\n</li>\n<li><p><strong>不影响其他元素</strong>：</p>\n<ul>\n<li>由于它们脱离了文档流，<code>absolute</code> 和 <code>fixed</code> 定位的元素不会影响其他元素的布局。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>absolute</code> 定位</th>\n<th><code>fixed</code> 定位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>定位上下文</strong></td>\n<td>相对于最近的已定位祖先元素（即 <code>position</code> 不为 <code>static</code> 的元素）</td>\n<td>相对于视口（浏览器窗口）</td>\n</tr>\n<tr>\n<td><strong>滚动行为</strong></td>\n<td>随着页面滚动而移动，保持相对位置</td>\n<td>始终固定在视口中，不随页面滚动而移动</td>\n</tr>\n<tr>\n<td><strong>使用场景</strong></td>\n<td>适用于需要相对于某个元素进行定位的情况，如弹出菜单、工具提示等</td>\n<td>适用于需要固定在视口中的元素，如导航栏、返回顶部按钮等</td>\n</tr>\n</tbody></table>\n<h3 id=\"示例-14\"><a href=\"#示例-14\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"1-absolute-定位示例\"><a href=\"#1-absolute-定位示例\" class=\"headerlink\" title=\"1. absolute 定位示例\"></a>1. <code>absolute</code> 定位示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Absolute 定位示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .container &#123;\n        position: relative; &#x2F;* 创建定位上下文 *&#x2F;\n        width: 300px;\n        height: 300px;\n        border: 1px solid #000;\n      &#125;\n      .absolute &#123;\n        position: absolute; &#x2F;* 绝对定位 *&#x2F;\n        top: 20px; &#x2F;* 距离最近的已定位祖先元素顶部 20 像素 *&#x2F;\n        left: 20px; &#x2F;* 距离最近的已定位祖先元素左侧 20 像素 *&#x2F;\n        background-color: lightblue;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;absolute&quot;&gt;绝对定位元素&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h4 id=\"2-fixed-定位示例\"><a href=\"#2-fixed-定位示例\" class=\"headerlink\" title=\"2. fixed 定位示例\"></a>2. <code>fixed</code> 定位示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Fixed 定位示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .fixed &#123;\n        position: fixed; &#x2F;* 固定定位 *&#x2F;\n        top: 10px; &#x2F;* 距离视口顶部 10 像素 *&#x2F;\n        right: 10px; &#x2F;* 距离视口右侧 10 像素 *&#x2F;\n        background-color: lightcoral;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;fixed&quot;&gt;固定定位元素&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;height: 2000px;&quot;&gt;滚动页面&lt;&#x2F;div&gt;\n    &lt;!-- 用于演示滚动效果 --&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>共同点</strong>：<code>absolute</code> 和 <code>fixed</code> 都脱离文档流，使用 <code>top</code>、<code>right</code>、<code>bottom</code> 和 <code>left</code> 属性进行定位，并且不影响其他元素的布局。</li>\n<li><strong>不同点</strong>：<code>absolute</code> 定位相对于最近的已定位祖先元素，而 <code>fixed</code> 定位相对于视口，且固定在视口中，不随页面滚动而移动。</li>\n</ul>\n<p>理解这两种定位方式的共同点和不同点，可以帮助您在布局中选择合适的定位方式。</p>\n<h2 id=\"对-sticky-定位的理解\"><a href=\"#对-sticky-定位的理解\" class=\"headerlink\" title=\"对 sticky 定位的理解\"></a>对 sticky 定位的理解</h2><p><strong>Sticky 定位</strong>（<code>position: sticky</code>）是 CSS 中的一种定位方式，它结合了相对定位和固定定位的特性。Sticky 定位允许元素在滚动时保持在视口的特定位置，直到其父元素的边界被滚动出视口。以下是对 sticky 定位的详细理解，包括其工作原理、使用场景和示例。</p>\n<h3 id=\"1-工作原理-2\"><a href=\"#1-工作原理-2\" class=\"headerlink\" title=\"1. 工作原理\"></a>1. 工作原理</h3><ul>\n<li><strong>相对定位</strong>：当页面滚动到元素的初始位置时，sticky 元素会表现得像相对定位的元素，保持在其正常文档流中的位置。</li>\n<li><strong>固定定位</strong>：一旦页面滚动到指定的阈值（通常是元素的 <code>top</code>、<code>right</code>、<code>bottom</code> 或 <code>left</code> 属性所定义的位置），sticky 元素会变为固定定位，固定在视口的指定位置。</li>\n<li><strong>父元素的边界</strong>：sticky 元素的固定状态会受到其父元素的边界限制。当父元素的底部被滚动出视口时，sticky 元素会停止固定，恢复到正常的文档流中。</li>\n</ul>\n<h3 id=\"2-使用场景\"><a href=\"#2-使用场景\" class=\"headerlink\" title=\"2. 使用场景\"></a>2. 使用场景</h3><ul>\n<li><strong>导航栏</strong>：可以用于创建粘性导航栏，使其在滚动时保持在视口的顶部。</li>\n<li><strong>侧边栏</strong>：在长页面中，侧边栏可以在滚动时保持可见，直到其父元素的底部被滚动出视口。</li>\n<li><strong>标题</strong>：在长文章中，章节标题可以使用 sticky 定位，使其在滚动时保持在视口的顶部，方便用户查看。</li>\n</ul>\n<h3 id=\"3-示例-2\"><a href=\"#3-示例-2\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个简单的示例，展示如何使用 sticky 定位：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Sticky 定位示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body &#123;\n        font-family: Arial, sans-serif;\n        line-height: 1.6;\n      &#125;\n      .header &#123;\n        background-color: #3498db;\n        color: white;\n        padding: 10px;\n        text-align: center;\n      &#125;\n      .sticky &#123;\n        position: sticky; &#x2F;* 粘性定位 *&#x2F;\n        top: 0; &#x2F;* 当滚动到顶部时固定 *&#x2F;\n        background-color: #f0f0f0;\n        padding: 10px;\n        border: 1px solid #ccc;\n        z-index: 1000; &#x2F;* 确保在其他元素之上 *&#x2F;\n      &#125;\n      .content &#123;\n        height: 2000px; &#x2F;* 用于演示滚动效果 *&#x2F;\n        padding: 20px;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;header&quot;&gt;Sticky 定位示例&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;sticky&quot;&gt;我会在滚动时保持在顶部&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;content&quot;&gt;\n      &lt;p&gt;滚动页面以查看粘性效果...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n      &lt;p&gt;更多内容...&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h3><ul>\n<li><strong>兼容性</strong>：虽然大多数现代浏览器都支持 sticky 定位，但在某些旧版浏览器中可能不支持。</li>\n<li><strong>父元素的高度</strong>：sticky 元素的行为受到其父元素的高度限制。如果父元素的高度不足以容纳 sticky 元素的滚动，可能会导致意外的行为。</li>\n<li><strong>z-index</strong>：在使用 sticky 定位时，可能需要设置 <code>z-index</code> 属性，以确保 sticky 元素在其他元素之上。</li>\n</ul>\n<h3 id=\"5-总结-12\"><a href=\"#5-总结-12\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>Sticky 定位</strong> 是一种结合了相对定位和固定定位的定位方式，允许元素在滚动时保持在视口的特定位置。</li>\n<li>它适用于导航栏、侧边栏和标题等场景，能够提高用户体验。</li>\n<li>理解 sticky 定位的工作原理和使用场景，可以帮助您在布局中更好地利用这一特性。</li>\n</ul>\n<h1 id=\"四、场景应用\"><a href=\"#四、场景应用\" class=\"headerlink\" title=\"四、场景应用\"></a>四、场景应用</h1><h2 id=\"实现一个三角形\"><a href=\"#实现一个三角形\" class=\"headerlink\" title=\"实现一个三角形\"></a>实现一个三角形</h2><p>在 CSS 中，可以通过设置元素的边框来创建一个三角形。以下是实现三角形的几种常见方法，主要使用边框属性。</p>\n<h3 id=\"方法-1：使用边框\"><a href=\"#方法-1：使用边框\" class=\"headerlink\" title=\"方法 1：使用边框\"></a>方法 1：使用边框</h3><p>通过设置一个元素的宽度和高度为 0，并利用边框的颜色和透明度来创建三角形。</p>\n<h4 id=\"示例代码-13\"><a href=\"#示例代码-13\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;三角形示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .triangle-up &#123;\n        width: 0;\n        height: 0;\n        border-left: 50px solid transparent; &#x2F;* 左边框 *&#x2F;\n        border-right: 50px solid transparent; &#x2F;* 右边框 *&#x2F;\n        border-bottom: 100px solid #3498db; &#x2F;* 底边框 *&#x2F;\n      &#125;\n\n      .triangle-down &#123;\n        width: 0;\n        height: 0;\n        border-left: 50px solid transparent; &#x2F;* 左边框 *&#x2F;\n        border-right: 50px solid transparent; &#x2F;* 右边框 *&#x2F;\n        border-top: 100px solid #e74c3c; &#x2F;* 顶边框 *&#x2F;\n      &#125;\n\n      .triangle-left &#123;\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent; &#x2F;* 上边框 *&#x2F;\n        border-bottom: 50px solid transparent; &#x2F;* 下边框 *&#x2F;\n        border-right: 100px solid #2ecc71; &#x2F;* 右边框 *&#x2F;\n      &#125;\n\n      .triangle-right &#123;\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent; &#x2F;* 上边框 *&#x2F;\n        border-bottom: 50px solid transparent; &#x2F;* 下边框 *&#x2F;\n        border-left: 100px solid #f1c40f; &#x2F;* 左边框 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;triangle-up&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;triangle-down&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;triangle-left&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;triangle-right&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>三角形的创建</strong>：<ul>\n<li><strong>上三角形</strong>：通过设置 <code>border-bottom</code> 的颜色和高度，结合 <code>border-left</code> 和 <code>border-right</code> 的透明边框，形成一个向上的三角形。</li>\n<li><strong>下三角形</strong>：通过设置 <code>border-top</code> 的颜色和高度，结合 <code>border-left</code> 和 <code>border-right</code> 的透明边框，形成一个向下的三角形。</li>\n<li><strong>左三角形</strong>：通过设置 <code>border-right</code> 的颜色和宽度，结合 <code>border-top</code> 和 <code>border-bottom</code> 的透明边框，形成一个向左的三角形。</li>\n<li><strong>右三角形</strong>：通过设置 <code>border-left</code> 的颜色和宽度，结合 <code>border-top</code> 和 <code>border-bottom</code> 的透明边框，形成一个向右的三角形。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法-2：使用-CSS-Clip-path\"><a href=\"#方法-2：使用-CSS-Clip-path\" class=\"headerlink\" title=\"方法 2：使用 CSS Clip-path\"></a>方法 2：使用 CSS Clip-path</h3><p>另一种创建三角形的方法是使用 <code>clip-path</code> 属性。</p>\n<h4 id=\"示例代码-14\"><a href=\"#示例代码-14\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;三角形示例 - Clip-path&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .triangle &#123;\n        width: 0;\n        height: 0;\n        background-color: #3498db;\n        clip-path: polygon(50% 0%, 0% 100%, 100% 100%); &#x2F;* 创建三角形 *&#x2F;\n        width: 100px; &#x2F;* 设置宽度 *&#x2F;\n        height: 100px; &#x2F;* 设置高度 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;triangle&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-1\"><a href=\"#解释-1\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>clip-path</strong>：使用 <code>clip-path</code> 属性的 <code>polygon</code> 函数定义三角形的三个顶点。<code>polygon(50% 0%, 0% 100%, 100% 100%)</code> 表示三角形的三个顶点分别位于顶部中心、左下角和右下角。</li>\n</ul>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用边框属性是创建三角形的常见方法，适用于简单的三角形。</li>\n<li>使用 <code>clip-path</code> 属性可以创建更复杂的形状，适用于需要更灵活的形状设计。</li>\n</ul>\n<h2 id=\"实现一个扇形\"><a href=\"#实现一个扇形\" class=\"headerlink\" title=\"实现一个扇形\"></a>实现一个扇形</h2><p>在 CSS 中，可以通过使用 <code>conic-gradient</code> 或者 SVG 来实现扇形。以下是这两种方法的详细示例。</p>\n<h3 id=\"方法-1：使用-CSS-conic-gradient\"><a href=\"#方法-1：使用-CSS-conic-gradient\" class=\"headerlink\" title=\"方法 1：使用 CSS conic-gradient\"></a>方法 1：使用 CSS <code>conic-gradient</code></h3><p><code>conic-gradient</code> 是 CSS 中的一种渐变函数，可以用来创建扇形效果。</p>\n<h4 id=\"示例代码-15\"><a href=\"#示例代码-15\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;扇形示例 - CSS&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .fan-shape &#123;\n        width: 200px; &#x2F;* 扇形的宽度 *&#x2F;\n        height: 200px; &#x2F;* 扇形的高度 *&#x2F;\n        border-radius: 50%; &#x2F;* 使其成为圆形 *&#x2F;\n        background: conic-gradient(\n          #3498db 0deg 90deg,\n          &#x2F;* 蓝色扇形 *&#x2F; #e74c3c 90deg 180deg,\n          &#x2F;* 红色扇形 *&#x2F; #f1c40f 180deg 270deg,\n          &#x2F;* 黄色扇形 *&#x2F; #2ecc71 270deg 360deg &#x2F;* 绿色扇形 *&#x2F;\n        );\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;fan-shape&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-2\"><a href=\"#解释-2\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>扇形的创建</strong>：<ul>\n<li>使用 <code>conic-gradient</code> 函数定义扇形的颜色和角度。</li>\n<li>每个颜色段的起始和结束角度定义了扇形的范围。例如，<code>#3498db 0deg 90deg</code> 表示从 0 度到 90 度的蓝色扇形。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法-2：使用-SVG\"><a href=\"#方法-2：使用-SVG\" class=\"headerlink\" title=\"方法 2：使用 SVG\"></a>方法 2：使用 SVG</h3><p>SVG（可缩放矢量图形）也可以用来创建扇形，适合需要更复杂形状的场景。</p>\n<h4 id=\"示例代码-16\"><a href=\"#示例代码-16\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;扇形示例 - SVG&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;svg width&#x3D;&quot;200&quot; height&#x3D;&quot;200&quot; viewBox&#x3D;&quot;0 0 200 200&quot;&gt;\n      &lt;path d&#x3D;&quot;M100,100 L100,0 A100,100 0 0,1 200,100 Z&quot; fill&#x3D;&quot;#3498db&quot; &#x2F;&gt;\n      &lt;!-- 蓝色扇形 --&gt;\n      &lt;path d&#x3D;&quot;M100,100 L200,100 A100,100 0 0,1 100,200 Z&quot; fill&#x3D;&quot;#e74c3c&quot; &#x2F;&gt;\n      &lt;!-- 红色扇形 --&gt;\n      &lt;path d&#x3D;&quot;M100,100 L100,200 A100,100 0 0,1 0,100 Z&quot; fill&#x3D;&quot;#f1c40f&quot; &#x2F;&gt;\n      &lt;!-- 黄色扇形 --&gt;\n      &lt;path d&#x3D;&quot;M100,100 L0,100 A100,100 0 0,1 100,0 Z&quot; fill&#x3D;&quot;#2ecc71&quot; &#x2F;&gt;\n      &lt;!-- 绿色扇形 --&gt;\n    &lt;&#x2F;svg&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-3\"><a href=\"#解释-3\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>SVG 扇形的创建</strong>：<ul>\n<li>使用 <code>&lt;path&gt;</code> 元素定义扇形的路径。</li>\n<li><code>M100,100</code> 表示移动到中心点 (100, 100)。</li>\n<li><code>L100,0</code> 表示绘制一条线到顶部。</li>\n<li><code>A100,100 0 0,1 200,100</code> 表示绘制一个弧线，形成扇形的边缘。</li>\n<li><code>Z</code> 表示闭合路径。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用 <strong>CSS <code>conic-gradient</code></strong> 是创建简单扇形的快速方法，适合于现代浏览器。</li>\n<li>使用 <strong>SVG</strong> 可以创建更复杂的扇形，适合需要更高自定义的场景。</li>\n</ul>\n<h2 id=\"实现一个宽高自适应的正方形\"><a href=\"#实现一个宽高自适应的正方形\" class=\"headerlink\" title=\"实现一个宽高自适应的正方形\"></a>实现一个宽高自适应的正方形</h2><p>要实现一个宽高自适应的正方形，可以使用 CSS 的 <code>padding</code> 属性结合 <code>width</code> 或 <code>height</code> 属性。以下是几种常见的方法来创建一个宽高自适应的正方形。</p>\n<h3 id=\"方法-1：使用-padding-bottom\"><a href=\"#方法-1：使用-padding-bottom\" class=\"headerlink\" title=\"方法 1：使用 padding-bottom\"></a>方法 1：使用 <code>padding-bottom</code></h3><p>通过设置 <code>padding-bottom</code> 为 <code>100%</code>，可以创建一个正方形。这个方法利用了 <code>padding</code> 的百分比是相对于父元素的宽度来计算的。</p>\n<h4 id=\"示例代码-17\"><a href=\"#示例代码-17\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;自适应正方形示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .square &#123;\n        width: 100%; &#x2F;* 宽度自适应 *&#x2F;\n        padding-bottom: 100%; &#x2F;* 高度为宽度的 100% *&#x2F;\n        background-color: #3498db; &#x2F;* 背景颜色 *&#x2F;\n        position: relative; &#x2F;* 使子元素绝对定位 *&#x2F;\n      &#125;\n      .content &#123;\n        position: absolute; &#x2F;* 绝对定位 *&#x2F;\n        top: 50%; &#x2F;* 垂直居中 *&#x2F;\n        left: 50%; &#x2F;* 水平居中 *&#x2F;\n        transform: translate(-50%, -50%); &#x2F;* 使内容居中 *&#x2F;\n        color: white; &#x2F;* 字体颜色 *&#x2F;\n        font-size: 20px; &#x2F;* 字体大小 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;square&quot;&gt;\n      &lt;div class&#x3D;&quot;content&quot;&gt;正方形&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-4\"><a href=\"#解释-4\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>正方形的创建</strong>：<ul>\n<li><code>width: 100%</code> 使正方形的宽度自适应父元素的宽度。</li>\n<li><code>padding-bottom: 100%</code> 确保高度与宽度相等，从而形成正方形。</li>\n<li>使用 <code>position: relative</code> 和 <code>position: absolute</code> 来使内容在正方形中居中。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法-2：使用-CSS-Grid\"><a href=\"#方法-2：使用-CSS-Grid\" class=\"headerlink\" title=\"方法 2：使用 CSS Grid\"></a>方法 2：使用 CSS Grid</h3><p>使用 CSS Grid 也可以轻松实现一个自适应的正方形。</p>\n<h4 id=\"示例代码-18\"><a href=\"#示例代码-18\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;自适应正方形示例 - Grid&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .container &#123;\n        display: grid; &#x2F;* 使用 Grid 布局 *&#x2F;\n        width: 100%; &#x2F;* 宽度自适应 *&#x2F;\n        height: 0; &#x2F;* 高度为 0 *&#x2F;\n        padding-top: 100%; &#x2F;* 高度为宽度的 100% *&#x2F;\n        position: relative; &#x2F;* 使子元素绝对定位 *&#x2F;\n      &#125;\n      .square &#123;\n        background-color: #3498db; &#x2F;* 背景颜色 *&#x2F;\n        position: absolute; &#x2F;* 绝对定位 *&#x2F;\n        top: 0; &#x2F;* 顶部对齐 *&#x2F;\n        left: 0; &#x2F;* 左侧对齐 *&#x2F;\n        right: 0; &#x2F;* 右侧对齐 *&#x2F;\n        bottom: 0; &#x2F;* 底部对齐 *&#x2F;\n      &#125;\n      .content &#123;\n        display: flex; &#x2F;* 使用 Flexbox 居中内容 *&#x2F;\n        justify-content: center; &#x2F;* 水平居中 *&#x2F;\n        align-items: center; &#x2F;* 垂直居中 *&#x2F;\n        color: white; &#x2F;* 字体颜色 *&#x2F;\n        font-size: 20px; &#x2F;* 字体大小 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;div class&#x3D;&quot;square&quot;&gt;\n        &lt;div class&#x3D;&quot;content&quot;&gt;正方形&lt;&#x2F;div&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-5\"><a href=\"#解释-5\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>正方形的创建</strong>：<ul>\n<li>使用 <code>padding-top: 100%</code> 来确保高度与宽度相等。</li>\n<li><code>position: absolute</code> 使 <code>.square</code> 元素填满整个容器。</li>\n<li>使用 Flexbox 来居中内容。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用 <strong><code>padding</code></strong> 属性是创建自适应正方形的常见方法，适用于需要根据父元素宽度自适应的场景。</li>\n<li>使用 <strong>CSS Grid</strong> 也可以轻松实现自适应正方形，适合更复杂的布局需求。</li>\n</ul>\n<h2 id=\"画一条-0-5px-的线\"><a href=\"#画一条-0-5px-的线\" class=\"headerlink\" title=\"画一条 0.5px 的线\"></a>画一条 0.5px 的线</h2><p>在 CSS 中，绘制一条 0.5px 的线可以通过设置元素的边框或使用 <code>height</code> 属性来实现。由于某些浏览器可能不支持小于 1px 的边框，因此可以使用 <code>transform</code> 属性来实现更细的线条。以下是几种实现 0.5px 线的示例。</p>\n<h3 id=\"方法-1：使用边框-1\"><a href=\"#方法-1：使用边框-1\" class=\"headerlink\" title=\"方法 1：使用边框\"></a>方法 1：使用边框</h3><p>通过设置边框的宽度为 0.5px 来创建一条线。</p>\n<h4 id=\"示例代码-19\"><a href=\"#示例代码-19\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;0.5px 线示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .line &#123;\n        border-top: 0.5px solid #3498db; &#x2F;* 设置边框为 0.5px *&#x2F;\n        width: 100%; &#x2F;* 线的宽度 *&#x2F;\n        margin: 20px 0; &#x2F;* 上下间距 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;line&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"方法-2：使用-height-和-transform\"><a href=\"#方法-2：使用-height-和-transform\" class=\"headerlink\" title=\"方法 2：使用 height 和 transform\"></a>方法 2：使用 <code>height</code> 和 <code>transform</code></h3><p>通过设置一个元素的高度为 1px，并使用 <code>transform</code> 属性缩放来实现 0.5px 的线。</p>\n<h4 id=\"示例代码-20\"><a href=\"#示例代码-20\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;0.5px 线示例 - Transform&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .line &#123;\n        height: 1px; &#x2F;* 设置高度为 1px *&#x2F;\n        background-color: #3498db; &#x2F;* 线的颜色 *&#x2F;\n        transform: scaleY(0.5); &#x2F;* 垂直缩放为 0.5 *&#x2F;\n        transform-origin: top; &#x2F;* 缩放的原点 *&#x2F;\n        width: 100%; &#x2F;* 线的宽度 *&#x2F;\n        margin: 20px 0; &#x2F;* 上下间距 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;line&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"方法-3：使用-SVG\"><a href=\"#方法-3：使用-SVG\" class=\"headerlink\" title=\"方法 3：使用 SVG\"></a>方法 3：使用 SVG</h3><p>使用 SVG 也可以绘制一条 0.5px 的线，适合需要更高精度的场景。</p>\n<h4 id=\"示例代码-21\"><a href=\"#示例代码-21\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;0.5px 线示例 - SVG&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;svg width&#x3D;&quot;100%&quot; height&#x3D;&quot;1&quot;&gt;\n      &lt;line\n        x1&#x3D;&quot;0&quot;\n        y1&#x3D;&quot;0&quot;\n        x2&#x3D;&quot;100%&quot;\n        y2&#x3D;&quot;0&quot;\n        stroke&#x3D;&quot;#3498db&quot;\n        stroke-width&#x3D;&quot;0.5&quot;\n      &#x2F;&gt;\n    &lt;&#x2F;svg&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>使用边框</strong> 是创建 0.5px 线的简单方法，但某些浏览器可能不支持小于 1px 的边框。</li>\n<li><strong>使用 <code>transform</code></strong> 可以通过缩放实现更细的线条，适合需要更高精度的场景。</li>\n<li><strong>使用 SVG</strong> 是绘制精确线条的另一种方法，适合需要更复杂图形的场景。</li>\n</ul>\n<h2 id=\"设置小于-12px-的字体\"><a href=\"#设置小于-12px-的字体\" class=\"headerlink\" title=\"设置小于 12px 的字体\"></a>设置小于 12px 的字体</h2><p>在 CSS 中，可以设置小于 12px 的字体大小。虽然大多数浏览器都支持小于 12px 的字体大小，但在某些情况下，可能会出现渲染问题，尤其是在高分辨率显示器上。以下是如何设置小于 12px 字体大小的示例。</p>\n<h3 id=\"示例代码-22\"><a href=\"#示例代码-22\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;小于 12px 字体示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      .small-font &#123;\n        font-size: 10px; &#x2F;* 设置字体大小为 10px *&#x2F;\n        color: #3498db; &#x2F;* 字体颜色 *&#x2F;\n      &#125;\n      .smaller-font &#123;\n        font-size: 8px; &#x2F;* 设置字体大小为 8px *&#x2F;\n        color: #e74c3c; &#x2F;* 字体颜色 *&#x2F;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;small-font&quot;&gt;这是 10px 的字体。&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;smaller-font&quot;&gt;这是 8px 的字体。&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"解释-6\"><a href=\"#解释-6\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><strong>字体大小设置</strong>：<ul>\n<li><code>.small-font</code> 类的字体大小设置为 10px。</li>\n<li><code>.smaller-font</code> 类的字体大小设置为 8px。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><strong>可读性</strong>：使用小于 12px 的字体可能会影响可读性，尤其是在移动设备上。确保文本仍然易于阅读。</li>\n<li><strong>浏览器兼容性</strong>：虽然大多数现代浏览器支持小于 12px 的字体，但在某些情况下，可能会出现渲染问题。建议在不同设备和浏览器上进行测试。</li>\n<li><strong>使用相对单位</strong>：考虑使用相对单位（如 <code>em</code> 或 <code>rem</code>）来设置字体大小，以便在不同的上下文中保持一致性。</li>\n</ol>\n<h3 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>您可以轻松设置小于 12px 的字体大小，只需在 CSS 中指定所需的像素值。</p>\n<h2 id=\"网站的-light-和-dark-如何切换，可结合-tailwind-css-和-React\"><a href=\"#网站的-light-和-dark-如何切换，可结合-tailwind-css-和-React\" class=\"headerlink\" title=\"网站的 light 和 dark 如何切换，可结合 tailwind css 和 React\"></a>网站的 light 和 dark 如何切换，可结合 tailwind css 和 React</h2><p>在使用 React 和 Tailwind CSS 的项目中实现光明（Light）和黑暗（Dark）模式的切换，可以通过状态管理和 CSS 类的切换来完成。以下是一个简单的实现示例。</p>\n<h3 id=\"1-设置-Tailwind-CSS\"><a href=\"#1-设置-Tailwind-CSS\" class=\"headerlink\" title=\"1. 设置 Tailwind CSS\"></a>1. 设置 Tailwind CSS</h3><p>确保在项目中安装了 Tailwind CSS。可以通过 npm 安装并配置 Tailwind CSS。</p>\n<h4 id=\"安装-Tailwind-CSS\"><a href=\"#安装-Tailwind-CSS\" class=\"headerlink\" title=\"安装 Tailwind CSS\"></a>安装 Tailwind CSS</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p</code></pre>\n\n<h4 id=\"配置-tailwind-config-js\"><a href=\"#配置-tailwind-config-js\" class=\"headerlink\" title=\"配置 tailwind.config.js\"></a>配置 <code>tailwind.config.js</code></h4><p>在 <code>tailwind.config.js</code> 中，确保启用 JIT 模式并设置内容路径：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  mode: &quot;jit&quot;,\n  purge: [&quot;.&#x2F;src&#x2F;**&#x2F;*.&#123;js,jsx,ts,tsx&#125;&quot;, &quot;.&#x2F;public&#x2F;index.html&quot;],\n  darkMode: &quot;class&quot;, &#x2F;&#x2F; Enable dark mode\n  theme: &#123;\n    extend: &#123;&#125;,\n  &#125;,\n  variants: &#123;\n    extend: &#123;&#125;,\n  &#125;,\n  plugins: [],\n&#125;;</code></pre>\n\n<h4 id=\"在-CSS-文件中引入-Tailwind\"><a href=\"#在-CSS-文件中引入-Tailwind\" class=\"headerlink\" title=\"在 CSS 文件中引入 Tailwind\"></a>在 CSS 文件中引入 Tailwind</h4><p>在 <code>src/index.css</code> 中引入 Tailwind 的基础样式：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@tailwind base;\n@tailwind components;\n@tailwind utilities;</code></pre>\n\n<h3 id=\"2-创建-React-组件\"><a href=\"#2-创建-React-组件\" class=\"headerlink\" title=\"2. 创建 React 组件\"></a>2. 创建 React 组件</h3><p>创建一个简单的 React 组件，包含光明和黑暗模式的切换功能。</p>\n<h4 id=\"示例代码-23\"><a href=\"#示例代码-23\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;App.js\nimport React, &#123; useState, useEffect &#125; from &quot;react&quot;;\n\nfunction App() &#123;\n  const [darkMode, setDarkMode] &#x3D; useState(false);\n\n  &#x2F;&#x2F; 从 localStorage 获取主题设置\n  useEffect(() &#x3D;&gt; &#123;\n    const savedTheme &#x3D; localStorage.getItem(&quot;theme&quot;);\n    if (savedTheme &#x3D;&#x3D;&#x3D; &quot;dark&quot;) &#123;\n      setDarkMode(true);\n    &#125;\n  &#125;, []);\n\n  &#x2F;&#x2F; 切换主题\n  const toggleTheme &#x3D; () &#x3D;&gt; &#123;\n    setDarkMode(!darkMode);\n    if (!darkMode) &#123;\n      localStorage.setItem(&quot;theme&quot;, &quot;dark&quot;);\n    &#125; else &#123;\n      localStorage.setItem(&quot;theme&quot;, &quot;light&quot;);\n    &#125;\n  &#125;;\n\n  return (\n    &lt;div\n      className&#x3D;&#123;&#96;min-h-screen transition duration-500 $&#123;\n        darkMode ? &quot;bg-gray-800 text-white&quot; : &quot;bg-white text-black&quot;\n      &#125;&#96;&#125;\n    &gt;\n      &lt;div className&#x3D;&quot;container mx-auto p-4&quot;&gt;\n        &lt;h1 className&#x3D;&quot;text-2xl font-bold&quot;&gt;光明&#x2F;黑暗模式切换&lt;&#x2F;h1&gt;\n        &lt;button\n          onClick&#x3D;&#123;toggleTheme&#125;\n          className&#x3D;&quot;mt-4 px-4 py-2 bg-blue-500 text-white rounded&quot;\n        &gt;\n          切换模式\n        &lt;&#x2F;button&gt;\n        &lt;p className&#x3D;&quot;mt-4&quot;&gt;这是一个示例文本。&lt;&#x2F;p&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;\n\nexport default App;</code></pre>\n\n<h3 id=\"3-解释\"><a href=\"#3-解释\" class=\"headerlink\" title=\"3. 解释\"></a>3. 解释</h3><ul>\n<li><p><strong>状态管理</strong>：</p>\n<ul>\n<li>使用 <code>useState</code> 来管理 <code>darkMode</code> 状态，表示当前是否为黑暗模式。</li>\n<li>使用 <code>useEffect</code> 从 <code>localStorage</code> 中获取用户的主题设置，以便在页面加载时应用。</li>\n</ul>\n</li>\n<li><p><strong>切换主题</strong>：</p>\n<ul>\n<li><code>toggleTheme</code> 函数用于切换 <code>darkMode</code> 状态，并将当前主题保存到 <code>localStorage</code>。</li>\n</ul>\n</li>\n<li><p><strong>动态类名</strong>：</p>\n<ul>\n<li>使用模板字符串动态设置 <code>className</code>，根据 <code>darkMode</code> 状态应用不同的背景和文本颜色。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-运行项目\"><a href=\"#4-运行项目\" class=\"headerlink\" title=\"4. 运行项目\"></a>4. 运行项目</h3><p>确保在项目目录中运行以下命令以启动开发服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm start</code></pre>\n\n<h3 id=\"5-总结-13\"><a href=\"#5-总结-13\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>通过结合 React 和 Tailwind CSS，可以轻松实现光明和黑暗模式的切换功能。使用 <code>localStorage</code> 可以确保用户的选择在页面刷新后仍然有效。您可以根据需要进一步自定义样式和功能。</p>\n<h2 id=\"网站的黑白色和正常色调如何实现\"><a href=\"#网站的黑白色和正常色调如何实现\" class=\"headerlink\" title=\"网站的黑白色和正常色调如何实现\"></a>网站的黑白色和正常色调如何实现</h2><p>在网站中实现黑白色（灰度）和正常色调的切换，可以通过 CSS 和 JavaScript 来控制元素的样式。以下是一个使用 React 和 Tailwind CSS 的示例，展示如何实现这种切换功能。</p>\n<h3 id=\"1-设置-Tailwind-CSS-1\"><a href=\"#1-设置-Tailwind-CSS-1\" class=\"headerlink\" title=\"1. 设置 Tailwind CSS\"></a>1. 设置 Tailwind CSS</h3><p>确保在项目中安装了 Tailwind CSS。可以通过 npm 安装并配置 Tailwind CSS。</p>\n<h4 id=\"安装-Tailwind-CSS-1\"><a href=\"#安装-Tailwind-CSS-1\" class=\"headerlink\" title=\"安装 Tailwind CSS\"></a>安装 Tailwind CSS</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p</code></pre>\n\n<h4 id=\"配置-tailwind-config-js-1\"><a href=\"#配置-tailwind-config-js-1\" class=\"headerlink\" title=\"配置 tailwind.config.js\"></a>配置 <code>tailwind.config.js</code></h4><p>在 <code>tailwind.config.js</code> 中，确保启用 JIT 模式并设置内容路径：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  mode: &quot;jit&quot;,\n  purge: [&quot;.&#x2F;src&#x2F;**&#x2F;*.&#123;js,jsx,ts,tsx&#125;&quot;, &quot;.&#x2F;public&#x2F;index.html&quot;],\n  theme: &#123;\n    extend: &#123;&#125;,\n  &#125;,\n  variants: &#123;\n    extend: &#123;&#125;,\n  &#125;,\n  plugins: [],\n&#125;;</code></pre>\n\n<h4 id=\"在-CSS-文件中引入-Tailwind-1\"><a href=\"#在-CSS-文件中引入-Tailwind-1\" class=\"headerlink\" title=\"在 CSS 文件中引入 Tailwind\"></a>在 CSS 文件中引入 Tailwind</h4><p>在 <code>src/index.css</code> 中引入 Tailwind 的基础样式：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">@tailwind base;\n@tailwind components;\n@tailwind utilities;</code></pre>\n\n<h3 id=\"2-创建-React-组件-1\"><a href=\"#2-创建-React-组件-1\" class=\"headerlink\" title=\"2. 创建 React 组件\"></a>2. 创建 React 组件</h3><p>创建一个简单的 React 组件，包含黑白色和正常色调的切换功能。</p>\n<h4 id=\"示例代码-24\"><a href=\"#示例代码-24\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;App.js\nimport React, &#123; useState, useEffect &#125; from &quot;react&quot;;\n\nfunction App() &#123;\n  const [isGrayscale, setIsGrayscale] &#x3D; useState(false);\n\n  &#x2F;&#x2F; 从 localStorage 获取颜色设置\n  useEffect(() &#x3D;&gt; &#123;\n    const savedColorMode &#x3D; localStorage.getItem(&quot;colorMode&quot;);\n    if (savedColorMode &#x3D;&#x3D;&#x3D; &quot;grayscale&quot;) &#123;\n      setIsGrayscale(true);\n    &#125;\n  &#125;, []);\n\n  &#x2F;&#x2F; 切换颜色模式\n  const toggleColorMode &#x3D; () &#x3D;&gt; &#123;\n    setIsGrayscale(!isGrayscale);\n    if (!isGrayscale) &#123;\n      localStorage.setItem(&quot;colorMode&quot;, &quot;grayscale&quot;);\n    &#125; else &#123;\n      localStorage.setItem(&quot;colorMode&quot;, &quot;normal&quot;);\n    &#125;\n  &#125;;\n\n  return (\n    &lt;div\n      className&#x3D;&#123;&#96;min-h-screen transition duration-500 $&#123;\n        isGrayscale ? &quot;filter grayscale&quot; : &quot;&quot;\n      &#125;&#96;&#125;\n    &gt;\n      &lt;div className&#x3D;&quot;container mx-auto p-4&quot;&gt;\n        &lt;h1 className&#x3D;&quot;text-2xl font-bold&quot;&gt;黑白色与正常色调切换&lt;&#x2F;h1&gt;\n        &lt;button\n          onClick&#x3D;&#123;toggleColorMode&#125;\n          className&#x3D;&quot;mt-4 px-4 py-2 bg-blue-500 text-white rounded&quot;\n        &gt;\n          切换颜色模式\n        &lt;&#x2F;button&gt;\n        &lt;p className&#x3D;&quot;mt-4&quot;&gt;这是一个示例文本。&lt;&#x2F;p&gt;\n        &lt;p className&#x3D;&quot;mt-4&quot;&gt;您可以在黑白色和正常色调之间切换。&lt;&#x2F;p&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;\n\nexport default App;</code></pre>\n\n<h3 id=\"3-解释-1\"><a href=\"#3-解释-1\" class=\"headerlink\" title=\"3. 解释\"></a>3. 解释</h3><ul>\n<li><p><strong>状态管理</strong>：</p>\n<ul>\n<li>使用 <code>useState</code> 来管理 <code>isGrayscale</code> 状态，表示当前是否为黑白色模式。</li>\n<li>使用 <code>useEffect</code> 从 <code>localStorage</code> 中获取用户的颜色设置，以便在页面加载时应用。</li>\n</ul>\n</li>\n<li><p><strong>切换颜色模式</strong>：</p>\n<ul>\n<li><code>toggleColorMode</code> 函数用于切换 <code>isGrayscale</code> 状态，并将当前颜色模式保存到 <code>localStorage</code>。</li>\n</ul>\n</li>\n<li><p><strong>动态类名</strong>：</p>\n<ul>\n<li>使用模板字符串动态设置 <code>className</code>，根据 <code>isGrayscale</code> 状态应用 <code>filter grayscale</code> 类。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-运行项目-1\"><a href=\"#4-运行项目-1\" class=\"headerlink\" title=\"4. 运行项目\"></a>4. 运行项目</h3><p>确保在项目目录中运行以下命令以启动开发服务器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm start</code></pre>\n\n<h3 id=\"5-总结-14\"><a href=\"#5-总结-14\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>通过结合 React 和 Tailwind CSS，可以轻松实现黑白色和正常色调的切换功能。使用 <code>localStorage</code> 可以确保用户的选择在页面刷新后仍然有效。您可以根据需要进一步自定义样式和功能。</p>\n","feature":true,"text":"一、CSS 基础CSS 选择器及其优先级CSS 选择器用于选择 HTML 元素并应用样式。选择器的种类繁多，每种选择器都有其特定的用途和优先级。以下是常见的 CSS 选择器及其优先级的详细介绍。 1. 常见的 CSS 选择器 通用选择器 (*)： 选择所有元素。 * &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"105k","symbolsTime":"1:35"},"categories":[{"name":"interview","slug":"interview","count":3,"path":"api/categories/interview.json"}],"tags":[{"name":"css","slug":"css","count":1,"path":"api/tags/css.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81CSS-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、CSS 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">CSS 选择器及其优先级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E8%A7%81%E7%9A%84-CSS-%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">1. 常见的 CSS 选择器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-CSS-%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">2. CSS 选择器的优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BC%98%E5%85%88%E7%BA%A7%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 优先级示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E4%B8%AD%E5%8F%AF%E7%BB%A7%E6%89%BF%E4%B8%8E%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">CSS 中可继承与不可继承属性有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. 可继承属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. 不可继承属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3. 继承的控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#display-%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">display 的属性值及其作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E8%A7%81%E7%9A%84-display-%E5%B1%9E%E6%80%A7%E5%80%BC\"><span class=\"toc-text\">1. 常见的 display 属性值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-block\"><span class=\"toc-text\">1.1 block</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-inline\"><span class=\"toc-text\">1.2 inline</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-inline-block\"><span class=\"toc-text\">1.3 inline-block</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-none\"><span class=\"toc-text\">1.4 none</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-flex\"><span class=\"toc-text\">1.5 flex</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-grid\"><span class=\"toc-text\">1.6 grid</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-table\"><span class=\"toc-text\">1.7 table</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-8-table-row\"><span class=\"toc-text\">1.8 table-row</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-9-table-cell\"><span class=\"toc-text\">1.9 table-cell</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">2. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">隐藏元素的方法有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-CSS-display-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. 使用 CSS display 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-CSS-visibility-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. 使用 CSS visibility 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-CSS-opacity-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3. 使用 CSS opacity 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-CSS-position-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. 使用 CSS position 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8-HTML-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5. 使用 HTML 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8-JavaScript\"><span class=\"toc-text\">6. 使用 JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BD%BF%E7%94%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">7. 使用媒体查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">8. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">link 和@import 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lt-link-gt-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">1. &lt;link&gt; 标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-import-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2. @import 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#transition-%E5%92%8C-animation-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">transition 和 animation 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-transition\"><span class=\"toc-text\">1. transition</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-animation\"><span class=\"toc-text\">2. animation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E4%BC%AA%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">伪元素和伪类的区别和作用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E7%B1%BB%EF%BC%88Pseudo-class%EF%BC%89\"><span class=\"toc-text\">1. 伪类（Pseudo-class）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%88Pseudo-element%EF%BC%89\"><span class=\"toc-text\">2. 伪元素（Pseudo-element）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">3. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-requestAnimationframe-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 requestAnimationframe 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. 工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">2. 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 使用示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对盒模型的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86\"><span class=\"toc-text\">1. 盒模型的组成部分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE\"><span class=\"toc-text\">2. 盒模型的示意图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">3. 盒模型的计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4. 使用示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99%E2%BD%A4-translate-%E6%9D%A5%E6%94%B9%E5%8F%98%E4%BD%8D%E7%BD%AE%E2%BD%BD%E4%B8%8D%E6%98%AF%E5%AE%9A%E4%BD%8D%EF%BC%9F\"><span class=\"toc-text\">为什么有时候⽤ translate 来改变位置⽽不是定位？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">1. 性能优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%8D%E5%BD%B1%E5%93%8D%E6%96%87%E6%A1%A3%E6%B5%81\"><span class=\"toc-text\">2. 不影响文档流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%AE%80%E5%8C%96%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">3. 简化布局</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E5%90%88%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">4. 组合变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">5. 适用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#li-%E4%B8%8E-li-%E4%B9%8B%E9%97%B4%E6%9C%89%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%94%E6%98%AF%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%BB%98%E8%AE%A4%E7%9A%84-margin-%E5%92%8C-padding\"><span class=\"toc-text\">1. 默认的 margin 和 padding</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E7%A9%BA%E7%99%BD\"><span class=\"toc-text\">2. 行内元素的空白</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-CSS-%E9%87%8D%E7%BD%AE-margin-%E5%92%8C-padding\"><span class=\"toc-text\">1. 使用 CSS 重置 margin 和 padding</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-display-flex-%E6%88%96-display-grid\"><span class=\"toc-text\">2. 使用 display: flex 或 display: grid</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%A7%BB%E9%99%A4-HTML-%E4%B8%AD%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">3. 移除 HTML 中的空白字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-font-size-0%EF%BC%88%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%E7%89%B9%E5%AE%9A%E6%83%85%E5%86%B5%EF%BC%89\"><span class=\"toc-text\">4. 使用 font-size: 0（仅适用于特定情况）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS3-%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">CSS3 中有哪些新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">1. 选择器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">2. 盒模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%83%8C%E6%99%AF%E5%92%8C%E8%BE%B9%E6%A1%86\"><span class=\"toc-text\">3. 背景和边框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E6%9C%AC%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">4. 文本效果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%8F%98%E6%8D%A2%E5%92%8C%E8%BF%87%E6%B8%A1\"><span class=\"toc-text\">5. 变换和过渡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">6. 动画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-Flexbox-%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">7. Flexbox 布局</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">8. 网格布局</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">9. 媒体查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">10. 其他特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">替换元素的概念及计算规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1. 替换元素的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2. 替换元素的计算规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%B0%BA%E5%AF%B8%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">2.1 尺寸计算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">2.2 盒模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%BD%B1%E5%93%8D%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">2.3 影响布局</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">常见的图片格式及使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-JPEG-Joint-Photographic-Experts-Group\"><span class=\"toc-text\">1. JPEG (Joint Photographic Experts Group)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-PNG-Portable-Network-Graphics\"><span class=\"toc-text\">2. PNG (Portable Network Graphics)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-GIF-Graphics-Interchange-Format\"><span class=\"toc-text\">3. GIF (Graphics Interchange Format)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-SVG-Scalable-Vector-Graphics\"><span class=\"toc-text\">4. SVG (Scalable Vector Graphics)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-WebP\"><span class=\"toc-text\">5. WebP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-BMP-Bitmap\"><span class=\"toc-text\">6. BMP (Bitmap)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-TIFF-Tagged-Image-File-Format\"><span class=\"toc-text\">7. TIFF (Tagged Image File Format)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-CSSSprites-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 CSSSprites 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-1\"><span class=\"toc-text\">1. 工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BC%98%E7%82%B9-1\"><span class=\"toc-text\">2. 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 使用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%88%9B%E5%BB%BA%E7%B2%BE%E7%81%B5%E5%9B%BE\"><span class=\"toc-text\">3.1 创建精灵图</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8-CSS-%E5%AE%9A%E4%B9%89%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">3.2 使用 CSS 定义背景</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-HTML-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">5. HTML 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">6. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%EF%BC%8C%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0%E5%92%8C%E5%83%8F%E7%B4%A0%E5%AF%86%E5%BA%A6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%97%B6%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0-3x-2x-%E8%BF%99%E7%A7%8D%E5%9B%BE%E7%89%87%EF%BC%9F\"><span class=\"toc-text\">什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x 这种图片？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%EF%BC%88Physical-Pixels%EF%BC%89\"><span class=\"toc-text\">1. 物理像素（Physical Pixels）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0%EF%BC%88Logical-Pixels%EF%BC%89\"><span class=\"toc-text\">2. 逻辑像素（Logical Pixels）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%83%8F%E7%B4%A0%E5%AF%86%E5%BA%A6%EF%BC%88Pixel-Density%EF%BC%89\"><span class=\"toc-text\">3. 像素密度（Pixel Density）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2x-%E5%92%8C-3x-%E5%9B%BE%E7%89%87%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4. @2x 和 @3x 图片的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">5. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#margin-%E5%92%8C-padding-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">margin 和 padding 的使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-margin\"><span class=\"toc-text\">1. margin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-padding\"><span class=\"toc-text\">2. padding</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-line-height-%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%85%B6%E8%B5%8B%E5%80%BC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">对 line-height 的理解及其赋值方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-line-height-%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. line-height 的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%B5%8B%E5%80%BC%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 赋值方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E6%95%B0%E5%80%BC%EF%BC%88%E6%97%A0%E5%8D%95%E4%BD%8D%EF%BC%89\"><span class=\"toc-text\">2.1 数值（无单位）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">2.2 长度单位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E7%99%BE%E5%88%86%E6%AF%94\"><span class=\"toc-text\">2.3 百分比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">3. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E4%BC%98%E5%8C%96%E5%92%8C%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">CSS 优化和提高性能的方法有哪些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%90%88%E5%B9%B6%E5%92%8C%E5%8E%8B%E7%BC%A9-CSS-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1. 合并和压缩 CSS 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-CSS-Sprites\"><span class=\"toc-text\">2. 使用 CSS Sprites</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3. 使用选择器优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E8%BF%87%E5%A4%9A%E7%9A%84-CSS-%E8%A7%84%E5%88%99\"><span class=\"toc-text\">4. 避免使用过多的 CSS 规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8-CSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">5. 使用 CSS 预处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">6. 使用媒体查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BD%BF%E7%94%A8-min-width-%E5%92%8C-max-width\"><span class=\"toc-text\">7. 使用 min-width 和 max-width</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E4%BD%BF%E7%94%A8-will-change-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">8. 使用 will-change 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8-important\"><span class=\"toc-text\">9. 避免使用 !important</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">10. 使用异步加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E4%BD%BF%E7%94%A8-font-display-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">11. 使用 font-display 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E4%BD%BF%E7%94%A8-CDN\"><span class=\"toc-text\">12. 使用 CDN</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E7%9B%91%E6%B5%8B%E5%92%8C%E5%88%86%E6%9E%90%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">13. 监测和分析性能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-x2F-%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AE%83%E4%BB%AC%EF%BC%9F\"><span class=\"toc-text\">CSS 预处理器&#x2F;后处理器是什么？为什么要使用它们？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-CSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">1. CSS 预处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84-CSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">常见的 CSS 预处理器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">使用原因</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-CSS-%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2. CSS 后处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84-CSS-%E5%90%8E%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">常见的 CSS 后处理器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD-1\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9B%A0-1\"><span class=\"toc-text\">使用原因</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#before-%E5%92%8C-after-%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">::before 和 :after 的双冒号和单冒号有什么区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 伪元素的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8D%95%E5%86%92%E5%8F%B7%E4%B8%8E%E5%8F%8C%E5%86%92%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2. 单冒号与双冒号的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">3. 兼容性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-3\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#display-inline-block-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%97%B4%E9%9A%99%EF%BC%9F\"><span class=\"toc-text\">display:inline-block 什么时候会显示间隙？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">1. 行内元素的空白字符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A1%8C%E9%AB%98%EF%BC%88line-height%EF%BC%89\"><span class=\"toc-text\">2. 行高（line-height）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-CSS-%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">3. CSS 样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%A7%BB%E9%99%A4-HTML-%E4%B8%AD%E7%9A%84%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">1. 移除 HTML 中的空白字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">2. 使用注释</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E4%B8%BA-0\"><span class=\"toc-text\">3. 设置字体大小为 0</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E8%B4%9F%E8%BE%B9%E8%B7%9D\"><span class=\"toc-text\">4. 使用负边距</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">单行、多行文本溢出隐藏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">1. 单行文本溢出隐藏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">2. 多行文本溢出隐藏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">3. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sass%E3%80%81Less-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BB%96%E4%BB%AC%EF%BC%9F\"><span class=\"toc-text\">Sass、Less 是什么？为什么要使用他们？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Sass%EF%BC%88Syntactically-Awesome-Style-Sheets%EF%BC%89\"><span class=\"toc-text\">1. Sass（Syntactically Awesome Style Sheets）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD-2\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-LESS\"><span class=\"toc-text\">2. LESS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-3\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD-3\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9-1\"><span class=\"toc-text\">优点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-Sass-%E5%92%8C-LESS%EF%BC%9F\"><span class=\"toc-text\">3. 为什么要使用 Sass 和 LESS？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F\"><span class=\"toc-text\">对媒体查询的理解？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 媒体查询的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2. 媒体查询的语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-3\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">3. 常用的媒体查询条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">5. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-CSS-%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 CSS 工程化的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 核心概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">2.1 预处理器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%BB%84%E4%BB%B6%E5%8C%96\"><span class=\"toc-text\">2.2 组件化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.3 响应式设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">2.4 版本控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">3. 工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">3.1 构建工具</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-CSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.2 CSS 预处理器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-CSS-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">3.3 CSS 框架</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%88%B0%E8%BE%BE%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F\"><span class=\"toc-text\">如何判断元素是否到达可视区域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-getBoundingClientRect\"><span class=\"toc-text\">1. 使用 getBoundingClientRect()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-Intersection-Observer-API\"><span class=\"toc-text\">2. 使用 Intersection Observer API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%9B%91%E5%90%AC%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3. 监听滚动事件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-11\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#z-index-%E5%B1%9E%E6%80%A7%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">z-index 属性在什么情况下会失效</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AE%E5%AE%9A%E4%BD%8D%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. 没有设置定位属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-4\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">2. 堆叠上下文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-5\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%84%E5%BC%9F%E5%85%83%E7%B4%A0%E7%9A%84-z-index\"><span class=\"toc-text\">3. 兄弟元素的 z-index</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-6\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%80%8F%E6%98%8E%E5%BA%A6%E5%92%8C%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">4. 透明度和变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%85%B6%E4%BB%96-CSS-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5. 其他 CSS 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS3-%E4%B8%AD%E7%9A%84-transform-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">CSS3 中的 transform 有哪些属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2D-%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">1. 2D 变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-translate\"><span class=\"toc-text\">1.1 translate()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-rotate\"><span class=\"toc-text\">1.2 rotate()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-scale\"><span class=\"toc-text\">1.3 scale()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-skew\"><span class=\"toc-text\">1.4 skew()</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%BB%84%E5%90%88%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">2. 组合变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3D-%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">3. 3D 变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-translateZ\"><span class=\"toc-text\">3.1 translateZ()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-rotateX\"><span class=\"toc-text\">3.2 rotateX()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-rotateY\"><span class=\"toc-text\">3.3 rotateY()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-rotateZ\"><span class=\"toc-text\">3.4 rotateZ()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-scaleZ\"><span class=\"toc-text\">3.5 scaleZ()</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8F%98%E6%8D%A2%E5%8E%9F%E7%82%B9\"><span class=\"toc-text\">4. 变换原点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-7\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">二、页面布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84-CSS-%E5%B8%83%E5%B1%80%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">常见的 CSS 布局单位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BB%9D%E5%AF%B9%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">1. 绝对单位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%83%8F%E7%B4%A0%EF%BC%88px%EF%BC%89\"><span class=\"toc-text\">1.1 像素（px）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%8E%98%E7%B1%B3%EF%BC%88cm%EF%BC%89%E5%92%8C%E6%AF%AB%E7%B1%B3%EF%BC%88mm%EF%BC%89\"><span class=\"toc-text\">1.2 厘米（cm）和毫米（mm）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E8%8B%B1%E5%AF%B8%EF%BC%88in%EF%BC%89\"><span class=\"toc-text\">1.3 英寸（in）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-%E7%82%B9%EF%BC%88pt%EF%BC%89%E5%92%8C%E6%B4%BE%E5%8D%A1%EF%BC%88pc%EF%BC%89\"><span class=\"toc-text\">1.4 点（pt）和派卡（pc）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">2. 相对单位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E7%99%BE%E5%88%86%E6%AF%94%EF%BC%88-%EF%BC%89\"><span class=\"toc-text\">2.1 百分比（%）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-em\"><span class=\"toc-text\">2.2 em</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-rem\"><span class=\"toc-text\">2.3 rem</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-vw-%E5%92%8C-vh\"><span class=\"toc-text\">2.4 vw 和 vh</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">3. 其他单位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-vmin-%E5%92%8C-vmax\"><span class=\"toc-text\">3.1 vmin 和 vmax</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-12\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#px%E3%80%81em%E3%80%81rem-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">px、em、rem 的区别及使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-px%EF%BC%88%E5%83%8F%E7%B4%A0%EF%BC%89\"><span class=\"toc-text\">1. px（像素）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-8\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-em\"><span class=\"toc-text\">2. em</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-9\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-rem\"><span class=\"toc-text\">3. rem</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-10\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-13\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">两栏布局的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-CSS-Flexbox\"><span class=\"toc-text\">1. 使用 CSS Flexbox</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-CSS-Grid\"><span class=\"toc-text\">2. 使用 CSS Grid</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-4\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">3. 使用浮动布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-5\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-14\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">三栏布局的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-CSS-Flexbox-1\"><span class=\"toc-text\">1. 使用 CSS Flexbox</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-6\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-CSS-Grid-1\"><span class=\"toc-text\">2. 使用 CSS Grid</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-7\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80-1\"><span class=\"toc-text\">3. 使用浮动布局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-8\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-15\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">水平垂直居中的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-Flexbox\"><span class=\"toc-text\">1. 使用 Flexbox</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-9\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-CSS-Grid-2\"><span class=\"toc-text\">2. 使用 CSS Grid</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-10\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">3. 使用绝对定位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-11\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E4%BC%A0%E7%BB%9F%E7%9A%84%E8%A1%8C%E5%86%85%E5%9D%97%E5%92%8C%E6%96%87%E6%9C%AC%E5%B1%85%E4%B8%AD\"><span class=\"toc-text\">4. 使用传统的行内块和文本居中</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-12\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E8%AE%BE%E8%AE%A1%E7%A8%BF%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%9F\"><span class=\"toc-text\">如何根据设计稿进行移动端适配？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">1. 使用响应式设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">1.1 媒体查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D\"><span class=\"toc-text\">1.2 使用相对单位</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AE%BE%E8%AE%A1%E7%A8%BF%E7%9A%84%E6%96%AD%E7%82%B9%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2. 设计稿的断点分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E8%A7%86%E5%8F%A3%EF%BC%88Viewport%EF%BC%89%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">3. 使用视口（Viewport）设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%80%82%E9%85%8D%E5%AD%97%E4%BD%93%E5%92%8C%E5%9B%BE%E5%83%8F\"><span class=\"toc-text\">4. 适配字体和图像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">4.1 字体大小</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E5%9B%BE%E5%83%8F%E9%80%82%E9%85%8D\"><span class=\"toc-text\">4.2 图像适配</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%BB%84%E4%BB%B6%E5%8C%96%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">5. 组件化设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%B5%8B%E8%AF%95%E5%92%8C%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">6. 测试和调试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93\"><span class=\"toc-text\">7. 使用框架和库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">8. 性能优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E4%BA%A4%E4%BA%92%E5%92%8C%E8%A7%A6%E6%8E%A7%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">9. 交互和触控优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-Flex-%E5%B8%83%E5%B1%80%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">对 Flex 布局的理解及其使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-1\"><span class=\"toc-text\">1. 核心概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BB%E8%A6%81%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. 主要属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%B9%E5%99%A8%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.1 容器属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E9%A1%B9%E7%9B%AE%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.2 项目属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">3. 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1\"><span class=\"toc-text\">4. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">5. 示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">响应式设计的概念及基本原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 响应式设计的概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2. 基本原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">2.1 媒体查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%81%B5%E6%B4%BB%E7%9A%84%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">2.2 灵活的布局</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%BC%B9%E6%80%A7%E5%9B%BE%E5%83%8F\"><span class=\"toc-text\">2.3 弹性图像</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E8%A7%86%E5%8F%A3%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">2.4 视口设置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">3. 响应式设计的优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%8C%91%E6%88%98\"><span class=\"toc-text\">4. 响应式设计的挑战</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">三、定位与浮动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%EF%BC%9F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">为什么需要清除浮动？清除浮动的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">1. 为什么需要清除浮动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 清除浮动的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8-overflow-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.1 使用 overflow 属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%BD%BF%E7%94%A8%E4%BC%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2 使用伪元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E4%BD%BF%E7%94%A8%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">2.3 使用清除浮动的类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E4%BD%BF%E7%94%A8-clear-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.4 使用 clear 属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-clear-%E5%B1%9E%E6%80%A7%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">使用 clear 属性清除浮动的原理？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 浮动的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-clear-%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2. clear 属性的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3. 清除浮动的原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-4\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-BFC-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-BFC\"><span class=\"toc-text\">对 BFC 的理解，如何创建 BFC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-BFC-%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1. BFC 的特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-BFC-%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">2. BFC 的触发条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-BFC\"><span class=\"toc-text\">3. 如何创建 BFC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%BF%E7%94%A8%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">3.1 使用浮动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">3.2 使用绝对定位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E4%BD%BF%E7%94%A8-display-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3.3 使用 display 属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E4%BD%BF%E7%94%A8-overflow-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3.4 使用 overflow 属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-5\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-margin-%E9%87%8D%E5%8F%A0%E9%97%AE%E9%A2%98%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">什么是 margin 重叠问题？如何解决？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Margin-%E9%87%8D%E5%8F%A0%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">1. Margin 重叠的情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%9E%82%E7%9B%B4%E6%96%B9%E5%90%91%E7%9A%84%E9%87%8D%E5%8F%A0\"><span class=\"toc-text\">1.1 垂直方向的重叠</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E7%88%B6%E5%85%83%E7%B4%A0%E4%B8%8E%E5%AD%90%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1.2 父元素与子元素</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%86%B3-Margin-%E9%87%8D%E5%8F%A0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2. 解决 Margin 重叠问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8-Padding\"><span class=\"toc-text\">2.1 使用 Padding</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%BD%BF%E7%94%A8%E8%BE%B9%E6%A1%86\"><span class=\"toc-text\">2.2 使用边框</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E4%BD%BF%E7%94%A8-Flexbox-%E6%88%96-Grid\"><span class=\"toc-text\">2.3 使用 Flexbox 或 Grid</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E4%BD%BF%E7%94%A8-BFC%EF%BC%88%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%89\"><span class=\"toc-text\">2.4 使用 BFC（块格式化上下文）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">元素的层叠顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 层叠顺序的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2. 层叠顺序的规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%8D%E7%BD%AE%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.1 位置属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-z-index-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.2 z-index 属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E6%96%87%E6%A1%A3%E6%B5%81%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">2.3 文档流顺序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">3. 层叠上下文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-6\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#position-%E7%9A%84%E5%B1%9E%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%8C%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">position 的属性有哪些，区别是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-static\"><span class=\"toc-text\">1. static</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-relative\"><span class=\"toc-text\">2. relative</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-absolute\"><span class=\"toc-text\">3. absolute</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-fixed\"><span class=\"toc-text\">4. fixed</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-sticky\"><span class=\"toc-text\">5. sticky</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#display%E3%80%81float%E3%80%81position-%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">display、float、position 的关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-display-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. display 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-11\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-float-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. float 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-12\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-position-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">3. position 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-13\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">4. 三者之间的关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-11\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#absolute-%E4%B8%8E-fixed-%E5%85%B1%E5%90%8C%E7%82%B9%E4%B8%8E%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">absolute 与 fixed 共同点与不同点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">共同点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">不同点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-14\"><span class=\"toc-text\">示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-absolute-%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1. absolute 定位示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-fixed-%E5%AE%9A%E4%BD%8D%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2. fixed 定位示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-sticky-%E5%AE%9A%E4%BD%8D%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 sticky 定位的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-2\"><span class=\"toc-text\">1. 工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">4. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-12\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">四、场景应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2\"><span class=\"toc-text\">实现一个三角形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-1%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%BE%B9%E6%A1%86\"><span class=\"toc-text\">方法 1：使用边框</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-13\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-2%EF%BC%9A%E4%BD%BF%E7%94%A8-CSS-Clip-path\"><span class=\"toc-text\">方法 2：使用 CSS Clip-path</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-14\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-1\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%89%87%E5%BD%A2\"><span class=\"toc-text\">实现一个扇形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-1%EF%BC%9A%E4%BD%BF%E7%94%A8-CSS-conic-gradient\"><span class=\"toc-text\">方法 1：使用 CSS conic-gradient</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-15\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-2\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-2%EF%BC%9A%E4%BD%BF%E7%94%A8-SVG\"><span class=\"toc-text\">方法 2：使用 SVG</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-16\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-3\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%BD%E9%AB%98%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2\"><span class=\"toc-text\">实现一个宽高自适应的正方形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-1%EF%BC%9A%E4%BD%BF%E7%94%A8-padding-bottom\"><span class=\"toc-text\">方法 1：使用 padding-bottom</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-17\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-4\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-2%EF%BC%9A%E4%BD%BF%E7%94%A8-CSS-Grid\"><span class=\"toc-text\">方法 2：使用 CSS Grid</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-18\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-5\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%BB%E4%B8%80%E6%9D%A1-0-5px-%E7%9A%84%E7%BA%BF\"><span class=\"toc-text\">画一条 0.5px 的线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-1%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%BE%B9%E6%A1%86-1\"><span class=\"toc-text\">方法 1：使用边框</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-19\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-2%EF%BC%9A%E4%BD%BF%E7%94%A8-height-%E5%92%8C-transform\"><span class=\"toc-text\">方法 2：使用 height 和 transform</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-20\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-3%EF%BC%9A%E4%BD%BF%E7%94%A8-SVG\"><span class=\"toc-text\">方法 3：使用 SVG</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-21\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E5%B0%8F%E4%BA%8E-12px-%E7%9A%84%E5%AD%97%E4%BD%93\"><span class=\"toc-text\">设置小于 12px 的字体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-22\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A-6\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E7%9A%84-light-%E5%92%8C-dark-%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%EF%BC%8C%E5%8F%AF%E7%BB%93%E5%90%88-tailwind-css-%E5%92%8C-React\"><span class=\"toc-text\">网站的 light 和 dark 如何切换，可结合 tailwind css 和 React</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AE%BE%E7%BD%AE-Tailwind-CSS\"><span class=\"toc-text\">1. 设置 Tailwind CSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Tailwind-CSS\"><span class=\"toc-text\">安装 Tailwind CSS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-tailwind-config-js\"><span class=\"toc-text\">配置 tailwind.config.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8-CSS-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5-Tailwind\"><span class=\"toc-text\">在 CSS 文件中引入 Tailwind</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-React-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">2. 创建 React 组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-23\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">3. 解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">4. 运行项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-13\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E7%9A%84%E9%BB%91%E7%99%BD%E8%89%B2%E5%92%8C%E6%AD%A3%E5%B8%B8%E8%89%B2%E8%B0%83%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">网站的黑白色和正常色调如何实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AE%BE%E7%BD%AE-Tailwind-CSS-1\"><span class=\"toc-text\">1. 设置 Tailwind CSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Tailwind-CSS-1\"><span class=\"toc-text\">安装 Tailwind CSS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-tailwind-config-js-1\"><span class=\"toc-text\">配置 tailwind.config.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8-CSS-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%BC%95%E5%85%A5-Tailwind-1\"><span class=\"toc-text\">在 CSS 文件中引入 Tailwind</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-React-%E7%BB%84%E4%BB%B6-1\"><span class=\"toc-text\">2. 创建 React 组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-24\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%A3%E9%87%8A-1\"><span class=\"toc-text\">3. 解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE-1\"><span class=\"toc-text\">4. 运行项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-14\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"interview-javascript","uid":"cf0441f16ce9f9e8f078668d5a3bf9e5","slug":"interview-javascript","date":"2024-12-28T06:44:24.000Z","updated":"2024-12-28T07:36:47.719Z","comments":true,"path":"api/articles/interview-javascript.json","keywords":null,"cover":"/images/interview-javascript/cover.png","text":"数据类型JavaScript 有哪些数据类型，它们的区别？在 JavaScript 中，数据类型主要分为两大类：基本数据类型（Primitive Types）和 引用数据类型（Reference Types）。以下是详细的分类和它们的区别： 1. 基本数据类型（Primitive...","link":"","photos":[],"count_time":{"symbolsCount":"146k","symbolsTime":"2:13"},"categories":[{"name":"interview","slug":"interview","count":3,"path":"api/categories/interview.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"interview-html","uid":"3aa405af8114bdbedccc4d79b50ad9ac","slug":"interview-html","date":"2024-12-22T10:43:24.000Z","updated":"2024-12-28T06:37:51.170Z","comments":true,"path":"api/articles/interview-html.json","keywords":null,"cover":"/images/interview-html/cover.png","text":"src 和 href 的区别在 HTML 中，src 和 href 是两个常用的属性，它们的主要区别在于它们的用途和适用的标签。以下是详细的解释： 1. src 属性 全称：source（源） 用途：用于指定外部资源的路径，通常用于嵌入媒体文件，如图像、音频、视频等。 适用标签：...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"interview","slug":"interview","count":3,"path":"api/categories/interview.json"}],"tags":[{"name":"html","slug":"html","count":1,"path":"api/tags/html.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}