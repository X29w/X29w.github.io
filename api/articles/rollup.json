{"title":"rollup","uid":"6d1a44d72f500b2ae165cfd01771a531","slug":"rollup","date":"2024-12-22T08:39:14.000Z","updated":"2024-12-22T10:16:45.524Z","comments":true,"path":"api/articles/rollup.json","keywords":null,"cover":"/images/rollup/cover.png","content":"<h1 id=\"rollup\"><a href=\"#rollup\" class=\"headerlink\" title=\"rollup\"></a>rollup</h1><h2 id=\"前端工程化历程\"><a href=\"#前端工程化历程\" class=\"headerlink\" title=\"前端工程化历程\"></a>前端工程化历程</h2><p><img src=\"/images/rollup/1.png\" alt=\"img\"></p>\n<h2 id=\"除屑优化-tree-shaking\"><a href=\"#除屑优化-tree-shaking\" class=\"headerlink\" title=\"除屑优化(tree shaking)\"></a>除屑优化(tree shaking)</h2><p>除了可以使用 ES 模块之外，Rollup 还可以静态分析你导入的代码，并将排除任何实际上没有使用的内容，从上面的引入和最后的打包结果就可以看到，没有使用到的内容直接被删除了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，<strong>除屑优化的核心思想是在编译阶段通过静态分析确定代码的使用情况，而不是在运行时</strong>。</p></blockquote>\n<p>所以除屑优化一般是建立在<strong>ES6 模块化语法</strong>基础之上的，ESM 的导入导出是静态的。</p>\n<p>CommonJS 模块的导入和导出是动态的，无法在编译阶段静态确定代码的使用情况。一般情况下，除屑优化工具无法在 CommonJS 模块中进行精确的除屑，因为无法静态分析模块间的导入和导出关系。</p>\n<p>然而，一些构建工具（如 Webpack）会尝试通过静态分析和启发式方法对 CommonJS 模块进行近似的除屑优化。它们会尽可能地识别出那些可以在编译阶段确定未被使用的代码，并进行剔除。但这种处理方式可能不如对 ES6 模块的优化效果好，且有一定的限制。</p>\n<p><strong>除屑优化的原理：</strong></p>\n<ol start=\"0\">\n<li>静态分析：对 JavaScript 代码进行静态分析，识别出模块的导入和导出关系。</li>\n<li>标记未使用代码：标记出在导入和导出关系上没有被使用的代码。这些代码可能是模块的导出函数、变量、类等。</li>\n<li>剔除未使用代码：根据标记结果，构建工具会将未被使用的代码从最终的打包结果中剔除，只保留被使用的部分。</li>\n</ol>\n<p>由于是静态分析，所以我们在写代码的时候，需要注意自己的写法，简单来说，尽量的使用最小导入，比如你可以比较一下我们这里导入代码之后，打包的区别：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 直接默认导入整个对象\nimport util from &quot;.&#x2F;util.js&quot;;\nconst r &#x3D; util.getRandomNum(1, 10)\nconsole.log(r)\n​\n&#x2F;&#x2F; 具名导入具体的函数\nimport &#123; getRandomNum &#125; from &quot;.&#x2F;util.js&quot;;\nconst r &#x3D; getRandomNum(1, 10)\nconsole.log(r)</code></pre>\n\n<h2 id=\"与-webpack-打包的区别\"><a href=\"#与-webpack-打包的区别\" class=\"headerlink\" title=\"与 webpack 打包的区别\"></a>与 webpack 打包的区别</h2><p>这个打包结果其实就已经和我们熟知的<strong>webpack</strong>有了很鲜明的区别，我们把 webpack 安装一下试试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add webpack webpack-cli -D</code></pre>\n\n<p>运行 webpack-cli：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># --entry 入口文件 -o 打包文件夹位置 --mode 打包模式\nnpx webpack --entry .&#x2F;src&#x2F;index.js -o dist --mode development</code></pre>\n\n<p>当然我们可以选择生成模式进行打包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npx webpack --entry .&#x2F;src&#x2F;index.js -o dist --mode production</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">(() &#x3D;&gt; &#123;\n  &quot;use strict&quot;;\n  const o &#x3D;\n    ((t &#x3D; 1),\n    (a &#x3D; 10),\n    (t &#x3D; Math.ceil(t)),\n    (a &#x3D; Math.floor(a)),\n    Math.floor(Math.random() * (a - t + 1)) + t);\n  var t, a;\n  console.log(o);\n&#125;)();</code></pre>\n\n<p>现在打包出来的内容就直接是压缩之后的代码了</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><code>Rollup</code>配置文件是一个 ES 模块。通常，它被称为 <code>rollup.config.js</code> 或 <code>rollup.config.mjs</code>，并位于项目的根目录中。它导出一个默认对象，其中包含所需的选项：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意 : <strong>如果想要类型提示，请在 rollup.config.js 文件顶部添加以下代码：</strong></p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\n\nexport default &#123;\n  input: &quot;src&#x2F;index.js&quot;,\n  output: &#123;\n    file: &quot;dist&#x2F;bundle.js&quot;,\n    format: &quot;esm&quot;,\n  &#125;,\n&#125;;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：nodejs 环境下要运行 esm 模块化的内容，要么文件名后缀处理为 <strong>.mjs</strong>，要么 package.json 文件中配置 <strong>“type”:”module”</strong> ，因为 Rollup 将遵循 <a href=\"https://nodejs.org/docs/latest-v14.x/api/packages.html#packages_determining_module_system\">Node ESM 语义</a>。</p></blockquote>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><h2 id=\"多产物配置\"><a href=\"#多产物配置\" class=\"headerlink\" title=\"多产物配置\"></a>多产物配置</h2><p>我们可以将 output 改造成一个数组，对外暴露出不同格式的产物供他人使用，不仅包括 <code>ESM</code>，也需要包括诸如<code>CommonJS</code>、<code>UMD</code>等格式，保证良好的兼容性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineConfig &#125; from &quot;rollup&quot;;\n\nexport default defineConfig(&#123;\n  input: &quot;src&#x2F;index.js&quot;,\n  output: [\n    &#123;\n      file: &quot;dist&#x2F;bundle-iife.js&quot;,\n      format: &quot;iife&quot;,\n    &#125;,\n    &#123;\n      file: &quot;dist&#x2F;bundle-esm.js&quot;,\n      format: &quot;esm&quot;,\n    &#125;,\n    &#123;\n      file: &quot;dist&#x2F;bundle-cjs.js&quot;,\n      format: &quot;cjs&quot;,\n    &#125;,\n    &#123;\n      file: &quot;dist&#x2F;bundle-umd.js&quot;,\n      format: &quot;umd&quot;,\n      name: &quot;bundle&quot;,\n    &#125;,\n  ],\n&#125;);</code></pre>\n\n<h2 id=\"多入口配置\"><a href=\"#多入口配置\" class=\"headerlink\" title=\"多入口配置\"></a>多入口配置</h2><p>除了多产物配置，Rollup 中也支持多入口配置</p>\n<p><strong>main.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;main.js\nimport util from &quot;.&#x2F;util.js&quot;;\nconst r &#x3D; util.getRandomNum(1, 10);\nconsole.log(&quot;🚀 ~ r:&quot;, r);\n\nconst obj &#x3D; &#123;\n  a: 1,\n  b: &#123;\n    c: 3,\n  &#125;,\n&#125;;\nconst cloneObj &#x3D; util.deepClone(obj);\ncloneObj.b.c &#x3D; 4;\nconsole.log(&quot;🚀 ~ obj:&quot;, obj);\nconsole.log(&quot;🚀 ~ cloneObj:&quot;, cloneObj);</code></pre>\n\n<p><strong>rollup.config.js</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineConfig &#125; from &#39;rollup&#39;\n\nexport default defineConfig(&#123;\n  input: [&#39;src&#x2F;index.js&#39;,&#39;src&#x2F;main.js&#39;],\n  output: [\n    &#123;\n      dir: &#39;dist&#39;,\n      format: &#39;cjs&#39;\n    &#125;\n  ],\n&#125;)</code></pre>\n\n<p>通常情况下多产物和多入口两者会被结合起来使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineConfig &#125; from &#39;rollup&#39;\nexport default defineConfig(&#123;\n  input: [&#39;src&#x2F;index.js&#39;,&#39;src&#x2F;main.js&#39;],\n  output: [\n    &#123;\n      dir: &#39;cjs&#39;,\n      format: &#39;cjs&#39;\n    &#125;,\n    &#123;\n      dir: &#39;esm&#39;,\n      format: &#39;esm&#39;\n    &#125;\n  ],\n&#125;)</code></pre>\n\n<p>当然，上面这样的写的话，生成的产物会把两个入口一起进行构建，我们可能的想法是一个入口一种构建方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineConfig &#125; from &#39;rollup&#39;\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;umd&#x2F;&#39;,\n    format: &#39;umd&#39;,\n    name: &#39;bundle&#39;\n  &#125;\n&#125;\n\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildMainOptions &#x3D; &#123;\n  input: &#39;src&#x2F;main.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;\n&#125;\nexport default [buildIndexOptions, buildMainOptions];</code></pre>\n\n<h2 id=\"动态导入与默认代码分割\"><a href=\"#动态导入与默认代码分割\" class=\"headerlink\" title=\"动态导入与默认代码分割\"></a>动态导入与默认代码分割</h2><p>使用路由来说明懒加载是大家喜闻乐见的方式，估计大多数同学对于懒加载都只是停留在路由的懒加载，其实，任何时候，我们都可以使用 import 动态懒加载的方式。重新编辑一下 main.js 入口：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; src&#x2F;main.js\nfunction run() &#123;\n  &#x2F;&#x2F; 如果不清楚import动态导入返回的是什么，可以先打印一下下面结果\n  &#x2F;&#x2F; import(&quot;.&#x2F;util.js&quot;).then(chunk &#x3D;&gt; console.log(&quot;🚀 ~ chunk:&quot;, chunk));\n\n  import(&quot;.&#x2F;util.js&quot;).then((&#123; default: foo &#125;) &#x3D;&gt; &#123;\n    const r &#x3D; foo.getRandomNum(1, 10);\n    console.log(&quot;🚀 ~ r:&quot;, r);\n  &#125;);\n&#125;\nrun();</code></pre>\n\n<p>重新运行可以看到 dist 目录形成了下面的结构:</p>\n<pre class=\"line-numbers language-erlang\" data-language=\"erlang\"><code class=\"language-erlang\">.\n├── dist\n│ ├── esm\n│ │ ├── main.js\n│ │ └── util-371e3ef9.js\n│ └── umd\n│     └── index.js\n└── ...</code></pre>\n\n<p>Rollup 将使用动态导入创建一个仅在需要时加载的单独块。所以你可以看到这里多了一个<code>util-371e3ef9.js</code>的文件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意：</strong> 为了让 Rollup 知道在哪里放置第二个块，我们不使用 <code>--file</code> 选项，而是使用 <code>--dir</code> 选项设置一个输出文件夹</p></blockquote>\n<p>其中，<code>util-371e3ef9.js</code>是自动生成的<code>chunk-[hash].js</code>的名字，<code>[hash]</code> 是基于内容的哈希字符串。你可以通过指定 <a href=\"https://cn.rollupjs.org/configuration-options/#output-chunkfilenames\"><code>output.chunkFileNames</code></a> (chunk 文件)和 <a href=\"https://cn.rollupjs.org/configuration-options/#output-entryfilenames\"><code>output.entryFileNames</code></a> (打包入口文件)选项来提供自己的命名模式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildMainOptions &#x3D; &#123;\n  input: &#39;src&#x2F;main.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    entryFileNames: &#39;[name].js&#39;,\n    chunkFileNames: &#39;chunk-[name]-[hash].js&#39;,\n    format: &#39;esm&#39;,\n  &#125;\n&#125;</code></pre>\n\n<p>而且，很智能的是，如果这个时候，我定义了又多个入口点都调用了<code>util.js</code>文件，会自动的引入分割出来的文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildMainOptions &#x3D; &#123;\n  input: [&#39;src&#x2F;main.js&#39;, &#39;src&#x2F;main2.js&#39;],\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    entryFileNames: &#39;[name].js&#39;,\n    chunkFileNames: &#39;chunk-[name]-[hash].js&#39;,\n    format: &#39;esm&#39;,\n  &#125;\n&#125;</code></pre>\n\n<p>在打包后的 main2.js 中，可以看到这样的引用：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import util from &quot;.&#x2F;chunk-util-371e3ef9.js&quot;;</code></pre>\n\n<h2 id=\"使用插件\"><a href=\"#使用插件\" class=\"headerlink\" title=\"使用插件\"></a>使用插件</h2><p>到目前为止，我们已经用入口文件和通过相对路径导入的模块打了一个简单的包。随着你需要打包更复杂的代码，通常需要更灵活的配置，例如导入使用 NPM 安装的模块、使用 Babel 编译代码、处理 JSON 文件等等。</p>\n<p>插件列表 ： <a href=\"https://github.com/rollup/awesome\">the Rollup Awesome List</a>。</p>\n<h3 id=\"rollup-x2F-plugin-node-resolve\"><a href=\"#rollup-x2F-plugin-node-resolve\" class=\"headerlink\" title=\"@rollup&#x2F;plugin-node-resolve\"></a><a href=\"https://github.com/rollup/plugins/tree/master/packages/node-resolve\">@rollup&#x2F;plugin-node-resolve</a></h3><p>比如我们现在引入 lodash-es 库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add lodash-es -D</code></pre>\n\n<p>在 index.js 中使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; chunk &#125; from &quot;lodash-es&quot;;\nconst r &#x3D; chunk([1, 2, 3, 4], 2);\nconsole.log(&quot;🚀 ~ r:&quot;, r);</code></pre>\n\n<p>现在直接打包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<p>会出现下面的警告：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">src&#x2F;index.js → dist&#x2F;esm&#x2F;...\n(!) Unresolved dependencies\nhttps:&#x2F;&#x2F;rollupjs.org&#x2F;troubleshooting&#x2F;#warning-treating-module-as-external-dependency\nlodash-es (imported by &quot;src&#x2F;index.js&quot;)\ncreated dist&#x2F;esm&#x2F; in 13ms</code></pre>\n\n<p>意思是，不能解析<code>lodash-es</code>这个依赖，报出了警告，问你是不是需要<code>external</code>，并提示你点击链接有这个警告的解释。当我们点击这个链接，按照提示解决这个 external 警告问题，很简单，就加上 external，也就是把<code>lodash-es</code>这个库给排除出去</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;,\n+  external: [&#39;lodash-es&#39;]\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<p>再此打包，果然没警告了，而且我们在 nodejs 环境中确实也能正常运行了</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意：对于没有太多开发经验的同学来说，这里感觉问题解决了，但是需要理解为什么</strong></p>\n<p><strong>注意：对于没有太多开发经验的同学来说，这里感觉问题解决了，但是需要理解为什么</strong></p>\n<p><strong>注意：对于没有太多开发经验的同学来说，这里感觉问题解决了，但是需要理解为什么</strong></p></blockquote>\n<p>重要的事情说三遍，这里虽然看似一个很小的问题，但是却有很多基本理论点</p>\n<p>1、rollup 默认只能解析导入的相对路径，也就是<code>/</code> ， <code>./</code>或者<code>../</code>开头的路径，对于<code>bare import</code>，也就是<code>import &#123; chunk &#125; from &#39;lodash-es&#39;;</code>这种直接导入的第三方包的格式，并不支持</p>\n<p>2、<code>rollup</code>相比<code>webpack</code>最大的优势并不是构建一个足够大的应用打包，大多是情况下，我们使用<code>rollup</code>用来构建工具库，因此，这里导入的<code>lodash-es</code>并没有报错，而仅仅报出警告，因为<code>rollup</code>认为<code>lodash-es</code>这个库并没有加入构建，那么你的意思是将来用作第三方库来使用，因此将<code>lodash-es</code>使用配置<code>external</code>排除掉就好。</p>\n<p>3、<code>lodash-es</code>这个包本身就是支持 ESM 的</p>\n<p>4、最后打包好的<code>index.js</code>文件只所以在<code>nodejs</code>环境下运行，是因为<code>nodejs</code>可以帮我们解析<code>bare import</code>，我们可以试着将<code>index.js</code>放入到<code>html</code>文件中运行，你就可以看到其中的问题所在，在 html 环境中就会报错了：<code>index.html:1 Uncaught TypeError: Failed to resolve module specifier &quot;lodash-es&quot;. Relative references must start with either &quot;/&quot;, &quot;./&quot;, or &quot;../&quot;.</code></p>\n<p>如果希望在最后的打包中，将<code>lodash-es</code>内容解析打包进去，就可以使用<code>@rollup/plugin-node-resolve</code></p>\n<p><strong>安装:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add @rollup&#x2F;plugin-node-resolve --save-dev</code></pre>\n\n<p><strong>使用：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; nodeResolve &#125; from &#39;@rollup&#x2F;plugin-node-resolve&#39;;\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;,\n  plugins: [nodeResolve()]\n  &#x2F;&#x2F; external: [&#39;lodash-es&#39;]\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<p>现在，再此进行打包，无论是打包时间，还是打包内容和之前都很不一样了，把<code>lodash-es</code>中，关于<code>chunk()</code>函数的内容，都打包进了<code>index.js</code>文件中</p>\n<h3 id=\"output-manualChunks\"><a href=\"#output-manualChunks\" class=\"headerlink\" title=\"output.manualChunks\"></a><a href=\"https://cn.rollupjs.org/configuration-options/#output-manualchunks\">output.manualChunks</a></h3><p>上面讲了对于动态加载模块，rollup 帮我们自动做了代码分割，其实我们也可以手动的操作，直接在 rollup 配置中声明</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">const buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n    entryFileNames: &#39;[name].js&#39;,\n    chunkFileNames: &#39;chunk-[name]-[hash].js&#39;,\n    manualChunks: &#123;\n      &#39;lodash-es&#39;: [&#39;lodash-es&#39;],\n    &#125;\n    &#x2F;&#x2F;也可以是函数形式\n    &#x2F;&#x2F; manualChunks(id)&#123;\n    &#x2F;&#x2F;   if(id.includes(&#39;lodash-es&#39;))&#123;\n    &#x2F;&#x2F;     return &#39;lodash-es&#39;\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; &#125;\n\t&#125;,\n  plugins: [nodeResolve()]\n&#125;</code></pre>\n\n<h3 id=\"rollup-x2F-plugin-commonjs\"><a href=\"#rollup-x2F-plugin-commonjs\" class=\"headerlink\" title=\"@rollup&#x2F;plugin-commonjs\"></a><a href=\"https://github.com/rollup/plugins/tree/master/packages/commonjs\">@rollup&#x2F;plugin-commonjs</a></h3><p>上面最开始导入<code>lodash-es</code>，没有加入<code>external</code>和<code>plugins</code>，之所以还能直接运行，还因为<code>lodash-es</code>本身就是支持 ESM 的，因为 rollup 默认并不支持 Commonjs 模块化，比如将 lodash-es 换位 lodash，马上就能看到不一样的效果,直接打包失败</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\">[!] RollupError: &quot;chunk&quot; is not exported by &quot;node_modules&#x2F;.pnpm&#x2F;lodash@4.17.21&#x2F;node_modules&#x2F;lodash&#x2F;lodash.js&quot;, imported by &quot;src&#x2F;index.js&quot;.\nhttps:&#x2F;&#x2F;rollupjs.org&#x2F;troubleshooting&#x2F;#error-name-is-not-exported-by-module</code></pre>\n\n<p>这个错误在官网上解释的很清楚了，无非就是 commonjs 没有这种导出，因此我们需要<code>@rollup/plugin-commonjs</code>帮我们处理 commonjs 模块化的问题</p>\n<p><strong>安装:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add @rollup&#x2F;plugin-commonjs --save-dev</code></pre>\n\n<p><strong>使用:</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; nodeResolve &#125; from &#39;@rollup&#x2F;plugin-node-resolve&#39;;\n+import commonjs from &#39;@rollup&#x2F;plugin-commonjs&#39;;\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;,\n+  plugins: [nodeResolve(), commonjs()]\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<h3 id=\"rollup-x2F-plugin-babel\"><a href=\"#rollup-x2F-plugin-babel\" class=\"headerlink\" title=\"@rollup&#x2F;plugin-babel\"></a><a href=\"https://github.com/rollup/plugins/tree/master/packages/babel\">@rollup&#x2F;plugin-babel</a></h3><p>使用 <a href=\"https://babeljs.io/\">Babel</a> 来使用尚未被浏览器和 Node.js 支持的最新 JavaScript 特性。</p>\n<p>使用 Babel 和 Rollup 最简单的方法是使用 <a href=\"https://github.com/rollup/plugins/tree/master/packages/babel\">@rollup&#x2F;plugin-babel</a></p>\n<p><strong>安装:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add @rollup&#x2F;plugin-babel -D</code></pre>\n\n<p><strong>使用：</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; nodeResolve &#125; from &#39;@rollup&#x2F;plugin-node-resolve&#39;;\nimport commonjs from &#39;@rollup&#x2F;plugin-commonjs&#39;;\n+import babel from &#39;@rollup&#x2F;plugin-babel&#39;;\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;,\n  plugins: [\n    nodeResolve(),\n    commonjs(),\n+    babel(&#123; babelHelpers: &#39;bundled&#39; &#125;)\n  ]\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<p>不过这么做之后，打包代码并不会有什么变化，因为我们都知道 babel 是需要预设的.</p>\n<p>安装 <a href=\"https://babeljs.io/docs/en/babel-core\"><code>babel-core</code></a> 和 <a href=\"https://babeljs.io/docs/en/babel-preset-env\"><code>env</code></a> 预设</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add -D @babel&#x2F;core @babel&#x2F;preset-env</code></pre>\n\n<p>在 Babel 实际编译代码之前，需要进行配置。在项目根目录创建一个名为 <code>.babelrc.json</code> 的新文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]\n&#125;</code></pre>\n\n<p>具体的 babel 设置，可以参考<a href=\"https://babeljs.io/docs/config-files#project-wide-configuration\"><strong>babel 文档</strong></a></p>\n<h4 id=\"题外话：-babel-x2F-runtime\"><a href=\"#题外话：-babel-x2F-runtime\" class=\"headerlink\" title=\"题外话：@babel&#x2F;runtime\"></a>题外话：@babel&#x2F;runtime</h4><p>我们在<code>index.js</code>代码中加入如下的 api</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getRandomNum &#125; from &quot;.&#x2F;util.js&quot;;\nconst r &#x3D; getRandomNum(1, 10);\nconsole.log(r);\n\nconst arr &#x3D; [1, 2, 3, 4].map((item) &#x3D;&gt; item * item);\nconsole.log(&quot;🚀 ~ arr:&quot;, arr);\n\nPromise.resolve(1).then((res) &#x3D;&gt; &#123;\n  console.log(res);\n&#125;);</code></pre>\n\n<p>我们通过 babel 处理之后会发现一些问题：</p>\n<p>@babel&#x2F;preset-env 只转换了语法，也就是我们看到的箭头函数、const 一类，但是对于进一步需要转换内置对象、实例方法等等 API，就显得无能为力了，这些代码需要<strong>polyfill(兼容性垫片)</strong> 。所以这个我需要<code>@babel/runtime</code>来帮我们处理。</p>\n<p><code>@babel/runtime</code>是一个核心， 一种实现方式，但是在实现 polyfill 垫片的过程中，可能会产生很多重复的代码，所以需要<code>@babel/plugin-transform-runtime</code>防止污染全局， 抽离公共的 helper function , 防止冗余，当然在处理 polyfill 的时候，我们还需要 core-js 的辅助，基于 babel，我们可以使用<code>@babel/runtime-corejs3</code></p>\n<p><strong>安装：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add @babel&#x2F;plugin-transform-runtime -D\npnpm add @babel&#x2F;runtime @babel&#x2F;runtime-corejs3</code></pre>\n\n<p>要使用<code>@babel/plugin-transform-runtime</code>，<code>@rollup/plugin-babel</code>的<a href=\"https://github.com/rollup/plugins/tree/master/packages/babel#babelhelpers\"><strong>babelHelper</strong></a>处理必须改为 runtime</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; nodeResolve &#125; from &#39;@rollup&#x2F;plugin-node-resolve&#39;;\nimport commonjs from &#39;@rollup&#x2F;plugin-commonjs&#39;;\nimport babel from &#39;@rollup&#x2F;plugin-babel&#39;;\nimport typescript from &#39;@rollup&#x2F;plugin-typescript&#39;;\n&#x2F;**\n * @type &#123;import(&#39;rollup&#39;).RollupOptions&#125;\n *&#x2F;\nconst buildIndexOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  output: &#123;\n    dir: &#39;dist&#x2F;esm&#x2F;&#39;,\n    format: &#39;esm&#39;,\n  &#125;,\n  plugins: [\n    nodeResolve(),\n    commonjs(),\n    babel(&#123;\n      babelHelpers: &#39;runtime&#39;,\n      include: &#39;src&#x2F;**&#39;,\n      exclude: &#39;node_modules&#x2F;**&#39;,\n      extensions:[&#39;.js&#39;, &#39;.ts&#39;]\n    &#125;),\n    typescript(),\n  ]\n&#125;\nexport default buildIndexOptions</code></pre>\n\n<p><strong>.babelrc.json：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;presets&quot;: [\n    [\n      &quot;@babel&#x2F;preset-env&quot;,\n      &#123;\n        &quot;targets&quot;: &quot;&gt; 0.25%, not dead&quot;,\n        &quot;useBuiltIns&quot;: &quot;usage&quot;,\n        &quot;corejs&quot;: 3\n      &#125;\n    ]\n  ],\n  &quot;plugins&quot;: [\n    [\n      &quot;@babel&#x2F;plugin-transform-runtime&quot;,\n      &#123;\n        &quot;corejs&quot;: 3\n      &#125;\n    ]\n  ]\n&#125;</code></pre>\n\n<p>这个时候你再进行构建，会发现打包后的文件多出了一大堆，这其实就是 polyfill 中的代码。</p>\n<h3 id=\"rollup-x2F-plugin-typescript\"><a href=\"#rollup-x2F-plugin-typescript\" class=\"headerlink\" title=\"@rollup&#x2F;plugin-typescript\"></a><a href=\"https://github.com/rollup/plugins/tree/master/packages/typescript\">@rollup&#x2F;plugin-typescript</a></h3><p>要使用 typescript 就需要依赖这个插件，当然这个插件本身还依赖了<code>typescript</code>和<code>tslib</code>，因此我们需要导入 3 个包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add typescript tslib @rollup&#x2F;plugin-typescript -D</code></pre>\n\n<p><strong>util.ts</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;**\n * 深拷贝\n * @param obj 需要深拷贝的对象\n * @returns 深拷贝对象\n *&#x2F;\nexport const deepClone &#x3D; &lt;T&gt;(obj: T): T &#x3D;&gt; &#123;\n  if (typeof obj !&#x3D;&#x3D; &quot;object&quot; || obj &#x3D;&#x3D;&#x3D; null) &#123;\n    return obj;\n  &#125;\n  const result: any &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;\n  for (let key in obj) &#123;\n    if (obj.hasOwnProperty(key)) &#123;\n      result[key] &#x3D; deepClone(obj[key]);\n    &#125;\n  &#125;\n  return result;\n&#125;;\n\nexport const getRandomNum &#x3D; (min: number, max: number): number &#x3D;&gt; &#123;\n  let num &#x3D; Math.floor(Math.random() * (min - max) + max);\n  return num;\n&#125;;</code></pre>\n\n<p>Index.ts</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getRandomNum,deepClone &#125; from &#39;.&#x2F;util.ts&#39;;\nconst r &#x3D; getRandomNum(1, 10);\nconsole.log(r);\n\nconst obj &#x3D; &#123; a: 1, b: &#123; c: 3 &#125; &#125;;\nconst obj2 &#x3D; deepClone(obj);\nobj2.b.c &#x3D; 4;\n\nconsole.log(obj);\nconsole.log(obj2);</code></pre>\n\n<p>当然，配置文件我们也完全可以是 ts 的</p>\n<p><strong>rollup.config.ts</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; RollupOptions &#125; from &quot;rollup&quot;\nimport &#123; nodeResolve &#125; from &#39;@rollup&#x2F;plugin-node-resolve&#39;;\nimport commonjs from &#39;@rollup&#x2F;plugin-commonjs&#39;;\nimport babel from &#39;@rollup&#x2F;plugin-babel&#39;;\nimport typescript from &#39;@rollup&#x2F;plugin-typescript&#39;;\n\nconst config: RollupOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.ts&#39;,\n  output: &#123;\n    file: &#39;dist&#x2F;umd&#x2F;index.js&#39;,\n    format: &#39;umd&#39;,\n    name: &#39;rollupDemo&#39;,\n  &#125;,\n  plugins: [\n    nodeResolve(),\n    commonjs(),\n    babel(&#123;\n      babelHelpers: &#39;runtime&#39;,\n      include: &#39;src&#x2F;**&#39;,\n      exclude: &#39;node_modules&#x2F;**&#39;,\n      extensions:[&#39;.js&#39;, &#39;.ts&#39;]\n    &#125;),\n    typescript(),\n  ],\n&#125;\nexport default config;</code></pre>\n\n<p><strong>tsconfig.json</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;, &quot;dom.iterable&quot;],\n    &quot;skipLibCheck&quot;: true,\n\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;noEmit&quot;: true,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true\n  &#125;,\n  &quot;include&quot;: [&quot;src&#x2F;**&#x2F;*&quot;, &quot;rollup.config.ts&quot;]\n&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意：</strong> 别忘记 tsconfig.json 文件中需要加入 rollup.config.ts 配置文件,不然要报错</p></blockquote>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    ......\n  &#125;,\n+  &quot;include&quot;: [&quot;src&#x2F;**&#x2F;*&quot;,&quot;rollup.config.ts&quot;],\n&#125;</code></pre>\n\n<p><strong>运行：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npx rollup -c rollup.config.ts --configPlugin typescript</code></pre>\n\n<h1 id=\"构建-react-应用\"><a href=\"#构建-react-应用\" class=\"headerlink\" title=\"构建 react 应用\"></a>构建 react 应用</h1><h2 id=\"node-modules\"><a href=\"#node-modules\" class=\"headerlink\" title=\"node_modules\"></a>node_modules</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># react\npnpm add react react-dom\n\n# @types&#x2F;react\npnpm add @types&#x2F;react @types&#x2F;react-dom -D\n\n# react预设\npnpm add @babel&#x2F;preset-react -D\n\n# rollup\npnpm add rollup -D\n\n# rollup常规插件\npnpm add @rollup&#x2F;plugin-node-resolve @rollup&#x2F;plugin-commonjs -D\n\n# typescript相关\npnpm add typescript tslib @rollup&#x2F;plugin-typescript -D\n\n# @rollup&#x2F;plugin-babel相关\npnpm add @rollup&#x2F;plugin-babel @babel&#x2F;core @babel&#x2F;preset-env -D\n\n# @babel&#x2F;runtime相关\npnpm add @babel&#x2F;plugin-transform-runtime @babel&#x2F;runtime @babel&#x2F;runtime-corejs3 -D\n\n# html文件模板\npnpm add rollup-plugin-generate-html-template -D\n\n# 替换字符串\npnpm add @rollup&#x2F;plugin-replace -D\n\n# 开发服务器与live server\npnpm add rollup-plugin-serve rollup-plugin-livereload -D\n\n# clear插件\npnpm add rollup-plugin-clear -D\n\n# scss\npnpm add rollup-plugin-scss sass -D\n\n# postcss\npnpm add postcss rollup-plugin-postcss -D\n\n# 图片处理\npnpm add @rollup&#x2F;plugin-image -D\n\n# nodejs typescript类型\npnpm add @types&#x2F;node -D\n\n# 别名插件\npnpm add @rollup&#x2F;plugin-alias -D\n\n# terser\npnpm add @rollup&#x2F;plugin-terser -D\n\n# visualizer\npnpm add rollup-plugin-visualizer -D</code></pre>\n\n<h2 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;, &quot;dom.iterable&quot;],\n    &quot;skipLibCheck&quot;: true,\n\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\n    &quot;noEmit&quot;: true,\n    &quot;allowImportingTsExtensions&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;isolatedModules&quot;: true,\n    &quot;jsx&quot;: &quot;preserve&quot;,\n\n    &quot;baseUrl&quot;: &quot;.&#x2F;&quot;,\n    &quot;paths&quot;: &#123;\n      &quot;@&#x2F;*&quot;: [&quot;src&#x2F;*&quot;]\n    &#125;\n  &#125;,\n  &quot;include&quot;: [&quot;src&#x2F;**&#x2F;*&quot;, &quot;rollup.config.ts&quot;, &quot;global.d.ts&quot;]\n&#125;</code></pre>\n\n<h2 id=\"babelrc-json\"><a href=\"#babelrc-json\" class=\"headerlink\" title=\".babelrc.json\"></a>.babelrc.json</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;presets&quot;: [\n    [\n      &quot;@babel&#x2F;preset-env&quot;,\n      &#123;\n        &quot;targets&quot;: &quot;&gt; 0.25%, not dead&quot;,\n        &quot;useBuiltIns&quot;: &quot;usage&quot;,\n        &quot;corejs&quot;: 3\n      &#125;\n    ],\n    [&quot;@babel&#x2F;preset-react&quot;]\n  ],\n  &quot;plugins&quot;: [\n    [\n      &quot;@babel&#x2F;plugin-transform-runtime&quot;,\n      &#123;\n        &quot;corejs&quot;: 3\n      &#125;\n    ]\n  ]\n&#125;</code></pre>\n\n<h2 id=\"rollup-config-ts\"><a href=\"#rollup-config-ts\" class=\"headerlink\" title=\"rollup.config.ts\"></a>rollup.config.ts</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; RollupOptions &#125; from &quot;rollup&quot;;\nimport &#123; nodeResolve &#125; from &quot;@rollup&#x2F;plugin-node-resolve&quot;;\nimport commonjs from &quot;@rollup&#x2F;plugin-commonjs&quot;;\nimport babel from &quot;@rollup&#x2F;plugin-babel&quot;;\nimport typescript from &quot;@rollup&#x2F;plugin-typescript&quot;;\nimport htmlTemplate from &quot;rollup-plugin-generate-html-template&quot;;\nimport serve from &quot;rollup-plugin-serve&quot;;\nimport livereload from &quot;rollup-plugin-livereload&quot;;\nimport replace from &quot;@rollup&#x2F;plugin-replace&quot;;\nimport postcss from &quot;rollup-plugin-postcss&quot;;\nimport alias from &quot;@rollup&#x2F;plugin-alias&quot;;\nimport clear from &quot;rollup-plugin-clear&quot;;\nimport image from &quot;@rollup&#x2F;plugin-image&quot;\nimport terser from &#39;@rollup&#x2F;plugin-terser&#39;;\nimport &#123; fileURLToPath &#125; from &quot;node:url&quot;;\nimport &#123; visualizer &#125; from &quot;rollup-plugin-visualizer&quot;;\n\nconst config: RollupOptions &#x3D; &#123;\n  input: &quot;src&#x2F;main.tsx&quot;,\n  output: &#123;\n    dir: &quot;dist&#x2F;&quot;,\n    format: &quot;esm&quot;,\n    name: &quot;rollupDemo&quot;,\n    sourcemap: true,\n    plugins: [terser()],\n    entryFileNames: &quot;[name].[hash:6].js&quot;,\n    chunkFileNames: &quot;chunks&#x2F;chunk-[name]-[hash].js&quot;,\n    &#x2F;&#x2F; 代码分割\n    &#x2F;&#x2F; manualChunks: &#123;\n    &#x2F;&#x2F;   react: [&quot;react&quot;, &quot;react-dom&quot;]\n    &#x2F;&#x2F; &#125;,\n    globals: &#123;\n      react: &quot;React&quot;,\n      &quot;react-dom&quot;: &quot;ReactDOM&quot;,\n    &#125;,\n    paths: &#123;\n      react: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;react@18.2.0&#x2F;+esm&quot;,\n      &quot;react-dom&quot;: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;react-dom@18.2.0&#x2F;+esm&quot;,\n    &#125;\n  &#125;,\n  external: [&quot;react&quot;, &quot;react-dom&quot;],\n  plugins: [\n    visualizer(),\n    nodeResolve(&#123;\n      extensions: [&quot;.js&quot;, &quot;jsx&quot;, &quot;ts&quot;, &quot;tsx&quot;],\n    &#125;),\n    commonjs(),\n    typescript(),\n    babel(&#123;\n      babelHelpers: &quot;runtime&quot;,\n      include: &quot;src&#x2F;**&quot;,\n      exclude: &quot;node_modules&#x2F;**&quot;,\n      extensions: [&quot;.js&quot;, &quot;.ts&quot;, &quot;jsx&quot;, &quot;tsx&quot;],\n    &#125;),\n    alias(&#123;\n      entries: [\n        &#123;\n          find: &quot;@&quot;,\n          replacement: fileURLToPath(new URL(&quot;src&quot;, import.meta.url)),\n        &#125;,\n      ],\n    &#125;),\n    postcss(&#123;\n      extensions: [&quot;.js&quot;], &#x2F;&#x2F; 将scss解析成css\n      extract: true,\n      modules: true,\n    &#125;),\n    replace(&#123;\n      preventAssignment: true,\n      &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;production&quot;), &#x2F;&#x2F; 否则会报：process is not defined的错\n    &#125;),\n    clear(&#123;\n      targets: [&quot;dist&quot;],\n    &#125;),\n    htmlTemplate(&#123;\n      template: &quot;public&#x2F;index.html&quot;,\n      target: &quot;dist&#x2F;index.html&quot;,\n      attrs: [&#39;type&#x3D;&quot;module&quot;&#39;],\n    &#125;),\n    image(),\n    serve(&quot;dist&quot;),\n    livereload(&quot;src&quot;),\n  ],\n&#125;;\nexport default config;</code></pre>\n\n<h1 id=\"npm-发包\"><a href=\"#npm-发包\" class=\"headerlink\" title=\"npm 发包\"></a>npm 发包</h1><h1 id=\"npm-发布\"><a href=\"#npm-发布\" class=\"headerlink\" title=\"npm 发布\"></a>npm 发布</h1><h2 id=\"node-modules-1\"><a href=\"#node-modules-1\" class=\"headerlink\" title=\"node_modules\"></a>node_modules</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># rollup\npnpm add rollup -D\n\n# rollup常规插件\npnpm add @rollup&#x2F;plugin-node-resolve @rollup&#x2F;plugin-commonjs -D\n\n# typescript相关\npnpm add typescript tslib @rollup&#x2F;plugin-typescript -D\n\n# @rollup&#x2F;plugin-babel相关\npnpm add @rollup&#x2F;plugin-babel @babel&#x2F;core @babel&#x2F;preset-env -D\n\n# lodash-es\npnpm add lodash-es\n\n# @types&#x2F;lodash-es\npnpm add @types&#x2F;lodash-es -D</code></pre>\n\n<h2 id=\"tsconfig-json-文件\"><a href=\"#tsconfig-json-文件\" class=\"headerlink\" title=\"tsconfig.json 文件\"></a>tsconfig.json 文件</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#x2F;&#x2F; tsconfig.json\n&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;ESNext&quot;,\n    &quot;declaration&quot;: true,&#x2F;&#x2F; 根据ts文件自动生成.d.ts声明文件和js文件\n    &quot;emitDeclarationOnly&quot;: true, &#x2F;&#x2F; 只输出.d.ts声明文件，不生成js文件\n    &quot;outDir&quot;: &quot;.&#x2F;dist&quot;, &#x2F;&#x2F; 输出目录\n\t\t......\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"本地调试-link-安装\"><a href=\"#本地调试-link-安装\" class=\"headerlink\" title=\"本地调试 link 安装\"></a>本地调试 link 安装</h2><p>最终打包的文件夹是 dist 文件夹，我们可以把 package.json 文件和 README.md 文件都拷贝到 dist 目录中。</p>\n<p>npm link 地址其实就是全局安装地址：</p>\n<p><strong>mac:</strong> <code>/usr/local/lib/node_modules/</code></p>\n<p><strong>Windows:</strong> <code>c:\\用户(Users)\\你的用户名\\AppData(隐藏文件夹)\\Roaming\\npm\\node_modules</code></p>\n<p><a href=\"https://pnpm.io/zh/cli/link#pnpm-link---global\">pnpm link</a></p>\n<p>在库文件的 dist 目录下执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm link --global</code></pre>\n\n<p>这个命令会读取 package.json 文件中的 name，作为包文件的名字，你可以理解为，相当于 pnpm 将我们打包的项目，全局安装在了本地</p>\n<p>在目标项目中，使用命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm link --global 包名</code></pre>\n\n<p>进行安装。</p>\n<p><strong>卸载 link</strong> <a href=\"https://pnpm.io/zh/cli/unlink\">pnpm unlink</a></p>\n<h2 id=\"发布到-npm\"><a href=\"#发布到-npm\" class=\"headerlink\" title=\"发布到 npm\"></a>发布到 npm</h2><p>常用命令：</p>\n<ul>\n<li><code>npm whoami</code> 检测当前登录状态</li>\n<li><code>npm config ls</code> 显示当前 npm 配置信息</li>\n<li><code>npm addUser</code> 、<code>npm login</code> 登录</li>\n<li><code>npm config set registry 链接地址</code> 切换源地址</li>\n<li><code>npm publish</code> 发布</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意必须使用 npm 源镜像才能发布，如果使用的是阿里源等镜像，需要切换成源镜像才能发布 <code>https://registry.npmjs.org/</code></p></blockquote>\n<h1 id=\"JavaScript-API\"><a href=\"#JavaScript-API\" class=\"headerlink\" title=\"JavaScript API\"></a>JavaScript API</h1><p>Rollup 提供了一个可从 Node.js 使用的 JavaScript API。你很少需要使用它，不过通过这个 API 我们可以比较明显的知道 rollup 的构建大致流程。</p>\n<p>内容其实并不多，主要核心两个函数，rollup()与 watch()</p>\n<ul>\n<li><p>rollup.rollup</p>\n<ul>\n<li>inputOptions 对象</li>\n<li>outputOptions 对象</li>\n</ul>\n</li>\n<li><p>rollup.watch</p>\n<ul>\n<li>watchOptions</li>\n</ul>\n</li>\n</ul>\n<p>其实用起来的基本思路和配置文件差不多。直接来看一下效果：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const rollup &#x3D; require(&#39;rollup&#39;);\n\nconst inputOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  external: [],\n  plugins: []\n&#125;\n\nconst outputOptions &#x3D; &#123;\n  dir: &#39;dist&#39;,\n  format: &#39;esm&#39;,\n  sourcemap: true,\n  entryFileNames: &#39;[name].[hash].js&#39;\n&#125;\n\nasync function build() &#123;\n  let bundle;\n  let buildFailed &#x3D; false;\n  try &#123;\n    bundle &#x3D; await rollup.rollup(inputOptions);\n    await bundle.write(outputOptions);\n  &#125; catch (error) &#123;\n    buildFailed &#x3D; true;\n    console.error(error);\n  &#125;\n\n  if (bundle) &#123;\n    &#x2F;&#x2F; 关闭打包过程\n    await bundle.close();\n  &#125;\n  process.exit(buildFailed ? 1 : 0);\n&#125;\n\nbuild();\n\nconst watchOptions &#x3D; &#123;\n  ...inputOptions,\n  output: [outputOptions],\n  watch: &#123;\n    include: &#39;src&#x2F;**&#39;,\n    exclude: &#39;node_modules&#x2F;**&#39;\n  &#125;\n&#125;;\nconst watcher &#x3D; rollup.watch(watchOptions);\n\nwatcher.on(&#39;event&#39;, event &#x3D;&gt; &#123;\n  console.log(event);\n  &#x2F;&#x2F;确保每次打包完成后正确的关闭打包\n  if (event.result) &#123;\n    event.result.close();\n  &#125;\n&#125;)</code></pre>\n\n<p>其实整个过程无非就是把我们之前配置的流程转换位了 js 代码的形式。<code>watch api</code>很明显就是命令行中使用 <code>--watch</code> 标志运行 Rollup 时的效果。</p>\n<h2 id=\"两大构建工作流\"><a href=\"#两大构建工作流\" class=\"headerlink\" title=\"两大构建工作流\"></a>两大构建工作流</h2><p>我们主要来看一下<code>rollup()</code>函数，从<code>rollup()</code>函数就可以看出，rollup 打包构建流程主要是两大步骤：</p>\n<h3 id=\"1、build\"><a href=\"#1、build\" class=\"headerlink\" title=\"1、build\"></a>1、build</h3><p>主要负责创建模块依赖，初始化哥哥模块的 AST(抽象语法树)，以及模块之间的依赖关系</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const rollup &#x3D; require(&#39;rollup&#39;);\n\nconst inputOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  external: [],\n  plugins: []\n&#125;\n\nasync function build() &#123;\n  const bundle &#x3D; await rollup.rollup(inputOptions);\n  console.log(bundle); &#x2F;&#x2F; 打印bundle对象\n  console.log(bundle.cache.modules); &#x2F;&#x2F;打印模块内容\n&#125;\n\nbuild();</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 打印bundle对象\n&#123;\n  cache: &#123;\n    modules: [ [Object], [Object], [Object] ],\n    plugins: [Object: null prototype] &#123;&#125;\n  &#125;,\n  close: [AsyncFunction: close],\n  closed: false,\n  generate: [AsyncFunction: generate],\n  watchFiles: [\n    &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;index.js&#39;,\n    &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;randomNumber.js&#39;,\n    &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;deepClone.js&#39;\n  ],\n  write: [AsyncFunction: write]\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 打印模块内容\n[\n  &#123;\n    assertions: &#123;&#125;,\n    ast: Node &#123;\n      type: &#39;Program&#39;,\n      start: 0,\n      end: 262,\n      body: [Array],\n      sourceType: &#39;module&#39;\n    &#125;,\n    code: &#39;&#x2F;**\\n&#39; +\n      &#39; * 随机数\\n&#39; +\n      &#39; * @param &#123;*&#125; min 最小值\\n&#39; +\n      &#39; * @param &#123;*&#125; max 最大值\\n&#39; +\n      &#39; * @returns min-max之间的随机整数\\n&#39; +\n      &#39; *&#x2F;\\n&#39; +\n      &#39;const randomNumber &#x3D; (min, max) &#x3D;&gt; &#123;\\n&#39; +\n      &#39;  min &#x3D; Math.ceil(min);\\n&#39; +\n      &#39;  max &#x3D; Math.floor(max);\\n&#39; +\n      &#39;  return Math.floor(Math.random() * (max - min + 1)) + min;\\n&#39; +\n      &#39;&#125;\\n&#39; +\n      &#39;\\n&#39; +\n      &#39;export default randomNumber&#39;,\n    customTransformCache: false,\n    dependencies: [],\n    id: &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;randomNumber.js&#39;,\n    meta: &#123;&#125;,\n    moduleSideEffects: true,\n    originalCode: &#39;&#x2F;**\\n&#39; +\n      &#39; * 随机数\\n&#39; +\n      &#39; * @param &#123;*&#125; min 最小值\\n&#39; +\n      &#39; * @param &#123;*&#125; max 最大值\\n&#39; +\n      &#39; * @returns min-max之间的随机整数\\n&#39; +\n      &#39; *&#x2F;\\n&#39; +\n      &#39;const randomNumber &#x3D; (min, max) &#x3D;&gt; &#123;\\n&#39; +\n      &#39;  min &#x3D; Math.ceil(min);\\n&#39; +\n      &#39;  max &#x3D; Math.floor(max);\\n&#39; +\n      &#39;  return Math.floor(Math.random() * (max - min + 1)) + min;\\n&#39; +\n      &#39;&#125;\\n&#39; +\n      &#39;\\n&#39; +\n      &#39;export default randomNumber&#39;,\n    originalSourcemap: null,\n    resolvedIds: [Object: null prototype] &#123;&#125;,\n    sourcemapChain: [],\n    syntheticNamedExports: false,\n    transformDependencies: [],\n    transformFiles: undefined\n  &#125;,\n  &#123;\n    assertions: &#123;&#125;,\n    ast: Node &#123;\n      type: &#39;Program&#39;,\n      start: 0,\n      end: 349,\n      body: [Array],\n      sourceType: &#39;module&#39;\n    &#125;,\n    code: &#39;&#x2F;**\\n&#39; +\n      &#39; * 深拷贝\\n&#39; +\n      &#39; * @param obj 需要深拷贝的对象\\n&#39; +\n      &#39; * @returns 深拷贝对象\\n&#39; +\n      &#39; *&#x2F;\\n&#39; +\n      &#39;const deepClone &#x3D; (obj) &#x3D;&gt; &#123;\\n&#39; +\n      &quot;  if(typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D;&#x3D; null) &#123;\\n&quot; +\n      &#39;    return obj\\n&#39; +\n      &#39;  &#125;\\n&#39; +\n      &#39;  const result &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;\\n&#39; +\n      &#39;  for(let key in obj) &#123;\\n&#39; +\n      &#39;    if(obj.hasOwnProperty(key)) &#123;\\n&#39; +\n      &#39;      result[key] &#x3D; deepClone(obj[key])\\n&#39; +\n      &#39;    &#125;\\n&#39; +\n      &#39;  &#125;\\n&#39; +\n      &#39;  return result\\n&#39; +\n      &#39;&#125;\\n&#39; +\n      &#39;export default deepClone&#39;,\n    customTransformCache: false,\n    dependencies: [],\n    id: &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;deepClone.js&#39;,\n    meta: &#123;&#125;,\n    moduleSideEffects: true,\n    originalCode: &#39;&#x2F;**\\n&#39; +\n      &#39; * 深拷贝\\n&#39; +\n      &#39; * @param obj 需要深拷贝的对象\\n&#39; +\n      &#39; * @returns 深拷贝对象\\n&#39; +\n      &#39; *&#x2F;\\n&#39; +\n      &#39;const deepClone &#x3D; (obj) &#x3D;&gt; &#123;\\n&#39; +\n      &quot;  if(typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D;&#x3D; null) &#123;\\n&quot; +\n      &#39;    return obj\\n&#39; +\n      &#39;  &#125;\\n&#39; +\n      &#39;  const result &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;\\n&#39; +\n      &#39;  for(let key in obj) &#123;\\n&#39; +\n      &#39;    if(obj.hasOwnProperty(key)) &#123;\\n&#39; +\n      &#39;      result[key] &#x3D; deepClone(obj[key])\\n&#39; +\n      &#39;    &#125;\\n&#39; +\n      &#39;  &#125;\\n&#39; +\n      &#39;  return result\\n&#39; +\n      &#39;&#125;\\n&#39; +\n      &#39;export default deepClone&#39;,\n    originalSourcemap: null,\n    resolvedIds: [Object: null prototype] &#123;&#125;,\n    sourcemapChain: [],\n    syntheticNamedExports: false,\n    transformDependencies: [],\n    transformFiles: undefined\n  &#125;,\n  &#123;\n    assertions: &#123;&#125;,\n    ast: Node &#123;\n      type: &#39;Program&#39;,\n      start: 0,\n      end: 131,\n      body: [Array],\n      sourceType: &#39;module&#39;\n    &#125;,\n    code: &#39;import randomNumber from &quot;.&#x2F;randomNumber.js&quot;;\\n&#39; +\n      &#39;import deepClone from &quot;.&#x2F;deepClone.js&quot;;\\n&#39; +\n      &#39;\\n&#39; +\n      &#39;export default &#123; randomNumber, deepClone &#125;\\n&#39; +\n      &#39;\\n&#39;,\n    customTransformCache: false,\n    dependencies: [\n      &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;randomNumber.js&#39;,\n      &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;deepClone.js&#39;\n    ],\n    id: &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;index.js&#39;,\n    meta: &#123;&#125;,\n    moduleSideEffects: true,\n    originalCode: &#39;import randomNumber from &quot;.&#x2F;randomNumber.js&quot;;\\n&#39; +\n      &#39;import deepClone from &quot;.&#x2F;deepClone.js&quot;;\\n&#39; +\n      &#39;\\n&#39; +\n      &#39;export default &#123; randomNumber, deepClone &#125;\\n&#39; +\n      &#39;\\n&#39;,\n    originalSourcemap: null,\n    resolvedIds: [Object: null prototype] &#123;\n      &#39;.&#x2F;randomNumber.js&#39;: [Object],\n      &#39;.&#x2F;deepClone.js&#39;: [Object]\n    &#125;,\n    sourcemapChain: [],\n    syntheticNamedExports: false,\n    transformDependencies: [],\n    transformFiles: undefined\n  &#125;\n]</code></pre>\n\n<p>通过上面两个打印语句的结果，其实就可以分析出，在<code>build</code>阶段产生的<code>bunlde</code>对象，并没有模块打包，这个对象的作用在于存储各个模块的内容及依赖关系，并且提供了<code>generate(不写入)</code>，<code>write(写入磁盘)</code>方法，方便后续 output 阶段输出产物</p>\n<h3 id=\"2、output\"><a href=\"#2、output\" class=\"headerlink\" title=\"2、output\"></a>2、output</h3><p>通过 rollup()函数返回的对象 bundle 有两个重要的函数</p>\n<ul>\n<li>generate 生成打包产物，不写入磁盘</li>\n<li>write 生成打包产物，写入磁盘</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const rollup &#x3D; require(&#39;rollup&#39;);\n\nconst inputOptions &#x3D; &#123;\n  input: &#39;src&#x2F;index.js&#39;,\n  external: [],\n  plugins: []\n&#125;\n\nconst outputOptions &#x3D; &#123;\n  dir: &#39;dist&#39;,\n  format: &#39;esm&#39;,\n  sourcemap: true,\n  entryFileNames: &#39;[name].[hash].js&#39;\n&#125;\n\nasync function build() &#123;\n  const bundle &#x3D; await rollup.rollup(inputOptions);\n  const resp &#x3D; await bundle.generate(outputOptions);\n  console.log(resp)\n&#125;\n\nbuild();</code></pre>\n\n<p><strong>执行结果：</strong></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">&#123;\n  output: [\n    &#123;\n      exports: [Array],\n      facadeModuleId: &#39;&#x2F;Users&#x2F;yingside&#x2F;Desktop&#x2F;rollup-api-demo&#x2F;src&#x2F;index.js&#39;,\n      isDynamicEntry: false,\n      isEntry: true,\n      isImplicitEntry: false,\n      moduleIds: [Array],\n      name: &#39;index&#39;,\n      type: &#39;chunk&#39;,\n      dynamicImports: [],\n      fileName: &#39;index.1730c9fc.js&#39;,\n      implicitlyLoadedBefore: [],\n      importedBindings: &#123;&#125;,\n      imports: [],\n      modules: [Object: null prototype],\n      referencedFiles: [],\n      code: &#39;&#x2F;**\\n&#39; +\n        &#39; * 随机数\\n&#39; +\n        &#39; * @param &#123;*&#125; min 最小值\\n&#39; +\n        &#39; * @param &#123;*&#125; max 最大值\\n&#39; +\n        &#39; * @returns min-max之间的随机整数\\n&#39; +\n        &#39; *&#x2F;\\n&#39; +\n        &#39;const randomNumber &#x3D; (min, max) &#x3D;&gt; &#123;\\n&#39; +\n        &#39;  min &#x3D; Math.ceil(min);\\n&#39; +\n        &#39;  max &#x3D; Math.floor(max);\\n&#39; +\n        &#39;  return Math.floor(Math.random() * (max - min + 1)) + min;\\n&#39; +\n        &#39;&#125;;\\n&#39; +\n        &#39;\\n&#39; +\n        &#39;&#x2F;**\\n&#39; +\n        &#39; * 深拷贝\\n&#39; +\n        &#39; * @param obj 需要深拷贝的对象\\n&#39; +\n        &#39; * @returns 深拷贝对象\\n&#39; +\n        &#39; *&#x2F;\\n&#39; +\n        &#39;const deepClone &#x3D; (obj) &#x3D;&gt; &#123;\\n&#39; +\n        &quot;  if(typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D;&#x3D; null) &#123;\\n&quot; +\n        &#39;    return obj\\n&#39; +\n        &#39;  &#125;\\n&#39; +\n        &#39;  const result &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;\\n&#39; +\n        &#39;  for(let key in obj) &#123;\\n&#39; +\n        &#39;    if(obj.hasOwnProperty(key)) &#123;\\n&#39; +\n        &#39;      result[key] &#x3D; deepClone(obj[key]);\\n&#39; +\n        &#39;    &#125;\\n&#39; +\n        &#39;  &#125;\\n&#39; +\n        &#39;  return result\\n&#39; +\n        &#39;&#125;;\\n&#39; +\n        &#39;\\n&#39; +\n        &#39;var index &#x3D; &#123; randomNumber, deepClone &#125;;\\n&#39; +\n        &#39;\\n&#39; +\n        &#39;export &#123; index as default &#125;;\\n&#39; +\n        &#39;&#x2F;&#x2F;# sourceMappingURL&#x3D;index.1730c9fc.js.map\\n&#39;,\n      map: [SourceMap],\n      preliminaryFileName: &#39;index.!~&#123;001&#125;~.js&#39;,\n      sourcemapFileName: &#39;index.1730c9fc.js.map&#39;\n    &#125;,\n    &#123;\n      fileName: &#39;index.1730c9fc.js.map&#39;,\n      name: undefined,\n      needsCodeReference: false,\n      source: &#96;&#123;&quot;version&quot;:3,&quot;file&quot;:&quot;index.1730c9fc.js&quot;,&quot;sources&quot;:[&quot;..&#x2F;src&#x2F;randomNumber.js&quot;,&quot;..&#x2F;src&#x2F;deepClone.js&quot;,&quot;..&#x2F;src&#x2F;index.js&quot;],&quot;sourcesContent&quot;:[&quot;&#x2F;**\\n * 随机数\\n * @param &#123;*&#125; min 最小值\\n * @param &#123;*&#125; max 最大值\\n * @returns min-max之间的随机整数\\n *&#x2F;\\nconst randomNumber &#x3D; (min, max) &#x3D;&gt; &#123;\\n  min &#x3D; Math.ceil(min);\\n  max &#x3D; Math.floor(max);\\n  return Math.floor(Math.random() * (max - min + 1)) + min;\\n&#125;\\n\\nexport default randomNumber&quot;,&quot;&#x2F;**\\n * 深拷贝\\n * @param obj 需要深拷贝的对象\\n * @returns 深拷贝对象\\n *&#x2F;\\nconst deepClone &#x3D; (obj) &#x3D;&gt; &#123;\\n  if(typeof obj !&#x3D;&#x3D; &#39;object&#39; || obj &#x3D;&#x3D;&#x3D; null) &#123;\\n    return obj\\n  &#125;\\n  const result &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;\\n  for(let key in obj) &#123;\\n    if(obj.hasOwnProperty(key)) &#123;\\n      result[key] &#x3D; deepClone(obj[key])\\n    &#125;\\n  &#125;\\n  return result\\n&#125;\\nexport default deepClone&quot;,&quot;import randomNumber from \\&quot;.&#x2F;randomNumber.js\\&quot;;\\nimport deepClone from \\&quot;.&#x2F;deepClone.js\\&quot;;\\n\\nexport default &#123; randomNumber, deepClone &#125;\\n\\n&quot;],&quot;names&quot;:[],&quot;mappings&quot;:&quot;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK;AACnC,EAAE,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxB,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AAC3D;;ACVA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK;AAC3B,EAAE,GAAG,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;AAC9C,IAAI,OAAO,GAAG;AACd,GAAG;AACH,EAAE,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;AAC9C,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE;AACtB,IAAI,GAAG,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAChC,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC;AACvC,KAAK;AACL,GAAG;AACH,EAAE,OAAO,MAAM;AACf;;ACbA,YAAe,EAAE,YAAY,EAAE,SAAS;;;;&quot;&#125;&#96;,\n      type: &#39;asset&#39;\n    &#125;\n  ]\n&#125;</code></pre>\n\n<h1 id=\"插件机制\"><a href=\"#插件机制\" class=\"headerlink\" title=\"插件机制\"></a>插件机制</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>代码：<a href=\"https://github.com/Sunny-117/rollup-plugins\">github.com&#x2F;Sunny-117&#x2F;r…</a></p></blockquote>\n<h2 id=\"Rollup-插件概述\"><a href=\"#Rollup-插件概述\" class=\"headerlink\" title=\"Rollup 插件概述\"></a>Rollup 插件概述</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Rollup 插件是一个对象，具有 <a href=\"https://cn.rollupjs.org/plugin-development/#properties\">属性</a>、<a href=\"https://cn.rollupjs.org/plugin-development/#build-hooks\">构建钩子</a> 和 <a href=\"https://cn.rollupjs.org/plugin-development/#output-generation-hooks\">输出生成钩子</a> 中的一个或多个，并遵循我们的 <a href=\"https://cn.rollupjs.org/plugin-development/#conventions\">约定</a>。插件应作为一个导出一个函数的包进行发布，该函数可以使用插件特定的选项进行调用并返回此类对象。</p></blockquote>\n<p>简单来说，rollup 插件一般会做成一个函数，函数返回一个对象，返回的对象中包含一些属性和不同阶段的钩子函数。</p>\n<h3 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h3><p>插件应该有一个明确的名称，并以<code>rollup-plugin-</code>作为前缀。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>name：插件的名称，用于在警告和错误消息中标识插件。</p>\n<p>version：插件的版本</p>\n<h2 id=\"钩子函数的特点\"><a href=\"#钩子函数的特点\" class=\"headerlink\" title=\"钩子函数的特点\"></a>钩子函数的特点</h2><ul>\n<li>钩子函数区分不同的调用时机</li>\n<li>钩子函数是有执行顺序的</li>\n<li>钩子函数有不同的执行方式</li>\n<li>钩子函数也可以是对象的形式</li>\n<li>对象形式的钩子函数可以改变钩子的执行，让不同插件的同名钩子函数获取不通的执行先后</li>\n</ul>\n<h3 id=\"钩子函数的调用时机\"><a href=\"#钩子函数的调用时机\" class=\"headerlink\" title=\"钩子函数的调用时机\"></a>钩子函数的调用时机</h3><p>这里的调用时机，其实就是以我们上面的 API，build 和 output 两大工作流的不同阶段进行分类。根据这两个不同阶段，rollup 提供的不同的函数让我们调用</p>\n<ul>\n<li>const bundle &#x3D; await rollup.rollup(inputOptions) 执行期间的构建钩子函数 - <a href=\"https://cn.rollupjs.org/plugin-development/#build-hooks\">build-hooks</a></li>\n<li>await bundle.generate(outputOptions)&#x2F;write(outputOptions) 执行期间的输出钩子函数-<a href=\"https://cn.rollupjs.org/plugin-development/#output-generation-hooks\">output-generation-hooks</a></li>\n</ul>\n<h3 id=\"钩子函数的执行方式\"><a href=\"#钩子函数的执行方式\" class=\"headerlink\" title=\"钩子函数的执行方式\"></a>钩子函数的执行方式</h3><p>除了上面简单的划分为两个阶段的调用时机之外，我们还可以以钩子函数的执行方式来分类。</p>\n<ul>\n<li><code>async/sync</code>：异步&#x2F;同步钩子，async 标记的钩子可以返回一个解析为相同类型的值的 Promise；否则，该钩子被标记为 <code>sync</code>。</li>\n<li><code>first</code>：如果有多个插件实现此钩子，则钩子按顺序运行，直到钩子返回一个不是 <code>null</code> 或 <code>undefined</code> 的值。</li>\n<li><code>sequential</code>：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 <code>async</code>，则此类后续钩子将等待当前钩子解决后再运行。</li>\n<li><code>parallel</code>：如果有多个插件实现此钩子，则所有这些钩子将按指定的插件顺序运行。如果钩子是 <code>async</code>，则此类后续钩子将并行运行，而不是等待当前钩子。</li>\n</ul>\n<h3 id=\"钩子函数也可以是对象\"><a href=\"#钩子函数也可以是对象\" class=\"headerlink\" title=\"钩子函数也可以是对象\"></a>钩子函数也可以是对象</h3><p>除了函数之外，钩子也可以是对象。在这种情况下，实际的钩子函数（或 <code>banner/footer/intro/outro</code> 的值）必须指定为 <code>handler</code>。这允许你提供更多的可选属性，以改变钩子的执行：</p>\n<ul>\n<li>order: “pre” | “post” | null</li>\n</ul>\n<p>如果有多个插件实现此钩子，则可以先运行此插件（<code>&quot;pre&quot;</code>），最后运行此插件（<code>&quot;post&quot;</code>），或在用户指定的位置运行（没有值或 <code>null</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default function resolveFirst() &#123;\n  return &#123;\n    name: &quot;resolve-first&quot;,\n    resolveId: &#123;\n      order: &quot;pre&quot;,\n      handler(source) &#123;\n        console.log(source);\n        return null;\n      &#125;,\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"构建钩子执行顺序\"><a href=\"#构建钩子执行顺序\" class=\"headerlink\" title=\"构建钩子执行顺序\"></a>构建钩子执行顺序</h3><p><img src=\"/images/rollup/2.png\" alt=\"img\"></p>\n<ol start=\"0\">\n<li>通过 <code>options</code> 钩子读取配置，并进行配置的转换，得到处理后的配置对象</li>\n<li>调用 <code>buildStart</code> 钩子，考虑了所有 <code>options</code>钩子配置的转换，包含未设置选项的正确默认值，正式开始构建流程</li>\n<li>调用 <code>resolveId</code> 钩子解析模块文件路径。rollup 中模块文件的 id 就是文件地址，所以，类似 resolveId 这种就是解析文件地址的意思。从<code>inputOption</code>的<code>input</code>配置指定的入口文件开始，每当匹配到引入外部模块的语句(如：<code>import moudleA from &#39;./moduleA&#39;</code>)便依次执行注册插件中的每一个 <code>resolveId</code> 钩子，直到某一个插件中的 <code>resolveId</code> 执行完后返回非 <code>null</code> 或非 <code>undefined</code> 的值，将停止执行后续插件的 <code>resolveId</code> 逻辑并进入下一个钩子</li>\n<li>调用<code>load</code>钩子加载模块内容，<code>resolveId</code>中的路径一般为相对路径，load 中的路径为处理之后的绝对路径</li>\n<li>接着判断当前解析的模块是否存在缓存，若不存在则执行所有的 <code>transform</code> 钩子来对模块内容进行进行自定义的转换；若存在则判断<code>shouldTransformCachedModule</code>属性，true 则执行所有的 <code>transform</code> 钩子，false 则进入<code>moduleParsed</code>钩子逻辑</li>\n<li>拿到最后的模块内容，进行 <code>AST</code> 分析，调用 <code>moduleParsed</code> 钩子。如果内部没有<code>imports</code>内容，进入<code>buildEnd</code>环节。如果还有<code>imports</code>内容则继续，如果是普通的 <code>import</code>，则执行<code>resolveId</code> 钩子，继续回到<strong>步骤 3-调用 resolveId</strong>；如果是动态 <code>import</code>，则执行<code>resolveDynamicImport</code> 钩子解析路径，如果解析成功，则回到<strong>步骤 4-load</strong>加载模块，否则回到步骤 3 通过 <code>resolveId</code> 解析路径</li>\n<li>直到所有的 <code>import</code> 都解析完毕，<code>Rollup</code> 执行<code>buildEnd</code>钩子，Build 阶段结束</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; rollup-plugin-example.js\n\nexport default function myExample() &#123;\n  return &#123;\n    name: &quot;my-example&quot;,\n    options(options) &#123;\n      console.log(&quot;🎉 -- options:&quot;, options);\n    &#125;,\n    buildStart(options) &#123;\n      console.log(&quot;✨ -- buildStart:&quot;, options);\n    &#125;,\n    resolveId(source, importer) &#123;\n      console.log(&quot;🚀 -- resolveId(source):&quot;, source);\n      console.log(&quot;🚀 -- resolveId(importer):&quot;, importer);\n      return null;\n    &#125;,\n    load(id) &#123;\n      console.log(&quot;🌈 ~ id:&quot;, id);\n      return null;\n    &#125;,\n    transform(code, id) &#123;\n      console.log(&quot;🌟 -- transform&quot;);\n      console.log(&quot;---&quot;, code);\n      console.log(&quot;---&quot;, id);\n    &#125;,\n    moduleParsed(info) &#123;\n      console.log(&quot;⭐️ -- moduleParsed:&quot;, info);\n    &#125;,\n    buildEnd() &#123;\n      console.log(&quot;😁 -- buildEnd&quot;);\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<h4 id=\"调用虚拟模块插件示例\"><a href=\"#调用虚拟模块插件示例\" class=\"headerlink\" title=\"调用虚拟模块插件示例\"></a>调用虚拟模块插件示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const virtualModuleId &#x3D; &quot;virtual-module&quot;;\n&#x2F;&#x2F; rollup约定插件使用“虚拟模块”，使用\\0前缀模块 ID。这可以防止其他插件尝试处理它。\nconst resolvedVirtualModuleId &#x3D; &quot;\\0&quot; + virtualModuleId;\nexport default function virtualModule() &#123;\n  return &#123;\n    name: &quot;virtual-module&quot;,\n    resolveId(source) &#123;\n      if (source &#x3D;&#x3D;&#x3D; &quot;virtual-module&quot;) &#123;\n        return resolvedVirtualModuleId; &#x2F;&#x2F; 告诉Rollup，这个ID是外部模块，不要在此处查找它\n      &#125;\n      return null; &#x2F;&#x2F; 其他ID应按通常方式处理\n    &#125;,\n    load(id) &#123;\n      console.log(&quot;🌈 - id:&quot;, id);\n      if (id &#x3D;&#x3D;&#x3D; resolvedVirtualModuleId) &#123;\n        &#x2F;&#x2F; return &#39;export default &quot;This is virtual!&quot;&#39;; &#x2F;&#x2F; 告诉Rollup，如何加载此模块\n        return &quot;export default function fib(n) &#123; return n &lt;&#x3D; 1 ? n : fib(n - 1) + fib(n - 2); &#125;&quot;;\n      &#125;\n      return null; &#x2F;&#x2F; 其他ID应按通常方式处理\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<p><strong>界面调用</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import fib from &quot;virtual-module&quot;;\nconsole.log(fib(10));</code></pre>\n\n<h4 id=\"JSON-插件示例\"><a href=\"#JSON-插件示例\" class=\"headerlink\" title=\"JSON 插件示例\"></a>JSON 插件示例</h4><p>rollup 默认是不能直接读取 json 文件的内容的，我们自己写一个插件处理一下，不过写这个插件之前，有一些小知识点需要补充一下</p>\n<p><a href=\"https://github.com/rollup/plugins/tree/master/packages/pluginutils\">@rollup&#x2F;pluginutils</a> rollup 官方提供的工具插件,里面有一些制作插件常用的方法</p>\n<p><strong>安装</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm add @rollup&#x2F;plugin-commonjs @rollup&#x2F;plugin-node-resolve @rollup&#x2F;pluginutils -D</code></pre>\n\n<p><a href=\"https://cn.rollupjs.org/plugin-development/#plugin-context\">插件上下文</a></p>\n<p>这个其实也是插件中很常用的一些 api，可以通过 <code>this</code> 从大多数<a href=\"https://cn.rollupjs.org/plugin-development/#build-hooks\">钩子</a>中访问一些实用函数和信息位</p>\n<p><strong>rollup-plugin-json</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createFilter, dataToEsm &#125; from &quot;@rollup&#x2F;pluginutils&quot;;\nimport path from &quot;path&quot;;\n\nexport default function myJson(options &#x3D; &#123;&#125;) &#123;\n  &#x2F;&#x2F; createFilter 返回一个函数，这个函数接收一个id路径参数，返回一个布尔值\n  &#x2F;&#x2F; 这个布尔值表示是否要处理这个id路径\n  &#x2F;&#x2F; rollup 推荐每一个 transform 类型的插件都需要提供 include 和 exclude 选项，生成过滤规则\n  const filter &#x3D; createFilter(options.include, options.exclude);\n  return &#123;\n    name: &quot;rollup-plugin-json&quot;,\n    transform: &#123;\n      order: &quot;pre&quot;,\n      handler(code, id) &#123;\n        if (!filter(id) || path.extname(id) !&#x3D;&#x3D; &quot;.json&quot;) return null;\n        try &#123;\n          const parse &#x3D; JSON.stringify(JSON.parse(code));\n          return &#123;\n            &#x2F;&#x2F; dataToEsm 将数据转换成esm模块\n            &#x2F;&#x2F; 其实就是 export default &quot;xxx&quot;\n            code: dataToEsm(parse),\n            map: &#123; mappings: &quot;&quot; &#125;,\n          &#125;;\n        &#125; catch (err) &#123;\n          const message &#x3D; &quot;Could not parse JSON file&quot;;\n          this.error(&#123; message, id, cause: err &#125;);\n          return null;\n        &#125;\n      &#125;,\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<p><strong>界面调用</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import pkg from &quot;..&#x2F;package.json&quot;;\nimport test from &quot;..&#x2F;test.json&quot;; &#x2F;&#x2F; 错误json格式演示\nconsole.log(pkg.name);</code></pre>\n\n<h4 id=\"插件上下文\"><a href=\"#插件上下文\" class=\"headerlink\" title=\"插件上下文\"></a><a href=\"https://cn.rollupjs.org/plugin-development/#plugin-context\">插件上下文</a></h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createFilter &#125; from &quot;@rollup&#x2F;pluginutils&quot;;\n\nexport default function customPlugin(options) &#123;\n  const filter &#x3D; createFilter(options.include, options.exclude);\n\n  return &#123;\n    name: &quot;custom-plugin&quot;,\n\n    transform(code, id) &#123;\n      if (!filter(id)) &#123;\n        return null;\n      &#125;\n\n      const parsedCode &#x3D; this.parse(code); &#x2F;&#x2F; 解析代码,获取AST\n\n      const source &#x3D; &#96;$&#123;code&#125;\\n\\n$&#123;JSON.stringify(parsedCode, null, 2)&#125;&#96;;\n\n      const fileName &#x3D; id.split(&quot;&#x2F;&quot;).pop();\n\n      if (options.emitFile) &#123;\n        this.emitFile(&#123;\n          type: &quot;asset&quot;,\n          fileName: fileName + &quot;.txt&quot;,\n          source,\n        &#125;);\n      &#125;\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<h4 id=\"图片读取\"><a href=\"#图片读取\" class=\"headerlink\" title=\"图片读取\"></a>图片读取</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createFilter, dataToEsm &#125; from &quot;@rollup&#x2F;pluginutils&quot;;\nimport &#123; extname, resolve, basename, relative, normalize, sep &#125; from &quot;path&quot;;\nimport fs from &quot;fs&quot;;\nimport svgToMiniDataURI from &quot;mini-svg-data-uri&quot;;\n\nconst defaults &#x3D; &#123;\n  fileSize: 1024 * 4,\n  target: &quot;.&#x2F;dist&quot;,\n  include: null,\n  exclude: null,\n&#125;;\n\nconst mimeTypes &#x3D; &#123;\n  &quot;.png&quot;: &quot;image&#x2F;png&quot;,\n  &quot;.jpg&quot;: &quot;image&#x2F;jpeg&quot;,\n  &quot;.jpeg&quot;: &quot;image&#x2F;jpeg&quot;,\n  &quot;.gif&quot;: &quot;image&#x2F;gif&quot;,\n  &quot;.svg&quot;: &quot;image&#x2F;svg+xml&quot;,\n  &quot;.ico&quot;: &quot;image&#x2F;x-icon&quot;,\n  &quot;.webp&quot;: &quot;image&#x2F;webp&quot;,\n  &quot;.avif&quot;: &quot;image&#x2F;avif&quot;,\n&#125;;\n\nconst getDataUri &#x3D; (&#123; format, isSvg, mime, source &#125;) &#x3D;&gt;\n  isSvg ? svgToMiniDataURI(source) : &#96;data:$&#123;mime&#125;;$&#123;format&#125;,$&#123;source&#125;&#96;;\n\nconst ensureDirExists &#x3D; async (dirPath) &#x3D;&gt; &#123;\n  try &#123;\n    await fs.promises.access(dirPath);\n    return true;\n  &#125; catch (err) &#123;\n    &#x2F;&#x2F; 文件夹不存在就创建文件夹\n    try &#123;\n      await fs.promises.mkdir(dirPath, &#123; recursive: true &#125;);\n      return true;\n    &#125; catch (err) &#123;\n      console.error(err);\n      return false;\n    &#125;\n  &#125;\n&#125;;\n\nexport default function myImage(opts &#x3D; &#123;&#125;) &#123;\n  const options &#x3D; Object.assign(&#123;&#125;, defaults, opts);\n  const filter &#x3D; createFilter(options.include, options.exclude);\n  return &#123;\n    name: &quot;my-image&quot;,\n    async transform(code, id) &#123;\n      if (!filter(id)) return null;\n\n      &#x2F;&#x2F; 获取后缀\n      const ext &#x3D; extname(id);\n      &#x2F;&#x2F; 判断是否是图片\n      if (!mimeTypes.hasOwnProperty(ext)) &#123;\n        return null;\n      &#125;\n\n      &#x2F;&#x2F; 获取图片的mime类型\n      const mime &#x3D; mimeTypes[ext];\n      &#x2F;&#x2F; 判断是否svg\n      const isSvg &#x3D; mime &#x3D;&#x3D;&#x3D; mimeTypes[&quot;.svg&quot;];\n      &#x2F;&#x2F; 图片format格式\n      const format &#x3D; isSvg ? &quot;utf-8&quot; : &quot;base64&quot;;\n\n      &#x2F;&#x2F; 目标路径\n      const assetsPath &#x3D; resolve(process.cwd(), options.target);\n      console.log(&quot;---&quot;, process.cwd());\n      console.log(&quot;---&quot;, options.target);\n      console.log(&quot;---&quot;, assetsPath);\n\n      &#x2F;&#x2F;获取文件名\n      const fileName &#x3D; basename(id);\n      &#x2F;&#x2F; 最终文件路径\n      const filePath &#x3D; resolve(assetsPath, fileName);\n      console.log(&quot;&#x3D;&#x3D;&#x3D;&quot;, filePath);\n\n      let relativePath &#x3D; normalize(relative(process.cwd(), filePath));\n      relativePath &#x3D; relativePath.substring(relativePath.indexOf(sep) + 1);\n\n      console.log(relativePath);\n\n      try &#123;\n        &#x2F;&#x2F; 如果图片文件过大，就应该直接拷贝文件，返回文件路径\n        &#x2F;&#x2F; 读取图片文件大小与设置的大小进行比较\n        const stat &#x3D; await fs.promises.stat(id);\n        if (stat.size &gt; options.fileSize) &#123;\n          &#x2F;&#x2F; 文件的拷贝，以及对象的返回\n          &#x2F;&#x2F; 文件拷贝，无非就是文件源路径，目标路径\n          &#x2F;&#x2F;copyFile 拷贝文件地址的文件夹必须存在\n          &#x2F;&#x2F; 如果文件夹不存在，那么就创建文件夹\n          const dirExists &#x3D; await ensureDirExists(assetsPath);\n          dirExists &amp;&amp; (await fs.promises.copyFile(id, filePath));\n          return &#123;\n            code: dataToEsm(relativePath), &#x2F;&#x2F;返回拷贝之后处理的路径\n            map: &#123; mappings: &quot;&quot; &#125;,\n          &#125;;\n        &#125; else &#123;\n          &#x2F;&#x2F; 否则转换为base64格式\n          &#x2F;&#x2F; 读取文件\n          const source &#x3D; await fs.promises.readFile(id, format);\n\n          return &#123;\n            code: dataToEsm(getDataUri(&#123; format, isSvg, mime, source &#125;)),\n            map: &#123; mappings: &quot;&quot; &#125;,\n          &#125;;\n        &#125;\n      &#125; catch (err) &#123;\n        const message &#x3D; &quot;图片转换失败:&quot; + id;\n        this.error(&#123; message, id, cause: err &#125;);\n        return null;\n      &#125;\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<h3 id=\"输出钩子执行顺序\"><a href=\"#输出钩子执行顺序\" class=\"headerlink\" title=\"输出钩子执行顺序\"></a>输出钩子执行顺序</h3><p><img src=\"/images/rollup/3.png\" alt=\"img\"></p>\n<ol start=\"0\">\n<li>执行所有插件的 <code>outputOptions</code> 钩子函数，对 <code>output</code> 配置进行转换</li>\n<li>执行 <code>renderStart</code>，该钩子读取所有 outputOptions 钩子的转换之后的输出选项</li>\n<li>扫描 <code>动态import</code> 语句执行 <code>renderDynamicImport</code> 钩子，让开发者能自定义<code>动态import</code>的内容与行为</li>\n<li>并发执行所有插件的 <code>banner、footer、intro、outro</code> 钩子，这四个钩子功能简单，就是往打包产物的固定位置(比如头部和尾部)插入一些自定义的内容，比如版本号、作者、内容、项目介绍等等</li>\n<li>是否存在 <code>import.meta</code> 语句，没有就直接进入下一步，否则：对于<code>import.meta.url</code>调用 <code>resolveFileUrl</code> 来自定义 url 解析逻辑。对于<code>import.meta</code>调用 <code>resolveImportMeta</code> 来进行自定义元信息解析</li>\n<li>生成 chunk 调用<code>renderChunk</code>钩子，便于在该钩子中进行自定义操作。如果生成的 chunk 文件有 hash 值，执行 <code>augmentChunkHash</code> 钩子，来决定是否更改 <code>chunk</code> 的哈希值。</li>\n<li>调用 <code>generateBundle</code> 钩子，这个钩子的入参里面会包含所有的打包产物信息，包括 <code>chunk</code> (打包后的代码)、<code>asset</code>(最终的静态资源文件)。在这个钩子中你做自定义自己的操作，比如：可以在这里删除一些 <code>chunk</code> 或者 <code>asset</code>，最终被删除的内容将不会作为产物输出</li>\n<li>上节课讲解的 javascript api—<code>rollup.rollup</code>方法会返回一个<code>bundle</code>对象，<code>bundle</code>对象的 write 方法，会触发<code>writeBundle</code>钩子，传入所有的打包产物信息，包括 <code>chunk</code> 和 <code>asset</code>，与<code>generateBundle</code>钩子非常相似。唯一的区别是<code>writeBundle</code>钩子执行的时候，产物已经输出了。而 <code>generateBundle</code> 执行的时候产物还并没有输出。简单来说，顺序是：<code>generateBundle---&gt;输出并保存产物到磁盘---&gt;writeBundle</code></li>\n<li>当<code>bundle</code>的<code>close</code>方法被调用时，会触发<code>closeBundle</code>钩子，这个 output 阶段结束</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default function myExample2() &#123;\n  return &#123;\n    name: &quot;my-example2&quot;,\n    outputOptions(options) &#123;\n      console.log(&quot;🎉 ~ options:&quot;, options);\n    &#125;,\n    renderStart(options) &#123;\n      console.log(&quot;✨ ~ renderStart:&quot;, options);\n    &#125;,\n    renderDynamicImport(options) &#123;\n      console.log(&quot;✨~ renderDynamicImport:&quot;, options);\n    &#125;,\n    banner(chunk) &#123;\n      console.log(&quot;🔥 ~ banner(chunk):&quot;, chunk);\n      return &quot;&quot;;\n    &#125;,\n    renderChunk(source) &#123;\n      console.log(&quot;🚀 ~ source:&quot;, source);\n      return null;\n    &#125;,\n    augmentChunkHash(chunk) &#123;\n      console.log(&quot;🎉 ~ augmentChunkHash:&quot;, chunk);\n    &#125;,\n    generateBundle(options, bundle) &#123;\n      console.log(&quot;🌈 ~ options:&quot;, options);\n      console.log(&quot;🌈 ~ bundle:&quot;, bundle);\n      Object.keys(bundle).forEach((key) &#x3D;&gt; &#123;\n        if (key.includes(&quot;sum&quot;)) &#123;\n          &#x2F;&#x2F;删除对象中的这个键值对\n          delete bundle[key];\n        &#125;\n      &#125;);\n    &#125;,\n    closeBundle() &#123;\n      console.log(&quot;😁 ~ closeBundle&quot;);\n    &#125;,\n  &#125;;\n&#125;</code></pre>\n\n<h4 id=\"打包大小和时间示例：\"><a href=\"#打包大小和时间示例：\" class=\"headerlink\" title=\"打包大小和时间示例：\"></a>打包大小和时间示例：</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default function bundleStats() &#123;\n let startTime;\n return &#123;\n  name: &#39;bundle-stats&#39;,\n  options() &#123;\n   startTime &#x3D; Date.now();\n   &#125;,\n  generateBundle(_, bundle) &#123;\n   const fileSizes &#x3D; &#123;&#125;;\n​\n   for (const [fileName, output] of Object.entries(bundle)) &#123;\n    if (output.type &#x3D;&#x3D;&#x3D; &#39;chunk&#39;) &#123;\n     const content &#x3D; output.code;\n     const size &#x3D; Buffer.byteLength(content, &#39;utf8&#39;);\n     const sizeInKB &#x3D; (size &#x2F; 1024).toFixed(2);\n​\n     fileSizes[fileName] &#x3D; &#96;$&#123;sizeInKB&#125; KB&#96;;\n     &#125;\n    &#125;\n   console.log(&#39;Bundle Stats:&#39;);\n   console.log(&#39;-------------&#39;);\n   console.log(&#39;File Sizes:&#39;);\n   console.log(fileSizes);\n   console.log(&#39;-------------&#39;);\n   &#125;,\n  closeBundle() &#123;\n   const totalTime &#x3D; Date.now() - startTime;\n   console.log(&#96;Total Bundle Time: $&#123;totalTime&#125; ms&#96;);\n   console.log(&#39;-------------&#39;);\n   &#125;\n  &#125;;\n&#125;</code></pre>\n\n<h4 id=\"代码压缩\"><a href=\"#代码压缩\" class=\"headerlink\" title=\"代码压缩\"></a>代码压缩</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; minify &#125; from &#39;uglify-js&#39;;\n​\nexport default function uglifyPlugin() &#123;\n return &#123;\n  name: &#39;uglify&#39;,\n​\n  renderChunk(code) &#123;\n   const result &#x3D; minify(code);\n   if (result.error) &#123;\n    throw new Error(&#96;minify error: $&#123;result.error&#125;&#96;);\n    &#125;\n   return &#123;\n    code: result.code,\n    map: &#123; mappings: &#39;&#39; &#125;\n    &#125;;\n   &#125;,\n  &#125;;\n&#125;</code></pre>\n","feature":true,"text":"rollup前端工程化历程 除屑优化(tree shaking)除了可以使用 ES 模块之外，Rollup 还可以静态分析你导入的代码，并将排除任何实际上没有使用的内容，从上面的引入和最后的打包结果就可以看到，没有使用到的内容直接被删除了。 注意，除屑优化的核心思想是在编译阶段通...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"Academic","slug":"Academic","count":2,"path":"api/categories/Academic.json"}],"tags":[{"name":"rollup","slug":"rollup","count":1,"path":"api/tags/rollup.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#rollup\"><span class=\"toc-text\">rollup</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%8E%86%E7%A8%8B\"><span class=\"toc-text\">前端工程化历程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%A4%E5%B1%91%E4%BC%98%E5%8C%96-tree-shaking\"><span class=\"toc-text\">除屑优化(tree shaking)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E-webpack-%E6%89%93%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与 webpack 打包的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">常用配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%BA%A7%E7%89%A9%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">多产物配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%85%A5%E5%8F%A3%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">多入口配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%E4%B8%8E%E9%BB%98%E8%AE%A4%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2\"><span class=\"toc-text\">动态导入与默认代码分割</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">使用插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rollup-x2F-plugin-node-resolve\"><span class=\"toc-text\">@rollup&#x2F;plugin-node-resolve</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#output-manualChunks\"><span class=\"toc-text\">output.manualChunks</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rollup-x2F-plugin-commonjs\"><span class=\"toc-text\">@rollup&#x2F;plugin-commonjs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rollup-x2F-plugin-babel\"><span class=\"toc-text\">@rollup&#x2F;plugin-babel</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E5%A4%96%E8%AF%9D%EF%BC%9A-babel-x2F-runtime\"><span class=\"toc-text\">题外话：@babel&#x2F;runtime</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rollup-x2F-plugin-typescript\"><span class=\"toc-text\">@rollup&#x2F;plugin-typescript</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA-react-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">构建 react 应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#node-modules\"><span class=\"toc-text\">node_modules</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tsconfig-json\"><span class=\"toc-text\">tsconfig.json</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#babelrc-json\"><span class=\"toc-text\">.babelrc.json</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#rollup-config-ts\"><span class=\"toc-text\">rollup.config.ts</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#npm-%E5%8F%91%E5%8C%85\"><span class=\"toc-text\">npm 发包</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#npm-%E5%8F%91%E5%B8%83\"><span class=\"toc-text\">npm 发布</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#node-modules-1\"><span class=\"toc-text\">node_modules</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#tsconfig-json-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">tsconfig.json 文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95-link-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">本地调试 link 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E5%88%B0-npm\"><span class=\"toc-text\">发布到 npm</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-API\"><span class=\"toc-text\">JavaScript API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E5%A4%A7%E6%9E%84%E5%BB%BA%E5%B7%A5%E4%BD%9C%E6%B5%81\"><span class=\"toc-text\">两大构建工作流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81build\"><span class=\"toc-text\">1、build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81output\"><span class=\"toc-text\">2、output</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">插件机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Rollup-%E6%8F%92%E4%BB%B6%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">Rollup 插件概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">约定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">属性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">钩子函数的特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">钩子函数的调用时机</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">钩子函数的执行方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">钩子函数也可以是对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E9%92%A9%E5%AD%90%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">构建钩子执行顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E8%99%9A%E6%8B%9F%E6%A8%A1%E5%9D%97%E6%8F%92%E4%BB%B6%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">调用虚拟模块插件示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSON-%E6%8F%92%E4%BB%B6%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">JSON 插件示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">插件上下文</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">图片读取</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E9%92%A9%E5%AD%90%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">输出钩子执行顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%92%8C%E6%97%B6%E9%97%B4%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">打包大小和时间示例：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">代码压缩</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"React-Principle","uid":"6f35d21607cc4ac40e0305fd85e2df31","slug":"React-Principle","date":"2024-11-23T16:50:47.000Z","updated":"2024-11-30T04:09:53.429Z","comments":true,"path":"api/articles/React-Principle.json","keywords":null,"cover":null,"text":"React-Principle此文章旨在于剖析 React 的一些基本原理，帮助读者更好地理解 React 的工作原理。并写出属于自己的 React 代码。 前置任务搭建目录以及配置一些工具First of all！ ├── packages| ├── react| | ├── ...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"React","slug":"React","count":1,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":2,"path":"api/tags/React.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}