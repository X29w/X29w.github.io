{"title":"Pinia","uid":"6a13b89bc1d9db16e3bd75ad19728f7b","slug":"pinia","date":"2023-03-21T15:21:53.000Z","updated":"2023-03-21T15:25:18.809Z","comments":true,"path":"api/articles/pinia.json","keywords":null,"cover":"https://pinia.vuejs.org/social.png","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>但 Pinia 适用于 <em>Vue 2</em> 和 <em>Vue 3</em> ，并且不需要您使用组合 API。</p>\n<h3 id=\"Benefit\"><a href=\"#Benefit\" class=\"headerlink\" title=\"Benefit\"></a>Benefit</h3><ul>\n<li>开发工具支持<ul>\n<li>跟踪操作、突变的时间表</li>\n<li>商店出现在使用它们的组件中</li>\n<li>时间旅行和更容易的调试</li>\n</ul>\n</li>\n<li>热模块更换<ul>\n<li>无需重新加载页面即可修改您的商店</li>\n<li>在开发时保持任何现有状态</li>\n</ul>\n</li>\n<li>为 JS 用户提供适当的 <code>TypeScript</code> 支持或自动补全</li>\n<li>服务器端渲染支持</li>\n</ul>\n<h3 id=\"与-VueX-≤-4-对比\"><a href=\"#与-VueX-≤-4-对比\" class=\"headerlink\" title=\"与 VueX ≤ 4 对比\"></a>与 VueX ≤ 4 对比</h3><ul>\n<li><code>Mutation</code>不再存在。他们经常被认为非常冗长。他们最初带来了 devtools 集成，但这不再是问题。</li>\n<li>无需创建自定义的复杂包装器来支持<code>TypeScript</code>，所有内容都是类型化的，并且 API 的设计方式尽可能地利用 TS 类型推断。</li>\n<li>不再需要注入、导入函数、调用它们，享受自动补全！</li>\n<li>无需动态添加<code>store</code>，默认情况下它们都是动态的</li>\n<li>不再有模块的嵌套结构。您仍然可以通过在另一个<code>store</code>中导入和使用<code>store</code>来隐式嵌套<code>store</code></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">yarn add pinia\n&#x2F;&#x2F; or with npm\nnpm install pinia</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果使用的是<em>Vue2</em>，但还是想用 pinia，就要<br><code>npm install @vue/composition-api</code></p></blockquote>\n<h2 id=\"项目引入\"><a href=\"#项目引入\" class=\"headerlink\" title=\"项目引入\"></a>项目引入</h2><h3 id=\"Vue2\"><a href=\"#Vue2\" class=\"headerlink\" title=\"Vue2\"></a>Vue2</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">import &#123; createPinia, PiniaVuePlugin &#125; from &#39;pinia&#39;\n\nVue.use(PiniaVuePlugin)\nconst pinia &#x3D; createPinia()\n\nnew Vue(&#123;\n  el: &#39;#app&#39;,\n  &#x2F;&#x2F; other options...\n  &#x2F;&#x2F; ...\n  &#x2F;&#x2F; note the same &#96;pinia&#96; instance can be used across multiple Vue apps on\n  &#x2F;&#x2F; the same page\n  pinia,\n&#125;)</code></pre>\n\n<h3 id=\"Vue3\"><a href=\"#Vue3\" class=\"headerlink\" title=\"Vue3\"></a>Vue3</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">import &#123; createPinia &#125; from &#39;pinia&#39;\n\napp.use(createPinia())</code></pre>\n\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><p>Pinia 中的 Store 是一个保存状态和业务逻辑的实体，它不绑定到你的组件树。<br>换句话说，它承载全局 state。它有点像一个始终存在的组件，每个人都可以读取和写入。<br>它有三个概念，<em>state</em>, <em>getters</em> and <em>actions</em><br>可以看作为<em>Vue2</em>中的<code>data()&#123;return&#123;&#125;&#125;</code>、<code>Computed()</code>、<code>Methods</code>相对应</p>\n<h2 id=\"具体实例运用\"><a href=\"#具体实例运用\" class=\"headerlink\" title=\"具体实例运用\"></a>具体实例运用</h2><p><strong>在 Store&#x2F;index.js 中</strong></p>\n<details class=\"custom-details\">\n<summary>具体写法代码</summary>\n<p><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">import &#123; defineStore &#125; from &#39;pinia&#39;\n\n&#x2F;*  useStore could be anything like useUser, useCart\n [以use开头命名接收【defineStore】的返回值的变量] *&#x2F;\n&#x2F;* the first argument is a unique id of the store across your application\n[【defineStore】函数中需要放入的第一个参数必须是唯一的名字在当前的所有项目中，起到了一个ID的作用] *&#x2F;\nexport const useStore &#x3D; defineStore(&#39;main&#39;, &#123;\n&#x2F;* 第一种：以options的方式使用 *&#x2F;\n    &#x2F;&#x2F;推荐箭头函数的形式，有利于TypeScript推断变量类型\n      state:() &#x3D;&gt;&#123;\n        return&#123;\n            age:30\n        &#125;\n    &#125;,\n    getters:&#123;\n        ageComputed(state)&#123;\n            return state.age + 5\n        &#125;\n    &#125;,\n    actions:&#123;\n        ageMethod()&#123;\n            this.age +&#x3D; 5\n        &#125;\n    &#125;\n&#125;)\n&#x2F;* 第一种：以options的方式使用 *&#x2F;\n\n&#x2F;* 第二种：以setup()&#123;&#125;的方式使用 *&#x2F;\nexport const useConterStore &#x3D; defineStore(&#39;countStore&#39;,()&#x3D;&gt;&#123;\n    const counter &#x3D; ref(30)\n    const getterCounter &#x3D; computed(()&#x3D;&gt;&#123;\n        return counter.value + 5\n    &#125;)\n    const addCounter &#x3D; () &#x3D;&gt;&#123;\n        counter.value +&#x3D; 5\n    &#125;\n    return&#123;\n        counter,\n        getterCounter,\n        addCounter\n    &#125;\n&#125;)\n&#x2F;* 第二种：以setup()&#123;&#125;的方式使用 *&#x2F;</code></pre>\n</p>\n</details>\n<ul>\n<li>可以根据需要定义任意数量的商店，并且您应该在不同的文件中定义每个商店以充分利用 pinia</li>\n<li>一旦商店被实例化，你可以访问定义的任何财产<code>state</code>，<code>getters</code>以及<code>actions</code>直接在店里。</li>\n<li>直接解构赋值是不被允许的需要借助<code>storeToRefs()</code></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了保证结构之后仍具有响应式数据的特点需要用到<code>storeToRefs()</code></p></blockquote>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script setup&gt;\n  import &#123; storeToRefs &#125; from &#39;pinia&#39;;\n  import &#123; useStore &#125; from &#39;&#x2F;Stroes&#x2F;index.js&#39;\n\n  const store &#x3D; useStore();\n  const &#123; name, doubleCount &#125; &#x3D; storeToRefs(store);\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>state是store的核心部分<br>在 Pinia 中，state被定义为返回初始状态的函数。<br>这样Pinia 在服务器端和客户端都工作。<br>使用箭头函数返回状态 更好的有利于<code>TypeScript</code>进行 类型推断</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">import &#123; defineStore &#125; from &#39;pinia&#39;\n\nconst useStore &#x3D; defineStore(&#39;storeId&#39;, &#123;\n  &#x2F;&#x2F; arrow function recommended for full type inference\n  state: () &#x3D;&gt; &#123;\n    return &#123;\n      &#x2F;&#x2F; all these properties will have their type inferred automatically\n      counter: 0,\n      name: &#39;Eduardo&#39;,\n      isAdmin: true,\n    &#125;\n  &#125;,\n&#125;)</code></pre>\n\n<h3 id=\"访问State\"><a href=\"#访问State\" class=\"headerlink\" title=\"访问State\"></a>访问State</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>[setup]</span></div><code class=\"language-javascript\">import &#123; useUserStore &#125; from &#39;@&#x2F;stores&#x2F;user&#39;\nimport &#123; computed &#125; from &#39;vue&#39;\nimport &#123; storeToRefs &#125; from &#39;pinia&#39;\n&#x2F;&#x2F; 方式1,计算属性方式\nconst userid &#x3D; computed(() &#x3D;&gt; useUserStore().userid)\n&#x2F;&#x2F; 方式2, 通过user.userid的方式使用\nconst user &#x3D; useUserStore()\n&#x2F;&#x2F; 方式3, 使用toRef获取userid\nconst userid &#x3D; toRef(useUserStore(), &#39;userid&#39;)\n&#x2F;&#x2F; 方式4, 借助pinia提供的api: storeToRefs 实现\nconst &#123; userid &#125; &#x3D; storeToRefs(useUserStore())\n</code></pre>\n\n<h3 id=\"重置状态\"><a href=\"#重置状态\" class=\"headerlink\" title=\"重置状态\"></a>重置状态</h3><p>通过调用store 上的方法将状态重置为其初始值$reset()：</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">const store &#x3D; useStore()\n\nstore.$reset()</code></pre>\n\n<h3 id=\"修改状态\"><a href=\"#修改状态\" class=\"headerlink\" title=\"修改状态\"></a>修改状态</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>[setup]</span></div><code class=\"language-javascript\">import &#123; useUserStore &#125; from &#39;@&#x2F;stores&#x2F;user&#39;\n\nconst user &#x3D; useUserStore()\n&#x2F;&#x2F; 方式1: 直接修改,vuex不允许这种方式(需要提交mutation),但pinia是允许的\nuser.userid &#x3D; &#39;xxx&#39;\n&#x2F;&#x2F; 方式2: \nuser.$patch(&#123;userid: &#39;xxx&#39;&#125;)\n&#x2F;&#x2F; 方式3: \nuser.$patch((state) &#x3D;&gt; &#123; state.userid &#x3D; &#39;xxx&#39; &#125;)\n&#x2F;&#x2F; 方式4:\nuser.$state &#x3D; &#123; userid:&#39;xxx&#39; &#125;\n&#x2F;&#x2F; 方式5: 使用actions\nuser.setUserId(&#39;xxx&#39;)</code></pre>\n\n<h2 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h2><ul>\n<li>像getters ，actions行动可以访问到整个存储实例 通过this与全类型（和自动完成✨）的支持。</li>\n<li>与它们不同，actions可以是异步的，您可以await在它们内部进行任何 API 调用甚至其他操作！</li>\n</ul>\n<h3 id=\"访问其他store中的acttion\"><a href=\"#访问其他store中的acttion\" class=\"headerlink\" title=\"访问其他store中的acttion\"></a>访问其他store中的acttion</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; useAuthStore &#125; from &#39;.&#x2F;auth-store&#39;\n\nexport const useSettingsStore &#x3D; defineStore(&#39;settings&#39;, &#123;\n  state: () &#x3D;&gt; (&#123;\n    &#x2F;&#x2F; ...\n  &#125;),\n  actions: &#123;\n    async fetchUserPreferences(preferences) &#123;\n      const auth &#x3D; useAuthStore()\n      if (auth.isAuthenticated) &#123;\n        this.preferences &#x3D; await fetchPreferences()\n      &#125; else &#123;\n        throw new Error(&#39;User must be authenticated&#39;)\n      &#125;\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n\n<h2 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h2><ul>\n<li>接收 “state” 作为第一个参数 <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">state: () &#x3D;&gt; (&#123;\n  userid: localStorage.getItem(&#39;userid&#39;) || &#39;&#39;,\n  counter: 0\n&#125;),\ngetters: &#123;\n  doubleCount: (state) &#x3D;&gt; state.counter * 2,\n&#125;,</code></pre></li>\n</ul>\n<h3 id=\"常规函数使用this的注意事项\"><a href=\"#常规函数使用this的注意事项\" class=\"headerlink\" title=\"常规函数使用this的注意事项\"></a>常规函数使用this的注意事项</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>定义常规函数时可以通过 this 访问到 整个 store 的实例, 但是需要定义返回类型（在 TypeScript 中）。 这是由于 TypeScript 中的一个已知限制，并且不会影响使用箭头函数定义的 getter，也不会影响不使用 this 的 getter： </p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const useStore &#x3D; defineStore(&#39;main&#39;, &#123;\n  state: () &#x3D;&gt; (&#123;\n    counter: 0,\n  &#125;),\n  getters: &#123;\n    &#x2F;&#x2F; 自动将返回类型推断为数字\n    doubleCount(state) &#123;\n      return state.counter * 2\n    &#125;,\n    &#x2F;&#x2F; 返回类型必须明确设置\n    doublePlusOne() &#123;\n      &#x2F;&#x2F; 调用其他getter: \n      return this.doubleCount + 1\n      &#x2F;&#x2F; 等同于:\n      return this.counter * 2 + 1\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n\n<h3 id=\"接收参数传递-不常用\"><a href=\"#接收参数传递-不常用\" class=\"headerlink\" title=\"接收参数传递(不常用)\"></a>接收参数传递(不常用)</h3><ul>\n<li>Getters 只是幕后的 computed 属性，因此无法向它们传递任何参数。 但是，您可以从 getter 返回一个函数以接受任何参数： </li>\n<li>这种操作getter不再缓存，只相当于在调用函数(从store 的解构中可以看出)<br>:::details Example<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const useStore &#x3D; defineStore(&#39;main&#39;, &#123;\n  getters: &#123;\n    getUserById: (state) &#x3D;&gt; &#123;\n      return (userId) &#x3D;&gt; state.users.find((user) &#x3D;&gt; user.id &#x3D;&#x3D;&#x3D; userId)\n    &#125;,\n  &#125;,\n&#125;)</code></pre></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>组件中</span></div><code class=\"language-javascript\">&#x2F;&#x2F; store\ngetters: &#123;\n  doubleCount: (state) &#x3D;&gt; state.counter * 2,\n  doublePlusOne(): number &#123;\n    &#x2F;&#x2F; 等同于调用其他getter: return this.doubleCount + 1\n    return this.counter * 2 + 1\n  &#125;,\n  payloadCount() &#123;\n    return (payload) &#x3D;&gt; this.doublePlusOne + payload\n  &#125;\n&#125;,\n\n&#x2F;&#x2F; 组件\nconst &#123; userid, payloadCount &#125; &#x3D; storeToRefs(user)</code></pre>\n<p>:::</p>\n<h2 id=\"Store中的其他API\"><a href=\"#Store中的其他API\" class=\"headerlink\" title=\"Store中的其他API\"></a>Store中的其他API</h2><h3 id=\"reset-重置状态\"><a href=\"#reset-重置状态\" class=\"headerlink\" title=\"$reset 重置状态\"></a>$reset 重置状态</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">store.$reset()\n&#x2F;&#x2F; PS: Setup 方式的 Store 不支持 $reset</code></pre>\n\n<h3 id=\"state-访问-store-状态\"><a href=\"#state-访问-store-状态\" class=\"headerlink\" title=\"$state 访问 store 状态\"></a>$state 访问 store 状态</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">conosle.log(store.$state)\n\nstore.$state &#x3D; &#123; counter: 666, name: &#39;Paimon&#39; &#125;</code></pre>\n<h3 id=\"onAction-监听-action-触发\"><a href=\"#onAction-监听-action-触发\" class=\"headerlink\" title=\"$onAction 监听 action 触发\"></a>$onAction 监听 action 触发</h3><details class=\"custom-details\">\n<summary>Example</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const unsubscribe &#x3D; someStore.$onAction(\n  (&#123;\n    name, &#x2F;&#x2F; action 名称\n    store, &#x2F;&#x2F; store 实例，类似 &#96;someStore&#96;\n    args, &#x2F;&#x2F; 传递给 action 的参数数组\n    after, &#x2F;&#x2F; 在 action 返回或解决后的钩子\n    onError, &#x2F;&#x2F; action 抛出或拒绝的钩子\n  &#125;) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 为这个特定的 action 调用提供一个共享变量\n    const startTime &#x3D; Date.now()\n    &#x2F;&#x2F; 这将在执行 &quot;store &quot;的 action 之前触发。\n    console.log(&#96;Start &quot;$&#123;name&#125;&quot; with params [$&#123;args.join(&#39;, &#39;)&#125;].&#96;)\n\n    &#x2F;&#x2F; 这将在 action 成功并完全运行后触发。\n    &#x2F;&#x2F; 它等待着任何返回的 promise\n    after((result) &#x3D;&gt; &#123;\n      console.log(\n        &#96;Finished &quot;$&#123;name&#125;&quot; after $&#123;\n          Date.now() - startTime\n        &#125;ms.\\nResult: $&#123;result&#125;.&#96;\n      )\n    &#125;)\n\n    &#x2F;&#x2F; 如果 action 抛出或返回一个拒绝的 promise，这将触发\n    onError((error) &#x3D;&gt; &#123;\n      console.warn(\n        &#96;Failed &quot;$&#123;name&#125;&quot; after $&#123;Date.now() - startTime&#125;ms.\\nError: $&#123;error&#125;.&#96;\n      )\n    &#125;)\n  &#125;\n)\n\n&#x2F;&#x2F; 手动删除监听器\nunsubscribe()</code></pre>\n</p>\n</details>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>由于有了底层 API 的支持，Pinia store 现在完全支持扩展。以下是你可以扩展的内容：</p>\n<ul>\n<li>为 store 添加新的属性</li>\n<li>定义 store 时增加新的选项</li>\n<li>为 store 增加新的方法</li>\n<li>包装现有的方法</li>\n<li>改变甚至取消 action</li>\n<li>实现副作用，如本地存储</li>\n<li>仅应用插件于特定 store</li>\n</ul>\n<p>插件是通过 pinia.use() 添加到 pinia 实例的。最简单的例子是通过返回一个对象将一个静态属性添加到所有 store。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createPinia &#125; from &#39;pinia&#39;\n\n&#x2F;&#x2F; 在安装此插件后创建的每个 store 中都会添加一个名为 &#96;secret&#96; 的属性。\n&#x2F;&#x2F; 插件可以保存在不同的文件中\nfunction SecretPiniaPlugin() &#123;\n  return &#123; secret: &#39;the cake is a lie&#39; &#125;\n&#125;\n\nconst pinia &#x3D; createPinia()\n&#x2F;&#x2F; 将该插件交给 Pinia\npinia.use(SecretPiniaPlugin)\n\n&#x2F;&#x2F; 在另一个文件中\nconst store &#x3D; useStore()\nstore.secret &#x2F;&#x2F; &#39;the cake is a lie&#39;</code></pre>\n\n\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Pinia 插件是一个函数，可以选择性地返回要添加到 store 的属性。它接收一个可选参数，即 context。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export function myPiniaPlugin(context) &#123;\n  context.pinia &#x2F;&#x2F; 用 &#96;createPinia()&#96; 创建的 pinia。 \n  context.app &#x2F;&#x2F; 用 &#96;createApp()&#96; 创建的当前应用(仅 Vue 3)。\n  context.store &#x2F;&#x2F; 该插件想扩展的 store\n  context.options &#x2F;&#x2F; 定义传给 &#96;defineStore()&#96; 的 store 的可选对象。\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<p>然后用 pinia.use() 将这个函数传给 pinia：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">pinia.use(myPiniaPlugin)</code></pre>\n\n\n<h3 id=\"持久化存储\"><a href=\"#持久化存储\" class=\"headerlink\" title=\"持久化存储\"></a>持久化存储</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function persistenceStatePlugin(context) &#123;\n  const &#123; store &#125; &#x3D; context;\n  const storage &#x3D; localStorage.getItem(&quot;pinia&quot;)\n    ? JSON.parse(localStorage.getItem(&quot;pinia&quot;))\n    : null;\n  \n  if (storage) &#123;\n    store.$patch(storage[store.$id]);\n  &#125;\n\n  store.$subscribe((mutation, state) &#x3D;&gt; &#123;\n    const storage &#x3D; localStorage.getItem(&quot;pinia&quot;)\n      ? JSON.parse(localStorage.getItem(&quot;pinia&quot;))\n      : &#123;&#125;;\n    storage[store.$id] &#x3D; state;\n    localStorage.setItem(&quot;pinia&quot;, JSON.stringify(storage));\n  &#125;);\n&#125;</code></pre>\n\n","feature":true,"text":"介绍但 Pinia 适用于 Vue 2 和 Vue 3 ，并且不需要您使用组合 API。 Benefit 开发工具支持 跟踪操作、突变的时间表 商店出现在使用它们的组件中 时间旅行和更容易的调试 热模块更换 无需重新加载页面即可修改您的商店 在开发时保持任何现有状态 为 JS 用...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Benefit\"><span class=\"toc-text\">Benefit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-VueX-%E2%89%A4-4-%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">与 VueX ≤ 4 对比</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">项目引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue2\"><span class=\"toc-text\">Vue2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue3\"><span class=\"toc-text\">Vue3</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">核心概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B%E8%BF%90%E7%94%A8\"><span class=\"toc-text\">具体实例运用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#State\"><span class=\"toc-text\">State</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEState\"><span class=\"toc-text\">访问State</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%BD%AE%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">重置状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">修改状态</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Actions\"><span class=\"toc-text\">Actions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96store%E4%B8%AD%E7%9A%84acttion\"><span class=\"toc-text\">访问其他store中的acttion</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Getter\"><span class=\"toc-text\">Getter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8this%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">常规函数使用this的注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92-%E4%B8%8D%E5%B8%B8%E7%94%A8\"><span class=\"toc-text\">接收参数传递(不常用)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Store%E4%B8%AD%E7%9A%84%E5%85%B6%E4%BB%96API\"><span class=\"toc-text\">Store中的其他API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reset-%E9%87%8D%E7%BD%AE%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">$reset 重置状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#state-%E8%AE%BF%E9%97%AE-store-%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">$state 访问 store 状态</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#onAction-%E7%9B%91%E5%90%AC-action-%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">$onAction 监听 action 触发</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">持久化存储</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue-Router","uid":"21b9d275999a54f82cbd29d23f792608","slug":"vue-router","date":"2023-03-21T15:26:07.000Z","updated":"2023-03-21T15:32:11.913Z","comments":true,"path":"api/articles/vue-router.json","keywords":null,"cover":"https://storage.googleapis.com/vue-mastery.appspot.com/flamelink/media/Vue%203%20Vue%20Router.001.1598281020347.jpeg?GoogleAccessId=firebase-adminsdk-otdiq%40vue-mastery.iam.gserviceaccount.com&Expires=16725225600&Signature=Kds9Vo1%2FguD6uXUKVaIIMSix%2FoxEJ8uYcjm4zI3Dsum78NsD6F1S%2BfU7aORJqAYT0F1mJ%2B96qEL0HekOS8bUdbWY7d9d2%2BQd37Ee4KZZkwPhrL81l4jUSy6EeFgAegr%2BWsrNgdQTcQoFduRG4%2FGfUIshAJFU9jxPLmqaJgKL3bFqptbabDw9qYVKFY3N47rJl5GsZWqyZ4ZAJsznwmxxQOaAgK6%2BLkECzBIB%2BJkOamz9e02Cx4PusWzsMo5cJjamzkoHUYcC2nu6fAGuo0AqW%2BPAGtdHyohf9aQk8uf1U1WdKzhZSH%2FvRQpljRRnZ7DjwuEEEprVirj2Ra98ee6noA%3D%3D","text":"介绍 理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。 前端路由：key 是路径，value 是组件。 基本使用 安装 vue-router，命令：npm i vue-router 应用插件：Vue.use(V...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"},{"name":"Vue","slug":"tecnology/Vue","count":3,"path":"api/categories/tecnology/Vue.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"TypeScript","uid":"0aaa27c48e7b40c2bc96b31fb70803da","slug":"TypeScript","date":"2023-03-05T04:07:57.000Z","updated":"2023-03-05T04:10:15.314Z","comments":true,"path":"api/articles/TypeScript.json","keywords":null,"cover":"https://static.frontendmasters.com/resources/2017-09-15-typescript/thumb.jpg","text":"TS 简介 TypeScript 是 JavaScript 的超集。 它对 JS 进行了扩展，向 JS 中引入了类型的概念，并添加了许多新的特性。 TS 代码需要通过编译器编译为 JS，然后再交由 JS 解析器执行。 TS 完全兼容 JS，换言之，任何的 JS 代码都可以直接当成...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}