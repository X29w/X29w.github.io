{"title":"interview-mobx","uid":"4cdce0b942af62337249f099a631de6a","slug":"interview-mobx","date":"2024-06-04T06:32:54.000Z","updated":"2024-06-04T11:14:59.755Z","comments":true,"path":"api/articles/interview-mobx.json","keywords":null,"cover":null,"content":"<h1 id=\"Mobx\"><a href=\"#Mobx\" class=\"headerlink\" title=\"Mobx\"></a>Mobx</h1><h2 id=\"Mobx的原理是什么，为什么选择Mobx作为状态管理工具\"><a href=\"#Mobx的原理是什么，为什么选择Mobx作为状态管理工具\" class=\"headerlink\" title=\"Mobx的原理是什么，为什么选择Mobx作为状态管理工具\"></a>Mobx的原理是什么，为什么选择Mobx作为状态管理工具</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>MobX 6版本的核心原理仍然是基于其反应式编程模型，但在此版本中，一些实现细节和推荐的最佳实践有所变化。MobX的工作原理主要涉及以下几个关键点：</p>\n<ol>\n<li><p><strong>可观察状态（Observables）</strong>: MobX使用<code>makeObservable</code>方法或者在类构造函数中定义可观察属性，将普通JavaScript对象的属性转化为可观察的。这一转变允许MobX追踪这些属性的读取和修改。在MobX 4和5中，这是通过<code>Object.defineProperty</code>或在MobX 5中引入的<code>Proxy</code>来实现的，而在MobX 6中，这一基础机制保持不变，但推荐的实践是使用<code>makeObservable</code>而不是装饰器。</p>\n</li>\n<li><p><strong>自动追踪（Automatic Tracking）</strong>: 当访问或修改可观察状态时，MobX会自动追踪这些操作，并建立一个依赖关系图。这意味着它知道哪些计算值（Computed Values）和React组件依赖于哪些状态。</p>\n</li>\n<li><p><strong>计算值（Computed Values）</strong>: 计算值是基于可观察状态的衍生值，它们会在依赖的状态发生改变时自动重新计算。MobX会记住这些计算值的计算过程，并在下次访问时，如果依赖未变，则直接返回缓存的结果，从而提高效率。</p>\n</li>\n<li><p><strong>动作（Actions）</strong>: MobX鼓励通过<code>action</code>来修改状态。<code>action</code>是一个特殊的函数，它包裹状态修改的逻辑，确保这些改变是可预测的、可追踪的，并且可以在事务中执行。这有助于维护状态的一致性，并使得状态变更易于调试。</p>\n</li>\n<li><p><strong>响应式渲染（Reactive Rendering）</strong>: MobX与React等框架的集成（如通过<code>mobx-react</code>或直接使用<code>observer</code>）使得组件能够自动响应状态变化并重新渲染。当可观察状态变化时，MobX会通知相关组件，触发必要的重渲染，而无需手动比较props或state。</p>\n</li>\n<li><p><strong>优化和最小化重渲染</strong>: MobX通过其高效的依赖追踪系统，确保只有真正依赖于改变状态的组件才会被重渲染。这减少了不必要的计算和DOM操作，提高了应用性能。</p>\n</li>\n</ol>\n<p>尽管MobX 6推荐避免使用装饰器语法并引入了新的API，但其背后的原理——即通过自动追踪依赖、自动计算和自动更新UI——仍然保持一致，使得状态管理变得更加简单和高效。</p>\n<h3 id=\"MobX-6-版本的核心特点和更新\"><a href=\"#MobX-6-版本的核心特点和更新\" class=\"headerlink\" title=\"MobX 6 版本的核心特点和更新\"></a>MobX 6 版本的核心特点和更新</h3><p>MobX 6 引入了一些关键的变化和改进，使其成为一个更加现代化和高效的状态管理库。主要特点包括：</p>\n<ol>\n<li><p><strong>装饰器的非推荐使用</strong>：尽管装饰器语法在MobX早期版本中很流行，但在MobX 6中官方不再推荐使用装饰器，因为它们不是ES标准的一部分，且标准化过程缓慢。尽管如此，通过适当的配置（如使用Babel插件），仍然可以启用装饰器语法。</p>\n</li>\n<li><p><strong><code>makeObservable</code> 方法</strong>：为了替代装饰器，MobX 6 引入了 <code>makeObservable</code> 方法。在类的构造函数中调用此方法来定义哪些属性应该是可观察的、哪些是计算值、哪些是可自动运行的副作用等。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; observable, action, makeObservable &#125; from &#39;mobx&#39;;\n\nclass Counter &#123;\n  count &#x3D; 0;\n\n  constructor() &#123;\n    makeObservable(this, &#123;\n      count: observable,\n      increment: action,\n    &#125;);\n  &#125;\n\n  increment() &#123;\n    this.count++;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p><strong>更好的Tree-shaking和性能</strong>：MobX 6进行了优化，提高了Tree-shaking能力，这意味着在打包过程中未使用的代码会被更有效地剔除，从而减小最终应用的体积。此外，它还进行了性能优化，提升了运行时效率。</p>\n</li>\n<li><p><strong>更好的TypeScript支持</strong>：MobX 6增强了对TypeScript的支持，提供了更丰富的类型定义，帮助开发者在使用静态类型时获得更好的开发体验。</p>\n</li>\n<li><p><strong>新的API</strong>：除了 <code>makeObservable</code> 外，MobX 6 还引入了 <code>runInAction</code>、<code>flow</code> 等新API，以及对现有的API进行了调整，以更好地支持函数式编程风格和副作用管理。</p>\n</li>\n</ol>\n<h3 id=\"为什么选择-MobX-6-作为状态管理工具\"><a href=\"#为什么选择-MobX-6-作为状态管理工具\" class=\"headerlink\" title=\"为什么选择 MobX 6 作为状态管理工具\"></a>为什么选择 MobX 6 作为状态管理工具</h3><ol>\n<li><p><strong>简易性</strong>：MobX 以其声明式的风格和最少的样板代码而闻名，使得状态管理变得直观且易于理解。即使在不使用装饰器的情况下，通过 <code>makeObservable</code> 的方式也能保持代码简洁。</p>\n</li>\n<li><p><strong>高效性</strong>：自动追踪依赖和优化的变更检测机制保证了只有在状态真正变化时才触发必要的更新，这大大提高了应用的性能。</p>\n</li>\n<li><p><strong>灵活性</strong>：MobX 支持多种编程范式，无论是面向对象还是函数式编程，都能很好地适应，提供灵活的状态管理解决方案。</p>\n</li>\n<li><p><strong>集成性</strong>：MobX 与React等主流前端框架有着很好的集成，特别是通过 <code>mobx-react</code> 库，使得状态管理和组件更新无缝连接。</p>\n</li>\n<li><p><strong>学习曲线低</strong>：相对于Redux等其他状态管理库，MobX的学习曲线相对平缓，开发者可以快速上手并开始构建功能。</p>\n</li>\n</ol>\n<p>综上所述，MobX 6 以其简洁性、高效性和灵活性成为了很多开发者选择的状态管理工具，尤其适合那些希望快速迭代、保持代码可维护性并追求高性能的应用开发场景。</p>\n<h2 id=\"什么是MobX及其主要特点？\"><a href=\"#什么是MobX及其主要特点？\" class=\"headerlink\" title=\"什么是MobX及其主要特点？\"></a>什么是MobX及其主要特点？</h2><p>MobX是一个用于JavaScript应用程序的状态管理库，特别适合React和其他前端框架。它采用声明式的方法，让状态管理变得直观且易于理解。MobX的主要特点包括：</p>\n<ul>\n<li><strong>简单易用</strong>：通过自动跟踪依赖关系和自动优化，MobX几乎不需要手动管理状态的更新逻辑。</li>\n<li><strong>声明式</strong>：开发者只需声明状态、衍生值和更新逻辑，无需关注何时何地执行更新。</li>\n<li><strong>高性能</strong>：利用高效的反应式编程模型，仅在状态真正变化时触发最小化更新。</li>\n<li><strong>集成友好</strong>：与React等库深度集成，支持透明的性能优化和组件重渲染控制。</li>\n<li><strong>可扩展性</strong>：适用于从小型到大型应用的各种规模，易于测试和调试。</li>\n</ul>\n<h2 id=\"如何在MobX-6中创建一个可观察的状态（observable-state）\"><a href=\"#如何在MobX-6中创建一个可观察的状态（observable-state）\" class=\"headerlink\" title=\"如何在MobX 6中创建一个可观察的状态（observable state）\"></a>如何在MobX 6中创建一个可观察的状态（observable state）</h2><p>在MobX 6中，推荐避免使用装饰器语法，转而使用 <code>makeObservable</code> 函数来定义可观察状态。以下是一个示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; observable, makeObservable &#125; from &#39;mobx&#39;;\n\nclass Todo &#123;\n  id &#x3D; Math.random();\n  title &#x3D; &quot;&quot;;\n  completed &#x3D; false;\n\n  constructor() &#123;\n    makeObservable(this, &#123;\n      title: observable,\n      completed: observable,\n    &#125;);\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"MobX中的计算值（computed-values）是如何工作的？\"><a href=\"#MobX中的计算值（computed-values）是如何工作的？\" class=\"headerlink\" title=\"MobX中的计算值（computed values）是如何工作的？\"></a>MobX中的计算值（computed values）是如何工作的？</h2><p>计算值（Computed Values）是基于其他状态（包括其他计算值）派生的值，MobX会自动跟踪这些依赖关系，并在依赖项改变时重新计算它们。计算值是惰性的，只在被访问时计算，并且结果会被缓存直到依赖项变化。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; computed &#125; from &#39;mobx&#39;;\n\nclass TodoList &#123;\n  @observable todos &#x3D; []; &#x2F;&#x2F; 假设todos是一个可观察数组\n\n  get completedCount() &#123;\n    return computed(() &#x3D;&gt; &#123;\n      return this.todos.filter(todo &#x3D;&gt; todo.completed).length;\n    &#125;);\n  &#125;\n&#125;</code></pre>\n<p>注意：在MobX 6中，由于装饰器的非推荐使用，上面的代码应该改写为使用 <code>makeObservable</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; computed, makeObservable &#125; from &#39;mobx&#39;;\n\nclass TodoList &#123;\n  todos &#x3D; [];\n\n  constructor() &#123;\n    makeObservable(this, &#123;\n      todos: observable,\n      completedCount: computed,\n    &#125;);\n  &#125;\n\n  get completedCount() &#123;\n    return this.todos.filter(todo &#x3D;&gt; todo.completed).length;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"MobX中的action是什么？为什么在修改状态时推荐使用它？\"><a href=\"#MobX中的action是什么？为什么在修改状态时推荐使用它？\" class=\"headerlink\" title=\"MobX中的action是什么？为什么在修改状态时推荐使用它？\"></a>MobX中的<code>action</code>是什么？为什么在修改状态时推荐使用它？</h3><p><code>action</code>是MobX提供的一个用于修改状态的函数。它确保状态更改在一个原子操作中完成，可以被跟踪、记录、延迟执行或撤销。使用<code>action</code>修改状态，而非直接修改，有几个好处：</p>\n<ul>\n<li><strong>事务性</strong>：确保状态的多个更改作为一个不可分割的整体执行，防止中间状态被外部观察到。</li>\n<li><strong>可追踪性</strong>：便于调试，因为所有的状态改变都有迹可循。</li>\n<li><strong>可撤销和重做</strong>：配合MobX的额外工具，可以实现状态更改的历史管理。</li>\n<li><strong>兼容性</strong>：确保与其他MobX特性（如 reactions 和 computed values）正确交互。</li>\n</ul>\n<p>在MobX 6中，创建一个action如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; action &#125; from &#39;mobx&#39;;\n\nclass Todo &#123;\n  @observable title &#x3D; &quot;&quot;;\n\n  constructor() &#123;\n    makeObservable(this, &#123;\n      title: observable,\n      setTitle: action,\n    &#125;);\n  &#125;\n\n  setTitle(newTitle) &#123;\n    this.title &#x3D; newTitle;\n  &#125;\n&#125;</code></pre>\n<p>或在不使用装饰器的情况下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; observable, action &#125; from &#39;mobx&#39;;\n\nclass Todo &#123;\n  title &#x3D; &quot;&quot;;\n\n  constructor() &#123;\n    makeObservable(this, &#123;\n      title: observable,\n      setTitle: action.bound, &#x2F;&#x2F; 使用bound确保this被正确绑定\n    &#125;);\n  &#125;\n\n  setTitle(newTitle) &#123;\n    this.title &#x3D; newTitle;\n  &#125;\n&#125;</code></pre>\n<p>使用<code>action</code>确保状态修改遵循MobX的最佳实践，提高应用的稳定性和可维护性。</p>\n<p>当然，很高兴继续探讨MobX 6版本的更多细节。请问您具体想了解哪些方面的问题呢？如果您没有特定问题，我可以根据MobX 6的一些高级特性和最佳实践提出并解答一些示例问题。</p>\n<h2 id=\"MobX-6-中如何处理异步操作？\"><a href=\"#MobX-6-中如何处理异步操作？\" class=\"headerlink\" title=\"MobX 6 中如何处理异步操作？\"></a>MobX 6 中如何处理异步操作？</h2><p>在MobX 6中，处理异步操作推荐使用<code>async/await</code>结合<code>actions</code>和<code>flow</code>函数。<code>flow</code>是MobX提供的一个特殊的函数，用来创建可取消的、可追踪的异步流程。</p>\n<p><strong>示例回答</strong>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; flow, action &#125; from &#39;mobx&#39;;\n\nclass UserStore &#123;\n    @observable user &#x3D; null;\n\n    constructor() &#123;\n        makeObservable(this, &#123;\n            user: observable,\n            fetchUser: action,\n        &#125;);\n    &#125;\n\n    fetchUser &#x3D; flow(function* fetchUser(userId) &#123;\n        try &#123;\n            const response &#x3D; yield fetch(&#96;https:&#x2F;&#x2F;api.example.com&#x2F;users&#x2F;$&#123;userId&#125;&#96;);\n            const userData &#x3D; yield response.json();\n            this.user &#x3D; userData;\n        &#125; catch (error) &#123;\n            console.error(&quot;Error fetching user:&quot;, error);\n        &#125;\n    &#125;);\n&#125;</code></pre>\n\n<p>在这个例子中，<code>fetchUser</code>是一个由<code>flow</code>定义的异步action，它可以像普通函数一样被调用，但同时支持取消、重试等高级特性，并且它的执行会被MobX自动跟踪。</p>\n<h2 id=\"MobX-6-中如何实现状态的持久化？\"><a href=\"#MobX-6-中如何实现状态的持久化？\" class=\"headerlink\" title=\"MobX 6 中如何实现状态的持久化？\"></a>MobX 6 中如何实现状态的持久化？</h2><p>虽然MobX本身不直接提供状态持久化的功能，但你可以结合其他库（如<code>localstorage</code>或<code>mobx-persist</code>)来实现。</p>\n<p><strong>示例回答</strong>:</p>\n<p>使用<code>mobx-persist</code>库可以轻松地将MobX状态保存到本地存储中，实现状态持久化。</p>\n<p>首先安装<code>mobx-persist</code>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install mobx-persist --save</code></pre>\n\n<p>然后在你的应用中使用:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; persist &#125; from &#39;mobx-persist&#39;;\nimport &#123; observable, autorun &#125; from &#39;mobx&#39;;\n\nclass AppState &#123;\n    @persist(&#39;list&#39;) @observable todos &#x3D; [];\n\n    constructor() &#123;\n        makeObservable(this);\n        &#x2F;&#x2F; 从localStorage恢复状态\n        persist.recover(this);\n        \n        &#x2F;&#x2F; 自动保存状态到localStorage\n        autorun(() &#x3D;&gt; &#123;\n            persist.save(this);\n        &#125;);\n    &#125;\n&#125;</code></pre>\n\n<p>在这个例子中，<code>@persist(&#39;list&#39;)</code>装饰器告诉<code>mobx-persist</code>如何序列化和反序列化<code>todos</code>数组。</p>\n<h2 id=\"如何在React组件中使用MobX-6的状态？\"><a href=\"#如何在React组件中使用MobX-6的状态？\" class=\"headerlink\" title=\"如何在React组件中使用MobX 6的状态？\"></a>如何在React组件中使用MobX 6的状态？</h2><p>在React中使用MobX 6，通常会用到<code>observer</code>高阶组件和<code>useObserver</code>钩子来让组件响应MobX状态的变化。</p>\n<p><strong>示例回答</strong>:</p>\n<p>使用<code>observer</code>高阶组件:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React from &#39;react&#39;;\nimport &#123; observer &#125; from &#39;mobx-react-lite&#39;;\nimport &#123; TodoStore &#125; from &#39;.&#x2F;TodoStore&#39;;\n\nconst TodoListView &#x3D; observer(function TodoListView() &#123;\n    const store &#x3D; new TodoStore();\n\n    return (\n        &lt;div&gt;\n            &#123;store.todos.map(todo &#x3D;&gt; (\n                &lt;div key&#x3D;&#123;todo.id&#125;&gt;&#123;todo.title&#125;&lt;&#x2F;div&gt;\n            ))&#125;\n        &lt;&#x2F;div&gt;\n    );\n&#125;);</code></pre>\n\n<p>或使用<code>useObserver</code>钩子:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React from &#39;react&#39;;\nimport &#123; useObserver &#125; from &#39;mobx-react-lite&#39;;\nimport &#123; TodoStore &#125; from &#39;.&#x2F;TodoStore&#39;;\n\nfunction TodoListView() &#123;\n    const store &#x3D; new TodoStore();\n\n    return useObserver(() &#x3D;&gt; (\n        &lt;div&gt;\n            &#123;store.todos.map(todo &#x3D;&gt; (\n                &lt;div key&#x3D;&#123;todo.id&#125;&gt;&#123;todo.title&#125;&lt;&#x2F;div&gt;\n            ))&#125;\n        &lt;&#x2F;div&gt;\n    ));\n&#125;</code></pre>\n\n<p>通过上述方式，React组件会自动响应MobX状态的改变并重新渲染。</p>\n<p>当然，继续深入探讨MobX 6版本的其他方面：</p>\n<h2 id=\"MobX-6中如何进行状态的细粒度控制，比如只观察某个对象的特定属性变化？\"><a href=\"#MobX-6中如何进行状态的细粒度控制，比如只观察某个对象的特定属性变化？\" class=\"headerlink\" title=\"MobX 6中如何进行状态的细粒度控制，比如只观察某个对象的特定属性变化？\"></a>MobX 6中如何进行状态的细粒度控制，比如只观察某个对象的特定属性变化？</h2><p>在复杂的项目中，可能需要对状态的特定部分进行更精细的控制。可以通过<code>observe</code>函数或者在<code>reaction</code>、<code>autorun</code>中指定更具体的依赖来实现这一点。</p>\n<p><strong>示例回答</strong>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; observe &#125; from &#39;mobx&#39;;\n\nclass User &#123;\n    @observable name &#x3D; &quot;&quot;;\n    @observable email &#x3D; &quot;&quot;;\n    \n    constructor() &#123;\n        makeObservable(this);\n        \n        &#x2F;&#x2F; 监听name属性变化\n        observe(this, &quot;name&quot;, change &#x3D;&gt; &#123;\n            console.log(&quot;Name changed to&quot;, change.newValue);\n        &#125;);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"如何在MobX-6中处理并发和冲突？\"><a href=\"#如何在MobX-6中处理并发和冲突？\" class=\"headerlink\" title=\"如何在MobX 6中处理并发和冲突？\"></a>如何在MobX 6中处理并发和冲突？</h2><p>虽然MobX本身主要用于状态管理，并不直接提供并发控制机制，但在处理复杂应用中的并发修改时，可以通过组合使用<code>action</code>、乐观更新、以及客户端&#x2F;服务器端的冲突解决策略来管理。</p>\n<p><strong>示例回答</strong>:</p>\n<p>对于简单的并发控制，可以在<code>action</code>内部实施逻辑来检查和处理可能的冲突：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class ShoppingCart &#123;\n    @observable items &#x3D; [];\n\n    @action addItem(item) &#123;\n        &#x2F;&#x2F; 检查是否已存在相同的物品\n        if (!this.items.some(i &#x3D;&gt; i.id &#x3D;&#x3D;&#x3D; item.id)) &#123;\n            this.items.push(item);\n        &#125; else &#123;\n            console.warn(&quot;Item already in the cart&quot;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>对于更复杂的并发场景，可能需要结合后端的事务处理或版本控制机制。</p>\n<h2 id=\"MobX-6如何与其他状态管理库或工具集成，比如Redux或Context-API？\"><a href=\"#MobX-6如何与其他状态管理库或工具集成，比如Redux或Context-API？\" class=\"headerlink\" title=\"MobX 6如何与其他状态管理库或工具集成，比如Redux或Context API？\"></a>MobX 6如何与其他状态管理库或工具集成，比如Redux或Context API？</h2><p>尽管MobX自身是一个完整的状态管理解决方案，但它也可以与其他技术栈混合使用，以适应特定项目需求。</p>\n<p><strong>示例回答</strong>:</p>\n<p>与Redux结合使用，你可能会选择将MobX用于某些组件或功能的状态管理，而全局应用状态依然由Redux管理。这通常涉及在Redux的Reducer或Actions中使用MobX状态，或者反之，确保两者之间的数据同步。</p>\n<p>与React的Context API结合时，MobX的Store可以直接作为Context的Provider值传递给组件树，使得子组件能够访问和使用MobX状态，而无需显式传递props。</p>\n<h2 id=\"如何在MobX-6中实现状态的懒加载？\"><a href=\"#如何在MobX-6中实现状态的懒加载？\" class=\"headerlink\" title=\"如何在MobX 6中实现状态的懒加载？\"></a>如何在MobX 6中实现状态的懒加载？</h2><p>懒加载是一种优化策略，用于在实际需要时才加载数据。结合MobX，可以通过条件性地创建或获取数据来实现。</p>\n<p><strong>示例回答</strong>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class DataLoader &#123;\n    @observable data &#x3D; null;\n    @observable isLoading &#x3D; false;\n\n    @action loadData &#x3D; flow(function*() &#123;\n        if (this.isLoading || this.data) return;\n        this.isLoading &#x3D; true;\n        \n        try &#123;\n            const response &#x3D; yield fetch(&#39;data-source-url&#39;);\n            this.data &#x3D; yield response.json();\n        &#125; catch(error) &#123;\n            console.error(&quot;Error loading data&quot;, error);\n        &#125; finally &#123;\n            this.isLoading &#x3D; false;\n        &#125;\n    &#125;);\n&#125;</code></pre>\n\n<p>在组件中，首次访问数据时触发<code>loadData</code>，实现按需加载。</p>\n","feature":true,"text":"MobxMobx的原理是什么，为什么选择Mobx作为状态管理工具原理MobX 6版本的核心原理仍然是基于其反应式编程模型，但在此版本中，一些实现细节和推荐的最佳实践有所变化。MobX的工作原理主要涉及以下几个关键点： 可观察状态（Observables）: MobX使用makeO...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Mobx\"><span class=\"toc-text\">Mobx</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Mobx%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9Mobx%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Mobx的原理是什么，为什么选择Mobx作为状态管理工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MobX-6-%E7%89%88%E6%9C%AC%E7%9A%84%E6%A0%B8%E5%BF%83%E7%89%B9%E7%82%B9%E5%92%8C%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">MobX 6 版本的核心特点和更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-MobX-6-%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">为什么选择 MobX 6 作为状态管理工具</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFMobX%E5%8F%8A%E5%85%B6%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">什么是MobX及其主要特点？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8MobX-6%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%A7%82%E5%AF%9F%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%88observable-state%EF%BC%89\"><span class=\"toc-text\">如何在MobX 6中创建一个可观察的状态（observable state）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MobX%E4%B8%AD%E7%9A%84%E8%AE%A1%E7%AE%97%E5%80%BC%EF%BC%88computed-values%EF%BC%89%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">MobX中的计算值（computed values）是如何工作的？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MobX%E4%B8%AD%E7%9A%84action%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%97%B6%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E5%AE%83%EF%BC%9F\"><span class=\"toc-text\">MobX中的action是什么？为什么在修改状态时推荐使用它？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MobX-6-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%EF%BC%9F\"><span class=\"toc-text\">MobX 6 中如何处理异步操作？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MobX-6-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%9F\"><span class=\"toc-text\">MobX 6 中如何实现状态的持久化？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8React%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8MobX-6%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%9F\"><span class=\"toc-text\">如何在React组件中使用MobX 6的状态？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MobX-6%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9A%84%E7%BB%86%E7%B2%92%E5%BA%A6%E6%8E%A7%E5%88%B6%EF%BC%8C%E6%AF%94%E5%A6%82%E5%8F%AA%E8%A7%82%E5%AF%9F%E6%9F%90%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%AE%9A%E5%B1%9E%E6%80%A7%E5%8F%98%E5%8C%96%EF%BC%9F\"><span class=\"toc-text\">MobX 6中如何进行状态的细粒度控制，比如只观察某个对象的特定属性变化？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8MobX-6%E4%B8%AD%E5%A4%84%E7%90%86%E5%B9%B6%E5%8F%91%E5%92%8C%E5%86%B2%E7%AA%81%EF%BC%9F\"><span class=\"toc-text\">如何在MobX 6中处理并发和冲突？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MobX-6%E5%A6%82%E4%BD%95%E4%B8%8E%E5%85%B6%E4%BB%96%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93%E6%88%96%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90%EF%BC%8C%E6%AF%94%E5%A6%82Redux%E6%88%96Context-API%EF%BC%9F\"><span class=\"toc-text\">MobX 6如何与其他状态管理库或工具集成，比如Redux或Context API？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8MobX-6%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%8A%B6%E6%80%81%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%9F\"><span class=\"toc-text\">如何在MobX 6中实现状态的懒加载？</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"interview-webpack-vite","uid":"c3e9dc8578aecdc98b43e7df0e7e8d9d","slug":"interview-webpack-vite","date":"2024-06-05T15:09:16.000Z","updated":"2024-06-05T15:09:55.228Z","comments":true,"path":"api/articles/interview-webpack-vite.json","keywords":null,"cover":null,"text":"Webpack &amp; Vite对Webpack的理解Webpack是一个开源的前端资源加载&#x2F;打包工具，它主要用于将JavaScript、CSS、图片等静态资源进行模块化管理和打包，以便于在现代Web应用程序中高效使用。Webpack通过使用加载器（Loaders）...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"interview-typescript","uid":"b868df7e10c8c1094284a225631a6d16","slug":"interview-typescript","date":"2024-06-04T06:31:14.000Z","updated":"2024-06-04T11:36:29.411Z","comments":true,"path":"api/articles/interview-typescript.json","keywords":null,"cover":null,"text":"TypeScript为什么要使用 TypeScript?TypeScript 是 JavaScript 的一个超集，它在 JS 的基础上添加了静态类型系统和其他一些增强功能，旨在提高代码的可维护性、可读性和开发效率。使用 TypeScript 的主要优势包括： 静态类型检查：在编...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}