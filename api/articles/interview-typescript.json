{"title":"interview-typescript","uid":"b868df7e10c8c1094284a225631a6d16","slug":"interview-typescript","date":"2024-06-04T06:31:14.000Z","updated":"2024-06-10T15:24:06.380Z","comments":true,"path":"api/articles/interview-typescript.json","keywords":null,"cover":"https://th.bing.com/th/id/OIP.yZTi1-PTpmVRWfdIZ0Q9nAHaD4?w=330&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"为什么要使用-TypeScript\"><a href=\"#为什么要使用-TypeScript\" class=\"headerlink\" title=\"为什么要使用 TypeScript?\"></a>为什么要使用 TypeScript?</h2><p>TypeScript 是 JavaScript 的一个超集，它在 JS 的基础上添加了静态类型系统和其他一些增强功能，旨在提高代码的可维护性、可读性和开发效率。使用 TypeScript 的主要优势包括：</p>\n<ol>\n<li><strong>静态类型检查</strong>：在编码阶段就能发现类型错误，减少运行时错误。</li>\n<li><strong>代码编辑器支持</strong>：大多数现代IDE和编辑器对 TypeScript 提供了出色的代码补全、接口提示和错误检测。</li>\n<li><strong>易于维护和团队协作</strong>：类型注解使代码意图更加清晰，有助于团队成员理解代码结构。</li>\n<li><strong>未来JavaScript特性</strong>：TypeScript 支持很多即将成为标准的 ESNext 特性，如异步编程、装饰器等，让你提前享受新特性。</li>\n<li><strong>模块和命名空间</strong>：提供了更好的模块化支持，有助于组织大型代码库。</li>\n</ol>\n<h2 id=\"TypeScript-相对于-JavaScript-的优势\"><a href=\"#TypeScript-相对于-JavaScript-的优势\" class=\"headerlink\" title=\"TypeScript 相对于 JavaScript 的优势\"></a>TypeScript 相对于 JavaScript 的优势</h2><ul>\n<li><strong>类型安全性</strong>：减少因类型错误引起的运行时bug。</li>\n<li><strong>开发工具集成</strong>：丰富的IDE支持，如智能提示、重构支持等。</li>\n<li><strong>编译时检查</strong>：通过编译时发现潜在错误，提高代码质量。</li>\n<li><strong>易于规模化</strong>：适合大型项目，有利于维护和扩展。</li>\n</ul>\n<h2 id=\"const-和-readonly-的区别\"><a href=\"#const-和-readonly-的区别\" class=\"headerlink\" title=\"const 和 readonly 的区别\"></a>const 和 readonly 的区别</h2><ul>\n<li><strong>const</strong>：是一个变量声明关键字，表示声明的变量不可重新赋值，但是如果是对象或数组，其内部属性或元素是可以修改的。</li>\n<li><strong>readonly</strong>：是一个属性修饰符，用于类的属性上，表示该属性一旦被初始化后就不可更改。</li>\n</ul>\n<h2 id=\"枚举和常量枚举的区别\"><a href=\"#枚举和常量枚举的区别\" class=\"headerlink\" title=\"枚举和常量枚举的区别\"></a>枚举和常量枚举的区别</h2><ul>\n<li><strong>枚举（enum）</strong>：提供了一种定义一组命名常量的方式。枚举值默认是从0开始递增的数字，但也可以自定义。</li>\n<li><strong>常量枚举（const enums）</strong>：在编译阶段会被替换为字面量值，不会生成任何运行时代码，提高性能。常量枚举的成员只能是字符串或数字字面量。</li>\n</ul>\n<h3 id=\"常规枚举（Enum）示例\"><a href=\"#常规枚举（Enum）示例\" class=\"headerlink\" title=\"常规枚举（Enum）示例\"></a>常规枚举（Enum）示例</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 常规枚举定义\nenum Color &#123;\n  Red,\n  Green,\n  Blue\n&#125;\n\nconsole.log(Color.Red); &#x2F;&#x2F; 输出: 0\nconsole.log(Color[0]); &#x2F;&#x2F; 输出: &quot;Red&quot;\nfor (let color in Color) &#123;\n  console.log(color); &#x2F;&#x2F; 可以遍历枚举成员\n&#125;</code></pre>\n\n<p>在这个例子中，<code>Color</code>是一个常规枚举，它的成员在编译后的JavaScript中会转化为一个对象，你可以在运行时通过枚举名或索引访问它们，也可以遍历枚举的所有成员。</p>\n<h3 id=\"常量枚举（Const-Enum）示例\"><a href=\"#常量枚举（Const-Enum）示例\" class=\"headerlink\" title=\"常量枚举（Const Enum）示例\"></a>常量枚举（Const Enum）示例</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 常量枚举定义\nconst enum Size &#123;\n  Small &#x3D; &#39;S&#39;,\n  Medium &#x3D; &#39;M&#39;,\n  Large &#x3D; &#39;L&#39;\n&#125;\n\nconsole.log(Size.Small); &#x2F;&#x2F; 编译时替换为 &#39;S&#39;\nconsole.log(Size.Medium); &#x2F;&#x2F; 编译时替换为 &#39;M&#39;\n\n&#x2F;&#x2F; 尝试遍历Size会发现编译错误，因为编译后Size不会存在\n&#x2F;&#x2F; for (let size in Size) &#123; &#x2F;&#x2F; 这段代码会导致编译错误\n&#x2F;&#x2F;   console.log(size);\n&#x2F;&#x2F; &#125;</code></pre>\n\n<p>在这个例子中，<code>Size</code>是一个常量枚举，它在编译阶段会被替换为对应的字面量值，比如<code>Size.Small</code>会被替换为<code>&#39;S&#39;</code>。这意味着在生成的JavaScript代码中，<code>Size</code>这个枚举本身不存在，你不能在运行时访问它或遍历其成员，但这样做的好处是减小了代码体积并提高了执行效率。</p>\n<p>通过这两个例子，你可以直观地看到常规枚举和常量枚举在使用和行为上的不同。</p>\n<h2 id=\"接口和类型别名的区别\"><a href=\"#接口和类型别名的区别\" class=\"headerlink\" title=\"接口和类型别名的区别\"></a>接口和类型别名的区别</h2><ul>\n<li><strong>接口（interface）</strong>：用于描述对象的形状，可以用来定义函数参数、返回值类型或实现类的契约。接口可以被继承和实现。</li>\n<li><strong>类型别名（type alias）</strong>：为已存在的类型提供一个新的名字，可以是任何类型表达式，包括联合类型、元组类型等。类型别名不支持实现或继承。</li>\n</ul>\n<h2 id=\"TypeScript-中-any-类型的作用\"><a href=\"#TypeScript-中-any-类型的作用\" class=\"headerlink\" title=\"TypeScript 中 any 类型的作用\"></a>TypeScript 中 any 类型的作用</h2><p><code>any</code> 类型表示可以是任意类型，使用它可以绕过类型检查。通常在不确定类型或需要兼容旧的 JavaScript 代码时使用，但过度使用会削弱类型安全。</p>\n<h2 id=\"any、never、unknown、null-amp-undefined-和-void-的区别\"><a href=\"#any、never、unknown、null-amp-undefined-和-void-的区别\" class=\"headerlink\" title=\"any、never、unknown、null &amp; undefined 和 void 的区别\"></a>any、never、unknown、null &amp; undefined 和 void 的区别</h2><ul>\n<li><strong>any</strong>：可以代表任何类型，绕过类型检查。</li>\n<li><strong>never</strong>：表示永远不会出现的值的类型，用于函数永远抛出异常或永不停止执行的情况。</li>\n<li><strong>unknown</strong>：表示未知类型的值，比 any 更安全，因为需要显式类型断言才能使用。</li>\n<li><strong>null &amp; undefined</strong>：代表空值或未定义值，TypeScript 中可以单独或一起作为类型使用。</li>\n<li><strong>void</strong>：表示没有任何返回值的函数的返回类型。</li>\n</ul>\n<h2 id=\"never的使用\"><a href=\"#never的使用\" class=\"headerlink\" title=\"never的使用\"></a>never的使用</h2><p>在TypeScript中，<code>never</code>类型是一个特殊类型，表示永远不会发生的值的类型。它是所有类型的子类型，但没有任何类型是它的子类型（除了<code>never</code>本身）。这使得它可以用于表示那些永远不应该达到的终点或者一定会抛出错误的代码路径。以下是几个使用<code>never</code>的例子：</p>\n<h3 id=\"1-函数永远抛出错误\"><a href=\"#1-函数永远抛出错误\" class=\"headerlink\" title=\"1. 函数永远抛出错误\"></a>1. 函数永远抛出错误</h3><p>当一个函数明确地总是抛出错误，不返回任何值时，其返回类型可以标记为<code>never</code>。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function throwError(message: string): never &#123;\n    throw new Error(message);\n&#125;\n\n&#x2F;&#x2F; 调用此函数会抛出错误，因此没有返回值\nthrowError(&quot;Something went wrong&quot;);</code></pre>\n\n<h3 id=\"2-无限循环\"><a href=\"#2-无限循环\" class=\"headerlink\" title=\"2. 无限循环\"></a>2. 无限循环</h3><p>在理论上永远不会结束的循环也可以使用<code>never</code>来表示其循环体内的代码路径不会到达终点。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function infiniteLoop(): never &#123;\n    while (true) &#123;\n        &#x2F;&#x2F; 这个循环永远不会停止，所以这里的代码路径永远不会结束\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 如果调用此函数，它将永远不会返回\n&#x2F;&#x2F; infiniteLoop();</code></pre>\n\n<h3 id=\"3-类型保护与never的配合\"><a href=\"#3-类型保护与never的配合\" class=\"headerlink\" title=\"3. 类型保护与never的配合\"></a>3. 类型保护与never的配合</h3><p>在类型守卫中，当你确定一个联合类型的变量不可能是任何一种类型时，可以使用<code>never</code>来表示这种不可能性。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function isNumber(x: number | string | boolean): x is number &#123;\n    return typeof x &#x3D;&#x3D;&#x3D; &quot;number&quot;;\n&#125;\n\nfunction checkValue(x: number | string | boolean) &#123;\n    if (isNumber(x)) &#123;\n        &#x2F;&#x2F; 在这里，x被narrow到number类型\n    &#125; else if (typeof x &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;\n        &#x2F;&#x2F; 在这里，x被narrow到string类型\n    &#125; else &#123;\n        &#x2F;&#x2F; 这里x只能是boolean，但为了演示never，我们假设没有这种情况\n        const _exhaustiveCheck: never &#x3D; x;\n    &#125;\n&#125;</code></pre>\n\n<p>在上面的<code>checkValue</code>函数中，虽然实际情况下<code>x</code>可能是<code>number</code>、<code>string</code>或<code>boolean</code>，但在示例的最后else分支中，为了演示，我们假设已经排除了所有可能的类型，这时可以用<code>never</code>类型来表示这种情况，但实际上这会导致类型检查错误，因为我们没有排除<code>boolean</code>类型。正确的做法是在实际代码中处理所有可能的类型，或者确保逻辑上能够覆盖所有情况。</p>\n<h3 id=\"4-作为泛型约束\"><a href=\"#4-作为泛型约束\" class=\"headerlink\" title=\"4. 作为泛型约束\"></a>4. 作为泛型约束</h3><p><code>never</code>还可以用作泛型约束，帮助确保某些操作不可能发生。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function combine&lt;A, B&gt;(a: A, b: B): A &amp; B &#123;\n    return &#123; ...a, ...b &#125;;\n&#125;\n\n&#x2F;&#x2F; 如果两个类型没有交集，结果类型将是never\ntype Result &#x3D; Combine&lt;&#39;a&#39;, 1&gt;;\n&#x2F;&#x2F; Result 类型为 never，因为字符串和数字没有公共属性</code></pre>\n\n<p>通过这些示例，可以看到<code>never</code>类型主要用于静态类型检查，帮助开发者捕捉潜在的编程错误和逻辑不一致。</p>\n<h2 id=\"TypeScript-中-type-和-interface-的区别\"><a href=\"#TypeScript-中-type-和-interface-的区别\" class=\"headerlink\" title=\"TypeScript 中 type 和 interface 的区别\"></a>TypeScript 中 type 和 interface 的区别</h2><ul>\n<li><strong>type</strong>：更灵活，可以定义更复杂的类型，如联合类型、元组类型、映射类型等，但不能用于实现或继承。</li>\n<li><strong>interface</strong>：主要用于描述对象结构，可以实现和继承，更适合定义对象、类或函数的形状。</li>\n</ul>\n<p>在TypeScript中，<code>type</code>和<code>interface</code>都用于定义类型，但它们之间存在一些关键差异，这些差异决定了在不同场景下使用它们的合适性：</p>\n<h3 id=\"1-声明合并（Merging）\"><a href=\"#1-声明合并（Merging）\" class=\"headerlink\" title=\"1. 声明合并（Merging）\"></a>1. 声明合并（Merging）</h3><ul>\n<li><p><strong>Interface</strong>: 支持声明合并（declaration merging），意味着如果你在不同的地方声明了同名的接口，TypeScript会自动将它们合并成一个接口，包含所有声明的成员。这对于逐步定义或扩展第三方库的接口非常有用。</p>\n</li>\n<li><p><strong>Type Alias (<code>type</code>)</strong>: 不支持声明合并。如果尝试在不同位置定义同名的类型别名，TypeScript会报错。每个<code>type</code>必须是唯一的，不允许重复定义。</p>\n</li>\n</ul>\n<h3 id=\"2-应用范围\"><a href=\"#2-应用范围\" class=\"headerlink\" title=\"2. 应用范围\"></a>2. 应用范围</h3><ul>\n<li><p><strong>Interface</strong>: 更倾向于描述对象的结构，可以用于类的实现，定义方法签名、属性等。可以用来描述JavaScript中的对象字面量、类以及函数的类型。</p>\n</li>\n<li><p><strong>Type Alias</strong>: 更灵活，可以用来定义任何类型，包括但不限于对象类型、联合类型（unions）、交叉类型（intersections）、元组（tuples）、原始类型别名等。它提供了更广泛的应用场景，比如重命名现有类型、创建复杂类型等。</p>\n</li>\n</ul>\n<h3 id=\"3-继承与实现\"><a href=\"#3-继承与实现\" class=\"headerlink\" title=\"3. 继承与实现\"></a>3. 继承与实现</h3><ul>\n<li><p><strong>Interface</strong>: 可以使用<code>extends</code>关键字实现接口间的继承，从而组合多个接口定义。类可以实现接口来强制遵循接口规定的形状。</p>\n</li>\n<li><p><strong>Type Alias</strong>: 虽然直接的继承行为不如接口灵活，但可以通过交叉类型（<code>&amp;</code>）来组合类型，达到类似的效果。Type alias不支持直接继承另一个类型别名，但可以使用交叉类型来组合类型。</p>\n</li>\n</ul>\n<h3 id=\"4-基础类型重命名\"><a href=\"#4-基础类型重命名\" class=\"headerlink\" title=\"4. 基础类型重命名\"></a>4. 基础类型重命名</h3><ul>\n<li><strong>Type Alias</strong>: 允许你为现有的类型（如<code>number</code>、<code>string</code>等原始类型）创建别名，这是接口所不能做到的。</li>\n</ul>\n<h3 id=\"5-映射类型与高级类型\"><a href=\"#5-映射类型与高级类型\" class=\"headerlink\" title=\"5. 映射类型与高级类型\"></a>5. 映射类型与高级类型</h3><ul>\n<li><strong>Type Alias</strong>: 提供了更强大的类型操作能力，如映射类型（mapped types）和条件类型（conditional types），使得创建复杂和动态类型成为可能。</li>\n</ul>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>当你需要描述一个对象的结构或实现类的接口时，通常首选<code>interface</code>。</li>\n<li>当你需要定义更复杂或更灵活的类型，包括联合类型、交叉类型、类型重命名等，或需要利用TypeScript的高级类型特性时，使用<code>type</code>更为适合。</li>\n</ul>\n<p>总的来说，<code>interface</code>和<code>type</code>各有千秋，选择哪个取决于你要解决的具体问题和想要达到的类型设计目标。</p>\n<h2 id=\"工具类型的作用\"><a href=\"#工具类型的作用\" class=\"headerlink\" title=\"工具类型的作用\"></a>工具类型的作用</h2><ul>\n<li><strong>Exclude&lt;T, U&gt;</strong> ：从类型T中排除类型U的所有子类型。</li>\n<li><strong>Omit&lt;T, K&gt;</strong> ：从类型T中移除指定的一组键K。</li>\n<li><strong>Pick&lt;T, K&gt;</strong> ：从类型T中选取指定的一组键K组成新的类型。</li>\n<li><strong>Merge&lt;T, U&gt;</strong> ：合并类型T和U的属性，如果有同名属性，则U的属性会覆盖T的属性。</li>\n<li><strong>Intersection&lt;T, U&gt;</strong> ：取类型T和U的交集，即同时满足T和U的所有属性。</li>\n<li><strong>Overwrite&lt;T, U&gt;</strong> ：类似Merge，但U的属性会完全覆盖T的相同属性，而不是仅仅在冲突时覆盖。</li>\n</ul>\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>方法重载允许在同一个类或接口中定义多个同名方法，但这些方法的参数列表必须不同（数量或类型），从而实现不同的功能。编译器会根据调用时的实际参数自动匹配合适的方法签名。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>泛型允许你在定义函数、接口或类的时候不预先指定具体的类型，而是在使用时根据传入的参数类型来推断或指定类型。这提高了代码的复用性和灵活性，减少了类型转换的需求。</p>\n<h2 id=\"TypeScript-底层转为JS\"><a href=\"#TypeScript-底层转为JS\" class=\"headerlink\" title=\"TypeScript 底层转为JS\"></a>TypeScript 底层转为JS</h2><p>TypeScript 通过编译器（tsc）将 TypeScript 代码转换为纯 JavaScript。这个过程包括：</p>\n<ul>\n<li><strong>类型检查</strong>：编译器首先检查代码中的类型错误。</li>\n<li><strong>类型擦除</strong>：由于JavaScript是动态类型语言，编译后的代码会移除所有的类型注解，确保JavaScript引擎能正确执行。</li>\n<li><strong>代码转换</strong>：将TypeScript的高级语法（如箭头函数、async&#x2F;await等）转换为ES5或ES6及以下版本的JavaScript，以保证浏览器或Node.js环境的兼容性。</li>\n<li><strong>输出</strong>：最终生成的JavaScript代码可以直接在浏览器或Node环境中运行，无需额外的TypeScript运行时支持。</li>\n</ul>\n","text":"TypeScript为什么要使用 TypeScript?TypeScript 是 JavaScript 的一个超集，它在 JS 的基础上添加了静态类型系统和其他一些增强功能，旨在提高代码的可维护性、可读性和开发效率。使用 TypeScript 的主要优势包括： 静态类型检查：在编...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TypeScript\"><span class=\"toc-text\">TypeScript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-TypeScript\"><span class=\"toc-text\">为什么要使用 TypeScript?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TypeScript-%E7%9B%B8%E5%AF%B9%E4%BA%8E-JavaScript-%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">TypeScript 相对于 JavaScript 的优势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#const-%E5%92%8C-readonly-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">const 和 readonly 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E5%92%8C%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">枚举和常量枚举的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%84%E6%9E%9A%E4%B8%BE%EF%BC%88Enum%EF%BC%89%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">常规枚举（Enum）示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE%EF%BC%88Const-Enum%EF%BC%89%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">常量枚举（Const Enum）示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">接口和类型别名的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TypeScript-%E4%B8%AD-any-%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">TypeScript 中 any 类型的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#any%E3%80%81never%E3%80%81unknown%E3%80%81null-amp-undefined-%E5%92%8C-void-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">any、never、unknown、null &amp; undefined 和 void 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#never%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">never的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%87%BD%E6%95%B0%E6%B0%B8%E8%BF%9C%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">1. 函数永远抛出错误</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2. 无限循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E4%B8%8Enever%E7%9A%84%E9%85%8D%E5%90%88\"><span class=\"toc-text\">3. 类型保护与never的配合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%9C%E4%B8%BA%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">4. 作为泛型约束</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TypeScript-%E4%B8%AD-type-%E5%92%8C-interface-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">TypeScript 中 type 和 interface 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6%EF%BC%88Merging%EF%BC%89\"><span class=\"toc-text\">1. 声明合并（Merging）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BA%94%E7%94%A8%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">2. 应用范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3. 继承与实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E9%87%8D%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">4. 基础类型重命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5. 映射类型与高级类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">工具类型的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">方法重载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TypeScript-%E5%BA%95%E5%B1%82%E8%BD%AC%E4%B8%BAJS\"><span class=\"toc-text\">TypeScript 底层转为JS</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"interview-mobx","uid":"4cdce0b942af62337249f099a631de6a","slug":"interview-mobx","date":"2024-06-04T06:32:54.000Z","updated":"2024-06-10T15:18:39.073Z","comments":true,"path":"api/articles/interview-mobx.json","keywords":null,"cover":"https://th.bing.com/th/id/OIP.oYwjm9O2yAFPUyFTX9gdRwHaCn?w=311&h=124&c=7&r=0&o=5&dpr=1.3&pid=1.7","text":"MobxMobx的原理是什么，为什么选择Mobx作为状态管理工具原理MobX 6版本的核心原理仍然是基于其反应式编程模型，但在此版本中，一些实现细节和推荐的最佳实践有所变化。MobX的工作原理主要涉及以下几个关键点： 可观察状态（Observables）: MobX使用makeO...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"interview-scence","uid":"2ced64525a6917341326d68b910b07f6","slug":"interview-scence","date":"2024-06-04T03:11:54.000Z","updated":"2024-06-10T15:23:47.666Z","comments":true,"path":"api/articles/interview-scence.json","keywords":null,"cover":"https://th.bing.com/th/id/OIP.NRb47KaYz0QQB2pU6JgBOgHaEK?w=322&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7","text":"场景题在React中使用Tailwind CSS进行网站的一键换肤在React中使用Tailwind CSS进行网站的一键换肤，可以通过以下步骤实现： 1. 安装和配置Tailwind CSS首先，确保你的React项目已经安装并配置了Tailwind CSS。如果你还没有配置，...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}