{"title":"interview-javascript","uid":"cf0441f16ce9f9e8f078668d5a3bf9e5","slug":"interview-javascript","date":"2024-12-28T06:44:24.000Z","updated":"2024-12-29T06:07:32.266Z","comments":true,"path":"api/articles/interview-javascript.json","keywords":null,"cover":"/images/interview-javascript/cover.png","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"JavaScript-有哪些数据类型，它们的区别？\"><a href=\"#JavaScript-有哪些数据类型，它们的区别？\" class=\"headerlink\" title=\"JavaScript 有哪些数据类型，它们的区别？\"></a>JavaScript 有哪些数据类型，它们的区别？</h2><p>在 JavaScript 中，数据类型主要分为两大类：<strong>基本数据类型</strong>（Primitive Types）和 <strong>引用数据类型</strong>（Reference Types）。以下是详细的分类和它们的区别：</p>\n<h3 id=\"1-基本数据类型（Primitive-Types）\"><a href=\"#1-基本数据类型（Primitive-Types）\" class=\"headerlink\" title=\"1. 基本数据类型（Primitive Types）\"></a>1. 基本数据类型（Primitive Types）</h3><p>基本数据类型是不可变的，存储在栈中。JavaScript 中的基本数据类型包括：</p>\n<ul>\n<li><strong>Number</strong>：表示数字，包括整数和浮点数。例如：<code>42</code>、<code>3.14</code>。</li>\n<li><strong>String</strong>：表示字符串，是一系列字符的集合，用单引号、双引号或反引号包围。例如：<code>&#39;Hello&#39;</code>、<code>&quot;World&quot;</code>、<code>`Template`</code>。</li>\n<li><strong>Boolean</strong>：表示布尔值，只有两个值：<code>true</code> 和 <code>false</code>。</li>\n<li><strong>Undefined</strong>：表示未定义的值，变量声明但未赋值时，默认值为 <code>undefined</code>。</li>\n<li><strong>Null</strong>：表示空值或无值，表示一个空对象引用。</li>\n<li><strong>Symbol</strong>（ES6 引入）：表示唯一且不可变的值，常用于对象属性的唯一标识符。</li>\n<li><strong>BigInt</strong>（ES11 引入）：表示大于 <code>2^53 - 1</code> 的整数，使用 <code>n</code> 后缀表示。例如：<code>1234567890123456789012345678901234567890n</code>。</li>\n</ul>\n<h3 id=\"2-引用数据类型（Reference-Types）\"><a href=\"#2-引用数据类型（Reference-Types）\" class=\"headerlink\" title=\"2. 引用数据类型（Reference Types）\"></a>2. 引用数据类型（Reference Types）</h3><p>引用数据类型是可变的，存储在堆中。JavaScript 中的引用数据类型包括：</p>\n<ul>\n<li><p><strong>Object</strong>：对象是键值对的集合，可以存储多个值和复杂数据结构。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  name: &quot;Alice&quot;,\n  age: 25,\n&#125;;</code></pre>\n</li>\n<li><p><strong>Array</strong>：数组是特殊类型的对象，用于存储有序的值集合。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];</code></pre>\n</li>\n<li><p><strong>Function</strong>：函数也是对象，可以被调用并执行。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet() &#123;\n  console.log(&quot;Hello, World!&quot;);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"3-区别\"><a href=\"#3-区别\" class=\"headerlink\" title=\"3. 区别\"></a>3. 区别</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>基本数据类型</th>\n<th>引用数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>存储位置</strong></td>\n<td>存储在栈中</td>\n<td>存储在堆中</td>\n</tr>\n<tr>\n<td><strong>值的特性</strong></td>\n<td>不可变</td>\n<td>可变</td>\n</tr>\n<tr>\n<td><strong>比较方式</strong></td>\n<td>通过值比较</td>\n<td>通过引用比较</td>\n</tr>\n<tr>\n<td><strong>类型</strong></td>\n<td>包括 Number, String, Boolean, Undefined, Null, Symbol, BigInt</td>\n<td>包括 Object, Array, Function</td>\n</tr>\n<tr>\n<td><strong>内存管理</strong></td>\n<td>由 JavaScript 引擎自动管理</td>\n<td>需要手动管理（如避免内存泄漏）</td>\n</tr>\n</tbody></table>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>JavaScript 中的数据类型分为基本数据类型和引用数据类型。基本数据类型是不可变的，存储在栈中，而引用数据类型是可变的，存储在堆中。理解这些数据类型及其区别对于有效地使用 JavaScript 编程至关重要。</p>\n<h2 id=\"数据类型检测的方式有哪些\"><a href=\"#数据类型检测的方式有哪些\" class=\"headerlink\" title=\"数据类型检测的方式有哪些\"></a>数据类型检测的方式有哪些</h2><p>在 JavaScript 中，检测数据类型的方法有多种。以下是一些常用的数据类型检测方式及其示例：</p>\n<h3 id=\"1-typeof-操作符\"><a href=\"#1-typeof-操作符\" class=\"headerlink\" title=\"1. typeof 操作符\"></a>1. <code>typeof</code> 操作符</h3><p><code>typeof</code> 是最常用的检测数据类型的方法。它返回一个表示数据类型的字符串。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(typeof 42); &#x2F;&#x2F; &quot;number&quot;\nconsole.log(typeof &quot;Hello&quot;); &#x2F;&#x2F; &quot;string&quot;\nconsole.log(typeof true); &#x2F;&#x2F; &quot;boolean&quot;\nconsole.log(typeof undefined); &#x2F;&#x2F; &quot;undefined&quot;\nconsole.log(typeof null); &#x2F;&#x2F; &quot;object&quot; (这是一个历史遗留问题)\nconsole.log(typeof Symbol(&quot;sym&quot;)); &#x2F;&#x2F; &quot;symbol&quot;\nconsole.log(typeof BigInt(123)); &#x2F;&#x2F; &quot;bigint&quot;\nconsole.log(typeof &#123;&#125;); &#x2F;&#x2F; &quot;object&quot;\nconsole.log(typeof []); &#x2F;&#x2F; &quot;object&quot; (数组也是对象)\nconsole.log(typeof function () &#123;&#125;); &#x2F;&#x2F; &quot;function&quot;</code></pre>\n\n<h3 id=\"2-instanceof-操作符\"><a href=\"#2-instanceof-操作符\" class=\"headerlink\" title=\"2. instanceof 操作符\"></a>2. <code>instanceof</code> 操作符</h3><p><code>instanceof</code> 用于检测对象是否是某个构造函数的实例。它可以用于检测引用数据类型。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconsole.log(arr instanceof Array); &#x2F;&#x2F; true\nconsole.log(arr instanceof Object); &#x2F;&#x2F; true\n\nconst obj &#x3D; &#123;&#125;;\nconsole.log(obj instanceof Object); &#x2F;&#x2F; true\nconsole.log(obj instanceof Array); &#x2F;&#x2F; false\n\nfunction MyClass() &#123;&#125;\nconst myInstance &#x3D; new MyClass();\nconsole.log(myInstance instanceof MyClass); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"3-Object-prototype-toString-call\"><a href=\"#3-Object-prototype-toString-call\" class=\"headerlink\" title=\"3. Object.prototype.toString.call()\"></a>3. <code>Object.prototype.toString.call()</code></h3><p>这种方法可以更准确地检测数据类型，尤其是对于数组和其他对象类型。它返回一个字符串，表示对象的类型。</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Object.prototype.toString.call(42)); &#x2F;&#x2F; &quot;[object Number]&quot;\nconsole.log(Object.prototype.toString.call(&quot;Hello&quot;)); &#x2F;&#x2F; &quot;[object String]&quot;\nconsole.log(Object.prototype.toString.call(true)); &#x2F;&#x2F; &quot;[object Boolean]&quot;\nconsole.log(Object.prototype.toString.call(undefined)); &#x2F;&#x2F; &quot;[object Undefined]&quot;\nconsole.log(Object.prototype.toString.call(null)); &#x2F;&#x2F; &quot;[object Null]&quot;\nconsole.log(Object.prototype.toString.call([])); &#x2F;&#x2F; &quot;[object Array]&quot;\nconsole.log(Object.prototype.toString.call(&#123;&#125;)); &#x2F;&#x2F; &quot;[object Object]&quot;\nconsole.log(Object.prototype.toString.call(function () &#123;&#125;)); &#x2F;&#x2F; &quot;[object Function]&quot;\nconsole.log(Object.prototype.toString.call(new Date())); &#x2F;&#x2F; &quot;[object Date]&quot;</code></pre>\n\n<h3 id=\"4-Array-isArray\"><a href=\"#4-Array-isArray\" class=\"headerlink\" title=\"4. Array.isArray()\"></a>4. <code>Array.isArray()</code></h3><p>这是一个专门用于检测数组的方法，返回一个布尔值，指示给定的值是否为数组。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Array.isArray([1, 2, 3])); &#x2F;&#x2F; true\nconsole.log(Array.isArray(&#123;&#125;)); &#x2F;&#x2F; false\nconsole.log(Array.isArray(&quot;Hello&quot;)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"5-constructor-属性\"><a href=\"#5-constructor-属性\" class=\"headerlink\" title=\"5. constructor 属性\"></a>5. <code>constructor</code> 属性</h3><p>可以通过对象的 <code>constructor</code> 属性来检测对象的类型。</p>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconsole.log(arr.constructor &#x3D;&#x3D;&#x3D; Array); &#x2F;&#x2F; true\n\nconst obj &#x3D; &#123;&#125;;\nconsole.log(obj.constructor &#x3D;&#x3D;&#x3D; Object); &#x2F;&#x2F; true\n\nconst date &#x3D; new Date();\nconsole.log(date.constructor &#x3D;&#x3D;&#x3D; Date); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"6-自定义类型检测函数\"><a href=\"#6-自定义类型检测函数\" class=\"headerlink\" title=\"6. 自定义类型检测函数\"></a>6. 自定义类型检测函数</h3><p>可以根据需要编写自定义函数来检测特定类型。</p>\n<h4 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function isNumber(value) &#123;\n  return typeof value &#x3D;&#x3D;&#x3D; &quot;number&quot; &amp;&amp; !isNaN(value);\n&#125;\n\nconsole.log(isNumber(42)); &#x2F;&#x2F; true\nconsole.log(isNumber(&quot;Hello&quot;)); &#x2F;&#x2F; false\nconsole.log(isNumber(NaN)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在 JavaScript 中，检测数据类型的方法有多种，包括 <code>typeof</code>、<code>instanceof</code>、<code>Object.prototype.toString.call()</code>、<code>Array.isArray()</code>、<code>constructor</code> 属性以及自定义检测函数。选择合适的方法可以帮助您更准确地判断数据类型。</p>\n<h2 id=\"判断数组的方式有哪些\"><a href=\"#判断数组的方式有哪些\" class=\"headerlink\" title=\"判断数组的方式有哪些\"></a>判断数组的方式有哪些</h2><p>在 JavaScript 中，判断一个值是否为数组的方法有多种。以下是一些常用的判断数组的方式及其示例：</p>\n<h3 id=\"1-Array-isArray\"><a href=\"#1-Array-isArray\" class=\"headerlink\" title=\"1. Array.isArray()\"></a>1. <code>Array.isArray()</code></h3><p>这是最推荐的方法，专门用于检测一个值是否为数组。它返回一个布尔值。</p>\n<h4 id=\"示例-6\"><a href=\"#示例-6\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Array.isArray([1, 2, 3])); &#x2F;&#x2F; true\nconsole.log(Array.isArray(&#123;&#125;)); &#x2F;&#x2F; false\nconsole.log(Array.isArray(&quot;Hello&quot;)); &#x2F;&#x2F; false\nconsole.log(Array.isArray(null)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"2-instanceof-操作符-1\"><a href=\"#2-instanceof-操作符-1\" class=\"headerlink\" title=\"2. instanceof 操作符\"></a>2. <code>instanceof</code> 操作符</h3><p><code>instanceof</code> 可以用来检测一个对象是否是某个构造函数的实例。对于数组，可以使用 <code>Array</code> 构造函数。</p>\n<h4 id=\"示例-7\"><a href=\"#示例-7\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconsole.log(arr instanceof Array); &#x2F;&#x2F; true\nconsole.log(arr instanceof Object); &#x2F;&#x2F; true\n\nconst obj &#x3D; &#123;&#125;;\nconsole.log(obj instanceof Array); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"3-Object-prototype-toString-call-1\"><a href=\"#3-Object-prototype-toString-call-1\" class=\"headerlink\" title=\"3. Object.prototype.toString.call()\"></a>3. <code>Object.prototype.toString.call()</code></h3><p>这种方法可以更准确地检测数据类型，包括数组。它返回一个字符串，表示对象的类型。</p>\n<h4 id=\"示例-8\"><a href=\"#示例-8\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Object.prototype.toString.call([1, 2, 3])); &#x2F;&#x2F; &quot;[object Array]&quot;\nconsole.log(Object.prototype.toString.call(&#123;&#125;)); &#x2F;&#x2F; &quot;[object Object]&quot;\nconsole.log(Object.prototype.toString.call(&quot;Hello&quot;)); &#x2F;&#x2F; &quot;[object String]&quot;</code></pre>\n\n<h3 id=\"4-constructor-属性\"><a href=\"#4-constructor-属性\" class=\"headerlink\" title=\"4. constructor 属性\"></a>4. <code>constructor</code> 属性</h3><p>可以通过对象的 <code>constructor</code> 属性来判断对象的类型。对于数组，<code>constructor</code> 属性应该是 <code>Array</code>。</p>\n<h4 id=\"示例-9\"><a href=\"#示例-9\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconsole.log(arr.constructor &#x3D;&#x3D;&#x3D; Array); &#x2F;&#x2F; true\n\nconst obj &#x3D; &#123;&#125;;\nconsole.log(obj.constructor &#x3D;&#x3D;&#x3D; Array); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"5-自定义类型检测函数\"><a href=\"#5-自定义类型检测函数\" class=\"headerlink\" title=\"5. 自定义类型检测函数\"></a>5. 自定义类型检测函数</h3><p>可以根据需要编写自定义函数来检测特定类型。</p>\n<h4 id=\"示例-10\"><a href=\"#示例-10\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function isArray(value) &#123;\n  return Array.isArray(value);\n&#125;\n\nconsole.log(isArray([1, 2, 3])); &#x2F;&#x2F; true\nconsole.log(isArray(&quot;Hello&quot;)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在 JavaScript 中，判断数组的方式主要有以下几种：</p>\n<ul>\n<li>**<code>Array.isArray()</code>**：最推荐的方法，专门用于检测数组。</li>\n<li>**<code>instanceof</code>**：可以检测对象是否为数组，但在跨框架或跨窗口时可能不可靠。</li>\n<li>**<code>Object.prototype.toString.call()</code>**：可以准确判断数据类型，包括数组。</li>\n<li><strong><code>constructor</code> 属性</strong>：通过构造函数判断，但不如 <code>Array.isArray()</code> 可靠。</li>\n<li><strong>自定义函数</strong>：可以根据需要编写自定义检测函数。</li>\n</ul>\n<p>选择合适的方法可以帮助您更准确地判断一个值是否为数组。</p>\n<h2 id=\"null-和-undefined-区别\"><a href=\"#null-和-undefined-区别\" class=\"headerlink\" title=\"null 和 undefined 区别\"></a>null 和 undefined 区别</h2><p>在 JavaScript 中，<code>null</code> 和 <code>undefined</code> 都表示“无值”或“缺失值”，但它们之间有一些重要的区别：</p>\n<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><ul>\n<li><p>**<code>null</code>**：表示一个空值或无值的对象引用。它是一个赋值类型，通常用于表示“没有对象”或“空对象”。开发者可以显式地将变量设置为 <code>null</code>，以表示该变量没有值。</p>\n</li>\n<li><p>**<code>undefined</code>**：表示一个变量已声明但尚未赋值。它是一个原始数据类型，表示“未定义”或“缺失的值”。当一个变量被声明但没有被赋值时，JavaScript 会自动将其初始化为 <code>undefined</code>。</p>\n</li>\n</ul>\n<h3 id=\"2-类型\"><a href=\"#2-类型\" class=\"headerlink\" title=\"2. 类型\"></a>2. 类型</h3><ul>\n<li>使用 <code>typeof</code> 操作符检查类型：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(typeof null); &#x2F;&#x2F; &quot;object&quot; (这是一个历史遗留问题)\nconsole.log(typeof undefined); &#x2F;&#x2F; &quot;undefined&quot;</code></pre></li>\n</ul>\n<h3 id=\"3-使用场景\"><a href=\"#3-使用场景\" class=\"headerlink\" title=\"3. 使用场景\"></a>3. 使用场景</h3><ul>\n<li><p>**<code>null</code>**：</p>\n<ul>\n<li>通常用于表示一个变量应该有一个对象，但目前没有。</li>\n<li>可以用于初始化变量，以便后续可以赋值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let obj &#x3D; null; &#x2F;&#x2F; 表示 obj 目前没有对象</code></pre>\n</li>\n<li><p>**<code>undefined</code>**：</p>\n<ul>\n<li>当一个变量被声明但没有赋值时，默认值为 <code>undefined</code>。</li>\n<li>函数没有返回值时，默认返回 <code>undefined</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let x; &#x2F;&#x2F; x 被声明但未赋值，值为 undefined\nfunction test() &#123;&#125; &#x2F;&#x2F; test() 没有返回值，返回 undefined</code></pre></li>\n</ul>\n<h3 id=\"4-相等性比较\"><a href=\"#4-相等性比较\" class=\"headerlink\" title=\"4. 相等性比较\"></a>4. 相等性比较</h3><ul>\n<li><p>在使用相等运算符（<code>==</code>）进行比较时，<code>null</code> 和 <code>undefined</code> 被认为是相等的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true</code></pre>\n</li>\n<li><p>但在使用严格相等运算符（<code>===</code>）时，它们被认为是不相等的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(null &#x3D;&#x3D;&#x3D; undefined); &#x2F;&#x2F; false</code></pre></li>\n</ul>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong><code>null</code></strong> 是一个表示“空值”的对象引用，可以被显式赋值。</li>\n<li><strong><code>undefined</code></strong> 表示“未定义”，通常是变量声明后未赋值的状态。</li>\n<li>它们在类型、使用场景和相等性比较上有明显的区别。</li>\n</ul>\n<h2 id=\"typeof-null-的结果是什么，为什么？\"><a href=\"#typeof-null-的结果是什么，为什么？\" class=\"headerlink\" title=\"typeof null 的结果是什么，为什么？\"></a>typeof null 的结果是什么，为什么？</h2><p>在 JavaScript 中，使用 <code>typeof</code> 操作符检查 <code>null</code> 的结果是 <code>&quot;object&quot;</code>。这是一个历史遗留问题，具体原因如下：</p>\n<h3 id=\"1-typeof-null-的结果\"><a href=\"#1-typeof-null-的结果\" class=\"headerlink\" title=\"1. typeof null 的结果\"></a>1. <code>typeof null</code> 的结果</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(typeof null); &#x2F;&#x2F; &quot;object&quot;</code></pre>\n\n<h3 id=\"2-原因\"><a href=\"#2-原因\" class=\"headerlink\" title=\"2. 原因\"></a>2. 原因</h3><ul>\n<li><p><strong>历史遗留问题</strong>：在 JavaScript 的早期版本中，<code>null</code> 被实现为一个指向空对象的引用。在当时，所有对象的类型都被标记为 <code>&quot;object&quot;</code>。因此，当使用 <code>typeof</code> 操作符检查 <code>null</code> 时，它返回了 <code>&quot;object&quot;</code>。</p>\n</li>\n<li><p><strong>设计缺陷</strong>：这个行为被认为是 JavaScript 语言设计中的一个缺陷，因为 <code>null</code> 实际上并不是一个对象，而是一个表示“无值”的原始类型。尽管这个问题在后来的版本中被发现，但为了保持向后兼容性，JavaScript 仍然保留了这个行为。</p>\n</li>\n</ul>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><p>因此，<code>typeof null</code> 返回 <code>&quot;object&quot;</code> 是由于 JavaScript 的早期实现和设计缺陷所致。尽管这可能会引起混淆，但在实际编程中，开发者通常会记住这一点，并使用其他方法来检查 <code>null</code> 的值。</p>\n<h2 id=\"instanceof-操作符的实现原理及实现\"><a href=\"#instanceof-操作符的实现原理及实现\" class=\"headerlink\" title=\"instanceof 操作符的实现原理及实现\"></a>instanceof 操作符的实现原理及实现</h2><p><code>instanceof</code> 操作符用于检测一个对象是否是某个构造函数的实例。它的基本语法是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">object instanceof constructor;</code></pre>\n\n<h3 id=\"1-实现原理\"><a href=\"#1-实现原理\" class=\"headerlink\" title=\"1. 实现原理\"></a>1. 实现原理</h3><p><code>instanceof</code> 的工作原理是通过检查对象的原型链来确定对象是否是构造函数的实例。具体步骤如下：</p>\n<ol>\n<li><strong>获取构造函数的 <code>prototype</code> 属性</strong>：<code>instanceof</code> 操作符首先获取构造函数的 <code>prototype</code> 属性。</li>\n<li><strong>查找原型链</strong>：然后，它会检查对象的原型链，查看对象的原型是否等于构造函数的 <code>prototype</code> 属性。</li>\n<li><strong>循环查找</strong>：如果对象的原型不等于构造函数的 <code>prototype</code>，则继续查找对象的原型的原型，直到找到 <code>null</code> 为止。</li>\n</ol>\n<h3 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h3><p>以下是一个简单的示例，展示 <code>instanceof</code> 的用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(alice instanceof Person); &#x2F;&#x2F; true\nconsole.log(alice instanceof Object); &#x2F;&#x2F; true\nconsole.log(alice instanceof Array); &#x2F;&#x2F; false</code></pre>\n\n<p>在这个例子中，<code>alice</code> 是 <code>Person</code> 的实例，因此 <code>alice instanceof Person</code> 返回 <code>true</code>。同时，所有对象都是 <code>Object</code> 的实例，因此 <code>alice instanceof Object</code> 也返回 <code>true</code>。</p>\n<h3 id=\"3-自定义-instanceof-实现\"><a href=\"#3-自定义-instanceof-实现\" class=\"headerlink\" title=\"3. 自定义 instanceof 实现\"></a>3. 自定义 <code>instanceof</code> 实现</h3><p>可以通过自定义函数来模拟 <code>instanceof</code> 的行为。以下是一个简单的实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myInstanceof(obj, constructor) &#123;\n  &#x2F;&#x2F; 获取构造函数的 prototype\n  const prototype &#x3D; constructor.prototype;\n\n  &#x2F;&#x2F; 获取对象的原型\n  let currentObj &#x3D; obj.__proto__;\n\n  &#x2F;&#x2F; 循环查找原型链\n  while (currentObj) &#123;\n    if (currentObj &#x3D;&#x3D;&#x3D; prototype) &#123;\n      return true; &#x2F;&#x2F; 找到匹配\n    &#125;\n    currentObj &#x3D; currentObj.__proto__; &#x2F;&#x2F; 移动到上一级原型\n  &#125;\n\n  return false; &#x2F;&#x2F; 未找到匹配\n&#125;\n\n&#x2F;&#x2F; 测试\nconsole.log(myInstanceof(alice, Person)); &#x2F;&#x2F; true\nconsole.log(myInstanceof(alice, Object)); &#x2F;&#x2F; true\nconsole.log(myInstanceof(alice, Array)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"4-注意事项\"><a href=\"#4-注意事项\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h3><ul>\n<li><strong>原型链</strong>：<code>instanceof</code> 依赖于原型链，因此如果对象的原型链被修改，可能会影响 <code>instanceof</code> 的结果。</li>\n<li><strong>跨框架或跨窗口</strong>：在不同的 JavaScript 执行环境（如 iframe 或不同的窗口）中，<code>instanceof</code> 可能会出现问题，因为每个执行环境都有自己的 <code>Object</code> 和 <code>Function</code> 构造函数。</li>\n</ul>\n<h3 id=\"5-总结-1\"><a href=\"#5-总结-1\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>instanceof</code> 操作符通过检查对象的原型链来确定对象是否是某个构造函数的实例。理解其实现原理有助于更好地使用和调试 JavaScript 中的对象和继承关系。</p>\n<h2 id=\"为什么-0-1-0-2-x3D-x3D-0-3，如何让其相等\"><a href=\"#为什么-0-1-0-2-x3D-x3D-0-3，如何让其相等\" class=\"headerlink\" title=\"为什么 0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等\"></a>为什么 0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</h2><p>在 JavaScript 中，<code>0.1 + 0.2</code> 的结果并不等于 <code>0.3</code>，这是由于浮点数的精度问题。JavaScript 使用 IEEE 754 标准来表示数字，这种表示方式在处理某些小数时会导致精度损失。</p>\n<h3 id=\"1-浮点数精度问题\"><a href=\"#1-浮点数精度问题\" class=\"headerlink\" title=\"1. 浮点数精度问题\"></a>1. 浮点数精度问题</h3><p>当你执行 <code>0.1 + 0.2</code> 时，实际上计算的结果是一个近似值，而不是精确的 <code>0.3</code>。具体来说：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(0.1 + 0.2); &#x2F;&#x2F; 0.30000000000000004\nconsole.log(0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3); &#x2F;&#x2F; false</code></pre>\n\n<p>在这个例子中，<code>0.1 + 0.2</code> 的结果是 <code>0.30000000000000004</code>，而不是 <code>0.3</code>，因此它们不相等。</p>\n<h3 id=\"2-如何让它相等\"><a href=\"#2-如何让它相等\" class=\"headerlink\" title=\"2. 如何让它相等\"></a>2. 如何让它相等</h3><p>为了比较浮点数时避免精度问题，通常的做法是使用一个容忍度（epsilon）来判断两个数是否“足够接近”。以下是一个简单的实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function areEqual(num1, num2, epsilon &#x3D; 0.00001) &#123;\n  return Math.abs(num1 - num2) &lt; epsilon;\n&#125;\n\nconsole.log(areEqual(0.1 + 0.2, 0.3)); &#x2F;&#x2F; true</code></pre>\n\n<p>在这个例子中，<code>areEqual</code> 函数通过检查两个数之间的差值是否小于一个小的容忍度（<code>epsilon</code>）来判断它们是否相等。</p>\n<h3 id=\"3-其他解决方案\"><a href=\"#3-其他解决方案\" class=\"headerlink\" title=\"3. 其他解决方案\"></a>3. 其他解决方案</h3><ul>\n<li><strong>使用整数运算</strong>：可以将浮点数转换为整数进行计算，避免浮点数精度问题。例如，将 <code>0.1</code> 和 <code>0.2</code> 乘以 <code>10</code>，然后进行整数运算：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const result &#x3D; (0.1 * 10 + 0.2 * 10) &#x2F; 10; &#x2F;&#x2F; 0.3\nconsole.log(result &#x3D;&#x3D;&#x3D; 0.3); &#x2F;&#x2F; true</code></pre>\n\n<ul>\n<li><strong>使用库</strong>：可以使用专门处理精度问题的库，如 <code>decimal.js</code> 或 <code>big.js</code>，这些库提供了更高精度的数值计算。</li>\n</ul>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p><code>0.1 + 0.2</code> 不等于 <code>0.3</code> 是由于浮点数的精度问题。通过使用容忍度进行比较、整数运算或使用专门的库，可以有效地解决这个问题。</p>\n<h2 id=\"如何获取安全的-undefined-值？\"><a href=\"#如何获取安全的-undefined-值？\" class=\"headerlink\" title=\"如何获取安全的 undefined 值？\"></a>如何获取安全的 undefined 值？</h2><p>在 JavaScript 中，<code>undefined</code> 是一个原始数据类型，表示一个变量已声明但尚未赋值。获取“安全的” <code>undefined</code> 值通常是指确保在使用 <code>undefined</code> 时不会引发错误或产生意外行为。以下是一些方法和最佳实践，以确保安全地使用 <code>undefined</code>：</p>\n<h3 id=\"1-使用-void-操作符\"><a href=\"#1-使用-void-操作符\" class=\"headerlink\" title=\"1. 使用 void 操作符\"></a>1. 使用 <code>void</code> 操作符</h3><p><code>void</code> 操作符可以用于获取 <code>undefined</code> 值。它的语法是 <code>void 0</code>，这将始终返回 <code>undefined</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const safeUndefined &#x3D; void 0;\nconsole.log(safeUndefined); &#x2F;&#x2F; undefined</code></pre>\n\n<h3 id=\"2-直接使用-undefined\"><a href=\"#2-直接使用-undefined\" class=\"headerlink\" title=\"2. 直接使用 undefined\"></a>2. 直接使用 <code>undefined</code></h3><p>在 JavaScript 中，您可以直接使用 <code>undefined</code> 关键字来表示未定义的值。尽管在某些情况下，<code>undefined</code> 的值可能会被重新赋值，但在现代 JavaScript 中，通常不建议这样做。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let myVar;\nconsole.log(myVar); &#x2F;&#x2F; undefined</code></pre>\n\n<h3 id=\"3-检查变量是否为-undefined\"><a href=\"#3-检查变量是否为-undefined\" class=\"headerlink\" title=\"3. 检查变量是否为 undefined\"></a>3. 检查变量是否为 <code>undefined</code></h3><p>在使用变量之前，您可以检查它是否为 <code>undefined</code>，以确保安全性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let myVar;\n\nif (myVar &#x3D;&#x3D;&#x3D; undefined) &#123;\n  console.log(&quot;myVar is undefined&quot;);\n&#125;</code></pre>\n\n<h3 id=\"4-使用默认参数\"><a href=\"#4-使用默认参数\" class=\"headerlink\" title=\"4. 使用默认参数\"></a>4. 使用默认参数</h3><p>在函数中，您可以使用默认参数来确保参数的安全性。如果参数未传递，默认值将被使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myFunction(param &#x3D; undefined) &#123;\n  console.log(param); &#x2F;&#x2F; 如果未传递参数，将输出 undefined\n&#125;\n\nmyFunction(); &#x2F;&#x2F; undefined\nmyFunction(5); &#x2F;&#x2F; 5</code></pre>\n\n<h3 id=\"5-使用-typeof-检查\"><a href=\"#5-使用-typeof-检查\" class=\"headerlink\" title=\"5. 使用 typeof 检查\"></a>5. 使用 <code>typeof</code> 检查</h3><p>在某些情况下，您可能希望检查一个变量是否未定义，而不引发错误。使用 <code>typeof</code> 可以安全地检查变量的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let myVar;\n\nif (typeof myVar &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;\n  console.log(&quot;myVar is undefined&quot;);\n&#125;</code></pre>\n\n<h3 id=\"6-使用-try-catch-语句\"><a href=\"#6-使用-try-catch-语句\" class=\"headerlink\" title=\"6. 使用 try...catch 语句\"></a>6. 使用 <code>try...catch</code> 语句</h3><p>在某些情况下，您可能会尝试访问一个未定义的变量。使用 <code>try...catch</code> 可以捕获错误并安全地处理它。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let myVar;\n\ntry &#123;\n  console.log(myVar);\n&#125; catch (error) &#123;\n  console.log(&quot;Caught an error:&quot;, error);\n&#125;</code></pre>\n\n<h3 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>获取“安全的” <code>undefined</code> 值主要是确保在使用 <code>undefined</code> 时不会引发错误或产生意外行为。可以使用 <code>void</code> 操作符、直接使用 <code>undefined</code>、检查变量、使用默认参数、<code>typeof</code> 检查和 <code>try...catch</code> 语句等方法来实现这一点。通过这些方法，您可以更安全地处理未定义的值。</p>\n<h2 id=\"typeof-NaN-的结果是什么？\"><a href=\"#typeof-NaN-的结果是什么？\" class=\"headerlink\" title=\"typeof NaN 的结果是什么？\"></a>typeof NaN 的结果是什么？</h2><p>在 JavaScript 中，使用 <code>typeof</code> 操作符检查 <code>NaN</code> 的结果是 <code>&quot;number&quot;</code>。</p>\n<h3 id=\"示例-11\"><a href=\"#示例-11\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(typeof NaN); &#x2F;&#x2F; &quot;number&quot;</code></pre>\n\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li><p><strong><code>NaN</code> 的含义</strong>：<code>NaN</code> 代表“不是一个数字”（Not-a-Number），它是一个特殊的数值，表示无法表示为有效数字的结果。通常在数学运算中出现，例如将一个非数字值转换为数字时，或者进行无效的数学运算时。</p>\n</li>\n<li><p><strong><code>NaN</code> 的类型</strong>：尽管 <code>NaN</code> 表示一个无效的数字，但在 JavaScript 中，它的类型仍然被视为 <code>number</code>。这是因为 <code>NaN</code> 是 <code>Number</code> 类型的一部分。</p>\n</li>\n</ul>\n<h3 id=\"额外信息\"><a href=\"#额外信息\" class=\"headerlink\" title=\"额外信息\"></a>额外信息</h3><ul>\n<li><strong><code>NaN</code> 的特性</strong>：<code>NaN</code> 是唯一一个不等于自身的值。也就是说，<code>NaN === NaN</code> 的结果是 <code>false</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(NaN &#x3D;&#x3D;&#x3D; NaN); &#x2F;&#x2F; false</code></pre>\n\n<ul>\n<li>**检查 <code>NaN</code>**：要检查一个值是否为 <code>NaN</code>，可以使用 <code>Number.isNaN()</code> 方法或 <code>isNaN()</code> 函数。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Number.isNaN(NaN)); &#x2F;&#x2F; true\nconsole.log(isNaN(NaN)); &#x2F;&#x2F; true\nconsole.log(isNaN(&quot;Hello&quot;)); &#x2F;&#x2F; true (因为 &#39;Hello&#39; 转换为数字时是 NaN)</code></pre>\n\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>typeof NaN</code> 的结果是 <code>&quot;number&quot;</code>，尽管 <code>NaN</code> 表示一个无效的数字。理解 <code>NaN</code> 的特性和行为对于处理数字和进行数学运算时非常重要。</p>\n<h2 id=\"isNaN-和-Number-isNaN-函数的区别？\"><a href=\"#isNaN-和-Number-isNaN-函数的区别？\" class=\"headerlink\" title=\"isNaN 和 Number.isNaN 函数的区别？\"></a>isNaN 和 Number.isNaN 函数的区别？</h2><p><code>isNaN</code> 和 <code>Number.isNaN</code> 是 JavaScript 中用于检测是否为 <code>NaN</code> 的两个函数，但它们的行为和用途有所不同。以下是它们之间的主要区别：</p>\n<h3 id=\"1-isNaN-函数\"><a href=\"#1-isNaN-函数\" class=\"headerlink\" title=\"1. isNaN 函数\"></a>1. <code>isNaN</code> 函数</h3><ul>\n<li><strong>功能</strong>：<code>isNaN</code> 函数用于判断一个值是否为 <code>NaN</code>。但它会在判断之前将参数转换为数字。</li>\n<li><strong>类型转换</strong>：如果传入的值不是数字，<code>isNaN</code> 会尝试将其转换为数字，然后再进行判断。</li>\n<li><strong>返回值</strong>：如果转换后的值是 <code>NaN</code>，则返回 <code>true</code>；否则返回 <code>false</code>。</li>\n</ul>\n<h4 id=\"示例-12\"><a href=\"#示例-12\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(isNaN(NaN)); &#x2F;&#x2F; true\nconsole.log(isNaN(&quot;Hello&quot;)); &#x2F;&#x2F; true (因为 &#39;Hello&#39; 转换为 NaN)\nconsole.log(isNaN(undefined)); &#x2F;&#x2F; true (因为 undefined 转换为 NaN)\nconsole.log(isNaN(123)); &#x2F;&#x2F; false\nconsole.log(isNaN(&quot;123&quot;)); &#x2F;&#x2F; false (因为 &#39;123&#39; 转换为 123)</code></pre>\n\n<h3 id=\"2-Number-isNaN-函数\"><a href=\"#2-Number-isNaN-函数\" class=\"headerlink\" title=\"2. Number.isNaN 函数\"></a>2. <code>Number.isNaN</code> 函数</h3><ul>\n<li><strong>功能</strong>：<code>Number.isNaN</code> 函数用于判断一个值是否严格等于 <code>NaN</code>，并且不会进行类型转换。</li>\n<li><strong>无类型转换</strong>：只有当传入的值是 <code>NaN</code> 时，<code>Number.isNaN</code> 才会返回 <code>true</code>；如果传入的值是其他类型（如字符串、对象等），则返回 <code>false</code>。</li>\n<li><strong>更严格的判断</strong>：因此，<code>Number.isNaN</code> 更加精确，适合用于判断一个值是否为 <code>NaN</code>。</li>\n</ul>\n<h4 id=\"示例-13\"><a href=\"#示例-13\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Number.isNaN(NaN)); &#x2F;&#x2F; true\nconsole.log(Number.isNaN(&quot;Hello&quot;)); &#x2F;&#x2F; false (没有类型转换)\nconsole.log(Number.isNaN(undefined)); &#x2F;&#x2F; false\nconsole.log(Number.isNaN(123)); &#x2F;&#x2F; false\nconsole.log(Number.isNaN(&quot;123&quot;)); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"3-总结-1\"><a href=\"#3-总结-1\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>isNaN</code></th>\n<th><code>Number.isNaN</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>类型转换</strong></td>\n<td>会进行类型转换</td>\n<td>不会进行类型转换</td>\n</tr>\n<tr>\n<td><strong>判断条件</strong></td>\n<td>判断转换后的值是否为 <code>NaN</code></td>\n<td>仅判断值是否严格等于 <code>NaN</code></td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>用于宽松的判断</td>\n<td>用于严格的判断</td>\n</tr>\n</tbody></table>\n<p>因此，推荐在需要严格判断 <code>NaN</code> 时使用 <code>Number.isNaN</code>，而在需要宽松判断时使用 <code>isNaN</code>。</p>\n<h2 id=\"其他值到字符串的转换规则？\"><a href=\"#其他值到字符串的转换规则？\" class=\"headerlink\" title=\"其他值到字符串的转换规则？\"></a>其他值到字符串的转换规则？</h2><p>在 JavaScript 中，其他值转换为字符串的规则主要依赖于 <code>String()</code> 函数和 <code>toString()</code> 方法。以下是不同类型的值转换为字符串时的规则：</p>\n<h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1. 基本数据类型\"></a>1. 基本数据类型</h3><h4 id=\"1-1-数字（Number）\"><a href=\"#1-1-数字（Number）\" class=\"headerlink\" title=\"1.1. 数字（Number）\"></a>1.1. 数字（Number）</h4><ul>\n<li>使用 <code>String()</code> 函数或 <code>toString()</code> 方法将数字转换为字符串。</li>\n<li><code>NaN</code> 和 <code>Infinity</code> 也会被转换为字符串。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(String(123)); &#x2F;&#x2F; &quot;123&quot;\nconsole.log((123).toString()); &#x2F;&#x2F; &quot;123&quot;\nconsole.log(String(NaN)); &#x2F;&#x2F; &quot;NaN&quot;\nconsole.log(String(Infinity)); &#x2F;&#x2F; &quot;Infinity&quot;</code></pre>\n\n<h4 id=\"1-2-布尔值（Boolean）\"><a href=\"#1-2-布尔值（Boolean）\" class=\"headerlink\" title=\"1.2. 布尔值（Boolean）\"></a>1.2. 布尔值（Boolean）</h4><ul>\n<li><code>true</code> 转换为 <code>&quot;true&quot;</code>，<code>false</code> 转换为 <code>&quot;false&quot;</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(String(true)); &#x2F;&#x2F; &quot;true&quot;\nconsole.log(String(false)); &#x2F;&#x2F; &quot;false&quot;</code></pre>\n\n<h4 id=\"1-3-null\"><a href=\"#1-3-null\" class=\"headerlink\" title=\"1.3. null\"></a>1.3. <code>null</code></h4><ul>\n<li><code>null</code> 转换为字符串时，结果为 <code>&quot;null&quot;</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(String(null)); &#x2F;&#x2F; &quot;null&quot;</code></pre>\n\n<h4 id=\"1-4-undefined\"><a href=\"#1-4-undefined\" class=\"headerlink\" title=\"1.4. undefined\"></a>1.4. <code>undefined</code></h4><ul>\n<li><code>undefined</code> 转换为字符串时，结果为 <code>&quot;undefined&quot;</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(String(undefined)); &#x2F;&#x2F; &quot;undefined&quot;</code></pre>\n\n<h4 id=\"1-5-Symbol\"><a href=\"#1-5-Symbol\" class=\"headerlink\" title=\"1.5. Symbol\"></a>1.5. Symbol</h4><ul>\n<li><code>Symbol</code> 类型的值不能直接转换为字符串，尝试转换会抛出错误。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const sym &#x3D; Symbol(&quot;description&quot;);\nconsole.log(String(sym)); &#x2F;&#x2F; TypeError: Cannot convert a Symbol value to a string</code></pre>\n\n<h3 id=\"2-对象（Object）\"><a href=\"#2-对象（Object）\" class=\"headerlink\" title=\"2. 对象（Object）\"></a>2. 对象（Object）</h3><ul>\n<li>对象在转换为字符串时，首先会调用其 <code>toString()</code> 方法。如果 <code>toString()</code> 方法未被重写，则返回 <code>&quot;[object Object]&quot;</code>。</li>\n<li>如果对象有 <code>valueOf()</code> 方法且返回一个原始值，则会使用该值进行转换。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; name: &quot;Alice&quot; &#125;;\nconsole.log(String(obj)); &#x2F;&#x2F; &quot;[object Object]&quot;\n\nconst customObj &#x3D; &#123;\n  toString: function () &#123;\n    return &quot;Custom Object&quot;;\n  &#125;,\n&#125;;\nconsole.log(String(customObj)); &#x2F;&#x2F; &quot;Custom Object&quot;</code></pre>\n\n<h3 id=\"3-数组（Array）\"><a href=\"#3-数组（Array）\" class=\"headerlink\" title=\"3. 数组（Array）\"></a>3. 数组（Array）</h3><ul>\n<li>数组在转换为字符串时，会调用其 <code>toString()</code> 方法，返回数组元素的逗号分隔字符串。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconsole.log(String(arr)); &#x2F;&#x2F; &quot;1,2,3&quot;</code></pre>\n\n<h3 id=\"4-函数（Function）\"><a href=\"#4-函数（Function）\" class=\"headerlink\" title=\"4. 函数（Function）\"></a>4. 函数（Function）</h3><ul>\n<li>函数在转换为字符串时，会返回函数的源代码。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myFunction() &#123;\n  return &quot;Hello&quot;;\n&#125;\nconsole.log(String(myFunction)); &#x2F;&#x2F; &quot;function myFunction() &#123; return &#39;Hello&#39;; &#125;&quot;</code></pre>\n\n<h3 id=\"5-其他类型的转换\"><a href=\"#5-其他类型的转换\" class=\"headerlink\" title=\"5. 其他类型的转换\"></a>5. 其他类型的转换</h3><ul>\n<li><strong>使用 <code>String()</code> 函数</strong>：可以将任何值转换为字符串，遵循上述规则。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(String(123)); &#x2F;&#x2F; &quot;123&quot;\nconsole.log(String(true)); &#x2F;&#x2F; &quot;true&quot;\nconsole.log(String(null)); &#x2F;&#x2F; &quot;null&quot;\nconsole.log(String(undefined)); &#x2F;&#x2F; &quot;undefined&quot;\nconsole.log(String([1, 2, 3])); &#x2F;&#x2F; &quot;1,2,3&quot;</code></pre>\n\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在 JavaScript 中，其他值转换为字符串的规则主要依赖于其类型。基本数据类型（数字、布尔值、<code>null</code>、<code>undefined</code>）有明确的转换规则，而对象、数组和函数则通过调用其 <code>toString()</code> 方法或 <code>valueOf()</code> 方法来进行转换。理解这些规则有助于在编程中正确处理数据类型转换。</p>\n<h2 id=\"和-amp-amp-操作符的返回值？\"><a href=\"#和-amp-amp-操作符的返回值？\" class=\"headerlink\" title=\"|| 和 &amp;&amp; 操作符的返回值？\"></a>|| 和 &amp;&amp; 操作符的返回值？</h2><p>在 JavaScript 中，<code>||</code>（逻辑或）和 <code>&amp;&amp;</code>（逻辑与）操作符不仅用于布尔值的逻辑运算，还可以用于返回操作数的值。以下是这两个操作符的详细说明及其返回值的规则：</p>\n<h3 id=\"1-（逻辑或）操作符\"><a href=\"#1-（逻辑或）操作符\" class=\"headerlink\" title=\"1. ||（逻辑或）操作符\"></a>1. <code>||</code>（逻辑或）操作符</h3><ul>\n<li><strong>功能</strong>：<code>||</code> 操作符用于返回第一个真值（truthy）操作数。如果所有操作数都是假值（falsy），则返回最后一个操作数。</li>\n<li><strong>假值（falsy）</strong>：在 JavaScript 中，以下值被视为假值：<ul>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>&quot;&quot;</code>（空字符串）</li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>NaN</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-14\"><a href=\"#示例-14\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(true || false); &#x2F;&#x2F; true\nconsole.log(false || true); &#x2F;&#x2F; true\nconsole.log(0 || 42); &#x2F;&#x2F; 42\nconsole.log(null || &quot;Hello&quot;); &#x2F;&#x2F; &quot;Hello&quot;\nconsole.log(undefined || &quot;World&quot;); &#x2F;&#x2F; &quot;World&quot;\nconsole.log(false || 0 || null); &#x2F;&#x2F; null\nconsole.log(false || 0 || &quot;Hello&quot;); &#x2F;&#x2F; &quot;Hello&quot;</code></pre>\n\n<h3 id=\"2-amp-amp-（逻辑与）操作符\"><a href=\"#2-amp-amp-（逻辑与）操作符\" class=\"headerlink\" title=\"2. &amp;&amp;（逻辑与）操作符\"></a>2. <code>&amp;&amp;</code>（逻辑与）操作符</h3><ul>\n<li><strong>功能</strong>：<code>&amp;&amp;</code> 操作符用于返回第一个假值（falsy）操作数。如果所有操作数都是真值（truthy），则返回最后一个操作数。</li>\n<li><strong>真值（truthy）</strong>：在 JavaScript 中，除了假值以外的所有值都被视为真值。</li>\n</ul>\n<h4 id=\"示例-15\"><a href=\"#示例-15\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(true &amp;&amp; true); &#x2F;&#x2F; true\nconsole.log(true &amp;&amp; false); &#x2F;&#x2F; false\nconsole.log(false &amp;&amp; true); &#x2F;&#x2F; false\nconsole.log(42 &amp;&amp; 0); &#x2F;&#x2F; 0\nconsole.log(&quot;Hello&quot; &amp;&amp; &quot;World&quot;); &#x2F;&#x2F; &quot;World&quot;\nconsole.log(null &amp;&amp; &quot;Hello&quot;); &#x2F;&#x2F; null\nconsole.log(0 &amp;&amp; &quot;World&quot;); &#x2F;&#x2F; 0\nconsole.log(&quot;Hello&quot; &amp;&amp; 42 &amp;&amp; &quot;World&quot;); &#x2F;&#x2F; &quot;World&quot;</code></pre>\n\n<h3 id=\"3-返回值总结\"><a href=\"#3-返回值总结\" class=\"headerlink\" title=\"3. 返回值总结\"></a>3. 返回值总结</h3><ul>\n<li><strong><code>||</code> 操作符</strong>：<ul>\n<li>返回第一个真值操作数，或最后一个操作数（如果所有操作数都是假值）。</li>\n</ul>\n</li>\n<li><strong><code>&amp;&amp;</code> 操作符</strong>：<ul>\n<li>返回第一个假值操作数，或最后一个操作数（如果所有操作数都是真值）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-结合使用\"><a href=\"#4-结合使用\" class=\"headerlink\" title=\"4. 结合使用\"></a>4. 结合使用</h3><p>这两个操作符可以结合使用，形成复杂的逻辑表达式。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 0;\nconst b &#x3D; &quot;Hello&quot;;\nconst c &#x3D; null;\n\nconst result &#x3D; a || (b &amp;&amp; c); &#x2F;&#x2F; 结果为 &quot;Hello&quot;\nconsole.log(result); &#x2F;&#x2F; &quot;Hello&quot;</code></pre>\n\n<p>在这个例子中，<code>b &amp;&amp; c</code> 的结果是 <code>null</code>，然后 <code>a || null</code> 的结果是 <code>null</code>，所以最终结果是 <code>&quot;Hello&quot;</code>。</p>\n<h3 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>||</code> 和 <code>&amp;&amp;</code> 操作符在 JavaScript 中不仅用于逻辑运算，还可以返回操作数的值。理解它们的返回值规则对于编写有效的条件语句和逻辑表达式非常重要。</p>\n<h2 id=\"Object-is-与比较操作符-“-x3D-x3D-x3D-”、“-x3D-x3D-”-的区别？\"><a href=\"#Object-is-与比较操作符-“-x3D-x3D-x3D-”、“-x3D-x3D-”-的区别？\" class=\"headerlink\" title=\"Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？\"></a>Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？</h2><h2 id=\"什么是-JavaScript-中的包装类型？\"><a href=\"#什么是-JavaScript-中的包装类型？\" class=\"headerlink\" title=\"什么是 JavaScript 中的包装类型？\"></a>什么是 JavaScript 中的包装类型？</h2><p><code>Object.is()</code>、严格相等操作符 <code>===</code> 和宽松相等操作符 <code>==</code> 都用于比较值，但它们的行为和比较规则有所不同。以下是它们之间的主要区别：</p>\n<h3 id=\"1-Object-is\"><a href=\"#1-Object-is\" class=\"headerlink\" title=\"1. Object.is()\"></a>1. <code>Object.is()</code></h3><ul>\n<li><strong>功能</strong>：<code>Object.is()</code> 用于判断两个值是否严格相等。它的行为与严格相等操作符 <code>===</code> 类似，但在某些特殊情况下有所不同。</li>\n<li><strong>比较规则</strong>：<ul>\n<li>对于 <code>NaN</code>，<code>Object.is(NaN, NaN)</code> 返回 <code>true</code>。</li>\n<li>对于 <code>+0</code> 和 <code>-0</code>，<code>Object.is(+0, -0)</code> 返回 <code>false</code>。</li>\n<li>对于其他值，<code>Object.is()</code> 的行为与 <code>===</code> 相同。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-16\"><a href=\"#示例-16\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(Object.is(42, 42)); &#x2F;&#x2F; true\nconsole.log(Object.is(&quot;Hello&quot;, &quot;Hello&quot;)); &#x2F;&#x2F; true\nconsole.log(Object.is(NaN, NaN)); &#x2F;&#x2F; true\nconsole.log(Object.is(+0, -0)); &#x2F;&#x2F; false\nconsole.log(Object.is(null, null)); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"2-严格相等操作符\"><a href=\"#2-严格相等操作符\" class=\"headerlink\" title=\"2. 严格相等操作符 ===\"></a>2. 严格相等操作符 <code>===</code></h3><ul>\n<li><strong>功能</strong>：<code>===</code> 用于判断两个值是否严格相等。它在比较时不会进行类型转换。</li>\n<li><strong>比较规则</strong>：<ul>\n<li>如果两个值的类型不同，则返回 <code>false</code>。</li>\n<li>如果两个值的类型相同，则比较它们的值。</li>\n<li><code>NaN</code> 与任何值（包括自身）都不相等。</li>\n<li><code>+0</code> 和 <code>-0</code> 被视为相等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-17\"><a href=\"#示例-17\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(42 &#x3D;&#x3D;&#x3D; 42); &#x2F;&#x2F; true\nconsole.log(&quot;Hello&quot; &#x3D;&#x3D;&#x3D; &quot;Hello&quot;); &#x2F;&#x2F; true\nconsole.log(NaN &#x3D;&#x3D;&#x3D; NaN); &#x2F;&#x2F; false\nconsole.log(+0 &#x3D;&#x3D;&#x3D; -0); &#x2F;&#x2F; true\nconsole.log(null &#x3D;&#x3D;&#x3D; null); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"3-宽松相等操作符\"><a href=\"#3-宽松相等操作符\" class=\"headerlink\" title=\"3. 宽松相等操作符 ==\"></a>3. 宽松相等操作符 <code>==</code></h3><ul>\n<li><strong>功能</strong>：<code>==</code> 用于判断两个值是否相等，但在比较时会进行类型转换。</li>\n<li><strong>比较规则</strong>：<ul>\n<li>如果两个值的类型不同，JavaScript 会尝试进行类型转换，然后再进行比较。</li>\n<li><code>NaN</code> 与任何值（包括自身）都不相等。</li>\n<li><code>null</code> 和 <code>undefined</code> 被视为相等。</li>\n<li><code>+0</code> 和 <code>-0</code> 被视为相等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-18\"><a href=\"#示例-18\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(42 &#x3D;&#x3D; 42); &#x2F;&#x2F; true\nconsole.log(&quot;Hello&quot; &#x3D;&#x3D; &quot;Hello&quot;); &#x2F;&#x2F; true\nconsole.log(NaN &#x3D;&#x3D; NaN); &#x2F;&#x2F; false\nconsole.log(+0 &#x3D;&#x3D; -0); &#x2F;&#x2F; true\nconsole.log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true\nconsole.log(1 &#x3D;&#x3D; &quot;1&quot;); &#x2F;&#x2F; true (类型转换)</code></pre>\n\n<h3 id=\"4-总结-1\"><a href=\"#4-总结-1\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>Object.is()</code></th>\n<th><code>===</code></th>\n<th><code>==</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>类型转换</strong></td>\n<td>不进行类型转换</td>\n<td>不进行类型转换</td>\n<td>进行类型转换</td>\n</tr>\n<tr>\n<td><strong>NaN</strong></td>\n<td><code>Object.is(NaN, NaN)</code> 返回 <code>true</code></td>\n<td><code>NaN === NaN</code> 返回 <code>false</code></td>\n<td><code>NaN == NaN</code> 返回 <code>false</code></td>\n</tr>\n<tr>\n<td><strong>+0 和 -0</strong></td>\n<td><code>Object.is(+0, -0)</code> 返回 <code>false</code></td>\n<td><code>+0 === -0</code> 返回 <code>true</code></td>\n<td><code>+0 == -0</code> 返回 <code>true</code></td>\n</tr>\n<tr>\n<td><strong>null 和 undefined</strong></td>\n<td><code>Object.is(null, undefined)</code> 返回 <code>false</code></td>\n<td><code>null === undefined</code> 返回 <code>false</code></td>\n<td><code>null == undefined</code> 返回 <code>true</code></td>\n</tr>\n</tbody></table>\n<p>因此，<code>Object.is()</code> 提供了一种更严格的比较方式，适用于需要精确判断的场景，而 <code>===</code> 和 <code>==</code> 则适用于不同的比较需求。</p>\n<h2 id=\"JavaScript-中如何进行隐式类型转换？\"><a href=\"#JavaScript-中如何进行隐式类型转换？\" class=\"headerlink\" title=\"JavaScript 中如何进行隐式类型转换？\"></a>JavaScript 中如何进行隐式类型转换？</h2><p>在 JavaScript 中，隐式类型转换（也称为类型强制）是指在表达式中，JavaScript 自动将一种数据类型转换为另一种数据类型的过程。这种转换通常发生在需要不同类型的值进行比较或运算时。以下是一些常见的隐式类型转换的场景和规则：</p>\n<h3 id=\"1-数字与字符串的运算\"><a href=\"#1-数字与字符串的运算\" class=\"headerlink\" title=\"1. 数字与字符串的运算\"></a>1. 数字与字符串的运算</h3><p>当数字和字符串一起进行运算时，JavaScript 会将数字转换为字符串进行连接。</p>\n<h4 id=\"示例-19\"><a href=\"#示例-19\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(5 + &quot;5&quot;); &#x2F;&#x2F; &quot;55&quot; (数字 5 被转换为字符串)\nconsole.log(&quot;5&quot; - 2); &#x2F;&#x2F; 3 (字符串 &#39;5&#39; 被转换为数字)\nconsole.log(&quot;5&quot; * 2); &#x2F;&#x2F; 10 (字符串 &#39;5&#39; 被转换为数字)</code></pre>\n\n<h3 id=\"2-布尔值的转换\"><a href=\"#2-布尔值的转换\" class=\"headerlink\" title=\"2. 布尔值的转换\"></a>2. 布尔值的转换</h3><p>在进行运算时，布尔值会被转换为数字：<code>true</code> 转换为 <code>1</code>，<code>false</code> 转换为 <code>0</code>。</p>\n<h4 id=\"示例-20\"><a href=\"#示例-20\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(true + 1); &#x2F;&#x2F; 2 (true 被转换为 1)\nconsole.log(false + 1); &#x2F;&#x2F; 1 (false 被转换为 0)\nconsole.log(true - 1); &#x2F;&#x2F; 0\nconsole.log(false - 1); &#x2F;&#x2F; -1</code></pre>\n\n<h3 id=\"3-比较操作符\"><a href=\"#3-比较操作符\" class=\"headerlink\" title=\"3. 比较操作符\"></a>3. 比较操作符</h3><p>在使用比较操作符（如 <code>==</code> 和 <code>!=</code>）时，JavaScript 会进行类型转换以比较值。</p>\n<h4 id=\"示例-21\"><a href=\"#示例-21\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(5 &#x3D;&#x3D; &quot;5&quot;); &#x2F;&#x2F; true (字符串 &#39;5&#39; 被转换为数字)\nconsole.log(null &#x3D;&#x3D; undefined); &#x2F;&#x2F; true (null 和 undefined 被视为相等)\nconsole.log(0 &#x3D;&#x3D; false); &#x2F;&#x2F; true (false 被转换为 0)\nconsole.log(&quot;&quot; &#x3D;&#x3D; false); &#x2F;&#x2F; true (空字符串被转换为 0)</code></pre>\n\n<h3 id=\"4-对象与原始值的转换\"><a href=\"#4-对象与原始值的转换\" class=\"headerlink\" title=\"4. 对象与原始值的转换\"></a>4. 对象与原始值的转换</h3><p>当对象与原始值进行运算时，JavaScript 会调用对象的 <code>valueOf()</code> 或 <code>toString()</code> 方法进行转换。</p>\n<h4 id=\"示例-22\"><a href=\"#示例-22\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  valueOf: function () &#123;\n    return 42;\n  &#125;,\n  toString: function () &#123;\n    return &quot;Hello&quot;;\n  &#125;,\n&#125;;\n\nconsole.log(obj + 1); &#x2F;&#x2F; 43 (obj.valueOf() 被调用)\nconsole.log(String(obj)); &#x2F;&#x2F; &quot;Hello&quot; (obj.toString() 被调用)</code></pre>\n\n<h3 id=\"5-使用-操作符\"><a href=\"#5-使用-操作符\" class=\"headerlink\" title=\"5. 使用 + 操作符\"></a>5. 使用 <code>+</code> 操作符</h3><p><code>+</code> 操作符在处理字符串和数字时会进行隐式类型转换。如果其中一个操作数是字符串，另一个操作数会被转换为字符串。</p>\n<h4 id=\"示例-23\"><a href=\"#示例-23\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(1 + &quot;2&quot;); &#x2F;&#x2F; &quot;12&quot; (数字 1 被转换为字符串)\nconsole.log(&quot;2&quot; + 3); &#x2F;&#x2F; &quot;23&quot; (数字 3 被转换为字符串)</code></pre>\n\n<h3 id=\"6-undefined-和-null\"><a href=\"#6-undefined-和-null\" class=\"headerlink\" title=\"6. undefined 和 null\"></a>6. <code>undefined</code> 和 <code>null</code></h3><p>在进行运算时，<code>undefined</code> 和 <code>null</code> 也会被转换为数字。<code>undefined</code> 转换为 <code>NaN</code>，而 <code>null</code> 转换为 <code>0</code>。</p>\n<h4 id=\"示例-24\"><a href=\"#示例-24\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(null + 1); &#x2F;&#x2F; 1 (null 被转换为 0)\nconsole.log(undefined + 1); &#x2F;&#x2F; NaN (undefined 被转换为 NaN)</code></pre>\n\n<h3 id=\"7-总结-1\"><a href=\"#7-总结-1\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>隐式类型转换在 JavaScript 中是一个重要的特性，理解其规则可以帮助开发者避免潜在的错误。以下是一些关键点：</p>\n<ul>\n<li>数字与字符串运算时，数字会被转换为字符串。</li>\n<li>布尔值在运算时会被转换为数字。</li>\n<li>比较操作符会进行类型转换。</li>\n<li>对象与原始值运算时，会调用 <code>valueOf()</code> 或 <code>toString()</code> 方法。</li>\n<li><code>undefined</code> 和 <code>null</code> 在运算时会被转换为特定的值。</li>\n</ul>\n<p>了解这些规则可以帮助您更好地控制代码的行为，避免意外的结果。</p>\n<h2 id=\"操作符什么时候用于字符串的拼接？\"><a href=\"#操作符什么时候用于字符串的拼接？\" class=\"headerlink\" title=\"+操作符什么时候用于字符串的拼接？\"></a>+操作符什么时候用于字符串的拼接？</h2><p>在 JavaScript 中，<code>+</code> 操作符可以用于两种主要的操作：数字相加和字符串拼接。以下是关于 <code>+</code> 操作符用于字符串拼接的详细说明：</p>\n<h3 id=\"1-字符串拼接的基本规则\"><a href=\"#1-字符串拼接的基本规则\" class=\"headerlink\" title=\"1. 字符串拼接的基本规则\"></a>1. 字符串拼接的基本规则</h3><ul>\n<li>当 <code>+</code> 操作符的任一操作数是字符串时，JavaScript 会将另一个操作数转换为字符串，并执行字符串拼接。</li>\n<li>如果两个操作数都是字符串，<code>+</code> 操作符将它们连接在一起。</li>\n</ul>\n<h3 id=\"2-示例-1\"><a href=\"#2-示例-1\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h3><h4 id=\"2-1-字符串与字符串的拼接\"><a href=\"#2-1-字符串与字符串的拼接\" class=\"headerlink\" title=\"2.1. 字符串与字符串的拼接\"></a>2.1. 字符串与字符串的拼接</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const str1 &#x3D; &quot;Hello&quot;;\nconst str2 &#x3D; &quot;World&quot;;\nconst result &#x3D; str1 + &quot; &quot; + str2; &#x2F;&#x2F; &quot;Hello World&quot;\nconsole.log(result);</code></pre>\n\n<p>在这个例子中，两个字符串 <code>&quot;Hello&quot;</code> 和 <code>&quot;World&quot;</code> 被拼接在一起，中间加了一个空格。</p>\n<h4 id=\"2-2-字符串与数字的拼接\"><a href=\"#2-2-字符串与数字的拼接\" class=\"headerlink\" title=\"2.2. 字符串与数字的拼接\"></a>2.2. 字符串与数字的拼接</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const str &#x3D; &quot;The answer is &quot;;\nconst num &#x3D; 42;\nconst result &#x3D; str + num; &#x2F;&#x2F; &quot;The answer is 42&quot;\nconsole.log(result);</code></pre>\n\n<p>在这个例子中，数字 <code>42</code> 被转换为字符串，并与字符串 <code>&quot;The answer is &quot;</code> 拼接在一起。</p>\n<h4 id=\"2-3-字符串与布尔值的拼接\"><a href=\"#2-3-字符串与布尔值的拼接\" class=\"headerlink\" title=\"2.3. 字符串与布尔值的拼接\"></a>2.3. 字符串与布尔值的拼接</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const str &#x3D; &quot;The value is &quot;;\nconst bool &#x3D; true;\nconst result &#x3D; str + bool; &#x2F;&#x2F; &quot;The value is true&quot;\nconsole.log(result);</code></pre>\n\n<p>在这个例子中，布尔值 <code>true</code> 被转换为字符串，并与字符串 <code>&quot;The value is &quot;</code> 拼接在一起。</p>\n<h3 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h3><ul>\n<li><strong>优先级</strong>：在表达式中，<code>+</code> 操作符的优先级较高，因此在拼接字符串时，确保操作数的顺序和类型是正确的。</li>\n<li><strong>隐式类型转换</strong>：当 <code>+</code> 操作符用于数字和字符串时，数字会被转换为字符串进行拼接，而不是进行数学运算。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(5 + &quot;5&quot;); &#x2F;&#x2F; &quot;55&quot; (数字 5 被转换为字符串)\nconsole.log(&quot;5&quot; - 2); &#x2F;&#x2F; 3 (字符串 &quot;5&quot; 被转换为数字)</code></pre>\n\n<h3 id=\"4-总结-2\"><a href=\"#4-总结-2\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p><code>+</code> 操作符用于字符串拼接的情况主要发生在以下几种情况下：</p>\n<ul>\n<li>当任一操作数是字符串时，另一个操作数会被转换为字符串并进行拼接。</li>\n<li>如果两个操作数都是字符串，<code>+</code> 操作符将它们连接在一起。</li>\n</ul>\n<p>理解这些规则可以帮助您在 JavaScript 中有效地使用 <code>+</code> 操作符进行字符串拼接。</p>\n<h2 id=\"为什么会有-BigInt-的提案？\"><a href=\"#为什么会有-BigInt-的提案？\" class=\"headerlink\" title=\"为什么会有 BigInt 的提案？\"></a>为什么会有 BigInt 的提案？</h2><p><code>BigInt</code> 是 JavaScript 中的一种新数据类型，旨在解决在处理大整数时的精度问题。以下是关于为什么会有 <code>BigInt</code> 提案的详细说明：</p>\n<h3 id=\"1-整数精度限制\"><a href=\"#1-整数精度限制\" class=\"headerlink\" title=\"1. 整数精度限制\"></a>1. 整数精度限制</h3><p>在 JavaScript 中，所有数字（包括整数和浮点数）都使用 IEEE 754 双精度浮点格式表示。这种格式的最大安全整数是 <code>2^53 - 1</code>（即 <code>9007199254740991</code>），超出这个范围的整数会导致精度丢失。</p>\n<h4 id=\"示例-25\"><a href=\"#示例-25\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(9007199254740991); &#x2F;&#x2F; 9007199254740991\nconsole.log(9007199254740992); &#x2F;&#x2F; 9007199254740992 (精度丢失)\nconsole.log(9007199254740993); &#x2F;&#x2F; 9007199254740992 (精度丢失)</code></pre>\n\n<p>在这个例子中，<code>9007199254740992</code> 和 <code>9007199254740993</code> 被错误地表示为 <code>9007199254740992</code>，这表明在处理大整数时存在精度问题。</p>\n<h3 id=\"2-需求增加\"><a href=\"#2-需求增加\" class=\"headerlink\" title=\"2. 需求增加\"></a>2. 需求增加</h3><p>随着现代应用程序（如金融、科学计算和大数据处理）的发展，开发者越来越需要处理超出安全整数范围的大整数。传统的数字类型无法满足这些需求，因此需要一种新的数据类型来处理大整数。</p>\n<h3 id=\"3-提案背景\"><a href=\"#3-提案背景\" class=\"headerlink\" title=\"3. 提案背景\"></a>3. 提案背景</h3><p>为了满足对大整数的需求，JavaScript 提出了 <code>BigInt</code> 的提案。<code>BigInt</code> 允许开发者表示任意大小的整数，而不受 <code>Number</code> 类型的限制。它的引入使得开发者可以安全地进行大整数的计算，而不会遇到精度丢失的问题。</p>\n<h3 id=\"4-BigInt-的特性\"><a href=\"#4-BigInt-的特性\" class=\"headerlink\" title=\"4. BigInt 的特性\"></a>4. <code>BigInt</code> 的特性</h3><ul>\n<li><p><strong>任意大小</strong>：<code>BigInt</code> 可以表示任意大小的整数，超出 <code>Number</code> 类型的范围。</p>\n</li>\n<li><p><strong>语法</strong>：可以通过在数字后面加上 <code>n</code> 后缀来创建 <code>BigInt</code>，或者使用 <code>BigInt()</code> 函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const bigInt1 &#x3D; 123456789012345678901234567890n; &#x2F;&#x2F; 使用 n 后缀\nconst bigInt2 &#x3D; BigInt(&quot;123456789012345678901234567890&quot;); &#x2F;&#x2F; 使用 BigInt() 函数</code></pre>\n</li>\n<li><p><strong>与 <code>Number</code> 的兼容性</strong>：<code>BigInt</code> 和 <code>Number</code> 之间的运算需要显式转换，因为它们是不同的数据类型。</p>\n</li>\n</ul>\n<h3 id=\"5-总结-2\"><a href=\"#5-总结-2\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>BigInt</code> 的提案是为了满足开发者在处理大整数时的需求，解决了 JavaScript 中 <code>Number</code> 类型在表示大整数时的精度限制。通过引入 <code>BigInt</code>，JavaScript 提供了一种安全且灵活的方式来处理任意大小的整数，适应了现代应用程序的需求。</p>\n<h2 id=\"object-assign-和扩展运算法是深拷贝还是浅拷贝，两者区别\"><a href=\"#object-assign-和扩展运算法是深拷贝还是浅拷贝，两者区别\" class=\"headerlink\" title=\"object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别\"></a>object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别</h2><p>在 JavaScript 中，<code>Object.assign()</code> 和扩展运算符（<code>...</code>）都用于对象的合并和复制，但它们都是<strong>浅拷贝</strong>，而不是深拷贝。以下是对这两者的详细说明及其区别：</p>\n<h3 id=\"1-Object-assign\"><a href=\"#1-Object-assign\" class=\"headerlink\" title=\"1. Object.assign()\"></a>1. <code>Object.assign()</code></h3><ul>\n<li><strong>功能</strong>：<code>Object.assign()</code> 方法用于将一个或多个源对象的可枚举属性复制到目标对象。它返回目标对象。</li>\n<li><strong>浅拷贝</strong>：<code>Object.assign()</code> 只会复制对象的第一层属性。如果属性是对象（如数组或其他对象），则复制的是引用，而不是对象本身。</li>\n</ul>\n<h4 id=\"示例-26\"><a href=\"#示例-26\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const target &#x3D; &#123; a: 1 &#125;;\nconst source &#x3D; &#123; b: 2, c: &#123; d: 3 &#125; &#125;;\n\nconst result &#x3D; Object.assign(target, source);\n\nconsole.log(result); &#x2F;&#x2F; &#123; a: 1, b: 2, c: &#123; d: 3 &#125; &#125;\nconsole.log(target); &#x2F;&#x2F; &#123; a: 1, b: 2, c: &#123; d: 3 &#125; &#125;\n\n&#x2F;&#x2F; 修改 source.c 的属性\nsource.c.d &#x3D; 4;\n\nconsole.log(target.c.d); &#x2F;&#x2F; 4 (target.c 也被修改了，因为是引用)</code></pre>\n\n<h3 id=\"2-扩展运算符（-）\"><a href=\"#2-扩展运算符（-）\" class=\"headerlink\" title=\"2. 扩展运算符（...）\"></a>2. 扩展运算符（<code>...</code>）</h3><ul>\n<li><strong>功能</strong>：扩展运算符用于将一个对象的可枚举属性复制到另一个对象中，语法上更简洁。</li>\n<li><strong>浅拷贝</strong>：与 <code>Object.assign()</code> 类似，扩展运算符也只会复制对象的第一层属性。</li>\n</ul>\n<h4 id=\"示例-27\"><a href=\"#示例-27\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj1 &#x3D; &#123; a: 1 &#125;;\nconst obj2 &#x3D; &#123; b: 2, c: &#123; d: 3 &#125; &#125;;\n\nconst result &#x3D; &#123; ...obj1, ...obj2 &#125;;\n\nconsole.log(result); &#x2F;&#x2F; &#123; a: 1, b: 2, c: &#123; d: 3 &#125; &#125;\nconsole.log(obj1); &#x2F;&#x2F; &#123; a: 1 &#125;\n\n&#x2F;&#x2F; 修改 obj2.c 的属性\nobj2.c.d &#x3D; 4;\n\nconsole.log(result.c.d); &#x2F;&#x2F; 3 (result.c 没有被修改，因为是新的对象)</code></pre>\n\n<h3 id=\"3-深拷贝与浅拷贝的区别\"><a href=\"#3-深拷贝与浅拷贝的区别\" class=\"headerlink\" title=\"3. 深拷贝与浅拷贝的区别\"></a>3. 深拷贝与浅拷贝的区别</h3><ul>\n<li><strong>浅拷贝</strong>：只复制对象的第一层属性。如果属性是对象，则复制的是引用。修改嵌套对象的属性会影响到原对象。</li>\n<li><strong>深拷贝</strong>：复制对象及其所有嵌套对象的属性，创建一个完全独立的副本。修改副本的属性不会影响原对象。</li>\n</ul>\n<h3 id=\"4-深拷贝的实现\"><a href=\"#4-深拷贝的实现\" class=\"headerlink\" title=\"4. 深拷贝的实现\"></a>4. 深拷贝的实现</h3><p>要实现深拷贝，可以使用以下方法：</p>\n<ul>\n<li><strong>JSON 方法</strong>：使用 <code>JSON.stringify()</code> 和 <code>JSON.parse()</code> 进行深拷贝，但此方法不适用于包含函数、<code>undefined</code>、<code>Symbol</code>、循环引用等的对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const original &#x3D; &#123; a: 1, b: &#123; c: 2 &#125; &#125;;\nconst deepCopy &#x3D; JSON.parse(JSON.stringify(original));\n\noriginal.b.c &#x3D; 3;\nconsole.log(deepCopy.b.c); &#x2F;&#x2F; 2 (深拷贝，原对象的修改不影响副本)</code></pre>\n\n<ul>\n<li><strong>递归函数</strong>：编写自定义的深拷贝函数，手动处理对象的每一层。</li>\n</ul>\n<h3 id=\"5-总结-3\"><a href=\"#5-总结-3\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><code>Object.assign()</code> 和扩展运算符（<code>...</code>）都是浅拷贝。</li>\n<li>修改嵌套对象的属性会影响原对象。</li>\n<li>深拷贝可以通过 <code>JSON</code> 方法或自定义递归函数实现。</li>\n</ul>\n<h1 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h1><h2 id=\"let、const、var-的区别\"><a href=\"#let、const、var-的区别\" class=\"headerlink\" title=\"let、const、var 的区别\"></a>let、const、var 的区别</h2><p>在 JavaScript 中，<code>let</code>、<code>const</code> 和 <code>var</code> 是用于声明变量的关键字，它们之间有一些重要的区别。以下是对这三者的详细说明：</p>\n<h3 id=\"1-作用域\"><a href=\"#1-作用域\" class=\"headerlink\" title=\"1. 作用域\"></a>1. 作用域</h3><ul>\n<li><p>**<code>var</code>**：</p>\n<ul>\n<li><code>var</code> 声明的变量具有<strong>函数作用域</strong>或<strong>全局作用域</strong>。如果在函数内部使用 <code>var</code> 声明变量，该变量在整个函数内可用；如果在函数外部声明，则在全局范围内可用。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  if (true) &#123;\n    var x &#x3D; 10; &#x2F;&#x2F; x 在整个函数内可用\n  &#125;\n  console.log(x); &#x2F;&#x2F; 10\n&#125;\nexample();</code></pre>\n</li>\n<li><p>**<code>let</code> 和 <code>const</code>**：</p>\n<ul>\n<li><code>let</code> 和 <code>const</code> 声明的变量具有<strong>块作用域</strong>。它们只在声明它们的代码块内可用。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  if (true) &#123;\n    let y &#x3D; 20; &#x2F;&#x2F; y 只在这个块内可用\n    const z &#x3D; 30; &#x2F;&#x2F; z 也只在这个块内可用\n  &#125;\n  console.log(y); &#x2F;&#x2F; ReferenceError: y is not defined\n  console.log(z); &#x2F;&#x2F; ReferenceError: z is not defined\n&#125;\nexample();</code></pre></li>\n</ul>\n<h3 id=\"2-变量提升\"><a href=\"#2-变量提升\" class=\"headerlink\" title=\"2. 变量提升\"></a>2. 变量提升</h3><ul>\n<li><p>**<code>var</code>**：</p>\n<ul>\n<li><code>var</code> 声明的变量会被提升到函数或全局作用域的顶部，但赋值不会被提升。可以在声明之前访问变量，但值为 <code>undefined</code>。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(a); &#x2F;&#x2F; undefined\nvar a &#x3D; 5;\nconsole.log(a); &#x2F;&#x2F; 5</code></pre>\n</li>\n<li><p>**<code>let</code> 和 <code>const</code>**：</p>\n<ul>\n<li><code>let</code> 和 <code>const</code> 也会被提升，但在声明之前访问会导致 <code>ReferenceError</code>，因为它们处于“暂时性死区”（Temporal Dead Zone）。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(b); &#x2F;&#x2F; ReferenceError: Cannot access &#39;b&#39; before initialization\nlet b &#x3D; 10;\n\nconsole.log(c); &#x2F;&#x2F; ReferenceError: Cannot access &#39;c&#39; before initialization\nconst c &#x3D; 15;</code></pre></li>\n</ul>\n<h3 id=\"3-重新赋值\"><a href=\"#3-重新赋值\" class=\"headerlink\" title=\"3. 重新赋值\"></a>3. 重新赋值</h3><ul>\n<li><p>**<code>var</code>**：</p>\n<ul>\n<li>使用 <code>var</code> 声明的变量可以被重新赋值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var d &#x3D; 1;\nd &#x3D; 2; &#x2F;&#x2F; 合法</code></pre>\n</li>\n<li><p>**<code>let</code>**：</p>\n<ul>\n<li>使用 <code>let</code> 声明的变量也可以被重新赋值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let e &#x3D; 3;\ne &#x3D; 4; &#x2F;&#x2F; 合法</code></pre>\n</li>\n<li><p>**<code>const</code>**：</p>\n<ul>\n<li>使用 <code>const</code> 声明的变量不能被重新赋值。<code>const</code> 声明的变量必须在声明时初始化。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const f &#x3D; 5;\nf &#x3D; 6; &#x2F;&#x2F; TypeError: Assignment to constant variable.</code></pre>\n\n<ul>\n<li>但是，如果 <code>const</code> 声明的是一个对象或数组，可以修改对象的属性或数组的元素，但不能重新赋值整个对象或数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; key: 1 &#125;;\nobj.key &#x3D; 2; &#x2F;&#x2F; 合法\nconsole.log(obj.key); &#x2F;&#x2F; 2\n\nconst arr &#x3D; [1, 2, 3];\narr.push(4); &#x2F;&#x2F; 合法\nconsole.log(arr); &#x2F;&#x2F; [1, 2, 3, 4]</code></pre></li>\n</ul>\n<h3 id=\"4-总结-3\"><a href=\"#4-总结-3\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>var</code></th>\n<th><code>let</code></th>\n<th><code>const</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>作用域</strong></td>\n<td>函数作用域或全局作用域</td>\n<td>块作用域</td>\n<td>块作用域</td>\n</tr>\n<tr>\n<td><strong>变量提升</strong></td>\n<td>提升，值为 <code>undefined</code></td>\n<td>提升，暂时性死区</td>\n<td>提升，暂时性死区</td>\n</tr>\n<tr>\n<td><strong>重新赋值</strong></td>\n<td>可以重新赋值</td>\n<td>可以重新赋值</td>\n<td>不可重新赋值</td>\n</tr>\n<tr>\n<td><strong>声明时初始化</strong></td>\n<td>可选</td>\n<td>可选</td>\n<td>必须</td>\n</tr>\n</tbody></table>\n<p>理解这些区别有助于在 JavaScript 中更好地管理变量的作用域和生命周期。</p>\n<h2 id=\"const-对象的属性可以修改吗\"><a href=\"#const-对象的属性可以修改吗\" class=\"headerlink\" title=\"const 对象的属性可以修改吗\"></a>const 对象的属性可以修改吗</h2><p>在 JavaScript 中，使用 <code>const</code> 声明的变量表示该变量的引用是常量，意味着你不能重新赋值给这个变量。然而，如果 <code>const</code> 声明的是一个对象或数组，你仍然可以修改该对象或数组的属性或元素。</p>\n<h3 id=\"示例-28\"><a href=\"#示例-28\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"1-修改对象的属性\"><a href=\"#1-修改对象的属性\" class=\"headerlink\" title=\"1. 修改对象的属性\"></a>1. 修改对象的属性</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; key: 1 &#125;;\n\n&#x2F;&#x2F; 修改对象的属性\nobj.key &#x3D; 2; &#x2F;&#x2F; 合法\nconsole.log(obj.key); &#x2F;&#x2F; 2\n\n&#x2F;&#x2F; 添加新的属性\nobj.newKey &#x3D; 3; &#x2F;&#x2F; 合法\nconsole.log(obj.newKey); &#x2F;&#x2F; 3\n\n&#x2F;&#x2F; 尝试重新赋值会导致错误\n&#x2F;&#x2F; obj &#x3D; &#123; newKey: 4 &#125;; &#x2F;&#x2F; TypeError: Assignment to constant variable.</code></pre>\n\n<p>在这个例子中，虽然 <code>obj</code> 是一个 <code>const</code> 声明的变量，但我们可以修改其属性 <code>key</code> 和添加新的属性 <code>newKey</code>。</p>\n<h4 id=\"2-修改数组的元素\"><a href=\"#2-修改数组的元素\" class=\"headerlink\" title=\"2. 修改数组的元素\"></a>2. 修改数组的元素</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\n\n&#x2F;&#x2F; 修改数组的元素\narr[0] &#x3D; 4; &#x2F;&#x2F; 合法\nconsole.log(arr); &#x2F;&#x2F; [4, 2, 3]\n\n&#x2F;&#x2F; 添加新的元素\narr.push(5); &#x2F;&#x2F; 合法\nconsole.log(arr); &#x2F;&#x2F; [4, 2, 3, 5]\n\n&#x2F;&#x2F; 尝试重新赋值会导致错误\n&#x2F;&#x2F; arr &#x3D; [6, 7, 8]; &#x2F;&#x2F; TypeError: Assignment to constant variable.</code></pre>\n\n<p>在这个例子中，虽然 <code>arr</code> 是一个 <code>const</code> 声明的变量，但我们可以修改其元素和添加新的元素。</p>\n<h3 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用 <code>const</code> 声明的对象或数组的引用是常量，不能重新赋值。</li>\n<li>但是，可以修改对象的属性或数组的元素，因为这些操作并不改变变量的引用，而是改变了引用的内容。</li>\n</ul>\n<h2 id=\"如果-new-一个箭头函数的会怎么样\"><a href=\"#如果-new-一个箭头函数的会怎么样\" class=\"headerlink\" title=\"如果 new 一个箭头函数的会怎么样\"></a>如果 new 一个箭头函数的会怎么样</h2><p>在 JavaScript 中，箭头函数（arrow function）与普通函数有一些重要的区别，其中之一是箭头函数不能被用作构造函数。因此，尝试使用 <code>new</code> 关键字来实例化一个箭头函数会导致错误。</p>\n<h3 id=\"1-尝试使用-new-关键字\"><a href=\"#1-尝试使用-new-关键字\" class=\"headerlink\" title=\"1. 尝试使用 new 关键字\"></a>1. 尝试使用 <code>new</code> 关键字</h3><p>如果你尝试使用 <code>new</code> 关键字来创建一个箭头函数的实例，会抛出一个 <code>TypeError</code>。</p>\n<h4 id=\"示例-29\"><a href=\"#示例-29\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const ArrowFunction &#x3D; () &#x3D;&gt; &#123;\n  this.value &#x3D; 42;\n&#125;;\n\n&#x2F;&#x2F; 尝试使用 new 关键字\nconst instance &#x3D; new ArrowFunction(); &#x2F;&#x2F; TypeError: ArrowFunction is not a constructor</code></pre>\n\n<p>在这个例子中，<code>ArrowFunction</code> 是一个箭头函数，使用 <code>new</code> 关键字尝试实例化它会导致 <code>TypeError</code>，因为箭头函数不能作为构造函数。</p>\n<h3 id=\"2-箭头函数的特性\"><a href=\"#2-箭头函数的特性\" class=\"headerlink\" title=\"2. 箭头函数的特性\"></a>2. 箭头函数的特性</h3><ul>\n<li><p><strong>没有 <code>this</code> 绑定</strong>：箭头函数不绑定自己的 <code>this</code>，它会从外部上下文中继承 <code>this</code> 的值。这意味着在箭头函数内部，<code>this</code> 的值是定义时的上下文，而不是调用时的上下文。</p>\n</li>\n<li><p><strong>不能用作构造函数</strong>：正如前面所述，箭头函数不能用作构造函数，因此不能使用 <code>new</code> 关键字。</p>\n</li>\n<li><p><strong>没有 <code>arguments</code> 对象</strong>：箭头函数没有自己的 <code>arguments</code> 对象。如果需要访问参数，可以使用剩余参数语法。</p>\n</li>\n</ul>\n<h3 id=\"3-总结-2\"><a href=\"#3-总结-2\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li>尝试使用 <code>new</code> 关键字来实例化一个箭头函数会导致 <code>TypeError</code>，因为箭头函数不能作为构造函数。</li>\n<li>箭头函数的设计目的是为了简化函数的书写和处理 <code>this</code> 的上下文，而不是用于创建对象的构造函数。</li>\n</ul>\n<h2 id=\"箭头函数与普通函数的区别\"><a href=\"#箭头函数与普通函数的区别\" class=\"headerlink\" title=\"箭头函数与普通函数的区别\"></a>箭头函数与普通函数的区别</h2><p>箭头函数（arrow function）和普通函数（function declaration 或 function expression）在 JavaScript 中有一些重要的区别。以下是它们之间的主要区别：</p>\n<h3 id=\"1-语法\"><a href=\"#1-语法\" class=\"headerlink\" title=\"1. 语法\"></a>1. 语法</h3><ul>\n<li><strong>箭头函数</strong>：<ul>\n<li>更简洁的语法，使用 <code>=&gt;</code> 符号。</li>\n<li>如果只有一个参数，可以省略圆括号；如果函数体只有一行，可以省略大括号和 <code>return</code> 关键字。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const add &#x3D; (a, b) &#x3D;&gt; a + b; &#x2F;&#x2F; 简写\nconst square &#x3D; (x) &#x3D;&gt; x * x; &#x2F;&#x2F; 单个参数</code></pre>\n\n<ul>\n<li><strong>普通函数</strong>：<ul>\n<li>使用 <code>function</code> 关键字定义，语法相对冗长。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function add(a, b) &#123;\n  return a + b;\n&#125;\n\nconst square &#x3D; function (x) &#123;\n  return x * x;\n&#125;;</code></pre>\n\n<h3 id=\"2-this-绑定\"><a href=\"#2-this-绑定\" class=\"headerlink\" title=\"2. this 绑定\"></a>2. <code>this</code> 绑定</h3><ul>\n<li><strong>箭头函数</strong>：<ul>\n<li>不绑定自己的 <code>this</code>，而是从外部上下文中继承 <code>this</code> 的值。这使得箭头函数在处理回调时非常方便，尤其是在类方法中。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Counter &#123;\n  constructor() &#123;\n    this.count &#x3D; 0;\n  &#125;\n  increment() &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      this.count++; &#x2F;&#x2F; 这里的 this 指向 Counter 实例\n      console.log(this.count);\n    &#125;, 1000);\n  &#125;\n&#125;\n\nconst counter &#x3D; new Counter();\ncounter.increment(); &#x2F;&#x2F; 1</code></pre>\n\n<ul>\n<li><strong>普通函数</strong>：<ul>\n<li>绑定自己的 <code>this</code>，在调用时决定 <code>this</code> 的值。通常在回调中使用时，<code>this</code> 的值可能会丢失。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Counter &#123;\n  constructor() &#123;\n    this.count &#x3D; 0;\n  &#125;\n  increment() &#123;\n    setTimeout(function () &#123;\n      this.count++; &#x2F;&#x2F; 这里的 this 不再指向 Counter 实例\n      console.log(this.count); &#x2F;&#x2F; NaN 或者抛出错误\n    &#125;, 1000);\n  &#125;\n&#125;\n\nconst counter &#x3D; new Counter();\ncounter.increment();</code></pre>\n\n<h3 id=\"3-arguments-对象\"><a href=\"#3-arguments-对象\" class=\"headerlink\" title=\"3. arguments 对象\"></a>3. <code>arguments</code> 对象</h3><ul>\n<li><strong>箭头函数</strong>：<ul>\n<li>没有自己的 <code>arguments</code> 对象。如果需要访问参数，可以使用剩余参数语法。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arrowFunc &#x3D; (...args) &#x3D;&gt; &#123;\n  console.log(args); &#x2F;&#x2F; 可以访问所有参数\n&#125;;\n\narrowFunc(1, 2, 3); &#x2F;&#x2F; [1, 2, 3]</code></pre>\n\n<ul>\n<li><strong>普通函数</strong>：<ul>\n<li>拥有自己的 <code>arguments</code> 对象，可以访问传入的所有参数。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function normalFunc() &#123;\n  console.log(arguments); &#x2F;&#x2F; 可以访问所有参数\n&#125;\n\nnormalFunc(1, 2, 3); &#x2F;&#x2F; [1, 2, 3]</code></pre>\n\n<h3 id=\"4-作为构造函数\"><a href=\"#4-作为构造函数\" class=\"headerlink\" title=\"4. 作为构造函数\"></a>4. 作为构造函数</h3><ul>\n<li><strong>箭头函数</strong>：<ul>\n<li>不能用作构造函数，不能使用 <code>new</code> 关键字实例化。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const ArrowFunc &#x3D; () &#x3D;&gt; &#123;&#125;;\nconst instance &#x3D; new ArrowFunc(); &#x2F;&#x2F; TypeError: ArrowFunc is not a constructor</code></pre>\n\n<ul>\n<li><strong>普通函数</strong>：<ul>\n<li>可以用作构造函数，使用 <code>new</code> 关键字实例化。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function NormalFunc() &#123;\n  this.value &#x3D; 42;\n&#125;\nconst instance &#x3D; new NormalFunc();\nconsole.log(instance.value); &#x2F;&#x2F; 42</code></pre>\n\n<h3 id=\"5-方法定义\"><a href=\"#5-方法定义\" class=\"headerlink\" title=\"5. 方法定义\"></a>5. 方法定义</h3><ul>\n<li><strong>箭头函数</strong>：<ul>\n<li>不适合用作对象的方法，因为它不绑定 <code>this</code>。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  value: 42,\n  getValue: () &#x3D;&gt; this.value, &#x2F;&#x2F; this 不指向 obj\n&#125;;\nconsole.log(obj.getValue()); &#x2F;&#x2F; undefined</code></pre>\n\n<ul>\n<li><strong>普通函数</strong>：<ul>\n<li>适合用作对象的方法，能够正确绑定 <code>this</code>。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  value: 42,\n  getValue: function () &#123;\n    return this.value; &#x2F;&#x2F; this 指向 obj\n  &#125;,\n&#125;;\nconsole.log(obj.getValue()); &#x2F;&#x2F; 42</code></pre>\n\n<h3 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>箭头函数</th>\n<th>普通函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>语法</strong></td>\n<td>更简洁</td>\n<td>使用 <code>function</code> 关键字</td>\n</tr>\n<tr>\n<td><strong><code>this</code> 绑定</strong></td>\n<td>不绑定，继承外部 <code>this</code></td>\n<td>绑定自己的 <code>this</code></td>\n</tr>\n<tr>\n<td><strong><code>arguments</code> 对象</strong></td>\n<td>没有，使用剩余参数</td>\n<td>有，访问所有参数</td>\n</tr>\n<tr>\n<td><strong>构造函数</strong></td>\n<td>不能用作构造函数</td>\n<td>可以用作构造函数</td>\n</tr>\n<tr>\n<td><strong>方法定义</strong></td>\n<td>不适合用作对象的方法</td>\n<td>适合用作对象的方法</td>\n</tr>\n</tbody></table>\n<p>理解这些区别有助于在 JavaScript 中选择合适的函数类型，以满足特定的编程需求。</p>\n<h2 id=\"箭头函数的-this-指向哪⾥？\"><a href=\"#箭头函数的-this-指向哪⾥？\" class=\"headerlink\" title=\"箭头函数的 this 指向哪⾥？\"></a>箭头函数的 this 指向哪⾥？</h2><p>在 JavaScript 中，箭头函数的 <code>this</code> 指向是一个重要的特性，它与普通函数的 <code>this</code> 绑定方式有所不同。以下是关于箭头函数 <code>this</code> 指向的详细说明：</p>\n<h3 id=\"1-继承外部上下文的-this\"><a href=\"#1-继承外部上下文的-this\" class=\"headerlink\" title=\"1. 继承外部上下文的 this\"></a>1. 继承外部上下文的 <code>this</code></h3><ul>\n<li>**箭头函数不绑定自己的 <code>this</code>**：箭头函数不会创建自己的 <code>this</code> 上下文，而是从其外部上下文（即定义时的上下文）中继承 <code>this</code> 的值。这意味着在箭头函数内部，<code>this</code> 的值与外部函数或上下文中的 <code>this</code> 相同。</li>\n</ul>\n<h3 id=\"2-示例-2\"><a href=\"#2-示例-2\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h3><h4 id=\"2-1-在普通函数中的-this\"><a href=\"#2-1-在普通函数中的-this\" class=\"headerlink\" title=\"2.1. 在普通函数中的 this\"></a>2.1. 在普通函数中的 <code>this</code></h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person() &#123;\n  this.age &#x3D; 0;\n\n  setInterval(function () &#123;\n    this.age++; &#x2F;&#x2F; 这里的 this 指向全局对象（在浏览器中是 window）\n    console.log(this.age);\n  &#125;, 1000);\n&#125;\n\nconst p &#x3D; new Person(); &#x2F;&#x2F; 这里会导致 age 为 NaN，因为 this 不指向 Person 实例</code></pre>\n\n<p>在这个例子中，<code>setInterval</code> 中的普通函数的 <code>this</code> 指向全局对象，而不是 <code>Person</code> 实例，因此 <code>this.age</code> 会导致错误。</p>\n<h4 id=\"2-2-在箭头函数中的-this\"><a href=\"#2-2-在箭头函数中的-this\" class=\"headerlink\" title=\"2.2. 在箭头函数中的 this\"></a>2.2. 在箭头函数中的 <code>this</code></h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person() &#123;\n  this.age &#x3D; 0;\n\n  setInterval(() &#x3D;&gt; &#123;\n    this.age++; &#x2F;&#x2F; 这里的 this 指向 Person 实例\n    console.log(this.age);\n  &#125;, 1000);\n&#125;\n\nconst p &#x3D; new Person(); &#x2F;&#x2F; 正确输出年龄</code></pre>\n\n<p>在这个例子中，使用箭头函数后，<code>this</code> 继承自 <code>Person</code> 的上下文，因此 <code>this.age</code> 正确地指向 <code>Person</code> 实例的 <code>age</code> 属性。</p>\n<h3 id=\"3-总结-3\"><a href=\"#3-总结-3\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>箭头函数的 <code>this</code> 指向</strong>：箭头函数的 <code>this</code> 指向定义时的外部上下文，而不是调用时的上下文。</li>\n<li><strong>适用场景</strong>：这种特性使得箭头函数在处理回调函数时非常方便，尤其是在类方法中，可以避免 <code>this</code> 的指向问题。</li>\n</ul>\n<p>理解箭头函数的 <code>this</code> 指向特性可以帮助开发者更好地管理上下文，避免常见的 <code>this</code> 绑定错误。</p>\n<h2 id=\"扩展运算符的作用及使用场景\"><a href=\"#扩展运算符的作用及使用场景\" class=\"headerlink\" title=\"扩展运算符的作用及使用场景\"></a>扩展运算符的作用及使用场景</h2><p>扩展运算符（Spread Operator）在 JavaScript 中使用三个点（<code>...</code>）表示，它可以用于数组和对象的操作。扩展运算符的主要作用是将可迭代对象（如数组、字符串）或对象的属性展开到另一个数组或对象中。以下是扩展运算符的作用及其常见使用场景：</p>\n<h3 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h3><ul>\n<li><strong>展开数组</strong>：将一个数组的元素展开为单独的元素。</li>\n<li><strong>合并数组</strong>：将多个数组合并为一个数组。</li>\n<li><strong>克隆数组</strong>：创建一个数组的浅拷贝。</li>\n<li><strong>展开对象</strong>：将一个对象的属性展开到另一个对象中。</li>\n<li><strong>合并对象</strong>：将多个对象合并为一个对象。</li>\n<li><strong>克隆对象</strong>：创建一个对象的浅拷贝。</li>\n</ul>\n<h3 id=\"2-使用场景\"><a href=\"#2-使用场景\" class=\"headerlink\" title=\"2. 使用场景\"></a>2. 使用场景</h3><h4 id=\"2-1-展开数组\"><a href=\"#2-1-展开数组\" class=\"headerlink\" title=\"2.1. 展开数组\"></a>2.1. 展开数组</h4><p>将数组的元素展开为单独的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr1 &#x3D; [1, 2, 3];\nconst arr2 &#x3D; [4, 5, 6];\nconst combined &#x3D; [...arr1, ...arr2]; &#x2F;&#x2F; [1, 2, 3, 4, 5, 6]\nconsole.log(combined);</code></pre>\n\n<h4 id=\"2-2-合并数组\"><a href=\"#2-2-合并数组\" class=\"headerlink\" title=\"2.2. 合并数组\"></a>2.2. 合并数组</h4><p>将多个数组合并为一个数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr1 &#x3D; [1, 2];\nconst arr2 &#x3D; [3, 4];\nconst arr3 &#x3D; [5, 6];\nconst merged &#x3D; [...arr1, ...arr2, ...arr3]; &#x2F;&#x2F; [1, 2, 3, 4, 5, 6]\nconsole.log(merged);</code></pre>\n\n<h4 id=\"2-3-克隆数组\"><a href=\"#2-3-克隆数组\" class=\"headerlink\" title=\"2.3. 克隆数组\"></a>2.3. 克隆数组</h4><p>创建一个数组的浅拷贝。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const original &#x3D; [1, 2, 3];\nconst clone &#x3D; [...original]; &#x2F;&#x2F; [1, 2, 3]\nconsole.log(clone);</code></pre>\n\n<h4 id=\"2-4-展开对象\"><a href=\"#2-4-展开对象\" class=\"headerlink\" title=\"2.4. 展开对象\"></a>2.4. 展开对象</h4><p>将对象的属性展开到另一个对象中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj1 &#x3D; &#123; a: 1, b: 2 &#125;;\nconst obj2 &#x3D; &#123; c: 3, d: 4 &#125;;\nconst mergedObj &#x3D; &#123; ...obj1, ...obj2 &#125;; &#x2F;&#x2F; &#123; a: 1, b: 2, c: 3, d: 4 &#125;\nconsole.log(mergedObj);</code></pre>\n\n<h4 id=\"2-5-合并对象\"><a href=\"#2-5-合并对象\" class=\"headerlink\" title=\"2.5. 合并对象\"></a>2.5. 合并对象</h4><p>将多个对象合并为一个对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj1 &#x3D; &#123; a: 1 &#125;;\nconst obj2 &#x3D; &#123; b: 2 &#125;;\nconst obj3 &#x3D; &#123; c: 3 &#125;;\nconst merged &#x3D; &#123; ...obj1, ...obj2, ...obj3 &#125;; &#x2F;&#x2F; &#123; a: 1, b: 2, c: 3 &#125;\nconsole.log(merged);</code></pre>\n\n<h4 id=\"2-6-克隆对象\"><a href=\"#2-6-克隆对象\" class=\"headerlink\" title=\"2.6. 克隆对象\"></a>2.6. 克隆对象</h4><p>创建一个对象的浅拷贝。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const original &#x3D; &#123; a: 1, b: 2 &#125;;\nconst clone &#x3D; &#123; ...original &#125;; &#x2F;&#x2F; &#123; a: 1, b: 2 &#125;\nconsole.log(clone);</code></pre>\n\n<h3 id=\"3-其他使用场景\"><a href=\"#3-其他使用场景\" class=\"headerlink\" title=\"3. 其他使用场景\"></a>3. 其他使用场景</h3><h4 id=\"3-1-在函数调用中展开数组\"><a href=\"#3-1-在函数调用中展开数组\" class=\"headerlink\" title=\"3.1. 在函数调用中展开数组\"></a>3.1. 在函数调用中展开数组</h4><p>可以将数组作为参数传递给函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const numbers &#x3D; [1, 2, 3];\nconst max &#x3D; Math.max(...numbers); &#x2F;&#x2F; 3\nconsole.log(max);</code></pre>\n\n<h4 id=\"3-2-在函数参数中使用\"><a href=\"#3-2-在函数参数中使用\" class=\"headerlink\" title=\"3.2. 在函数参数中使用\"></a>3.2. 在函数参数中使用</h4><p>可以使用扩展运算符来处理不定数量的参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(...args) &#123;\n  return args.reduce((acc, curr) &#x3D;&gt; acc + curr, 0);\n&#125;\n\nconst result &#x3D; sum(1, 2, 3, 4); &#x2F;&#x2F; 10\nconsole.log(result);</code></pre>\n\n<h3 id=\"4-总结-4\"><a href=\"#4-总结-4\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>扩展运算符（<code>...</code>）在 JavaScript 中是一个非常强大的工具，能够简化数组和对象的操作。它的主要作用包括展开、合并和克隆数组或对象，适用于多种场景，如函数调用、参数处理等。理解和灵活使用扩展运算符可以提高代码的可读性和简洁性。</p>\n<h2 id=\"对对象与数组的解构的理解\"><a href=\"#对对象与数组的解构的理解\" class=\"headerlink\" title=\"对对象与数组的解构的理解\"></a>对对象与数组的解构的理解</h2><p>解构赋值（Destructuring Assignment）是 JavaScript 中的一种语法，允许从数组或对象中提取值并将其赋值给变量。解构赋值使得代码更加简洁和易读。以下是对对象和数组解构的详细理解。</p>\n<h3 id=\"1-数组解构\"><a href=\"#1-数组解构\" class=\"headerlink\" title=\"1. 数组解构\"></a>1. 数组解构</h3><p>数组解构允许从数组中提取值并将其赋值给变量。</p>\n<h4 id=\"1-1-基本语法\"><a href=\"#1-1-基本语法\" class=\"headerlink\" title=\"1.1. 基本语法\"></a>1.1. 基本语法</h4><p>使用方括号 <code>[]</code> 来进行数组解构。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\n\n&#x2F;&#x2F; 解构赋值\nconst [a, b, c] &#x3D; arr;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(b); &#x2F;&#x2F; 2\nconsole.log(c); &#x2F;&#x2F; 3</code></pre>\n\n<h4 id=\"1-2-跳过元素\"><a href=\"#1-2-跳过元素\" class=\"headerlink\" title=\"1.2. 跳过元素\"></a>1.2. 跳过元素</h4><p>可以在解构时跳过某些元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\n\n&#x2F;&#x2F; 跳过第一个元素\nconst [, b, , d] &#x3D; arr;\n\nconsole.log(b); &#x2F;&#x2F; 2\nconsole.log(d); &#x2F;&#x2F; 4</code></pre>\n\n<h4 id=\"1-3-默认值\"><a href=\"#1-3-默认值\" class=\"headerlink\" title=\"1.3. 默认值\"></a>1.3. 默认值</h4><p>可以为解构的变量设置默认值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1];\n\n&#x2F;&#x2F; b 将会是 2，因为 arr[1] 是 undefined\nconst [a, b &#x3D; 2] &#x3D; arr;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(b); &#x2F;&#x2F; 2</code></pre>\n\n<h3 id=\"2-对象解构\"><a href=\"#2-对象解构\" class=\"headerlink\" title=\"2. 对象解构\"></a>2. 对象解构</h3><p>对象解构允许从对象中提取属性并将其赋值给变量。</p>\n<h4 id=\"2-1-基本语法\"><a href=\"#2-1-基本语法\" class=\"headerlink\" title=\"2.1. 基本语法\"></a>2.1. 基本语法</h4><p>使用花括号 <code>&#123;&#125;</code> 来进行对象解构。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; x: 1, y: 2 &#125;;\n\n&#x2F;&#x2F; 解构赋值\nconst &#123; x, y &#125; &#x3D; obj;\n\nconsole.log(x); &#x2F;&#x2F; 1\nconsole.log(y); &#x2F;&#x2F; 2</code></pre>\n\n<h4 id=\"2-2-重命名变量\"><a href=\"#2-2-重命名变量\" class=\"headerlink\" title=\"2.2. 重命名变量\"></a>2.2. 重命名变量</h4><p>可以在解构时重命名变量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; x: 1, y: 2 &#125;;\n\n&#x2F;&#x2F; 重命名\nconst &#123; x: a, y: b &#125; &#x3D; obj;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(b); &#x2F;&#x2F; 2</code></pre>\n\n<h4 id=\"2-3-默认值\"><a href=\"#2-3-默认值\" class=\"headerlink\" title=\"2.3. 默认值\"></a>2.3. 默认值</h4><p>可以为解构的变量设置默认值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; x: 1 &#125;;\n\n&#x2F;&#x2F; y 将会是 2，因为 obj.y 是 undefined\nconst &#123; x, y &#x3D; 2 &#125; &#x3D; obj;\n\nconsole.log(x); &#x2F;&#x2F; 1\nconsole.log(y); &#x2F;&#x2F; 2</code></pre>\n\n<h3 id=\"3-嵌套解构\"><a href=\"#3-嵌套解构\" class=\"headerlink\" title=\"3. 嵌套解构\"></a>3. 嵌套解构</h3><p>可以对嵌套的数组和对象进行解构。</p>\n<h4 id=\"3-1-数组嵌套解构\"><a href=\"#3-1-数组嵌套解构\" class=\"headerlink\" title=\"3.1. 数组嵌套解构\"></a>3.1. 数组嵌套解构</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, [2, 3]];\n\n&#x2F;&#x2F; 嵌套解构\nconst [a, [b, c]] &#x3D; arr;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(b); &#x2F;&#x2F; 2\nconsole.log(c); &#x2F;&#x2F; 3</code></pre>\n\n<h4 id=\"3-2-对象嵌套解构\"><a href=\"#3-2-对象嵌套解构\" class=\"headerlink\" title=\"3.2. 对象嵌套解构\"></a>3.2. 对象嵌套解构</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; a: 1, b: &#123; c: 2 &#125; &#125;;\n\n&#x2F;&#x2F; 嵌套解构\nconst &#123;\n  a,\n  b: &#123; c &#125;,\n&#125; &#x3D; obj;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(c); &#x2F;&#x2F; 2</code></pre>\n\n<h3 id=\"4-使用场景\"><a href=\"#4-使用场景\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h3><ul>\n<li><strong>函数参数</strong>：解构赋值常用于函数参数中，可以直接提取对象或数组的属性。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function printCoordinates(&#123; x, y &#125;) &#123;\n  console.log(&#96;X: $&#123;x&#125;, Y: $&#123;y&#125;&#96;);\n&#125;\n\nconst point &#x3D; &#123; x: 10, y: 20 &#125;;\nprintCoordinates(point); &#x2F;&#x2F; X: 10, Y: 20</code></pre>\n\n<ul>\n<li><strong>状态管理</strong>：在 React 等框架中，解构赋值常用于提取状态和属性。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; name, age &#125; &#x3D; this.props; &#x2F;&#x2F; 在 React 组件中</code></pre>\n\n<h3 id=\"5-总结-4\"><a href=\"#5-总结-4\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>解构赋值是 JavaScript 中一种强大的语法，允许从数组和对象中提取值并赋值给变量。它使得代码更加简洁和易读，尤其在处理复杂数据结构时。理解数组和对象的解构赋值可以帮助开发者更高效地编写代码。</p>\n<h2 id=\"如何提取高度嵌套的对象里的指定属性？\"><a href=\"#如何提取高度嵌套的对象里的指定属性？\" class=\"headerlink\" title=\"如何提取高度嵌套的对象里的指定属性？\"></a>如何提取高度嵌套的对象里的指定属性？</h2><p>在 JavaScript 中，提取高度嵌套对象中的指定属性可以使用解构赋值（Destructuring Assignment）来实现。解构赋值允许你从对象中提取值并将其赋值给变量，适用于嵌套对象的情况。以下是一些示例和方法来提取高度嵌套对象中的指定属性。</p>\n<h3 id=\"1-使用解构赋值\"><a href=\"#1-使用解构赋值\" class=\"headerlink\" title=\"1. 使用解构赋值\"></a>1. 使用解构赋值</h3><p>假设我们有一个高度嵌套的对象，结构如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const data &#x3D; &#123;\n  user: &#123;\n    id: 1,\n    name: &quot;Alice&quot;,\n    address: &#123;\n      city: &quot;Wonderland&quot;,\n      zip: &quot;12345&quot;,\n      coordinates: &#123;\n        lat: 37.7749,\n        long: -122.4194,\n      &#125;,\n    &#125;,\n  &#125;,\n&#125;;</code></pre>\n\n<h4 id=\"1-1-提取嵌套属性\"><a href=\"#1-1-提取嵌套属性\" class=\"headerlink\" title=\"1.1. 提取嵌套属性\"></a>1.1. 提取嵌套属性</h4><p>你可以使用解构赋值直接提取嵌套属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;\n  user: &#123;\n    name,\n    address: &#123;\n      city,\n      coordinates: &#123; lat, long &#125;,\n    &#125;,\n  &#125;,\n&#125; &#x3D; data;\n\nconsole.log(name); &#x2F;&#x2F; &quot;Alice&quot;\nconsole.log(city); &#x2F;&#x2F; &quot;Wonderland&quot;\nconsole.log(lat); &#x2F;&#x2F; 37.7749\nconsole.log(long); &#x2F;&#x2F; -122.4194</code></pre>\n\n<h3 id=\"2-提取部分属性\"><a href=\"#2-提取部分属性\" class=\"headerlink\" title=\"2. 提取部分属性\"></a>2. 提取部分属性</h3><p>如果你只想提取某些特定的嵌套属性，可以选择性地解构：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;\n  user: &#123;\n    address: &#123; zip &#125;,\n  &#125;,\n&#125; &#x3D; data;\n\nconsole.log(zip); &#x2F;&#x2F; &quot;12345&quot;</code></pre>\n\n<h3 id=\"3-使用默认值\"><a href=\"#3-使用默认值\" class=\"headerlink\" title=\"3. 使用默认值\"></a>3. 使用默认值</h3><p>在解构时，你还可以为嵌套属性设置默认值，以防某些属性不存在：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123;\n  user: &#123;\n    address: &#123;\n      country &#x3D; &quot;Unknown&quot;, &#x2F;&#x2F; 设置默认值\n    &#125;,\n  &#125;,\n&#125; &#x3D; data;\n\nconsole.log(country); &#x2F;&#x2F; &quot;Unknown&quot;</code></pre>\n\n<h3 id=\"4-提取动态属性\"><a href=\"#4-提取动态属性\" class=\"headerlink\" title=\"4. 提取动态属性\"></a>4. 提取动态属性</h3><p>如果你需要提取动态属性，可以结合变量使用解构：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const key &#x3D; &quot;name&quot;;\nconst &#123;\n  user: &#123; [key]: userName &#125;,\n&#125; &#x3D; data;\n\nconsole.log(userName); &#x2F;&#x2F; &quot;Alice&quot;</code></pre>\n\n<h3 id=\"5-总结-5\"><a href=\"#5-总结-5\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li>使用解构赋值可以方便地提取高度嵌套对象中的指定属性。</li>\n<li>你可以选择性地提取属性、设置默认值，并且可以结合变量提取动态属性。</li>\n<li>解构赋值使得代码更加简洁和易读，特别是在处理复杂数据结构时。</li>\n</ul>\n<h2 id=\"对-rest-参数的理解\"><a href=\"#对-rest-参数的理解\" class=\"headerlink\" title=\"对 rest 参数的理解\"></a>对 rest 参数的理解</h2><p>在 JavaScript 中，rest 参数（剩余参数）是一种用于函数定义的语法，允许将不定数量的参数收集到一个数组中。它使用三个点（<code>...</code>）表示，通常放在函数参数列表的最后一个位置。以下是对 rest 参数的详细理解和使用示例。</p>\n<h3 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1. 基本语法\"></a>1. 基本语法</h3><p>rest 参数的语法如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myFunction(...rest) &#123;\n  &#x2F;&#x2F; rest 是一个数组，包含所有传入的额外参数\n&#125;</code></pre>\n\n<h3 id=\"2-使用场景-1\"><a href=\"#2-使用场景-1\" class=\"headerlink\" title=\"2. 使用场景\"></a>2. 使用场景</h3><h4 id=\"2-1-收集不定数量的参数\"><a href=\"#2-1-收集不定数量的参数\" class=\"headerlink\" title=\"2.1. 收集不定数量的参数\"></a>2.1. 收集不定数量的参数</h4><p>rest 参数可以用于收集函数调用时传入的所有额外参数，并将它们放入一个数组中。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(...numbers) &#123;\n  return numbers.reduce((acc, curr) &#x3D;&gt; acc + curr, 0);\n&#125;\n\nconsole.log(sum(1, 2, 3)); &#x2F;&#x2F; 6\nconsole.log(sum(10, 20, 30, 40)); &#x2F;&#x2F; 100</code></pre>\n\n<p>在这个例子中，<code>sum</code> 函数可以接受任意数量的参数，并将它们相加。</p>\n<h4 id=\"2-2-与其他参数结合使用\"><a href=\"#2-2-与其他参数结合使用\" class=\"headerlink\" title=\"2.2. 与其他参数结合使用\"></a>2.2. 与其他参数结合使用</h4><p>rest 参数可以与其他参数一起使用，但必须放在参数列表的最后。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function multiply(factor, ...numbers) &#123;\n  return numbers.map((num) &#x3D;&gt; num * factor);\n&#125;\n\nconsole.log(multiply(2, 1, 2, 3)); &#x2F;&#x2F; [2, 4, 6]</code></pre>\n\n<p>在这个例子中，<code>factor</code> 是一个普通参数，而 <code>...numbers</code> 是一个 rest 参数，收集所有额外的数字。</p>\n<h3 id=\"3-与-arguments-对象的区别\"><a href=\"#3-与-arguments-对象的区别\" class=\"headerlink\" title=\"3. 与 arguments 对象的区别\"></a>3. 与 arguments 对象的区别</h3><ul>\n<li><strong>rest 参数</strong>：是一个真正的数组，可以使用数组的方法（如 <code>map</code>、<code>reduce</code> 等）。</li>\n<li><strong>arguments 对象</strong>：是一个类数组对象，包含所有传入的参数，但不是数组，不能直接使用数组方法。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  console.log(arguments); &#x2F;&#x2F; 类数组对象\n  console.log(Array.isArray(arguments)); &#x2F;&#x2F; false\n\n  const argsArray &#x3D; [...arguments]; &#x2F;&#x2F; 将 arguments 转换为数组\n  console.log(argsArray); &#x2F;&#x2F; 现在是数组\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: [1, 2, 3]</code></pre>\n\n<h3 id=\"4-其他注意事项\"><a href=\"#4-其他注意事项\" class=\"headerlink\" title=\"4. 其他注意事项\"></a>4. 其他注意事项</h3><ul>\n<li><strong>只能有一个 rest 参数</strong>：在函数参数中只能有一个 rest 参数，且必须放在最后。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function invalidFunction(...rest, a) &#123; &#x2F;&#x2F; 语法错误\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<ul>\n<li><strong>与解构赋值结合使用</strong>：可以在解构赋值中使用 rest 参数来收集剩余的属性。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; a: 1, b: 2, c: 3, d: 4 &#125;;\nconst &#123; a, ...rest &#125; &#x3D; obj;\n\nconsole.log(a); &#x2F;&#x2F; 1\nconsole.log(rest); &#x2F;&#x2F; &#123; b: 2, c: 3, d: 4 &#125;</code></pre>\n\n<h3 id=\"5-总结-6\"><a href=\"#5-总结-6\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>rest 参数</strong> 是一种强大的功能，允许函数接收不定数量的参数并将其收集到一个数组中。</li>\n<li>它使得函数更加灵活，能够处理多种输入情况。</li>\n<li>与 <code>arguments</code> 对象相比，rest 参数提供了更好的可读性和可操作性。理解和使用 rest 参数可以帮助开发者编写更简洁和灵活的函数。</li>\n</ul>\n<h2 id=\"ES6-中模板语法与字符串处理\"><a href=\"#ES6-中模板语法与字符串处理\" class=\"headerlink\" title=\"ES6 中模板语法与字符串处理\"></a>ES6 中模板语法与字符串处理</h2><p>在 ES6（ECMAScript 2015）中，引入了模板字面量（Template Literals），这是一种新的字符串处理语法，提供了更强大和灵活的字符串操作方式。以下是对模板字面量及其在字符串处理中的应用的详细说明。</p>\n<h3 id=\"1-模板字面量的基本语法\"><a href=\"#1-模板字面量的基本语法\" class=\"headerlink\" title=\"1. 模板字面量的基本语法\"></a>1. 模板字面量的基本语法</h3><p>模板字面量使用反引号（<code>`</code>）来定义，可以包含多行文本和嵌入表达式。</p>\n<h4 id=\"示例-30\"><a href=\"#示例-30\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; &quot;Alice&quot;;\nconst greeting &#x3D; &#96;Hello, $&#123;name&#125;!&#96;; &#x2F;&#x2F; 使用 $&#123;&#125; 嵌入表达式\nconsole.log(greeting); &#x2F;&#x2F; &quot;Hello, Alice!&quot;</code></pre>\n\n<h3 id=\"2-多行字符串\"><a href=\"#2-多行字符串\" class=\"headerlink\" title=\"2. 多行字符串\"></a>2. 多行字符串</h3><p>模板字面量允许创建多行字符串，而不需要使用换行符或字符串连接。</p>\n<h4 id=\"示例-31\"><a href=\"#示例-31\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const multiLineString &#x3D; &#96;This is a string\nthat spans multiple\nlines.&#96;;\nconsole.log(multiLineString);</code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">This is a string\nthat spans multiple\nlines.</code></pre>\n\n<h3 id=\"3-嵌入表达式\"><a href=\"#3-嵌入表达式\" class=\"headerlink\" title=\"3. 嵌入表达式\"></a>3. 嵌入表达式</h3><p>模板字面量可以嵌入任意 JavaScript 表达式，包括变量、函数调用和运算。</p>\n<h4 id=\"示例-32\"><a href=\"#示例-32\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5;\nconst b &#x3D; 10;\nconst sum &#x3D; &#96;The sum of $&#123;a&#125; and $&#123;b&#125; is $&#123;a + b&#125;.&#96;;\nconsole.log(sum); &#x2F;&#x2F; &quot;The sum of 5 and 10 is 15.&quot;</code></pre>\n\n<h3 id=\"4-标签模板\"><a href=\"#4-标签模板\" class=\"headerlink\" title=\"4. 标签模板\"></a>4. 标签模板</h3><p>标签模板（Tagged Templates）允许你定义一个函数来处理模板字面量的内容。这使得你可以自定义字符串的处理方式。</p>\n<h4 id=\"示例-33\"><a href=\"#示例-33\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function tag(strings, ...values) &#123;\n  return strings.reduce((result, str, i) &#x3D;&gt; &#123;\n    return result + str + (values[i] ? &#96;&lt;strong&gt;$&#123;values[i]&#125;&lt;&#x2F;strong&gt;&#96; : &quot;&quot;);\n  &#125;, &quot;&quot;);\n&#125;\n\nconst name &#x3D; &quot;Alice&quot;;\nconst age &#x3D; 30;\nconst message &#x3D; tag&#96;My name is $&#123;name&#125; and I am $&#123;age&#125; years old.&#96;;\nconsole.log(message); &#x2F;&#x2F; &quot;My name is &lt;strong&gt;Alice&lt;&#x2F;strong&gt; and I am &lt;strong&gt;30&lt;&#x2F;strong&gt; years old.&quot;</code></pre>\n\n<h3 id=\"5-字符串处理的优势\"><a href=\"#5-字符串处理的优势\" class=\"headerlink\" title=\"5. 字符串处理的优势\"></a>5. 字符串处理的优势</h3><ul>\n<li><strong>可读性</strong>：模板字面量使得字符串的拼接和格式化更加直观和易读。</li>\n<li><strong>灵活性</strong>：可以轻松嵌入表达式，支持多行字符串，减少了使用传统字符串拼接时的复杂性。</li>\n<li><strong>自定义处理</strong>：通过标签模板，可以实现自定义的字符串处理逻辑。</li>\n</ul>\n<h3 id=\"6-总结-1\"><a href=\"#6-总结-1\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>ES6 中的模板字面量提供了一种更强大和灵活的字符串处理方式。它允许多行字符串、嵌入表达式和自定义处理，使得字符串的创建和操作更加简洁和易于维护。理解和使用模板字面量可以帮助开发者编写更清晰和高效的代码。</p>\n<h1 id=\"JavaScript-基础\"><a href=\"#JavaScript-基础\" class=\"headerlink\" title=\"JavaScript 基础\"></a>JavaScript 基础</h1><h2 id=\"new-操作符的实现原理\"><a href=\"#new-操作符的实现原理\" class=\"headerlink\" title=\"new 操作符的实现原理\"></a>new 操作符的实现原理</h2><p>在 JavaScript 中，<code>new</code> 操作符用于创建一个对象实例，并调用构造函数。它的实现原理涉及几个步骤，以下是对 <code>new</code> 操作符的详细解释和实现原理。</p>\n<h3 id=\"1-new-操作符的基本功能\"><a href=\"#1-new-操作符的基本功能\" class=\"headerlink\" title=\"1. new 操作符的基本功能\"></a>1. <code>new</code> 操作符的基本功能</h3><p>当使用 <code>new</code> 操作符调用一个构造函数时，它会执行以下操作：</p>\n<ol>\n<li><strong>创建一个新对象</strong>：创建一个空对象 <code>obj</code>。</li>\n<li><strong>设置原型</strong>：将新对象的 <code>__proto__</code> 属性指向构造函数的 <code>prototype</code> 属性。</li>\n<li>**绑定 <code>this</code>**：将构造函数内部的 <code>this</code> 绑定到新创建的对象 <code>obj</code>。</li>\n<li><strong>执行构造函数</strong>：调用构造函数，并传入参数（如果有）。</li>\n<li><strong>返回对象</strong>：如果构造函数返回一个对象，则返回该对象；否则返回新创建的对象 <code>obj</code>。</li>\n</ol>\n<h3 id=\"2-实现步骤\"><a href=\"#2-实现步骤\" class=\"headerlink\" title=\"2. 实现步骤\"></a>2. 实现步骤</h3><p>以下是 <code>new</code> 操作符的实现步骤的详细说明：</p>\n<h4 id=\"2-1-创建新对象\"><a href=\"#2-1-创建新对象\" class=\"headerlink\" title=\"2.1. 创建新对象\"></a>2.1. 创建新对象</h4><p>当 <code>new</code> 被调用时，首先会创建一个新的空对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let obj &#x3D; &#123;&#125;; &#x2F;&#x2F; 创建一个新对象</code></pre>\n\n<h4 id=\"2-2-设置原型\"><a href=\"#2-2-设置原型\" class=\"headerlink\" title=\"2.2. 设置原型\"></a>2.2. 设置原型</h4><p>新对象的 <code>__proto__</code> 属性被设置为构造函数的 <code>prototype</code> 属性，以便新对象可以访问构造函数原型上的方法和属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">obj.__proto__ &#x3D; Constructor.prototype; &#x2F;&#x2F; 设置原型</code></pre>\n\n<h4 id=\"2-3-绑定-this\"><a href=\"#2-3-绑定-this\" class=\"headerlink\" title=\"2.3. 绑定 this\"></a>2.3. 绑定 <code>this</code></h4><p>在构造函数内部，<code>this</code> 被绑定到新创建的对象 <code>obj</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Constructor.call(obj, ...args); &#x2F;&#x2F; 绑定 this 并调用构造函数</code></pre>\n\n<h4 id=\"2-4-返回对象\"><a href=\"#2-4-返回对象\" class=\"headerlink\" title=\"2.4. 返回对象\"></a>2.4. 返回对象</h4><p>最后，<code>new</code> 操作符会返回新创建的对象。如果构造函数返回的是一个对象，则返回该对象；如果返回的是一个原始值（如数字、字符串等），则返回新创建的对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">return obj; &#x2F;&#x2F; 返回新对象</code></pre>\n\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个简单的构造函数和使用 <code>new</code> 操作符的示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name, age) &#123;\n  this.name &#x3D; name;\n  this.age &#x3D; age;\n&#125;\n\n&#x2F;&#x2F; 使用 new 操作符创建一个新对象\nconst alice &#x3D; new Person(&quot;Alice&quot;, 30);\n\nconsole.log(alice.name); &#x2F;&#x2F; &quot;Alice&quot;\nconsole.log(alice.age); &#x2F;&#x2F; 30\nconsole.log(alice.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"4-自定义-new-实现\"><a href=\"#4-自定义-new-实现\" class=\"headerlink\" title=\"4. 自定义 new 实现\"></a>4. 自定义 <code>new</code> 实现</h3><p>你可以自定义一个 <code>myNew</code> 函数来模拟 <code>new</code> 操作符的行为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myNew(Constructor, ...args) &#123;\n  &#x2F;&#x2F; 创建新对象\n  const obj &#x3D; &#123;&#125;;\n\n  &#x2F;&#x2F; 设置原型\n  obj.__proto__ &#x3D; Constructor.prototype;\n\n  &#x2F;&#x2F; 绑定 this 并调用构造函数\n  const result &#x3D; Constructor.apply(obj, args);\n\n  &#x2F;&#x2F; 返回对象\n  return typeof result &#x3D;&#x3D;&#x3D; &quot;object&quot; || typeof result &#x3D;&#x3D;&#x3D; &quot;function&quot;\n    ? result\n    : obj;\n&#125;\n\n&#x2F;&#x2F; 使用自定义的 myNew 函数\nconst bob &#x3D; myNew(Person, &quot;Bob&quot;, 25);\nconsole.log(bob.name); &#x2F;&#x2F; &quot;Bob&quot;\nconsole.log(bob.age); &#x2F;&#x2F; 25</code></pre>\n\n<h3 id=\"5-总结-7\"><a href=\"#5-总结-7\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>new</code> 操作符的实现原理涉及创建新对象、设置原型、绑定 <code>this</code>、执行构造函数和返回对象等步骤。理解 <code>new</code> 操作符的工作原理有助于更好地掌握 JavaScript 中的对象创建和构造函数的使用。</p>\n<h2 id=\"map-和-Object-的区别\"><a href=\"#map-和-Object-的区别\" class=\"headerlink\" title=\"map 和 Object 的区别\"></a>map 和 Object 的区别</h2><p>在 JavaScript 中，<code>Map</code> 和 <code>Object</code> 都是用于存储键值对的数据结构，但它们在设计、功能和使用场景上有一些重要的区别。以下是对 <code>Map</code> 和 <code>Object</code> 的详细比较：</p>\n<h3 id=\"1-基本定义\"><a href=\"#1-基本定义\" class=\"headerlink\" title=\"1. 基本定义\"></a>1. 基本定义</h3><ul>\n<li><strong>Object</strong>：<ul>\n<li><code>Object</code> 是 JavaScript 中的基本数据结构，用于存储键值对。键通常是字符串或符号（Symbol），值可以是任何类型。</li>\n</ul>\n</li>\n<li><strong>Map</strong>：<ul>\n<li><code>Map</code> 是 ES6 引入的一种新的数据结构，专门用于存储键值对。键可以是任何类型，包括对象、函数和原始值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-键的类型\"><a href=\"#2-键的类型\" class=\"headerlink\" title=\"2. 键的类型\"></a>2. 键的类型</h3><ul>\n<li><p><strong>Object</strong>：</p>\n<ul>\n<li>只能使用字符串或符号作为键。其他类型的键会被自动转换为字符串。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;&#125;;\nobj[1] &#x3D; &quot;one&quot;; &#x2F;&#x2F; 1 被转换为 &quot;1&quot;\nconsole.log(obj[&quot;1&quot;]); &#x2F;&#x2F; &quot;one&quot;</code></pre>\n</li>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li>可以使用任何类型的值作为键，包括对象、数组、函数等。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map();\nmap.set(1, &quot;one&quot;);\nmap.set(&#123;&#125;, &quot;empty object&quot;);\nconsole.log(map.get(1)); &#x2F;&#x2F; &quot;one&quot;</code></pre></li>\n</ul>\n<h3 id=\"3-键值对的顺序\"><a href=\"#3-键值对的顺序\" class=\"headerlink\" title=\"3. 键值对的顺序\"></a>3. 键值对的顺序</h3><ul>\n<li><p><strong>Object</strong>：</p>\n<ul>\n<li>在对象中，属性的顺序是根据属性的添加顺序来决定的，但对于整数键（如 <code>1</code>、<code>2</code>）会被排序。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; b: 2, a: 1, 1: &quot;one&quot; &#125;;\nconsole.log(Object.keys(obj)); &#x2F;&#x2F; [&quot;1&quot;, &quot;a&quot;, &quot;b&quot;]</code></pre>\n</li>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 保持插入的顺序，遍历时会按照插入的顺序返回键值对。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map();\nmap.set(&quot;b&quot;, 2);\nmap.set(&quot;a&quot;, 1);\nmap.set(1, &quot;one&quot;);\nconsole.log([...map.keys()]); &#x2F;&#x2F; [&quot;b&quot;, &quot;a&quot;, 1]</code></pre></li>\n</ul>\n<h3 id=\"4-性能\"><a href=\"#4-性能\" class=\"headerlink\" title=\"4. 性能\"></a>4. 性能</h3><ul>\n<li><p><strong>Object</strong>：</p>\n<ul>\n<li>对于频繁的添加和删除操作，<code>Object</code> 的性能可能会受到影响，尤其是在属性数量较多时。</li>\n</ul>\n</li>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 在添加、删除和查找操作上通常比 <code>Object</code> 更高效，尤其是在处理大量数据时。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-方法和属性\"><a href=\"#5-方法和属性\" class=\"headerlink\" title=\"5. 方法和属性\"></a>5. 方法和属性</h3><ul>\n<li><p><strong>Object</strong>：</p>\n<ul>\n<li><code>Object</code> 提供了一些基本的方法，如 <code>Object.keys()</code>、<code>Object.values()</code> 和 <code>Object.entries()</code> 来获取对象的键、值和键值对。</li>\n</ul>\n</li>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 提供了丰富的方法，如 <code>set()</code>、<code>get()</code>、<code>has()</code>、<code>delete()</code> 和 <code>clear()</code>，以及可以直接使用 <code>size</code> 属性获取键值对的数量。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map();\nmap.set(&quot;a&quot;, 1);\nmap.set(&quot;b&quot;, 2);\nconsole.log(map.size); &#x2F;&#x2F; 2\nconsole.log(map.has(&quot;a&quot;)); &#x2F;&#x2F; true</code></pre></li>\n</ul>\n<h3 id=\"6-迭代\"><a href=\"#6-迭代\" class=\"headerlink\" title=\"6. 迭代\"></a>6. 迭代</h3><ul>\n<li><p><strong>Object</strong>：</p>\n<ul>\n<li>对象的迭代通常使用 <code>for...in</code> 循环或 <code>Object.keys()</code>、<code>Object.values()</code>、<code>Object.entries()</code>。</li>\n</ul>\n</li>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 可以直接使用 <code>for...of</code> 循环进行迭代，支持迭代器，提供了 <code>keys()</code>、<code>values()</code> 和 <code>entries()</code> 方法。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map([\n  [&quot;a&quot;, 1],\n  [&quot;b&quot;, 2],\n]);\nfor (const [key, value] of map) &#123;\n  console.log(&#96;$&#123;key&#125;: $&#123;value&#125;&#96;);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"7-总结-2\"><a href=\"#7-总结-2\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Object</th>\n<th>Map</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>键的类型</strong></td>\n<td>只能是字符串或符号</td>\n<td>可以是任何类型</td>\n</tr>\n<tr>\n<td><strong>键值对的顺序</strong></td>\n<td>不保证顺序</td>\n<td>保持插入顺序</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>对于频繁操作性能较差</td>\n<td>在添加、删除和查找上更高效</td>\n</tr>\n<tr>\n<td><strong>方法和属性</strong></td>\n<td>基本方法</td>\n<td>丰富的方法和 <code>size</code> 属性</td>\n</tr>\n<tr>\n<td><strong>迭代</strong></td>\n<td>使用 <code>for...in</code> 或 <code>Object</code> 方法</td>\n<td>使用 <code>for...of</code> 和迭代器</td>\n</tr>\n</tbody></table>\n<p>理解 <code>Map</code> 和 <code>Object</code> 的区别可以帮助开发者在适当的场景中选择合适的数据结构，以提高代码的性能和可读性。</p>\n<h2 id=\"map-和-weakMap-的区别\"><a href=\"#map-和-weakMap-的区别\" class=\"headerlink\" title=\"map 和 weakMap 的区别\"></a>map 和 weakMap 的区别</h2><p>在 JavaScript 中，<code>Map</code> 和 <code>WeakMap</code> 都是用于存储键值对的数据结构，但它们在键的类型、内存管理和使用场景上有一些重要的区别。以下是对 <code>Map</code> 和 <code>WeakMap</code> 的详细比较：</p>\n<h3 id=\"1-基本定义-1\"><a href=\"#1-基本定义-1\" class=\"headerlink\" title=\"1. 基本定义\"></a>1. 基本定义</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 是一个集合，允许存储任意类型的键值对。键可以是任何类型，包括对象、函数和原始值。</li>\n</ul>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li><code>WeakMap</code> 是一个类似于 <code>Map</code> 的集合，但它的键必须是对象，并且是弱引用。这意味着如果没有其他引用指向键对象，键对象可以被垃圾回收。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-键的类型-1\"><a href=\"#2-键的类型-1\" class=\"headerlink\" title=\"2. 键的类型\"></a>2. 键的类型</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li>可以使用任何类型的值作为键，包括原始值（如字符串、数字、布尔值）和对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map();\nmap.set(&quot;stringKey&quot;, &quot;value1&quot;);\nmap.set(123, &quot;value2&quot;);\nmap.set(&#123;&#125;, &quot;value3&quot;);</code></pre>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li>只能使用对象作为键，不能使用原始值（如字符串、数字、布尔值等）。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const weakMap &#x3D; new WeakMap();\nconst objKey &#x3D; &#123;&#125;;\nweakMap.set(objKey, &quot;value1&quot;);\n&#x2F;&#x2F; weakMap.set(&#39;stringKey&#39;, &#39;value2&#39;); &#x2F;&#x2F; TypeError: Invalid value used as weak map key</code></pre></li>\n</ul>\n<h3 id=\"3-垃圾回收\"><a href=\"#3-垃圾回收\" class=\"headerlink\" title=\"3. 垃圾回收\"></a>3. 垃圾回收</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 中的键是强引用，即使没有其他引用指向键对象，<code>Map</code> 仍然会保持对该对象的引用，导致内存不会被回收。</li>\n</ul>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li><code>WeakMap</code> 中的键是弱引用。如果没有其他引用指向键对象，键对象会被垃圾回收。这使得 <code>WeakMap</code> 更加适合用于缓存和存储私有数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-方法和属性\"><a href=\"#4-方法和属性\" class=\"headerlink\" title=\"4. 方法和属性\"></a>4. 方法和属性</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li>提供了丰富的方法，如 <code>set()</code>、<code>get()</code>、<code>has()</code>、<code>delete()</code> 和 <code>clear()</code>，以及可以直接使用 <code>size</code> 属性获取键值对的数量。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map();\nmap.set(&quot;a&quot;, 1);\nconsole.log(map.size); &#x2F;&#x2F; 1\nconsole.log(map.get(&quot;a&quot;)); &#x2F;&#x2F; 1</code></pre>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li>只提供了 <code>set()</code>、<code>get()</code>、<code>has()</code> 和 <code>delete()</code> 方法，没有 <code>size</code> 属性，也不支持迭代器，因此无法直接获取 <code>WeakMap</code> 的大小或遍历其内容。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const weakMap &#x3D; new WeakMap();\nconst objKey &#x3D; &#123;&#125;;\nweakMap.set(objKey, &quot;value1&quot;);\nconsole.log(weakMap.get(objKey)); &#x2F;&#x2F; &quot;value1&quot;</code></pre></li>\n</ul>\n<h3 id=\"5-迭代\"><a href=\"#5-迭代\" class=\"headerlink\" title=\"5. 迭代\"></a>5. 迭代</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li><code>Map</code> 是可迭代的，可以使用 <code>for...of</code> 循环进行迭代，支持 <code>keys()</code>、<code>values()</code> 和 <code>entries()</code> 方法。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const map &#x3D; new Map([\n  [&quot;a&quot;, 1],\n  [&quot;b&quot;, 2],\n]);\nfor (const [key, value] of map) &#123;\n  console.log(&#96;$&#123;key&#125;: $&#123;value&#125;&#96;);\n&#125;</code></pre>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li><code>WeakMap</code> 不是可迭代的，不能使用 <code>for...of</code> 循环进行迭代，也没有提供迭代器方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-使用场景\"><a href=\"#6-使用场景\" class=\"headerlink\" title=\"6. 使用场景\"></a>6. 使用场景</h3><ul>\n<li><p><strong>Map</strong>：</p>\n<ul>\n<li>适用于需要存储任意类型的键值对，并且需要频繁访问、添加和删除的场景。</li>\n</ul>\n</li>\n<li><p><strong>WeakMap</strong>：</p>\n<ul>\n<li>适用于需要存储对象的私有数据或缓存，且希望在没有其他引用时自动清理的场景。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-总结-3\"><a href=\"#7-总结-3\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Map</th>\n<th>WeakMap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>键的类型</strong></td>\n<td>可以是任何类型</td>\n<td>只能是对象</td>\n</tr>\n<tr>\n<td><strong>垃圾回收</strong></td>\n<td>强引用，内存不会被回收</td>\n<td>弱引用，键对象可以被垃圾回收</td>\n</tr>\n<tr>\n<td><strong>方法和属性</strong></td>\n<td>提供丰富的方法和 <code>size</code> 属性</td>\n<td>仅提供基本方法，没有 <code>size</code></td>\n</tr>\n<tr>\n<td><strong>迭代</strong></td>\n<td>可迭代，支持迭代器</td>\n<td>不可迭代</td>\n</tr>\n<tr>\n<td><strong>使用场景</strong></td>\n<td>存储任意类型的键值对</td>\n<td>存储对象的私有数据或缓存</td>\n</tr>\n</tbody></table>\n<p>理解 <code>Map</code> 和 <code>WeakMap</code> 的区别可以帮助开发者在适当的场景中选择合适的数据结构，以提高代码的性能和内存管理效率。</p>\n<h2 id=\"JavaScript-有哪些内置对象\"><a href=\"#JavaScript-有哪些内置对象\" class=\"headerlink\" title=\"JavaScript 有哪些内置对象\"></a>JavaScript 有哪些内置对象</h2><p>在 JavaScript 中，内置对象是指在语言中预定义的对象，这些对象提供了各种功能和方法，帮助开发者进行常见的编程任务。以下是一些主要的 JavaScript 内置对象的分类及其简要说明：</p>\n<h3 id=\"1-基本对象\"><a href=\"#1-基本对象\" class=\"headerlink\" title=\"1. 基本对象\"></a>1. 基本对象</h3><ul>\n<li><strong>Object</strong>：所有对象的基类，提供了对象的基本功能。</li>\n<li><strong>Function</strong>：用于创建函数的对象，提供了函数的相关方法。</li>\n<li><strong>Boolean</strong>：用于处理布尔值（<code>true</code> 和 <code>false</code>）。</li>\n<li><strong>Number</strong>：用于处理数字，包括整数和浮点数。</li>\n<li><strong>String</strong>：用于处理字符串，提供了字符串的相关方法。</li>\n</ul>\n<h3 id=\"2-数据结构对象\"><a href=\"#2-数据结构对象\" class=\"headerlink\" title=\"2. 数据结构对象\"></a>2. 数据结构对象</h3><ul>\n<li><strong>Array</strong>：用于处理数组，提供了数组的相关方法，如 <code>push</code>、<code>pop</code>、<code>map</code>、<code>filter</code> 等。</li>\n<li><strong>Map</strong>：用于存储键值对，键可以是任何类型，保持插入顺序。</li>\n<li><strong>Set</strong>：用于存储唯一值的集合，提供了集合的相关方法。</li>\n<li><strong>WeakMap</strong>：类似于 <code>Map</code>，但键是弱引用，适用于存储对象的私有数据。</li>\n<li><strong>WeakSet</strong>：类似于 <code>Set</code>，但存储的值是弱引用。</li>\n</ul>\n<h3 id=\"3-错误对象\"><a href=\"#3-错误对象\" class=\"headerlink\" title=\"3. 错误对象\"></a>3. 错误对象</h3><ul>\n<li><strong>Error</strong>：用于表示运行时错误的基本对象。</li>\n<li><strong>SyntaxError</strong>：表示语法错误。</li>\n<li><strong>ReferenceError</strong>：表示引用错误。</li>\n<li><strong>TypeError</strong>：表示类型错误。</li>\n<li><strong>RangeError</strong>：表示数值超出范围的错误。</li>\n</ul>\n<h3 id=\"4-日期和时间对象\"><a href=\"#4-日期和时间对象\" class=\"headerlink\" title=\"4. 日期和时间对象\"></a>4. 日期和时间对象</h3><ul>\n<li><strong>Date</strong>：用于处理日期和时间，提供了获取和设置日期时间的方法。</li>\n</ul>\n<h3 id=\"5-正则表达式对象\"><a href=\"#5-正则表达式对象\" class=\"headerlink\" title=\"5. 正则表达式对象\"></a>5. 正则表达式对象</h3><ul>\n<li><strong>RegExp</strong>：用于处理正则表达式，提供了匹配和搜索字符串的功能。</li>\n</ul>\n<h3 id=\"6-JSON-对象\"><a href=\"#6-JSON-对象\" class=\"headerlink\" title=\"6. JSON 对象\"></a>6. JSON 对象</h3><ul>\n<li><strong>JSON</strong>：用于处理 JSON 数据，提供了 <code>parse</code> 和 <code>stringify</code> 方法，用于将 JSON 字符串转换为对象和将对象转换为 JSON 字符串。</li>\n</ul>\n<h3 id=\"7-数学对象\"><a href=\"#7-数学对象\" class=\"headerlink\" title=\"7. 数学对象\"></a>7. 数学对象</h3><ul>\n<li><strong>Math</strong>：提供了数学常数和函数，如 <code>Math.PI</code>、<code>Math.sqrt()</code>、<code>Math.random()</code> 等。</li>\n</ul>\n<h3 id=\"8-全局对象\"><a href=\"#8-全局对象\" class=\"headerlink\" title=\"8. 全局对象\"></a>8. 全局对象</h3><ul>\n<li><strong>Global</strong>：在浏览器中，<code>window</code> 对象是全局对象，提供了全局作用域的变量和方法。在 Node.js 中，<code>global</code> 是全局对象。</li>\n</ul>\n<h3 id=\"9-其他内置对象\"><a href=\"#9-其他内置对象\" class=\"headerlink\" title=\"9. 其他内置对象\"></a>9. 其他内置对象</h3><ul>\n<li><strong>Promise</strong>：用于处理异步操作的对象，提供了 <code>then</code>、<code>catch</code> 和 <code>finally</code> 方法。</li>\n<li><strong>Symbol</strong>：用于创建唯一的标识符，常用于对象属性的键。</li>\n<li><strong>Reflect</strong>：提供了一组方法，用于操作对象的反射。</li>\n<li><strong>Proxy</strong>：用于创建代理对象，可以拦截和定义基本操作（如属性查找、赋值等）。</li>\n</ul>\n<h3 id=\"10-结论\"><a href=\"#10-结论\" class=\"headerlink\" title=\"10. 结论\"></a>10. 结论</h3><p>JavaScript 提供了丰富的内置对象，帮助开发者处理各种编程任务。理解这些内置对象及其功能可以提高开发效率，简化代码的编写。</p>\n<h2 id=\"对-JSON-的理解\"><a href=\"#对-JSON-的理解\" class=\"headerlink\" title=\"对 JSON 的理解\"></a>对 JSON 的理解</h2><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人类阅读和编写，同时也易于机器解析和生成。JSON 是基于 JavaScript 的对象表示法，但它是语言无关的，广泛用于数据传输和存储。以下是对 JSON 的详细理解：</p>\n<h3 id=\"1-JSON-的基本结构\"><a href=\"#1-JSON-的基本结构\" class=\"headerlink\" title=\"1. JSON 的基本结构\"></a>1. JSON 的基本结构</h3><p>JSON 的基本结构由键值对组成，使用花括号 <code>&#123;&#125;</code> 表示对象，使用方括号 <code>[]</code> 表示数组。JSON 的数据类型包括：</p>\n<ul>\n<li><strong>对象</strong>：由 <code>&#123;&#125;</code> 包围的键值对集合。</li>\n<li><strong>数组</strong>：由 <code>[]</code> 包围的值的有序集合。</li>\n<li><strong>字符串</strong>：用双引号 <code>&quot;</code> 包围的文本。</li>\n<li><strong>数字</strong>：整数或浮点数。</li>\n<li><strong>布尔值</strong>：<code>true</code> 或 <code>false</code>。</li>\n<li><strong>null</strong>：表示空值。</li>\n</ul>\n<h4 id=\"示例-34\"><a href=\"#示例-34\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;Alice&quot;,\n  &quot;age&quot;: 30,\n  &quot;isStudent&quot;: false,\n  &quot;courses&quot;: [&quot;Math&quot;, &quot;Science&quot;],\n  &quot;address&quot;: &#123;\n    &quot;city&quot;: &quot;Wonderland&quot;,\n    &quot;zip&quot;: &quot;12345&quot;\n  &#125;,\n  &quot;graduated&quot;: null\n&#125;</code></pre>\n\n<h3 id=\"2-JSON-的特点\"><a href=\"#2-JSON-的特点\" class=\"headerlink\" title=\"2. JSON 的特点\"></a>2. JSON 的特点</h3><ul>\n<li><strong>轻量级</strong>：JSON 格式简单，数据结构清晰，适合数据交换。</li>\n<li><strong>易于阅读</strong>：JSON 的语法接近于 JavaScript 对象，易于人类理解。</li>\n<li><strong>语言无关</strong>：虽然 JSON 源于 JavaScript，但它可以被多种编程语言解析和生成，如 Python、Java、C# 等。</li>\n</ul>\n<h3 id=\"3-JSON-的使用场景\"><a href=\"#3-JSON-的使用场景\" class=\"headerlink\" title=\"3. JSON 的使用场景\"></a>3. JSON 的使用场景</h3><ul>\n<li><strong>数据交换</strong>：JSON 常用于客户端和服务器之间的数据交换，尤其是在 Web 应用程序中。</li>\n<li><strong>配置文件</strong>：许多应用程序使用 JSON 格式的配置文件来存储设置和参数。</li>\n<li><strong>API 响应</strong>：许多 RESTful API 使用 JSON 格式返回数据。</li>\n</ul>\n<h3 id=\"4-JSON-的解析和生成\"><a href=\"#4-JSON-的解析和生成\" class=\"headerlink\" title=\"4. JSON 的解析和生成\"></a>4. JSON 的解析和生成</h3><p>在 JavaScript 中，可以使用 <code>JSON</code> 对象提供的方法来解析和生成 JSON 数据：</p>\n<ul>\n<li><strong>解析 JSON</strong>：使用 <code>JSON.parse()</code> 方法将 JSON 字符串转换为 JavaScript 对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const jsonString &#x3D; &#39;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;&#39;;\nconst jsonObject &#x3D; JSON.parse(jsonString);\nconsole.log(jsonObject.name); &#x2F;&#x2F; &quot;Alice&quot;</code></pre>\n\n<ul>\n<li><strong>生成 JSON</strong>：使用 <code>JSON.stringify()</code> 方法将 JavaScript 对象转换为 JSON 字符串。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; name: &quot;Alice&quot;, age: 30 &#125;;\nconst jsonString &#x3D; JSON.stringify(obj);\nconsole.log(jsonString); &#x2F;&#x2F; &#39;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;&#39;</code></pre>\n\n<h3 id=\"5-JSON-的限制\"><a href=\"#5-JSON-的限制\" class=\"headerlink\" title=\"5. JSON 的限制\"></a>5. JSON 的限制</h3><ul>\n<li><strong>键必须是字符串</strong>：在 JSON 对象中，所有的键都必须用双引号包围，不能使用单引号。</li>\n<li><strong>不支持函数和日期</strong>：JSON 只支持基本数据类型，不能直接表示函数、日期对象等。</li>\n<li><strong>不支持循环引用</strong>：JSON 不能表示包含循环引用的对象。</li>\n</ul>\n<h3 id=\"6-总结-2\"><a href=\"#6-总结-2\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>JSON 是一种广泛使用的数据交换格式，具有轻量级、易于阅读和语言无关的特点。它在 Web 开发、API 设计和配置管理中发挥着重要作用。理解 JSON 的结构和使用方法可以帮助开发者更有效地处理数据交换和存储。</p>\n<h2 id=\"JavaScript-脚本延迟加载的方式有哪些？\"><a href=\"#JavaScript-脚本延迟加载的方式有哪些？\" class=\"headerlink\" title=\"JavaScript 脚本延迟加载的方式有哪些？\"></a>JavaScript 脚本延迟加载的方式有哪些？</h2><p>在 JavaScript 中，脚本延迟加载是指在页面加载时推迟加载 JavaScript 文件，以提高页面的加载速度和性能。以下是几种常见的 JavaScript 脚本延迟加载方式：</p>\n<h3 id=\"1-使用-defer-属性\"><a href=\"#1-使用-defer-属性\" class=\"headerlink\" title=\"1. 使用 defer 属性\"></a>1. 使用 <code>defer</code> 属性</h3><ul>\n<li><strong><code>defer</code> 属性</strong>：在 <code>&lt;script&gt;</code> 标签中添加 <code>defer</code> 属性，表示脚本将在文档解析完成后执行，但在 <code>DOMContentLoaded</code> 事件之前。所有带有 <code>defer</code> 属性的脚本会按照它们在文档中出现的顺序执行。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script src&#x3D;&quot;script.js&quot; defer&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"2-使用-async-属性\"><a href=\"#2-使用-async-属性\" class=\"headerlink\" title=\"2. 使用 async 属性\"></a>2. 使用 <code>async</code> 属性</h3><ul>\n<li><strong><code>async</code> 属性</strong>：在 <code>&lt;script&gt;</code> 标签中添加 <code>async</code> 属性，表示脚本会异步加载并立即执行。与 <code>defer</code> 不同，<code>async</code> 脚本的执行顺序不一定与它们在文档中的顺序一致。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script src&#x3D;&quot;script.js&quot; async&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<h3 id=\"3-将脚本放在页面底部\"><a href=\"#3-将脚本放在页面底部\" class=\"headerlink\" title=\"3. 将脚本放在页面底部\"></a>3. 将脚本放在页面底部</h3><ul>\n<li><strong>在 <code>&lt;body&gt;</code> 标签的底部</strong>：将 <code>&lt;script&gt;</code> 标签放在 HTML 文档的底部，通常在 <code>&lt;/body&gt;</code> 标签之前。这可以确保在加载和解析 HTML 内容后再加载脚本，从而提高页面的加载速度。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;body&gt;\n  &lt;!-- 页面内容 --&gt;\n  &lt;script src&#x3D;&quot;script.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<h3 id=\"4-使用-JavaScript-动态加载\"><a href=\"#4-使用-JavaScript-动态加载\" class=\"headerlink\" title=\"4. 使用 JavaScript 动态加载\"></a>4. 使用 JavaScript 动态加载</h3><ul>\n<li><strong>动态创建 <code>&lt;script&gt;</code> 标签</strong>：使用 JavaScript 动态创建和插入 <code>&lt;script&gt;</code> 标签，以便在需要时加载脚本。这种方法可以在特定条件下延迟加载脚本。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function loadScript(url) &#123;\n  const script &#x3D; document.createElement(&quot;script&quot;);\n  script.src &#x3D; url;\n  script.onload &#x3D; () &#x3D;&gt; &#123;\n    console.log(&quot;Script loaded successfully.&quot;);\n  &#125;;\n  document.body.appendChild(script);\n&#125;\n\n&#x2F;&#x2F; 在需要时调用\nloadScript(&quot;script.js&quot;);</code></pre>\n\n<h3 id=\"5-使用模块化加载器\"><a href=\"#5-使用模块化加载器\" class=\"headerlink\" title=\"5. 使用模块化加载器\"></a>5. 使用模块化加载器</h3><ul>\n<li><strong>使用模块化加载器</strong>：如 RequireJS、Webpack 等工具，可以实现按需加载和延迟加载 JavaScript 模块。这些工具通常提供了更复杂的依赖管理和异步加载功能。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 使用 RequireJS\nrequire([&quot;script&quot;], function (script) &#123;\n  &#x2F;&#x2F; 脚本加载完成后执行\n&#125;);</code></pre>\n\n<h3 id=\"6-使用-Intersection-Observer-API\"><a href=\"#6-使用-Intersection-Observer-API\" class=\"headerlink\" title=\"6. 使用 Intersection Observer API\"></a>6. 使用 Intersection Observer API</h3><ul>\n<li><strong>懒加载脚本</strong>：可以使用 Intersection Observer API 来监测某个元素是否进入视口，从而在用户滚动到该元素时加载脚本。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const scriptUrl &#x3D; &quot;script.js&quot;;\nconst observer &#x3D; new IntersectionObserver((entries) &#x3D;&gt; &#123;\n  entries.forEach((entry) &#x3D;&gt; &#123;\n    if (entry.isIntersecting) &#123;\n      const script &#x3D; document.createElement(&quot;script&quot;);\n      script.src &#x3D; scriptUrl;\n      document.body.appendChild(script);\n      observer.unobserve(entry.target); &#x2F;&#x2F; 停止观察\n    &#125;\n  &#125;);\n&#125;);\n\n&#x2F;&#x2F; 监测某个元素\nconst targetElement &#x3D; document.getElementById(&quot;lazy-load&quot;);\nobserver.observe(targetElement);</code></pre>\n\n<h3 id=\"7-总结-4\"><a href=\"#7-总结-4\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>JavaScript 脚本延迟加载的方式有多种，包括使用 <code>defer</code> 和 <code>async</code> 属性、将脚本放在页面底部、动态加载脚本、使用模块化加载器以及利用 Intersection Observer API。选择合适的延迟加载方式可以提高页面的加载速度和用户体验。</p>\n<h2 id=\"JavaScript-类数组对象的定义？\"><a href=\"#JavaScript-类数组对象的定义？\" class=\"headerlink\" title=\"JavaScript 类数组对象的定义？\"></a>JavaScript 类数组对象的定义？</h2><p>在 JavaScript 中，类数组对象（Array-like Object）是指具有类似数组的特性，但并不是实际的数组对象的对象。类数组对象通常具有以下特征：</p>\n<ol>\n<li><strong>具有 <code>length</code> 属性</strong>：类数组对象有一个 <code>length</code> 属性，表示对象中元素的数量。</li>\n<li><strong>可以通过索引访问元素</strong>：类数组对象的元素可以通过数字索引访问，类似于数组。</li>\n</ol>\n<h3 id=\"1-类数组对象的示例\"><a href=\"#1-类数组对象的示例\" class=\"headerlink\" title=\"1. 类数组对象的示例\"></a>1. 类数组对象的示例</h3><p>以下是一些常见的类数组对象的示例：</p>\n<h4 id=\"1-1-arguments-对象\"><a href=\"#1-1-arguments-对象\" class=\"headerlink\" title=\"1.1. arguments 对象\"></a>1.1. <code>arguments</code> 对象</h4><p>在函数内部，<code>arguments</code> 对象是一个类数组对象，包含传递给函数的所有参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  console.log(arguments); &#x2F;&#x2F; 类数组对象\n  console.log(arguments.length); &#x2F;&#x2F; 参数的数量\n  console.log(arguments[0]); &#x2F;&#x2F; 第一个参数\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: [1, 2, 3]</code></pre>\n\n<h4 id=\"1-2-DOM-方法返回的-NodeList\"><a href=\"#1-2-DOM-方法返回的-NodeList\" class=\"headerlink\" title=\"1.2. DOM 方法返回的 NodeList\"></a>1.2. DOM 方法返回的 NodeList</h4><p>许多 DOM 方法（如 <code>document.querySelectorAll</code>）返回的结果是类数组对象（NodeList），可以通过索引访问，但不具备数组的方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const elements &#x3D; document.querySelectorAll(&quot;div&quot;); &#x2F;&#x2F; 返回 NodeList\nconsole.log(elements.length); &#x2F;&#x2F; div 元素的数量\nconsole.log(elements[0]); &#x2F;&#x2F; 第一个 div 元素</code></pre>\n\n<h4 id=\"1-3-HTMLCollection\"><a href=\"#1-3-HTMLCollection\" class=\"headerlink\" title=\"1.3. HTMLCollection\"></a>1.3. HTMLCollection</h4><p><code>document.getElementsByTagName</code> 和 <code>document.getElementsByClassName</code> 等方法返回的也是类数组对象（HTMLCollection）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const divs &#x3D; document.getElementsByTagName(&quot;div&quot;); &#x2F;&#x2F; 返回 HTMLCollection\nconsole.log(divs.length); &#x2F;&#x2F; div 元素的数量\nconsole.log(divs[0]); &#x2F;&#x2F; 第一个 div 元素</code></pre>\n\n<h3 id=\"2-类数组对象与数组的区别\"><a href=\"#2-类数组对象与数组的区别\" class=\"headerlink\" title=\"2. 类数组对象与数组的区别\"></a>2. 类数组对象与数组的区别</h3><ul>\n<li><strong>方法</strong>：类数组对象不具备数组的方法（如 <code>push</code>、<code>pop</code>、<code>map</code>、<code>forEach</code> 等），而数组具有这些方法。</li>\n<li><strong>原型</strong>：类数组对象的原型不是 <code>Array.prototype</code>，而是 <code>Object.prototype</code>，因此不能直接使用数组的方法。</li>\n</ul>\n<h3 id=\"3-将类数组对象转换为数组\"><a href=\"#3-将类数组对象转换为数组\" class=\"headerlink\" title=\"3. 将类数组对象转换为数组\"></a>3. 将类数组对象转换为数组</h3><p>可以使用 <code>Array.from()</code> 或扩展运算符（<code>...</code>）将类数组对象转换为真正的数组。</p>\n<h4 id=\"3-1-使用-Array-from\"><a href=\"#3-1-使用-Array-from\" class=\"headerlink\" title=\"3.1. 使用 Array.from()\"></a>3.1. 使用 <code>Array.from()</code></h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const argsArray &#x3D; Array.from(arguments); &#x2F;&#x2F; 将 arguments 转换为数组</code></pre>\n\n<h4 id=\"3-2-使用扩展运算符\"><a href=\"#3-2-使用扩展运算符\" class=\"headerlink\" title=\"3.2. 使用扩展运算符\"></a>3.2. 使用扩展运算符</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const argsArray &#x3D; [...arguments]; &#x2F;&#x2F; 将 arguments 转换为数组</code></pre>\n\n<h3 id=\"4-总结-5\"><a href=\"#4-总结-5\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>类数组对象是指具有类似数组特征的对象，通常具有 <code>length</code> 属性和索引访问的能力。常见的类数组对象包括 <code>arguments</code> 对象、NodeList 和 HTMLCollection。虽然类数组对象与数组有相似之处，但它们不具备数组的方法，因此在需要数组功能时，通常需要将类数组对象转换为真正的数组。</p>\n<h2 id=\"数组有哪些原生方法？\"><a href=\"#数组有哪些原生方法？\" class=\"headerlink\" title=\"数组有哪些原生方法？\"></a>数组有哪些原生方法？</h2><p>JavaScript 中的数组提供了许多原生方法，这些方法可以帮助开发者进行数组的操作和处理。以下是一些常用的数组原生方法的分类及其简要说明：</p>\n<h3 id=\"1-数组创建和初始化\"><a href=\"#1-数组创建和初始化\" class=\"headerlink\" title=\"1. 数组创建和初始化\"></a>1. 数组创建和初始化</h3><ul>\n<li><p>**Array.of()**：创建一个新数组实例，使用可变数量的参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; Array.of(1, 2, 3); &#x2F;&#x2F; [1, 2, 3]</code></pre>\n</li>\n<li><p>**Array.from()**：从类数组对象或可迭代对象创建一个新数组实例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; Array.from(&quot;hello&quot;); &#x2F;&#x2F; [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</code></pre></li>\n</ul>\n<h3 id=\"2-数组操作\"><a href=\"#2-数组操作\" class=\"headerlink\" title=\"2. 数组操作\"></a>2. 数组操作</h3><ul>\n<li><p>**push()**：向数组末尾添加一个或多个元素，并返回新数组的长度。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2];\narr.push(3); &#x2F;&#x2F; [1, 2, 3]</code></pre>\n</li>\n<li><p>**pop()**：从数组末尾删除一个元素，并返回该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst last &#x3D; arr.pop(); &#x2F;&#x2F; last &#x3D; 3, arr &#x3D; [1, 2]</code></pre>\n</li>\n<li><p>**shift()**：从数组开头删除一个元素，并返回该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst first &#x3D; arr.shift(); &#x2F;&#x2F; first &#x3D; 1, arr &#x3D; [2, 3]</code></pre>\n</li>\n<li><p>**unshift()**：向数组开头添加一个或多个元素，并返回新数组的长度。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [2, 3];\narr.unshift(1); &#x2F;&#x2F; [1, 2, 3]</code></pre></li>\n</ul>\n<h3 id=\"3-数组遍历\"><a href=\"#3-数组遍历\" class=\"headerlink\" title=\"3. 数组遍历\"></a>3. 数组遍历</h3><ul>\n<li><p>**forEach()**：对数组的每个元素执行一次提供的函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\narr.forEach((num) &#x3D;&gt; console.log(num)); &#x2F;&#x2F; 1, 2, 3</code></pre>\n</li>\n<li><p>**map()**：创建一个新数组，包含调用函数处理每个元素后的结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst doubled &#x3D; arr.map((num) &#x3D;&gt; num * 2); &#x2F;&#x2F; [2, 4, 6]</code></pre>\n</li>\n<li><p>**filter()**：创建一个新数组，包含所有通过测试的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\nconst evens &#x3D; arr.filter((num) &#x3D;&gt; num % 2 &#x3D;&#x3D;&#x3D; 0); &#x2F;&#x2F; [2, 4]</code></pre>\n</li>\n<li><p>**reduce()**：对数组中的每个元素执行一个 reducer 函数，最终计算出一个值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst sum &#x3D; arr.reduce((acc, num) &#x3D;&gt; acc + num, 0); &#x2F;&#x2F; 6</code></pre></li>\n</ul>\n<h3 id=\"4-数组查找\"><a href=\"#4-数组查找\" class=\"headerlink\" title=\"4. 数组查找\"></a>4. 数组查找</h3><ul>\n<li><p>**find()**：返回数组中满足提供的测试函数的第一个元素的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\nconst found &#x3D; arr.find((num) &#x3D;&gt; num &gt; 2); &#x2F;&#x2F; 3</code></pre>\n</li>\n<li><p>**findIndex()**：返回满足提供的测试函数的第一个元素的索引。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\nconst index &#x3D; arr.findIndex((num) &#x3D;&gt; num &gt; 2); &#x2F;&#x2F; 2</code></pre>\n</li>\n<li><p>**includes()**：判断数组是否包含某个值，返回布尔值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst hasTwo &#x3D; arr.includes(2); &#x2F;&#x2F; true</code></pre></li>\n</ul>\n<h3 id=\"5-数组排序和反转\"><a href=\"#5-数组排序和反转\" class=\"headerlink\" title=\"5. 数组排序和反转\"></a>5. 数组排序和反转</h3><ul>\n<li><p>**sort()**：对数组的元素进行排序，并返回该数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [3, 1, 2];\narr.sort(); &#x2F;&#x2F; [1, 2, 3]</code></pre>\n</li>\n<li><p>**reverse()**：反转数组中的元素顺序。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\narr.reverse(); &#x2F;&#x2F; [3, 2, 1]</code></pre></li>\n</ul>\n<h3 id=\"6-数组连接和切割\"><a href=\"#6-数组连接和切割\" class=\"headerlink\" title=\"6. 数组连接和切割\"></a>6. 数组连接和切割</h3><ul>\n<li><p>**concat()**：连接两个或多个数组，并返回一个新数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr1 &#x3D; [1, 2];\nconst arr2 &#x3D; [3, 4];\nconst combined &#x3D; arr1.concat(arr2); &#x2F;&#x2F; [1, 2, 3, 4]</code></pre>\n</li>\n<li><p>**slice()**：返回数组的一个片段，创建一个新数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\nconst sliced &#x3D; arr.slice(1, 3); &#x2F;&#x2F; [2, 3]</code></pre>\n</li>\n<li><p>**splice()**：改变数组的内容，通过添加、删除或替换现有元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4];\narr.splice(1, 2, 5); &#x2F;&#x2F; arr &#x3D; [1, 5, 4]</code></pre></li>\n</ul>\n<h3 id=\"7-数组其他方法\"><a href=\"#7-数组其他方法\" class=\"headerlink\" title=\"7. 数组其他方法\"></a>7. 数组其他方法</h3><ul>\n<li><p>**join()**：将数组的所有元素连接成一个字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [&quot;Hello&quot;, &quot;World&quot;];\nconst str &#x3D; arr.join(&quot; &quot;); &#x2F;&#x2F; &quot;Hello World&quot;</code></pre>\n</li>\n<li><p>**toString()**：将数组转换为字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst str &#x3D; arr.toString(); &#x2F;&#x2F; &quot;1,2,3&quot;</code></pre>\n</li>\n<li><p>**flat()**：将嵌套数组“扁平化”到指定的深度。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, [2, [3, 4]]];\nconst flatArr &#x3D; arr.flat(2); &#x2F;&#x2F; [1, 2, 3, 4]</code></pre>\n</li>\n<li><p>**flatMap()**：先映射每个元素，然后将结果扁平化。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\nconst flatMapped &#x3D; arr.flatMap((x) &#x3D;&gt; [x, x * 2]); &#x2F;&#x2F; [1, 2, 2, 4, 3, 6]</code></pre></li>\n</ul>\n<h3 id=\"8-总结\"><a href=\"#8-总结\" class=\"headerlink\" title=\"8. 总结\"></a>8. 总结</h3><p>JavaScript 数组提供了丰富的原生方法，帮助开发者进行数组的创建、操作、遍历、查找、排序、连接和切割等操作。理解这些方法可以提高开发效率，简化代码的编写。</p>\n<h2 id=\"常见的位运算符有哪些？其计算规则是什么？\"><a href=\"#常见的位运算符有哪些？其计算规则是什么？\" class=\"headerlink\" title=\"常见的位运算符有哪些？其计算规则是什么？\"></a>常见的位运算符有哪些？其计算规则是什么？</h2><p>在 JavaScript 中，位运算符用于对整数的二进制位进行操作。位运算符的操作数会被转换为 32 位有符号整数。以下是常见的位运算符及其计算规则：</p>\n<h3 id=\"1-位运算符列表\"><a href=\"#1-位运算符列表\" class=\"headerlink\" title=\"1. 位运算符列表\"></a>1. 位运算符列表</h3><h4 id=\"1-1-按位与（AND）-amp\"><a href=\"#1-1-按位与（AND）-amp\" class=\"headerlink\" title=\"1.1. 按位与（AND）&amp;\"></a>1.1. 按位与（AND）<code>&amp;</code></h4><ul>\n<li><p><strong>操作</strong>：对两个数的每一位进行比较，只有当两个对应的位都是 <code>1</code> 时，结果位才为 <code>1</code>，否则为 <code>0</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst b &#x3D; 3; &#x2F;&#x2F; 0011\nconst result &#x3D; a &amp; b; &#x2F;&#x2F; 0001 (1)</code></pre></li>\n</ul>\n<h4 id=\"1-2-按位或（OR）\"><a href=\"#1-2-按位或（OR）\" class=\"headerlink\" title=\"1.2. 按位或（OR）|\"></a>1.2. 按位或（OR）<code>|</code></h4><ul>\n<li><p><strong>操作</strong>：对两个数的每一位进行比较，只要有一个对应的位是 <code>1</code>，结果位就为 <code>1</code>，否则为 <code>0</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst b &#x3D; 3; &#x2F;&#x2F; 0011\nconst result &#x3D; a | b; &#x2F;&#x2F; 0111 (7)</code></pre></li>\n</ul>\n<h4 id=\"1-3-按位异或（XOR）\"><a href=\"#1-3-按位异或（XOR）\" class=\"headerlink\" title=\"1.3. 按位异或（XOR）^\"></a>1.3. 按位异或（XOR）<code>^</code></h4><ul>\n<li><p><strong>操作</strong>：对两个数的每一位进行比较，当两个对应的位不同（一个是 <code>1</code>，一个是 <code>0</code>）时，结果位为 <code>1</code>，否则为 <code>0</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst b &#x3D; 3; &#x2F;&#x2F; 0011\nconst result &#x3D; a ^ b; &#x2F;&#x2F; 0110 (6)</code></pre></li>\n</ul>\n<h4 id=\"1-4-按位非（NOT）\"><a href=\"#1-4-按位非（NOT）\" class=\"headerlink\" title=\"1.4. 按位非（NOT）~\"></a>1.4. 按位非（NOT）<code>~</code></h4><ul>\n<li><p><strong>操作</strong>：对一个数的每一位进行取反操作，即 <code>0</code> 变为 <code>1</code>，<code>1</code> 变为 <code>0</code>。结果是 <code>-(n + 1)</code>，其中 <code>n</code> 是原数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst result &#x3D; ~a; &#x2F;&#x2F; 1010 (即 -6)</code></pre></li>\n</ul>\n<h4 id=\"1-5-左移（Left-Shift）-lt-lt\"><a href=\"#1-5-左移（Left-Shift）-lt-lt\" class=\"headerlink\" title=\"1.5. 左移（Left Shift）&lt;&lt;\"></a>1.5. 左移（Left Shift）<code>&lt;&lt;</code></h4><ul>\n<li><p><strong>操作</strong>：将一个数的二进制位向左移动指定的位数，右侧用 <code>0</code> 填充。相当于乘以 <code>2</code> 的指定次方。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst result &#x3D; a &lt;&lt; 1; &#x2F;&#x2F; 1010 (10)</code></pre></li>\n</ul>\n<h4 id=\"1-6-右移（Right-Shift）-gt-gt\"><a href=\"#1-6-右移（Right-Shift）-gt-gt\" class=\"headerlink\" title=\"1.6. 右移（Right Shift）&gt;&gt;\"></a>1.6. 右移（Right Shift）<code>&gt;&gt;</code></h4><ul>\n<li><p><strong>操作</strong>：将一个数的二进制位向右移动指定的位数，左侧用符号位填充（如果是负数，左侧填充 <code>1</code>；如果是正数，左侧填充 <code>0</code>）。相当于除以 <code>2</code> 的指定次方。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; 5; &#x2F;&#x2F; 0101\nconst result &#x3D; a &gt;&gt; 1; &#x2F;&#x2F; 0010 (2)</code></pre></li>\n</ul>\n<h4 id=\"1-7-无符号右移（Unsigned-Right-Shift）-gt-gt-gt\"><a href=\"#1-7-无符号右移（Unsigned-Right-Shift）-gt-gt-gt\" class=\"headerlink\" title=\"1.7. 无符号右移（Unsigned Right Shift）&gt;&gt;&gt;\"></a>1.7. 无符号右移（Unsigned Right Shift）<code>&gt;&gt;&gt;</code></h4><ul>\n<li><p><strong>操作</strong>：将一个数的二进制位向右移动指定的位数，左侧用 <code>0</code> 填充，不考虑符号位。适用于处理无符号整数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const a &#x3D; -5; &#x2F;&#x2F; 11111111111111111111111111111011\nconst result &#x3D; a &gt;&gt;&gt; 1; &#x2F;&#x2F; 01111111111111111111111111111101 (2147483645)</code></pre></li>\n</ul>\n<h3 id=\"2-计算规则\"><a href=\"#2-计算规则\" class=\"headerlink\" title=\"2. 计算规则\"></a>2. 计算规则</h3><ul>\n<li><strong>二进制表示</strong>：位运算符操作的是整数的二进制表示，所有的操作都是在二进制位上进行的。</li>\n<li><strong>32 位有符号整数</strong>：JavaScript 中的位运算符将操作数转换为 32 位有符号整数。</li>\n<li><strong>结果类型</strong>：位运算的结果也是一个整数，通常以十进制形式表示。</li>\n</ul>\n<h3 id=\"3-总结-4\"><a href=\"#3-总结-4\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><p>JavaScript 中的位运算符包括按位与、按位或、按位异或、按位非、左移、右移和无符号右移。它们通过对整数的二进制位进行操作来实现各种计算，适用于需要低级别位操作的场景。理解这些运算符及其计算规则可以帮助开发者更有效地处理位级数据。</p>\n<h2 id=\"为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\"><a href=\"#为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\" class=\"headerlink\" title=\"为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\"></a>为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</h2><p>在 JavaScript 中，<code>arguments</code> 对象是一个类数组对象，它包含传递给函数的所有参数。<code>arguments</code> 不是一个真正的数组，而是一个类似数组的对象，主要有以下几个原因：</p>\n<h3 id=\"1-arguments-是类数组而不是数组的原因\"><a href=\"#1-arguments-是类数组而不是数组的原因\" class=\"headerlink\" title=\"1. arguments 是类数组而不是数组的原因\"></a>1. <code>arguments</code> 是类数组而不是数组的原因</h3><ul>\n<li><p><strong>历史遗留</strong>：<code>arguments</code> 对象是 JavaScript 早期版本的一部分，设计时并没有考虑到将其作为数组来处理。它的主要目的是提供对函数参数的访问，而不是作为一个完整的数组对象。</p>\n</li>\n<li><p><strong>性能考虑</strong>：在函数调用时，<code>arguments</code> 对象的实现方式可能更高效，因为它不需要分配额外的数组方法和属性。类数组对象只需要存储参数的引用和 <code>length</code> 属性。</p>\n</li>\n<li><p><strong>灵活性</strong>：<code>arguments</code> 对象允许函数接受不定数量的参数，这种灵活性在早期 JavaScript 中是非常重要的。将其设计为类数组对象可以更简单地实现这一点。</p>\n</li>\n</ul>\n<h3 id=\"2-arguments-对象的特点\"><a href=\"#2-arguments-对象的特点\" class=\"headerlink\" title=\"2. arguments 对象的特点\"></a>2. <code>arguments</code> 对象的特点</h3><ul>\n<li><strong>类数组特性</strong>：<code>arguments</code> 对象具有 <code>length</code> 属性，可以通过索引访问参数，但不具备数组的方法（如 <code>push</code>、<code>pop</code>、<code>map</code> 等）。</li>\n<li><strong>动态性</strong>：<code>arguments</code> 对象的内容是动态的，随着函数调用的参数变化而变化。</li>\n</ul>\n<h3 id=\"3-遍历类数组对象\"><a href=\"#3-遍历类数组对象\" class=\"headerlink\" title=\"3. 遍历类数组对象\"></a>3. 遍历类数组对象</h3><p>虽然 <code>arguments</code> 对象不是数组，但可以使用多种方法遍历它：</p>\n<h4 id=\"3-1-使用-for-循环\"><a href=\"#3-1-使用-for-循环\" class=\"headerlink\" title=\"3.1. 使用 for 循环\"></a>3.1. 使用 <code>for</code> 循环</h4><p>可以使用传统的 <code>for</code> 循环遍历 <code>arguments</code> 对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  for (let i &#x3D; 0; i &lt; arguments.length; i++) &#123;\n    console.log(arguments[i]);\n  &#125;\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: 1, 2, 3</code></pre>\n\n<h4 id=\"3-2-使用-for-of-循环\"><a href=\"#3-2-使用-for-of-循环\" class=\"headerlink\" title=\"3.2. 使用 for...of 循环\"></a>3.2. 使用 <code>for...of</code> 循环</h4><p>在 ES6 中，可以使用 <code>for...of</code> 循环遍历 <code>arguments</code> 对象，但需要将其转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  for (const arg of Array.from(arguments)) &#123;\n    console.log(arg);\n  &#125;\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: 1, 2, 3</code></pre>\n\n<h4 id=\"3-3-使用-Array-from\"><a href=\"#3-3-使用-Array-from\" class=\"headerlink\" title=\"3.3. 使用 Array.from()\"></a>3.3. 使用 <code>Array.from()</code></h4><p>可以使用 <code>Array.from()</code> 方法将 <code>arguments</code> 对象转换为数组，然后遍历。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; Array.from(arguments);\n  argsArray.forEach((arg) &#x3D;&gt; &#123;\n    console.log(arg);\n  &#125;);\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: 1, 2, 3</code></pre>\n\n<h4 id=\"3-4-使用扩展运算符\"><a href=\"#3-4-使用扩展运算符\" class=\"headerlink\" title=\"3.4. 使用扩展运算符\"></a>3.4. 使用扩展运算符</h4><p>在 ES6 中，可以使用扩展运算符将 <code>arguments</code> 对象转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; [...arguments];\n  argsArray.forEach((arg) &#x3D;&gt; &#123;\n    console.log(arg);\n  &#125;);\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: 1, 2, 3</code></pre>\n\n<h3 id=\"4-总结-6\"><a href=\"#4-总结-6\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p><code>arguments</code> 对象是类数组而不是数组的原因主要与历史设计、性能和灵活性有关。虽然 <code>arguments</code> 对象不具备数组的方法，但可以通过多种方式遍历它，如使用 <code>for</code> 循环、<code>for...of</code> 循环、<code>Array.from()</code> 或扩展运算符等。理解 <code>arguments</code> 对象的特性和遍历方法可以帮助开发者更有效地处理函数参数。</p>\n<h2 id=\"什么是-DOM-和-BOM？\"><a href=\"#什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"什么是 DOM 和 BOM？\"></a>什么是 DOM 和 BOM？</h2><p>在 Web 开发中，DOM（文档对象模型）和 BOM（浏览器对象模型）是两个重要的概念，它们分别用于处理网页的结构和浏览器的功能。以下是对 DOM 和 BOM 的详细解释：</p>\n<h3 id=\"1-DOM（文档对象模型）\"><a href=\"#1-DOM（文档对象模型）\" class=\"headerlink\" title=\"1. DOM（文档对象模型）\"></a>1. DOM（文档对象模型）</h3><h4 id=\"1-1-定义\"><a href=\"#1-1-定义\" class=\"headerlink\" title=\"1.1. 定义\"></a>1.1. 定义</h4><p>DOM 是一种编程接口，用于表示和操作 HTML 和 XML 文档的结构。它将文档视为一个树形结构，其中每个节点代表文档中的一个部分（如元素、属性、文本等）。</p>\n<h4 id=\"1-2-特点\"><a href=\"#1-2-特点\" class=\"headerlink\" title=\"1.2. 特点\"></a>1.2. 特点</h4><ul>\n<li><p><strong>树形结构</strong>：DOM 将文档表示为一个树形结构，根节点是 <code>document</code> 对象，子节点是 HTML 元素、文本节点等。</p>\n</li>\n<li><p><strong>动态性</strong>：通过 JavaScript，可以动态地修改 DOM，添加、删除或更改元素和属性，从而实现交互性和动态效果。</p>\n</li>\n<li><p><strong>语言无关</strong>：虽然 DOM 最初是为 JavaScript 设计的，但它是语言无关的，可以被多种编程语言访问。</p>\n</li>\n</ul>\n<h4 id=\"1-3-常用-DOM-方法\"><a href=\"#1-3-常用-DOM-方法\" class=\"headerlink\" title=\"1.3. 常用 DOM 方法\"></a>1.3. 常用 DOM 方法</h4><ul>\n<li><p><strong>获取元素</strong>：</p>\n<ul>\n<li><code>document.getElementById(id)</code>：通过 ID 获取元素。</li>\n<li><code>document.getElementsByClassName(className)</code>：通过类名获取元素集合。</li>\n<li><code>document.querySelector(selector)</code>：通过 CSS 选择器获取第一个匹配的元素。</li>\n</ul>\n</li>\n<li><p><strong>修改元素</strong>：</p>\n<ul>\n<li><code>element.innerHTML</code>：获取或设置元素的 HTML 内容。</li>\n<li><code>element.style</code>：获取或设置元素的样式。</li>\n</ul>\n</li>\n<li><p><strong>添加和删除元素</strong>：</p>\n<ul>\n<li><code>document.createElement(tagName)</code>：创建新元素。</li>\n<li><code>parentElement.appendChild(childElement)</code>：将子元素添加到父元素。</li>\n<li><code>parentElement.removeChild(childElement)</code>：从父元素中删除子元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-BOM（浏览器对象模型）\"><a href=\"#2-BOM（浏览器对象模型）\" class=\"headerlink\" title=\"2. BOM（浏览器对象模型）\"></a>2. BOM（浏览器对象模型）</h3><h4 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1. 定义\"></a>2.1. 定义</h4><p>BOM 是一组 JavaScript 对象，用于与浏览器进行交互。它提供了对浏览器窗口、历史记录、导航、定时器等功能的访问。</p>\n<h4 id=\"2-2-特点\"><a href=\"#2-2-特点\" class=\"headerlink\" title=\"2.2. 特点\"></a>2.2. 特点</h4><ul>\n<li><p><strong>与浏览器相关</strong>：BOM 提供了与浏览器相关的功能，允许开发者控制浏览器的行为和与用户的交互。</p>\n</li>\n<li><p><strong>不依赖于文档</strong>：BOM 的功能不依赖于 DOM，开发者可以在没有文档的情况下使用 BOM。</p>\n</li>\n</ul>\n<h4 id=\"2-3-常用-BOM-对象\"><a href=\"#2-3-常用-BOM-对象\" class=\"headerlink\" title=\"2.3. 常用 BOM 对象\"></a>2.3. 常用 BOM 对象</h4><ul>\n<li><p><strong>window</strong>：表示浏览器窗口，是 BOM 的根对象，提供了许多方法和属性，如 <code>alert()</code>、<code>setTimeout()</code>、<code>location</code> 等。</p>\n</li>\n<li><p><strong>document</strong>：虽然 <code>document</code> 是 DOM 的一部分，但它也是 BOM 的一部分，表示当前加载的文档。</p>\n</li>\n<li><p><strong>navigator</strong>：提供有关浏览器的信息，如浏览器名称、版本、操作系统等。</p>\n</li>\n<li><p><strong>location</strong>：表示当前文档的 URL，提供了获取和修改 URL 的方法。</p>\n</li>\n<li><p><strong>history</strong>：提供对浏览器历史记录的访问，允许开发者控制用户的浏览历史。</p>\n</li>\n</ul>\n<h3 id=\"3-总结-5\"><a href=\"#3-总结-5\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>DOM（文档对象模型）</strong>：用于表示和操作 HTML 和 XML 文档的结构，允许开发者动态修改网页内容和结构。</li>\n<li><strong>BOM（浏览器对象模型）</strong>：用于与浏览器进行交互，提供对浏览器窗口、历史记录、导航等功能的访问。</li>\n</ul>\n<p>理解 DOM 和 BOM 的概念及其功能是 Web 开发的基础，有助于开发者创建动态和交互性强的网页应用。</p>\n<h2 id=\"对类数组对象的理解，如何转化为数组\"><a href=\"#对类数组对象的理解，如何转化为数组\" class=\"headerlink\" title=\"对类数组对象的理解，如何转化为数组\"></a>对类数组对象的理解，如何转化为数组</h2><p>在 JavaScript 中，类数组对象（Array-like Object）是指具有类似数组的特性，但并不是实际的数组对象的对象。类数组对象通常具有以下几个特征：</p>\n<h3 id=\"1-类数组对象的特征\"><a href=\"#1-类数组对象的特征\" class=\"headerlink\" title=\"1. 类数组对象的特征\"></a>1. 类数组对象的特征</h3><ul>\n<li><strong>具有 <code>length</code> 属性</strong>：类数组对象有一个 <code>length</code> 属性，表示对象中元素的数量。</li>\n<li><strong>可以通过索引访问元素</strong>：类数组对象的元素可以通过数字索引访问，类似于数组。</li>\n</ul>\n<h3 id=\"2-常见的类数组对象\"><a href=\"#2-常见的类数组对象\" class=\"headerlink\" title=\"2. 常见的类数组对象\"></a>2. 常见的类数组对象</h3><ul>\n<li><p><strong><code>arguments</code> 对象</strong>：在函数内部，<code>arguments</code> 对象是一个类数组对象，包含传递给函数的所有参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  console.log(arguments); &#x2F;&#x2F; 类数组对象\n  console.log(arguments.length); &#x2F;&#x2F; 参数的数量\n  console.log(arguments[0]); &#x2F;&#x2F; 第一个参数\n&#125;\n\nexample(1, 2, 3); &#x2F;&#x2F; 输出: 1, 2, 3</code></pre>\n</li>\n<li><p><strong>DOM 方法返回的 NodeList</strong>：许多 DOM 方法（如 <code>document.querySelectorAll</code>）返回的结果是类数组对象（NodeList），可以通过索引访问，但不具备数组的方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const elements &#x3D; document.querySelectorAll(&quot;div&quot;); &#x2F;&#x2F; 返回 NodeList\nconsole.log(elements.length); &#x2F;&#x2F; div 元素的数量\nconsole.log(elements[0]); &#x2F;&#x2F; 第一个 div 元素</code></pre>\n</li>\n<li><p><strong>HTMLCollection</strong>：<code>document.getElementsByTagName</code> 和 <code>document.getElementsByClassName</code> 等方法返回的也是类数组对象（HTMLCollection）。</p>\n</li>\n</ul>\n<h3 id=\"3-将类数组对象转换为数组-1\"><a href=\"#3-将类数组对象转换为数组-1\" class=\"headerlink\" title=\"3. 将类数组对象转换为数组\"></a>3. 将类数组对象转换为数组</h3><p>虽然类数组对象不具备数组的方法，但可以使用多种方法将其转换为真正的数组：</p>\n<h4 id=\"3-1-使用-Array-from-1\"><a href=\"#3-1-使用-Array-from-1\" class=\"headerlink\" title=\"3.1. 使用 Array.from()\"></a>3.1. 使用 <code>Array.from()</code></h4><p><code>Array.from()</code> 方法可以将类数组对象或可迭代对象转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; Array.from(arguments); &#x2F;&#x2F; 将 arguments 转换为数组\n  console.log(argsArray); &#x2F;&#x2F; [1, 2, 3]\n&#125;\n\nexample(1, 2, 3);</code></pre>\n\n<h4 id=\"3-2-使用扩展运算符（Spread-Operator）\"><a href=\"#3-2-使用扩展运算符（Spread-Operator）\" class=\"headerlink\" title=\"3.2. 使用扩展运算符（Spread Operator）\"></a>3.2. 使用扩展运算符（Spread Operator）</h4><p>在 ES6 中，可以使用扩展运算符将类数组对象转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; [...arguments]; &#x2F;&#x2F; 将 arguments 转换为数组\n  console.log(argsArray); &#x2F;&#x2F; [1, 2, 3]\n&#125;\n\nexample(1, 2, 3);</code></pre>\n\n<h4 id=\"3-3-使用-Array-prototype-slice-call\"><a href=\"#3-3-使用-Array-prototype-slice-call\" class=\"headerlink\" title=\"3.3. 使用 Array.prototype.slice.call()\"></a>3.3. 使用 <code>Array.prototype.slice.call()</code></h4><p>可以使用 <code>Array.prototype.slice</code> 方法将类数组对象转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; Array.prototype.slice.call(arguments); &#x2F;&#x2F; 将 arguments 转换为数组\n  console.log(argsArray); &#x2F;&#x2F; [1, 2, 3]\n&#125;\n\nexample(1, 2, 3);</code></pre>\n\n<h4 id=\"3-4-使用-Array-prototype-concat\"><a href=\"#3-4-使用-Array-prototype-concat\" class=\"headerlink\" title=\"3.4. 使用 Array.prototype.concat()\"></a>3.4. 使用 <code>Array.prototype.concat()</code></h4><p>可以使用 <code>Array.prototype.concat()</code> 方法将类数组对象转换为数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function example() &#123;\n  const argsArray &#x3D; [].concat.apply([], arguments); &#x2F;&#x2F; 将 arguments 转换为数组\n  console.log(argsArray); &#x2F;&#x2F; [1, 2, 3]\n&#125;\n\nexample(1, 2, 3);</code></pre>\n\n<h3 id=\"4-总结-7\"><a href=\"#4-总结-7\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>类数组对象是指具有类似数组特征的对象，通常具有 <code>length</code> 属性和索引访问的能力。常见的类数组对象包括 <code>arguments</code> 对象、NodeList 和 HTMLCollection。虽然类数组对象与数组有相似之处，但它们不具备数组的方法，因此在需要数组功能时，通常需要将类数组对象转换为真正的数组。可以使用 <code>Array.from()</code>、扩展运算符、<code>Array.prototype.slice.call()</code> 或 <code>Array.prototype.concat()</code> 等方法进行转换。</p>\n<h2 id=\"escape、encodeURI、encodeURIComponent-的区别\"><a href=\"#escape、encodeURI、encodeURIComponent-的区别\" class=\"headerlink\" title=\"escape、encodeURI、encodeURIComponent 的区别\"></a>escape、encodeURI、encodeURIComponent 的区别</h2><p>在 JavaScript 中，<code>escape</code>、<code>encodeURI</code> 和 <code>encodeURIComponent</code> 都是用于编码字符串的函数，但它们的用途和处理方式有所不同。以下是对这三者的详细比较：</p>\n<h3 id=\"1-escape\"><a href=\"#1-escape\" class=\"headerlink\" title=\"1. escape\"></a>1. <code>escape</code></h3><ul>\n<li><p><strong>定义</strong>：<code>escape</code> 是一个较旧的函数，用于对字符串进行编码，以便在 URL 中使用。它会对非 ASCII 字符和某些特殊字符进行编码。</p>\n</li>\n<li><p><strong>编码方式</strong>：<code>escape</code> 会将所有非 ASCII 字符（Unicode 字符）和以下字符进行编码：<code>*</code>、<code>+</code>、<code>-</code>、<code>.</code>、<code>/</code>、<code>@</code>、<code>&amp;</code>、<code>=</code>、<code>?</code>、<code>:</code>、<code>#</code>、<code>!</code>、<code>&#39;</code>、<code>(</code>、<code>)</code>、<code>~</code>、<code>%</code>、<code>$</code>、<code>^</code>、<code>&#123;</code>、<code>&#125;</code>、<code>[</code>、<code>]</code>、<code>|</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>。</p>\n</li>\n<li><p><strong>注意</strong>：<code>escape</code> 已被弃用，不推荐使用。它不能正确处理某些字符（如 <code>+</code> 和 <code>@</code>），并且不适用于现代 Web 开发。</p>\n</li>\n</ul>\n<h4 id=\"示例-35\"><a href=\"#示例-35\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const str &#x3D; &quot;Hello, 世界!&quot;;\nconst encoded &#x3D; escape(str); &#x2F;&#x2F; &quot;Hello%2C%20%u4E16%u754C%21&quot;\nconsole.log(encoded);</code></pre>\n\n<h3 id=\"2-encodeURI\"><a href=\"#2-encodeURI\" class=\"headerlink\" title=\"2. encodeURI\"></a>2. <code>encodeURI</code></h3><ul>\n<li><p><strong>定义</strong>：<code>encodeURI</code> 用于对整个 URI 进行编码。它会对 URI 中的特殊字符进行编码，但保留一些字符，以确保 URI 的结构不被破坏。</p>\n</li>\n<li><p><strong>编码方式</strong>：<code>encodeURI</code> 不会编码以下字符：<code>#</code>、<code>?</code>、<code>&amp;</code>、<code>=</code>、<code>:</code>、<code>/</code>、<code>@</code>、<code>+</code>、<code>$</code>、<code>!</code>、<code>&#39;</code>、<code>(</code>、<code>)</code>、<code>*</code>、<code>~</code>、<code>-</code>、<code>.</code>、<code>_</code>。</p>\n</li>\n<li><p><strong>用途</strong>：适用于编码完整的 URI，确保 URI 的结构和语义不被改变。</p>\n</li>\n</ul>\n<h4 id=\"示例-36\"><a href=\"#示例-36\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const uri &#x3D; &quot;http:&#x2F;&#x2F;example.com&#x2F;?name&#x3D;张三&amp;age&#x3D;25&quot;;\nconst encodedURI &#x3D; encodeURI(uri); &#x2F;&#x2F; &quot;http:&#x2F;&#x2F;example.com&#x2F;?name&#x3D;%E5%BC%A0%E4%B8%89&amp;age&#x3D;25&quot;\nconsole.log(encodedURI);</code></pre>\n\n<h3 id=\"3-encodeURIComponent\"><a href=\"#3-encodeURIComponent\" class=\"headerlink\" title=\"3. encodeURIComponent\"></a>3. <code>encodeURIComponent</code></h3><ul>\n<li><p><strong>定义</strong>：<code>encodeURIComponent</code> 用于对 URI 的组成部分进行编码。它会对所有字符进行编码，包括特殊字符。</p>\n</li>\n<li><p><strong>编码方式</strong>：<code>encodeURIComponent</code> 会编码所有非字母数字字符，包括 <code>!</code>、<code>&#39;</code>、<code>(</code>、<code>)</code>、<code>*</code>、<code>~</code>、<code>-</code>、<code>.</code>、<code>_</code>、<code>/</code>、<code>:</code>、<code>@</code>、<code>&amp;</code>、<code>=</code>、<code>+</code>、<code>$</code>、<code>#</code>、<code>?</code>。</p>\n</li>\n<li><p><strong>用途</strong>：适用于编码 URI 的单个组件（如查询参数、路径段等），确保这些组件在 URI 中的正确性。</p>\n</li>\n</ul>\n<h4 id=\"示例-37\"><a href=\"#示例-37\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const param &#x3D; &quot;name&#x3D;张三&amp;age&#x3D;25&quot;;\nconst encodedParam &#x3D; encodeURIComponent(param); &#x2F;&#x2F; &quot;name%3D%E5%BC%A0%E4%B8%89%26age%3D25&quot;\nconsole.log(encodedParam);</code></pre>\n\n<h3 id=\"4-总结-8\"><a href=\"#4-总结-8\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用途</th>\n<th>编码的字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>escape</code></td>\n<td>编码字符串（已弃用）</td>\n<td>非 ASCII 字符和某些特殊字符</td>\n</tr>\n<tr>\n<td><code>encodeURI</code></td>\n<td>编码整个 URI</td>\n<td>保留 URI 结构字符（如 <code>?</code>、<code>&amp;</code>、<code>=</code>）</td>\n</tr>\n<tr>\n<td><code>encodeURIComponent</code></td>\n<td>编码 URI 的组成部分</td>\n<td>编码所有非字母数字字符</td>\n</tr>\n</tbody></table>\n<p>在现代 Web 开发中，推荐使用 <code>encodeURI</code> 和 <code>encodeURIComponent</code>，而不使用 <code>escape</code>。通常，<code>encodeURIComponent</code> 更常用于处理 URL 的查询参数和路径段，以确保所有字符都被正确编码。</p>\n<h2 id=\"对-AJAX-的理解，实现一个-AJAX-请求\"><a href=\"#对-AJAX-的理解，实现一个-AJAX-请求\" class=\"headerlink\" title=\"对 AJAX 的理解，实现一个 AJAX 请求\"></a>对 AJAX 的理解，实现一个 AJAX 请求</h2><p>AJAX（Asynchronous JavaScript and XML）是一种用于在不重新加载整个网页的情况下与服务器交换数据的技术。它允许网页在后台与服务器进行异步通信，从而提高用户体验和页面响应速度。虽然 AJAX 的名称中包含 XML，但它实际上可以使用多种数据格式（如 JSON、XML、HTML 等）进行数据交换。</p>\n<h3 id=\"1-AJAX-的工作原理\"><a href=\"#1-AJAX-的工作原理\" class=\"headerlink\" title=\"1. AJAX 的工作原理\"></a>1. AJAX 的工作原理</h3><p>AJAX 的工作原理通常包括以下几个步骤：</p>\n<ol>\n<li><strong>创建 XMLHttpRequest 对象</strong>：使用 JavaScript 创建一个 XMLHttpRequest 对象。</li>\n<li><strong>配置请求</strong>：使用 <code>open()</code> 方法配置请求的类型（GET、POST 等）、URL 和是否异步。</li>\n<li><strong>发送请求</strong>：使用 <code>send()</code> 方法发送请求到服务器。</li>\n<li><strong>处理响应</strong>：通过 <code>onreadystatechange</code> 事件或 <code>onload</code> 事件处理服务器的响应。</li>\n</ol>\n<h3 id=\"2-实现一个-AJAX-请求\"><a href=\"#2-实现一个-AJAX-请求\" class=\"headerlink\" title=\"2. 实现一个 AJAX 请求\"></a>2. 实现一个 AJAX 请求</h3><p>以下是一个使用原生 JavaScript 实现 AJAX 请求的示例，向一个 API 发送 GET 请求并处理响应。</p>\n<h4 id=\"示例：获取-JSON-数据\"><a href=\"#示例：获取-JSON-数据\" class=\"headerlink\" title=\"示例：获取 JSON 数据\"></a>示例：获取 JSON 数据</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建 XMLHttpRequest 对象\nconst xhr &#x3D; new XMLHttpRequest();\n\n&#x2F;&#x2F; 配置请求\nxhr.open(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&quot;, true);\n\n&#x2F;&#x2F; 设置响应类型\nxhr.responseType &#x3D; &quot;json&quot;;\n\n&#x2F;&#x2F; 处理响应\nxhr.onload &#x3D; function () &#123;\n  if (xhr.status &gt;&#x3D; 200 &amp;&amp; xhr.status &lt; 300) &#123;\n    &#x2F;&#x2F; 请求成功，处理响应数据\n    const data &#x3D; xhr.response;\n    console.log(data); &#x2F;&#x2F; 输出获取到的数据\n  &#125; else &#123;\n    &#x2F;&#x2F; 请求失败，处理错误\n    console.error(&quot;Request failed with status:&quot;, xhr.status);\n  &#125;\n&#125;;\n\n&#x2F;&#x2F; 处理请求错误\nxhr.onerror &#x3D; function () &#123;\n  console.error(&quot;Request failed&quot;);\n&#125;;\n\n&#x2F;&#x2F; 发送请求\nxhr.send();</code></pre>\n\n<h3 id=\"3-代码解释\"><a href=\"#3-代码解释\" class=\"headerlink\" title=\"3. 代码解释\"></a>3. 代码解释</h3><ul>\n<li><strong>创建 XMLHttpRequest 对象</strong>：使用 <code>new XMLHttpRequest()</code> 创建一个新的 XMLHttpRequest 对象。</li>\n<li><strong>配置请求</strong>：使用 <code>xhr.open(method, url, async)</code> 方法配置请求，其中 <code>method</code> 是请求类型（如 <code>GET</code> 或 <code>POST</code>），<code>url</code> 是请求的目标地址，<code>async</code> 表示是否异步。</li>\n<li><strong>设置响应类型</strong>：使用 <code>xhr.responseType</code> 设置响应的数据类型，这里设置为 <code>json</code>，表示期望返回 JSON 格式的数据。</li>\n<li><strong>处理响应</strong>：使用 <code>xhr.onload</code> 处理响应，当请求完成时会触发该事件。如果状态码在 200 到 299 之间，表示请求成功，可以处理响应数据；否则，处理错误。</li>\n<li><strong>处理请求错误</strong>：使用 <code>xhr.onerror</code> 处理请求错误。</li>\n<li><strong>发送请求</strong>：使用 <code>xhr.send()</code> 发送请求。</li>\n</ul>\n<h3 id=\"4-使用-Fetch-API\"><a href=\"#4-使用-Fetch-API\" class=\"headerlink\" title=\"4. 使用 Fetch API\"></a>4. 使用 Fetch API</h3><p>现代浏览器还支持 Fetch API，它提供了更简洁的方式来进行 AJAX 请求。以下是使用 Fetch API 的示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fetch(&quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    return response.json(); &#x2F;&#x2F; 解析 JSON 数据\n  &#125;)\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data); &#x2F;&#x2F; 输出获取到的数据\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;There was a problem with the fetch operation:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"5-总结-8\"><a href=\"#5-总结-8\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>AJAX 是一种强大的技术，允许网页在不重新加载的情况下与服务器进行异步通信。通过使用 XMLHttpRequest 对象或 Fetch API，开发者可以轻松实现 AJAX 请求，从而提高用户体验和页面响应速度。理解 AJAX 的工作原理和实现方式是现代 Web 开发的重要组成部分。</p>\n<h2 id=\"JavaScript-为什么要进行变量提升，它导致了什么问题？\"><a href=\"#JavaScript-为什么要进行变量提升，它导致了什么问题？\" class=\"headerlink\" title=\"JavaScript 为什么要进行变量提升，它导致了什么问题？\"></a>JavaScript 为什么要进行变量提升，它导致了什么问题？</h2><p>在 JavaScript 中，变量提升（Hoisting）是一个重要的概念，它指的是在代码执行之前，变量和函数声明会被提升到其所在作用域的顶部。这意味着你可以在声明变量或函数之前使用它们。以下是对变量提升的详细解释及其可能导致的问题。</p>\n<h3 id=\"1-变量提升的机制\"><a href=\"#1-变量提升的机制\" class=\"headerlink\" title=\"1. 变量提升的机制\"></a>1. 变量提升的机制</h3><p>在 JavaScript 中，变量提升的机制如下：</p>\n<ul>\n<li><strong>变量声明提升</strong>：所有的变量声明（使用 <code>var</code> 声明的变量）会被提升到函数或全局作用域的顶部，但赋值不会被提升。</li>\n<li><strong>函数声明提升</strong>：函数声明会被提升到其所在作用域的顶部，包括函数体内的所有代码。</li>\n</ul>\n<h4 id=\"示例-38\"><a href=\"#示例-38\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(x); &#x2F;&#x2F; undefined\nvar x &#x3D; 5;\nconsole.log(x); &#x2F;&#x2F; 5</code></pre>\n\n<p>在这个例子中，尽管 <code>console.log(x)</code> 在变量 <code>x</code> 被声明之前执行，但由于变量提升，JavaScript 引擎会将 <code>var x</code> 的声明提升到顶部，因此第一次输出 <code>undefined</code>。</p>\n<h3 id=\"2-变量提升的影响\"><a href=\"#2-变量提升的影响\" class=\"headerlink\" title=\"2. 变量提升的影响\"></a>2. 变量提升的影响</h3><h4 id=\"2-1-可能导致的混淆\"><a href=\"#2-1-可能导致的混淆\" class=\"headerlink\" title=\"2.1. 可能导致的混淆\"></a>2.1. 可能导致的混淆</h4><ul>\n<li><strong>未初始化的变量</strong>：由于变量提升，使用未初始化的变量会导致 <code>undefined</code>，这可能会让开发者感到困惑。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(y); &#x2F;&#x2F; undefined\nvar y &#x3D; 10;</code></pre>\n\n<ul>\n<li><strong>函数提升</strong>：函数声明会被提升，但如果使用函数表达式，提升的行为就不同了。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(myFunc()); &#x2F;&#x2F; &quot;Hello&quot;\nfunction myFunc() &#123;\n  return &quot;Hello&quot;;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(myFunc()); &#x2F;&#x2F; TypeError: myFunc is not a function\nvar myFunc &#x3D; function () &#123;\n  return &quot;Hello&quot;;\n&#125;;</code></pre>\n\n<p>在第二个例子中，<code>myFunc</code> 的声明被提升，但赋值并没有，因此在调用时会导致错误。</p>\n<h3 id=\"3-解决变量提升问题的方法\"><a href=\"#3-解决变量提升问题的方法\" class=\"headerlink\" title=\"3. 解决变量提升问题的方法\"></a>3. 解决变量提升问题的方法</h3><p>为了避免变量提升带来的问题，建议遵循以下最佳实践：</p>\n<ul>\n<li>**使用 <code>let</code> 和 <code>const</code>**：在 ES6 中引入的 <code>let</code> 和 <code>const</code> 不会发生提升，使用它们可以避免一些提升相关的问题。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(a); &#x2F;&#x2F; ReferenceError: Cannot access &#39;a&#39; before initialization\nlet a &#x3D; 5;</code></pre>\n\n<ul>\n<li><strong>在使用变量之前声明它们</strong>：始终在使用变量之前进行声明，以确保代码的可读性和可维护性。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var b &#x3D; 10;\nconsole.log(b); &#x2F;&#x2F; 10</code></pre>\n\n<ul>\n<li><strong>使用函数表达式而不是函数声明</strong>：如果不希望函数被提升，可以使用函数表达式。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var myFunc &#x3D; function () &#123;\n  return &quot;Hello&quot;;\n&#125;;\nconsole.log(myFunc()); &#x2F;&#x2F; &quot;Hello&quot;</code></pre>\n\n<h3 id=\"4-总结-9\"><a href=\"#4-总结-9\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>变量提升是 JavaScript 中的一个特性，它允许变量和函数声明在代码执行之前被提升到作用域的顶部。虽然这可以带来一定的灵活性，但也可能导致混淆和错误。通过使用 <code>let</code> 和 <code>const</code>、在使用变量之前声明它们以及使用函数表达式，可以有效地避免与变量提升相关的问题。理解变量提升的机制有助于编写更清晰和可维护的代码。</p>\n<h2 id=\"什么是尾调用，使用尾调用有什么好处？\"><a href=\"#什么是尾调用，使用尾调用有什么好处？\" class=\"headerlink\" title=\"什么是尾调用，使用尾调用有什么好处？\"></a>什么是尾调用，使用尾调用有什么好处？</h2><p>尾调用（Tail Call）是指在一个函数的最后一步调用另一个函数的情况。在这种情况下，调用的结果直接作为当前函数的返回值。尾调用的一个重要特性是，它可以优化内存使用，避免栈溢出。</p>\n<h3 id=\"1-尾调用的定义\"><a href=\"#1-尾调用的定义\" class=\"headerlink\" title=\"1. 尾调用的定义\"></a>1. 尾调用的定义</h3><p>在 JavaScript 中，尾调用的定义如下：</p>\n<ul>\n<li>如果一个函数在其执行的最后一步调用另一个函数（或自身），并且没有其他操作（如计算、处理等），那么这个调用就是尾调用。</li>\n</ul>\n<h4 id=\"示例-39\"><a href=\"#示例-39\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function tailCallExample(n) &#123;\n  if (n &lt;&#x3D; 1) &#123;\n    return n;\n  &#125;\n  return tailCallExample(n - 1); &#x2F;&#x2F; 尾调用\n&#125;</code></pre>\n\n<p>在这个例子中，<code>tailCallExample</code> 函数的最后一步是调用自身，因此这是一个尾调用。</p>\n<h3 id=\"2-尾调用优化（TCO）\"><a href=\"#2-尾调用优化（TCO）\" class=\"headerlink\" title=\"2. 尾调用优化（TCO）\"></a>2. 尾调用优化（TCO）</h3><p>尾调用优化（Tail Call Optimization, TCO）是一种编程语言的优化技术，允许编译器或解释器在执行尾调用时重用当前函数的栈帧，而不是创建新的栈帧。这可以显著减少内存使用，避免栈溢出。</p>\n<h4 id=\"尾调用优化的工作原理\"><a href=\"#尾调用优化的工作原理\" class=\"headerlink\" title=\"尾调用优化的工作原理\"></a>尾调用优化的工作原理</h4><ul>\n<li>当一个函数执行尾调用时，当前函数的执行上下文可以被替换为被调用函数的执行上下文。</li>\n<li>这意味着不需要在调用栈中保留当前函数的状态，从而节省内存。</li>\n</ul>\n<h3 id=\"3-使用尾调用的好处\"><a href=\"#3-使用尾调用的好处\" class=\"headerlink\" title=\"3. 使用尾调用的好处\"></a>3. 使用尾调用的好处</h3><h4 id=\"3-1-避免栈溢出\"><a href=\"#3-1-避免栈溢出\" class=\"headerlink\" title=\"3.1. 避免栈溢出\"></a>3.1. 避免栈溢出</h4><p>在递归函数中，使用尾调用可以避免栈溢出的问题。传统的递归调用会在每次调用时增加栈帧，导致栈溢出，而尾调用优化可以重用栈帧。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function factorial(n, acc &#x3D; 1) &#123;\n  if (n &lt;&#x3D; 1) &#123;\n    return acc;\n  &#125;\n  return factorial(n - 1, n * acc); &#x2F;&#x2F; 尾调用\n&#125;\n\nconsole.log(factorial(5)); &#x2F;&#x2F; 120</code></pre>\n\n<p>在这个例子中，<code>factorial</code> 函数使用尾调用来计算阶乘，避免了栈溢出。</p>\n<h4 id=\"3-2-提高性能\"><a href=\"#3-2-提高性能\" class=\"headerlink\" title=\"3.2. 提高性能\"></a>3.2. 提高性能</h4><p>尾调用优化可以提高性能，因为它减少了函数调用的开销。通过重用栈帧，程序可以更高效地执行递归操作。</p>\n<h4 id=\"3-3-更清晰的代码\"><a href=\"#3-3-更清晰的代码\" class=\"headerlink\" title=\"3.3. 更清晰的代码\"></a>3.3. 更清晰的代码</h4><p>使用尾调用可以使代码更简洁和易于理解，特别是在处理递归时。它可以将递归逻辑转化为迭代逻辑，使得代码更易于维护。</p>\n<h3 id=\"4-注意事项-1\"><a href=\"#4-注意事项-1\" class=\"headerlink\" title=\"4. 注意事项\"></a>4. 注意事项</h3><ul>\n<li><strong>支持情况</strong>：并不是所有的 JavaScript 引擎都支持尾调用优化。虽然 ES6 规范中引入了尾调用优化的概念，但在实际的 JavaScript 环境中（如浏览器和 Node.js），并不一定会实现这一优化。</li>\n<li><strong>使用场景</strong>：尾调用特别适合于需要大量递归的场景，如遍历树结构、计算斐波那契数列等。</li>\n</ul>\n<h3 id=\"5-总结-9\"><a href=\"#5-总结-9\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>尾调用是指在函数的最后一步调用另一个函数的情况。使用尾调用的好处包括避免栈溢出、提高性能和使代码更清晰。虽然尾调用优化在理论上是有益的，但在实际应用中，开发者需要注意其支持情况和使用场景。理解尾调用的概念可以帮助开发者编写更高效和可维护的代码。</p>\n<h2 id=\"ES6-模块与-CommonJS-模块有什么异同？\"><a href=\"#ES6-模块与-CommonJS-模块有什么异同？\" class=\"headerlink\" title=\"ES6 模块与 CommonJS 模块有什么异同？\"></a>ES6 模块与 CommonJS 模块有什么异同？</h2><p>在 JavaScript 中，ES6 模块（也称为 ES2015 模块）和 CommonJS 模块是两种不同的模块化系统。它们各自有不同的语法、特性和使用场景。以下是对这两种模块化系统的详细比较：</p>\n<h3 id=\"1-定义-1\"><a href=\"#1-定义-1\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><ul>\n<li><strong>ES6 模块</strong>：是 ECMAScript 2015（ES6）引入的模块系统，使用 <code>import</code> 和 <code>export</code> 语法来定义和使用模块。</li>\n<li><strong>CommonJS 模块</strong>：是 Node.js 中使用的模块系统，使用 <code>require()</code> 函数来导入模块，使用 <code>module.exports</code> 或 <code>exports</code> 来导出模块。</li>\n</ul>\n<h3 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2. 语法\"></a>2. 语法</h3><h4 id=\"2-1-ES6-模块\"><a href=\"#2-1-ES6-模块\" class=\"headerlink\" title=\"2.1. ES6 模块\"></a>2.1. ES6 模块</h4><ul>\n<li><strong>导出</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 导出单个变量\nexport const name &#x3D; &quot;Alice&quot;;\n\n&#x2F;&#x2F; 导出多个变量\nexport const age &#x3D; 30;\n\n&#x2F;&#x2F; 导出默认值\nexport default function () &#123;\n  console.log(&quot;Hello, World!&quot;);\n&#125;</code></pre>\n\n<ul>\n<li><strong>导入</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; name, age &#125; from &quot;.&#x2F;module.js&quot;; &#x2F;&#x2F; 导入命名导出\nimport myFunction from &quot;.&#x2F;module.js&quot;; &#x2F;&#x2F; 导入默认导出</code></pre>\n\n<h4 id=\"2-2-CommonJS-模块\"><a href=\"#2-2-CommonJS-模块\" class=\"headerlink\" title=\"2.2. CommonJS 模块\"></a>2.2. CommonJS 模块</h4><ul>\n<li><strong>导出</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 导出单个变量\nconst name &#x3D; &quot;Alice&quot;;\nmodule.exports &#x3D; name;\n\n&#x2F;&#x2F; 导出多个变量\nconst age &#x3D; 30;\nexports.age &#x3D; age;\n\n&#x2F;&#x2F; 导出函数\nmodule.exports &#x3D; function () &#123;\n  console.log(&quot;Hello, World!&quot;);\n&#125;;</code></pre>\n\n<ul>\n<li><strong>导入</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const name &#x3D; require(&quot;.&#x2F;module&quot;); &#x2F;&#x2F; 导入模块\nconst myFunction &#x3D; require(&quot;.&#x2F;module&quot;); &#x2F;&#x2F; 导入模块</code></pre>\n\n<h3 id=\"3-加载方式\"><a href=\"#3-加载方式\" class=\"headerlink\" title=\"3. 加载方式\"></a>3. 加载方式</h3><ul>\n<li><p><strong>ES6 模块</strong>：采用静态加载，模块在编译时就确定了依赖关系，支持树摇（tree-shaking）优化。ES6 模块是异步加载的，支持 <code>import()</code> 动态导入。</p>\n</li>\n<li><p><strong>CommonJS 模块</strong>：采用动态加载，模块在运行时加载，依赖关系在运行时确定。CommonJS 模块是同步加载的，适合在服务器端使用。</p>\n</li>\n</ul>\n<h3 id=\"4-作用域\"><a href=\"#4-作用域\" class=\"headerlink\" title=\"4. 作用域\"></a>4. 作用域</h3><ul>\n<li><p><strong>ES6 模块</strong>：每个模块都有自己的作用域，模块内的变量不会污染全局作用域。</p>\n</li>\n<li><p><strong>CommonJS 模块</strong>：每个模块也是一个独立的作用域，但模块内的变量可以通过 <code>exports</code> 或 <code>module.exports</code> 导出。</p>\n</li>\n</ul>\n<h3 id=\"5-兼容性\"><a href=\"#5-兼容性\" class=\"headerlink\" title=\"5. 兼容性\"></a>5. 兼容性</h3><ul>\n<li><p><strong>ES6 模块</strong>：在现代浏览器和 Node.js（从 v12 开始）中得到支持，但在某些旧版本的环境中可能不兼容。</p>\n</li>\n<li><p><strong>CommonJS 模块</strong>：广泛用于 Node.js 和许多构建工具（如 Webpack、Browserify）中，兼容性较好。</p>\n</li>\n</ul>\n<h3 id=\"6-主要区别总结\"><a href=\"#6-主要区别总结\" class=\"headerlink\" title=\"6. 主要区别总结\"></a>6. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>ES6 模块</th>\n<th>CommonJS 模块</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>导入导出语法</strong></td>\n<td><code>import</code> 和 <code>export</code></td>\n<td><code>require()</code> 和 <code>module.exports</code></td>\n</tr>\n<tr>\n<td><strong>加载方式</strong></td>\n<td>静态加载，异步</td>\n<td>动态加载，同步</td>\n</tr>\n<tr>\n<td><strong>作用域</strong></td>\n<td>每个模块有自己的作用域</td>\n<td>每个模块也是独立作用域</td>\n</tr>\n<tr>\n<td><strong>兼容性</strong></td>\n<td>现代浏览器和 Node.js（v12+）支持</td>\n<td>Node.js 和构建工具广泛支持</td>\n</tr>\n<tr>\n<td><strong>树摇优化</strong></td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<h3 id=\"7-总结-5\"><a href=\"#7-总结-5\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>ES6 模块和 CommonJS 模块是 JavaScript 中两种主要的模块化系统。ES6 模块提供了更现代的语法和静态加载特性，适合前端开发和现代 JavaScript 应用；而 CommonJS 模块则在 Node.js 中广泛使用，适合服务器端开发。理解这两种模块化系统的异同可以帮助开发者在不同的环境中选择合适的模块化方案。</p>\n<h2 id=\"常见的-DOM-操作有哪些\"><a href=\"#常见的-DOM-操作有哪些\" class=\"headerlink\" title=\"常见的 DOM 操作有哪些\"></a>常见的 DOM 操作有哪些</h2><p>在 JavaScript 中，DOM（文档对象模型）操作是与 HTML 文档进行交互和修改的关键。以下是一些常见的 DOM 操作，包括获取、修改、添加和删除元素等。</p>\n<h3 id=\"1-获取元素\"><a href=\"#1-获取元素\" class=\"headerlink\" title=\"1. 获取元素\"></a>1. 获取元素</h3><ul>\n<li><p>**<code>document.getElementById(id)</code>**：通过元素的 ID 获取单个元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.getElementById(&quot;myId&quot;);</code></pre>\n</li>\n<li><p>**<code>document.getElementsByClassName(className)</code>**：通过类名获取元素集合（HTMLCollection）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const elements &#x3D; document.getElementsByClassName(&quot;myClass&quot;);</code></pre>\n</li>\n<li><p>**<code>document.getElementsByTagName(tagName)</code>**：通过标签名获取元素集合（HTMLCollection）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const elements &#x3D; document.getElementsByTagName(&quot;div&quot;);</code></pre>\n</li>\n<li><p>**<code>document.querySelector(selector)</code>**：通过 CSS 选择器获取第一个匹配的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.querySelector(&quot;.myClass&quot;);</code></pre>\n</li>\n<li><p>**<code>document.querySelectorAll(selector)</code>**：通过 CSS 选择器获取所有匹配的元素（NodeList）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const elements &#x3D; document.querySelectorAll(&quot;div.myClass&quot;);</code></pre></li>\n</ul>\n<h3 id=\"2-修改元素\"><a href=\"#2-修改元素\" class=\"headerlink\" title=\"2. 修改元素\"></a>2. 修改元素</h3><ul>\n<li><p><strong>修改文本内容</strong>：使用 <code>textContent</code> 或 <code>innerHTML</code> 属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.getElementById(&quot;myId&quot;);\nelement.textContent &#x3D; &quot;新文本内容&quot;; &#x2F;&#x2F; 设置文本内容\nelement.innerHTML &#x3D; &quot;&lt;strong&gt;新内容&lt;&#x2F;strong&gt;&quot;; &#x2F;&#x2F; 设置 HTML 内容</code></pre>\n</li>\n<li><p><strong>修改属性</strong>：使用 <code>setAttribute()</code> 方法或直接访问属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.getElementById(&quot;myId&quot;);\nelement.setAttribute(&quot;src&quot;, &quot;image.jpg&quot;); &#x2F;&#x2F; 设置属性\nelement.alt &#x3D; &quot;新图片&quot;; &#x2F;&#x2F; 直接设置属性</code></pre>\n</li>\n<li><p><strong>修改样式</strong>：使用 <code>style</code> 属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.getElementById(&quot;myId&quot;);\nelement.style.color &#x3D; &quot;red&quot;; &#x2F;&#x2F; 设置文本颜色\nelement.style.backgroundColor &#x3D; &quot;blue&quot;; &#x2F;&#x2F; 设置背景颜色</code></pre></li>\n</ul>\n<h3 id=\"3-添加和删除元素\"><a href=\"#3-添加和删除元素\" class=\"headerlink\" title=\"3. 添加和删除元素\"></a>3. 添加和删除元素</h3><ul>\n<li><p><strong>创建新元素</strong>：使用 <code>document.createElement()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const newElement &#x3D; document.createElement(&quot;div&quot;);\nnewElement.textContent &#x3D; &quot;这是一个新元素&quot;;</code></pre>\n</li>\n<li><p><strong>添加元素</strong>：使用 <code>appendChild()</code> 或 <code>insertBefore()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const parentElement &#x3D; document.getElementById(&quot;parent&quot;);\nparentElement.appendChild(newElement); &#x2F;&#x2F; 添加到父元素的末尾</code></pre>\n</li>\n<li><p><strong>插入元素</strong>：使用 <code>insertAdjacentElement()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const referenceElement &#x3D; document.getElementById(&quot;reference&quot;);\nreferenceElement.insertAdjacentElement(&quot;beforebegin&quot;, newElement); &#x2F;&#x2F; 在参考元素之前插入</code></pre>\n</li>\n<li><p><strong>删除元素</strong>：使用 <code>removeChild()</code> 或 <code>remove()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const parentElement &#x3D; document.getElementById(&quot;parent&quot;);\nparentElement.removeChild(newElement); &#x2F;&#x2F; 从父元素中删除\nnewElement.remove(); &#x2F;&#x2F; 直接删除元素</code></pre></li>\n</ul>\n<h3 id=\"4-事件处理\"><a href=\"#4-事件处理\" class=\"headerlink\" title=\"4. 事件处理\"></a>4. 事件处理</h3><ul>\n<li><p><strong>添加事件监听器</strong>：使用 <code>addEventListener()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const button &#x3D; document.getElementById(&quot;myButton&quot;);\nbutton.addEventListener(&quot;click&quot;, function () &#123;\n  alert(&quot;按钮被点击了！&quot;);\n&#125;);</code></pre>\n</li>\n<li><p><strong>移除事件监听器</strong>：使用 <code>removeEventListener()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function handleClick() &#123;\n  alert(&quot;按钮被点击了！&quot;);\n&#125;\nbutton.addEventListener(&quot;click&quot;, handleClick);\nbutton.removeEventListener(&quot;click&quot;, handleClick);</code></pre></li>\n</ul>\n<h3 id=\"5-遍历和操作节点\"><a href=\"#5-遍历和操作节点\" class=\"headerlink\" title=\"5. 遍历和操作节点\"></a>5. 遍历和操作节点</h3><ul>\n<li><p><strong>遍历子节点</strong>：使用 <code>childNodes</code> 或 <code>children</code> 属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const parentElement &#x3D; document.getElementById(&quot;parent&quot;);\nconst children &#x3D; parentElement.childNodes; &#x2F;&#x2F; 包含所有子节点（包括文本节点）\nconst childElements &#x3D; parentElement.children; &#x2F;&#x2F; 仅包含元素节点</code></pre>\n</li>\n<li><p><strong>访问父节点</strong>：使用 <code>parentNode</code> 属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const childElement &#x3D; document.getElementById(&quot;child&quot;);\nconst parentElement &#x3D; childElement.parentNode; &#x2F;&#x2F; 获取父节点</code></pre>\n</li>\n<li><p><strong>访问兄弟节点</strong>：使用 <code>nextSibling</code> 和 <code>previousSibling</code> 属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const sibling &#x3D; childElement.nextSibling; &#x2F;&#x2F; 获取下一个兄弟节点</code></pre></li>\n</ul>\n<h3 id=\"6-其他常用操作\"><a href=\"#6-其他常用操作\" class=\"headerlink\" title=\"6. 其他常用操作\"></a>6. 其他常用操作</h3><ul>\n<li><p><strong>克隆节点</strong>：使用 <code>cloneNode()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const originalElement &#x3D; document.getElementById(&quot;myId&quot;);\nconst clonedElement &#x3D; originalElement.cloneNode(true); &#x2F;&#x2F; 深克隆</code></pre>\n</li>\n<li><p><strong>替换节点</strong>：使用 <code>replaceChild()</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const newElement &#x3D; document.createElement(&quot;div&quot;);\nparentElement.replaceChild(newElement, originalElement); &#x2F;&#x2F; 替换原有节点</code></pre></li>\n</ul>\n<h3 id=\"7-总结-6\"><a href=\"#7-总结-6\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p>常见的 DOM 操作包括获取元素、修改元素、添加和删除元素、事件处理、遍历和操作节点等。这些操作使得开发者能够动态地与网页内容进行交互，从而实现丰富的用户体验。理解这些基本的 DOM 操作是前端开发的基础。</p>\n<h2 id=\"use-strict-是什么意思-使用它区别是什么？\"><a href=\"#use-strict-是什么意思-使用它区别是什么？\" class=\"headerlink\" title=\"use strict 是什么意思 ? 使用它区别是什么？\"></a>use strict 是什么意思 ? 使用它区别是什么？</h2><p>在 JavaScript 中，<code>&quot;use strict&quot;</code> 是一种指令，用于启用严格模式（Strict Mode）。严格模式是一种更严格的 JavaScript 解析和执行模式，它可以帮助开发者编写更安全和更高效的代码。以下是对 <code>&quot;use strict&quot;</code> 的详细解释及其使用的区别。</p>\n<h3 id=\"1-什么是严格模式\"><a href=\"#1-什么是严格模式\" class=\"headerlink\" title=\"1. 什么是严格模式\"></a>1. 什么是严格模式</h3><p>严格模式是 ECMAScript 5（ES5）引入的一种特性，通过在 JavaScript 代码的开头添加 <code>&quot;use strict&quot;</code> 字符串，可以启用严格模式。严格模式会对 JavaScript 的某些行为进行限制，帮助开发者避免常见的错误。</p>\n<h3 id=\"2-启用严格模式\"><a href=\"#2-启用严格模式\" class=\"headerlink\" title=\"2. 启用严格模式\"></a>2. 启用严格模式</h3><p>严格模式可以在全局范围内或在函数内部启用：</p>\n<ul>\n<li><strong>全局严格模式</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;; &#x2F;&#x2F; 启用全局严格模式\n\nfunction myFunction() &#123;\n  &#x2F;&#x2F; 这里的代码在严格模式下执行\n&#125;</code></pre>\n\n<ul>\n<li><strong>函数内部严格模式</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function myFunction() &#123;\n  &quot;use strict&quot;; &#x2F;&#x2F; 仅在该函数内启用严格模式\n  &#x2F;&#x2F; 这里的代码在严格模式下执行\n&#125;</code></pre>\n\n<h3 id=\"3-严格模式的主要区别和限制\"><a href=\"#3-严格模式的主要区别和限制\" class=\"headerlink\" title=\"3. 严格模式的主要区别和限制\"></a>3. 严格模式的主要区别和限制</h3><p>使用严格模式会引入一些限制和不同的行为，主要包括：</p>\n<h4 id=\"3-1-禁止使用未声明的变量\"><a href=\"#3-1-禁止使用未声明的变量\" class=\"headerlink\" title=\"3.1. 禁止使用未声明的变量\"></a>3.1. 禁止使用未声明的变量</h4><p>在严格模式下，使用未声明的变量会抛出错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nx &#x3D; 10; &#x2F;&#x2F; ReferenceError: x is not defined</code></pre>\n\n<h4 id=\"3-2-禁止删除变量、对象属性和函数\"><a href=\"#3-2-禁止删除变量、对象属性和函数\" class=\"headerlink\" title=\"3.2. 禁止删除变量、对象属性和函数\"></a>3.2. 禁止删除变量、对象属性和函数</h4><p>在严格模式下，尝试删除不可删除的变量、对象属性或函数会抛出错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nvar obj &#x3D; &#123;&#125;;\ndelete obj; &#x2F;&#x2F; SyntaxError: Delete of an unqualified identifier in strict mode.</code></pre>\n\n<h4 id=\"3-3-禁止重名参数\"><a href=\"#3-3-禁止重名参数\" class=\"headerlink\" title=\"3.3. 禁止重名参数\"></a>3.3. 禁止重名参数</h4><p>在严格模式下，函数的参数不能有相同的名称。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nfunction myFunction(a, a, b) &#123;\n  &#x2F;&#x2F; SyntaxError: Duplicate parameter name not allowed in this context\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<h4 id=\"3-4-this-的行为\"><a href=\"#3-4-this-的行为\" class=\"headerlink\" title=\"3.4. this 的行为\"></a>3.4. <code>this</code> 的行为</h4><p>在严格模式下，<code>this</code> 的值为 <code>undefined</code>，而不是全局对象（如 <code>window</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nfunction myFunction() &#123;\n  console.log(this); &#x2F;&#x2F; undefined\n&#125;\nmyFunction();</code></pre>\n\n<h4 id=\"3-5-其他限制\"><a href=\"#3-5-其他限制\" class=\"headerlink\" title=\"3.5. 其他限制\"></a>3.5. 其他限制</h4><ul>\n<li>禁止使用 <code>with</code> 语句。</li>\n<li>禁止使用 <code>eval</code> 影响外部作用域。</li>\n<li>不能使用 <code>octal</code> 字面量（如 <code>012</code>）。</li>\n<li>不能使用 <code>arguments.callee</code>。</li>\n</ul>\n<h3 id=\"4-使用严格模式的好处\"><a href=\"#4-使用严格模式的好处\" class=\"headerlink\" title=\"4. 使用严格模式的好处\"></a>4. 使用严格模式的好处</h3><ul>\n<li><strong>提高代码安全性</strong>：通过限制某些不安全的行为，减少潜在的错误。</li>\n<li><strong>提高性能</strong>：某些 JavaScript 引擎在严格模式下可以进行更好的优化。</li>\n<li><strong>更清晰的错误信息</strong>：在严格模式下，许多常见的错误会抛出更明确的错误信息，帮助开发者更快地定位问题。</li>\n</ul>\n<h3 id=\"5-总结-10\"><a href=\"#5-总结-10\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>&quot;use strict&quot;</code> 是一种指令，用于启用 JavaScript 的严格模式。严格模式通过引入一些限制和不同的行为，帮助开发者编写更安全和更高效的代码。使用严格模式可以提高代码的可维护性，减少潜在的错误，并提供更清晰的错误信息。理解严格模式的特性和使用场景是编写高质量 JavaScript 代码的重要组成部分。</p>\n<h2 id=\"如何判断一个对象是否属于某个类？\"><a href=\"#如何判断一个对象是否属于某个类？\" class=\"headerlink\" title=\"如何判断一个对象是否属于某个类？\"></a>如何判断一个对象是否属于某个类？</h2><p>在 JavaScript 中，判断一个对象是否属于某个类（或构造函数）可以通过多种方法实现。以下是几种常用的方法：</p>\n<h3 id=\"1-使用-instanceof-操作符\"><a href=\"#1-使用-instanceof-操作符\" class=\"headerlink\" title=\"1. 使用 instanceof 操作符\"></a>1. 使用 <code>instanceof</code> 操作符</h3><p><code>instanceof</code> 操作符用于测试一个对象在其原型链中是否存在构造函数的 <code>prototype</code> 属性。它是判断对象类型的最常用方法。</p>\n<h4 id=\"示例-40\"><a href=\"#示例-40\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(alice instanceof Person); &#x2F;&#x2F; true\nconsole.log(alice instanceof Object); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"2-使用-isPrototypeOf-方法\"><a href=\"#2-使用-isPrototypeOf-方法\" class=\"headerlink\" title=\"2. 使用 isPrototypeOf 方法\"></a>2. 使用 <code>isPrototypeOf</code> 方法</h3><p><code>isPrototypeOf</code> 方法可以用来检查一个对象是否存在于另一个对象的原型链中。</p>\n<h4 id=\"示例-41\"><a href=\"#示例-41\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(Person.prototype.isPrototypeOf(alice)); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"3-使用-Object-getPrototypeOf\"><a href=\"#3-使用-Object-getPrototypeOf\" class=\"headerlink\" title=\"3. 使用 Object.getPrototypeOf()\"></a>3. 使用 <code>Object.getPrototypeOf()</code></h3><p><code>Object.getPrototypeOf()</code> 方法返回指定对象的原型（即内部 <code>[[Prototype]]</code> 属性的值）。可以通过比较原型来判断对象是否属于某个类。</p>\n<h4 id=\"示例-42\"><a href=\"#示例-42\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(Object.getPrototypeOf(alice) &#x3D;&#x3D;&#x3D; Person.prototype); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"4-使用-constructor-属性\"><a href=\"#4-使用-constructor-属性\" class=\"headerlink\" title=\"4. 使用 constructor 属性\"></a>4. 使用 <code>constructor</code> 属性</h3><p>每个对象都有一个 <code>constructor</code> 属性，指向创建该对象的构造函数。可以通过检查 <code>constructor</code> 属性来判断对象的类型。</p>\n<h4 id=\"示例-43\"><a href=\"#示例-43\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(alice.constructor &#x3D;&#x3D;&#x3D; Person); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h3><ul>\n<li><strong>原型链</strong>：使用 <code>instanceof</code> 和 <code>isPrototypeOf</code> 时，注意它们会检查原型链，因此可以判断子类的实例。</li>\n<li><strong>构造函数</strong>：如果对象的构造函数被修改，使用 <code>constructor</code> 属性可能会导致误判。</li>\n<li><strong>性能</strong>：在性能敏感的场景中，<code>instanceof</code> 是最常用且高效的方法。</li>\n</ul>\n<h3 id=\"6-总结-3\"><a href=\"#6-总结-3\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>判断一个对象是否属于某个类可以通过多种方法实现，包括使用 <code>instanceof</code> 操作符、<code>isPrototypeOf</code> 方法、<code>Object.getPrototypeOf()</code> 和 <code>constructor</code> 属性。选择合适的方法可以帮助开发者更准确地判断对象的类型，确保代码的正确性和可维护性。</p>\n<h2 id=\"强类型语言和弱类型语言的区别\"><a href=\"#强类型语言和弱类型语言的区别\" class=\"headerlink\" title=\"强类型语言和弱类型语言的区别\"></a>强类型语言和弱类型语言的区别</h2><p>强类型语言和弱类型语言是编程语言分类的一种方式，主要根据语言对数据类型的处理方式进行区分。以下是对这两种类型语言的详细比较：</p>\n<h3 id=\"1-强类型语言（Strongly-Typed-Language）\"><a href=\"#1-强类型语言（Strongly-Typed-Language）\" class=\"headerlink\" title=\"1. 强类型语言（Strongly Typed Language）\"></a>1. 强类型语言（Strongly Typed Language）</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>强类型语言是指在编程过程中，变量的类型是严格定义的，类型检查在编译时或运行时都会进行。强类型语言不允许隐式类型转换，类型不匹配会导致错误。</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>严格的类型检查</strong>：在强类型语言中，变量的类型在编译时或运行时必须明确，类型不匹配会导致错误。</li>\n<li><strong>不允许隐式转换</strong>：强类型语言通常不允许自动将一种类型转换为另一种类型，必须显式进行转换。</li>\n<li><strong>类型安全</strong>：强类型语言提供更高的类型安全性，减少了类型相关的错误。</li>\n</ul>\n<h4 id=\"示例语言\"><a href=\"#示例语言\" class=\"headerlink\" title=\"示例语言\"></a>示例语言</h4><ul>\n<li>Java</li>\n<li>C#</li>\n<li>Python</li>\n<li>Haskell</li>\n</ul>\n<h4 id=\"示例-44\"><a href=\"#示例-44\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; Java 示例\nint number &#x3D; 10;\nString text &#x3D; &quot;Hello&quot;;\n&#x2F;&#x2F; number &#x3D; text; &#x2F;&#x2F; 编译错误：不兼容的类型</code></pre>\n\n<h3 id=\"2-弱类型语言（Weakly-Typed-Language）\"><a href=\"#2-弱类型语言（Weakly-Typed-Language）\" class=\"headerlink\" title=\"2. 弱类型语言（Weakly Typed Language）\"></a>2. 弱类型语言（Weakly Typed Language）</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>弱类型语言是指在编程过程中，变量的类型不严格，允许隐式类型转换。弱类型语言在运行时会自动进行类型转换，可能导致意想不到的结果。</p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>灵活的类型检查</strong>：在弱类型语言中，变量的类型可以在运行时改变，类型检查不严格。</li>\n<li><strong>允许隐式转换</strong>：弱类型语言允许自动将一种类型转换为另一种类型，可能导致类型相关的错误。</li>\n<li><strong>易于使用</strong>：弱类型语言通常更灵活，适合快速开发和原型设计。</li>\n</ul>\n<h4 id=\"示例语言-1\"><a href=\"#示例语言-1\" class=\"headerlink\" title=\"示例语言\"></a>示例语言</h4><ul>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Ruby</li>\n<li>Perl</li>\n</ul>\n<h4 id=\"示例-45\"><a href=\"#示例-45\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; JavaScript 示例\nlet number &#x3D; 10;\nlet text &#x3D; &quot;5&quot;;\nlet result &#x3D; number + text; &#x2F;&#x2F; 结果是 &quot;105&quot;，隐式转换为字符串</code></pre>\n\n<h3 id=\"3-主要区别总结\"><a href=\"#3-主要区别总结\" class=\"headerlink\" title=\"3. 主要区别总结\"></a>3. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>强类型语言</th>\n<th>弱类型语言</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>类型检查</strong></td>\n<td>严格的类型检查</td>\n<td>灵活的类型检查</td>\n</tr>\n<tr>\n<td><strong>隐式转换</strong></td>\n<td>不允许隐式类型转换</td>\n<td>允许隐式类型转换</td>\n</tr>\n<tr>\n<td><strong>类型安全</strong></td>\n<td>提供更高的类型安全性</td>\n<td>类型安全性较低</td>\n</tr>\n<tr>\n<td><strong>开发灵活性</strong></td>\n<td>可能需要更多的类型声明和转换</td>\n<td>更加灵活，适合快速开发</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-10\"><a href=\"#4-总结-10\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>强类型语言和弱类型语言在类型处理上有显著的区别。强类型语言提供更严格的类型检查和更高的类型安全性，而弱类型语言则提供更大的灵活性和便捷性。选择使用哪种类型的语言通常取决于项目的需求、开发团队的经验和开发的复杂性。理解这两种类型语言的特点可以帮助开发者更好地选择合适的编程语言和编写高质量的代码。</p>\n<h2 id=\"解释性语言和编译型语言的区别\"><a href=\"#解释性语言和编译型语言的区别\" class=\"headerlink\" title=\"解释性语言和编译型语言的区别\"></a>解释性语言和编译型语言的区别</h2><p>解释性语言和编译型语言是两种不同的编程语言执行方式，它们在代码执行、性能、开发流程等方面存在显著差异。以下是对这两种语言的详细比较：</p>\n<h3 id=\"1-定义-2\"><a href=\"#1-定义-2\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><ul>\n<li><p><strong>解释性语言</strong>：解释性语言是指在运行时逐行解释和执行代码的语言。代码在执行时由解释器逐行读取并执行，而不是事先编译成机器代码。</p>\n</li>\n<li><p><strong>编译型语言</strong>：编译型语言是指在执行之前，先将源代码编译成机器代码或中间代码，然后再执行。编译过程通常会生成一个可执行文件。</p>\n</li>\n</ul>\n<h3 id=\"2-执行方式\"><a href=\"#2-执行方式\" class=\"headerlink\" title=\"2. 执行方式\"></a>2. 执行方式</h3><ul>\n<li><p><strong>解释性语言</strong>：</p>\n<ul>\n<li>代码在运行时由解释器逐行解释执行。</li>\n<li>不需要事先编译，适合快速开发和调试。</li>\n</ul>\n</li>\n<li><p><strong>编译型语言</strong>：</p>\n<ul>\n<li>代码在执行之前由编译器编译成机器代码。</li>\n<li>编译后生成可执行文件，执行时不需要再次编译。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"3. 性能\"></a>3. 性能</h3><ul>\n<li><p><strong>解释性语言</strong>：</p>\n<ul>\n<li>由于逐行解释执行，通常性能较低，执行速度较慢。</li>\n<li>适合开发和测试阶段，便于快速迭代。</li>\n</ul>\n</li>\n<li><p><strong>编译型语言</strong>：</p>\n<ul>\n<li>编译后生成的机器代码执行速度较快，性能通常较高。</li>\n<li>适合对性能要求较高的应用程序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-开发流程\"><a href=\"#4-开发流程\" class=\"headerlink\" title=\"4. 开发流程\"></a>4. 开发流程</h3><ul>\n<li><p><strong>解释性语言</strong>：</p>\n<ul>\n<li>开发流程简单，修改代码后可以立即运行，无需重新编译。</li>\n<li>适合动态开发和快速原型设计。</li>\n</ul>\n</li>\n<li><p><strong>编译型语言</strong>：</p>\n<ul>\n<li>开发流程相对复杂，修改代码后需要重新编译才能运行。</li>\n<li>适合大型项目和需要优化的应用程序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-错误处理\"><a href=\"#5-错误处理\" class=\"headerlink\" title=\"5. 错误处理\"></a>5. 错误处理</h3><ul>\n<li><p><strong>解释性语言</strong>：</p>\n<ul>\n<li>错误通常在运行时被捕获，可能导致程序在运行时崩溃。</li>\n<li>便于调试，因为可以逐行执行代码。</li>\n</ul>\n</li>\n<li><p><strong>编译型语言</strong>：</p>\n<ul>\n<li>编译时会检查语法错误，编译失败时不会生成可执行文件。</li>\n<li>需要在编译阶段解决所有错误，通常提供更严格的类型检查。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-示例语言\"><a href=\"#6-示例语言\" class=\"headerlink\" title=\"6. 示例语言\"></a>6. 示例语言</h3><ul>\n<li><p><strong>解释性语言</strong>：</p>\n<ul>\n<li>JavaScript</li>\n<li>Python</li>\n<li>Ruby</li>\n<li>PHP</li>\n</ul>\n</li>\n<li><p><strong>编译型语言</strong>：</p>\n<ul>\n<li>C</li>\n<li>C++</li>\n<li>Java（编译成字节码后由 JVM 解释执行）</li>\n<li>Go</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-混合型语言\"><a href=\"#7-混合型语言\" class=\"headerlink\" title=\"7. 混合型语言\"></a>7. 混合型语言</h3><p>一些语言结合了编译和解释的特性，例如 Java。Java 代码首先被编译成字节码，然后由 Java 虚拟机（JVM）解释执行。这种方式结合了编译型语言的性能和解释型语言的灵活性。</p>\n<h3 id=\"8-总结-1\"><a href=\"#8-总结-1\" class=\"headerlink\" title=\"8. 总结\"></a>8. 总结</h3><p>解释性语言和编译型语言在执行方式、性能、开发流程和错误处理等方面存在显著差异。解释性语言适合快速开发和动态应用，而编译型语言则适合对性能要求较高的应用程序。理解这两种语言的特点可以帮助开发者选择合适的编程语言和开发策略。</p>\n<h2 id=\"for…in-和-for…of-的区别\"><a href=\"#for…in-和-for…of-的区别\" class=\"headerlink\" title=\"for…in 和 for…of 的区别\"></a>for…in 和 for…of 的区别</h2><p>在 JavaScript 中，<code>for...in</code> 和 <code>for...of</code> 是两种用于遍历集合的循环结构，但它们的用途和行为有显著的区别。以下是对这两种循环的详细比较：</p>\n<h3 id=\"1-for-in-循环\"><a href=\"#1-for-in-循环\" class=\"headerlink\" title=\"1. for...in 循环\"></a>1. <code>for...in</code> 循环</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>for...in</code> 循环用于遍历对象的可枚举属性（包括继承的属性）。它主要用于对象和数组，但通常不推荐用于数组，因为它会遍历所有可枚举的属性，包括原型链上的属性。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">for (const key in object) &#123;\n  &#x2F;&#x2F; 处理每个属性\n&#125;</code></pre>\n\n<h4 id=\"示例-46\"><a href=\"#示例-46\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; a: 1, b: 2, c: 3 &#125;;\n\nfor (const key in obj) &#123;\n  console.log(key, obj[key]); &#x2F;&#x2F; 输出属性名和对应的值\n&#125;\n\n&#x2F;&#x2F; 输出:\n&#x2F;&#x2F; a 1\n&#x2F;&#x2F; b 2\n&#x2F;&#x2F; c 3</code></pre>\n\n<h3 id=\"2-for-of-循环\"><a href=\"#2-for-of-循环\" class=\"headerlink\" title=\"2. for...of 循环\"></a>2. <code>for...of</code> 循环</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>for...of</code> 循环用于遍历可迭代对象（如数组、字符串、Map、Set 等）。它直接遍历对象的值，而不是属性名。</p>\n<h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">for (const value of iterable) &#123;\n  &#x2F;&#x2F; 处理每个值\n&#125;</code></pre>\n\n<h4 id=\"示例-47\"><a href=\"#示例-47\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3];\n\nfor (const value of arr) &#123;\n  console.log(value); &#x2F;&#x2F; 输出数组的每个值\n&#125;\n\n&#x2F;&#x2F; 输出:\n&#x2F;&#x2F; 1\n&#x2F;&#x2F; 2\n&#x2F;&#x2F; 3</code></pre>\n\n<h3 id=\"3-主要区别\"><a href=\"#3-主要区别\" class=\"headerlink\" title=\"3. 主要区别\"></a>3. 主要区别</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>for...in</code></th>\n<th><code>for...of</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>遍历对象</strong></td>\n<td>遍历对象的可枚举属性（包括原型链）</td>\n<td>遍历可迭代对象的值</td>\n</tr>\n<tr>\n<td><strong>适用对象</strong></td>\n<td>适用于对象（不推荐用于数组）</td>\n<td>适用于数组、字符串、Map、Set 等</td>\n</tr>\n<tr>\n<td><strong>返回值</strong></td>\n<td>返回属性名（键）</td>\n<td>返回属性值</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>性能较低，可能遍历原型链上的属性</td>\n<td>性能较高，直接遍历值</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-使用建议\"><a href=\"#4-使用建议\" class=\"headerlink\" title=\"4. 使用建议\"></a>4. 使用建议</h3><ul>\n<li>**使用 <code>for...in</code>**：适合用于遍历对象的属性，但要注意可能会遍历到原型链上的属性。可以使用 <code>hasOwnProperty</code> 方法来过滤掉继承的属性。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; a: 1, b: 2 &#125;;\nfor (const key in obj) &#123;\n  if (obj.hasOwnProperty(key)) &#123;\n    console.log(key, obj[key]);\n  &#125;\n&#125;</code></pre>\n\n<ul>\n<li>**使用 <code>for...of</code>**：适合用于遍历数组和其他可迭代对象，推荐用于处理数组，因为它更简洁且性能更好。</li>\n</ul>\n<h3 id=\"5-总结-11\"><a href=\"#5-总结-11\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>for...in</code> 和 <code>for...of</code> 是 JavaScript 中用于遍历集合的两种循环结构。<code>for...in</code> 用于遍历对象的可枚举属性，而 <code>for...of</code> 用于遍历可迭代对象的值。理解这两者的区别可以帮助开发者选择合适的循环结构，以提高代码的可读性和性能。</p>\n<h2 id=\"ajax、axios、fetch-的区别\"><a href=\"#ajax、axios、fetch-的区别\" class=\"headerlink\" title=\"ajax、axios、fetch 的区别\"></a>ajax、axios、fetch 的区别</h2><p>在 JavaScript 中，AJAX、Axios 和 Fetch 是用于进行网络请求的三种不同方式。它们各自有不同的特性、用法和适用场景。以下是对这三者的详细比较：</p>\n<h3 id=\"1-AJAX\"><a href=\"#1-AJAX\" class=\"headerlink\" title=\"1. AJAX\"></a>1. AJAX</h3><h4 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>AJAX（Asynchronous JavaScript and XML）是一种用于在不重新加载整个网页的情况下与服务器交换数据的技术。它通常使用 <code>XMLHttpRequest</code> 对象来发送和接收数据。</p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>**使用 <code>XMLHttpRequest</code>**：AJAX 主要依赖于 <code>XMLHttpRequest</code> 对象进行网络请求。</li>\n<li><strong>支持异步请求</strong>：可以在后台与服务器进行异步通信。</li>\n<li><strong>兼容性</strong>：广泛支持于所有现代浏览器。</li>\n</ul>\n<h4 id=\"示例-48\"><a href=\"#示例-48\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const xhr &#x3D; new XMLHttpRequest();\nxhr.open(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&quot;, true);\nxhr.onload &#x3D; function () &#123;\n  if (xhr.status &gt;&#x3D; 200 &amp;&amp; xhr.status &lt; 300) &#123;\n    console.log(JSON.parse(xhr.responseText));\n  &#125; else &#123;\n    console.error(&quot;Request failed with status:&quot;, xhr.status);\n  &#125;\n&#125;;\nxhr.send();</code></pre>\n\n<h3 id=\"2-Axios\"><a href=\"#2-Axios\" class=\"headerlink\" title=\"2. Axios\"></a>2. Axios</h3><h4 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Axios 是一个基于 Promise 的 HTTP 客户端，用于浏览器和 Node.js。它封装了 <code>XMLHttpRequest</code>，提供了更简洁的 API 和更强大的功能。</p>\n<h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>基于 Promise</strong>：Axios 使用 Promise 处理异步请求，支持 <code>async/await</code> 语法。</li>\n<li><strong>自动转换 JSON</strong>：Axios 会自动将响应数据转换为 JSON 格式。</li>\n<li><strong>请求和响应拦截器</strong>：支持请求和响应的拦截器，可以在请求发送前或响应到达后进行处理。</li>\n<li><strong>支持取消请求</strong>：可以通过 CancelToken 取消请求。</li>\n</ul>\n<h4 id=\"示例-49\"><a href=\"#示例-49\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios\n  .get(&quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    console.log(response.data);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Request failed:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"3-Fetch\"><a href=\"#3-Fetch\" class=\"headerlink\" title=\"3. Fetch\"></a>3. Fetch</h3><h4 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>Fetch 是一个现代的 API，用于进行网络请求，基于 Promise，提供了更强大的功能和更简洁的语法。Fetch API 是 ES6 引入的，旨在替代 <code>XMLHttpRequest</code>。</p>\n<h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>基于 Promise</strong>：Fetch 使用 Promise 处理异步请求，支持 <code>async/await</code> 语法。</li>\n<li><strong>更简洁的语法</strong>：Fetch API 提供了更简洁的语法，易于使用。</li>\n<li><strong>不自动转换 JSON</strong>：Fetch 不会自动将响应数据转换为 JSON，需要手动调用 <code>response.json()</code>。</li>\n<li><strong>不支持 IE</strong>：Fetch API 在 Internet Explorer 中不被支持。</li>\n</ul>\n<h4 id=\"示例-50\"><a href=\"#示例-50\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fetch(&quot;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    return response.json(); &#x2F;&#x2F; 手动转换为 JSON\n  &#125;)\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Request failed:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"4-主要区别总结\"><a href=\"#4-主要区别总结\" class=\"headerlink\" title=\"4. 主要区别总结\"></a>4. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>AJAX</th>\n<th>Axios</th>\n<th>Fetch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>基础</strong></td>\n<td><code>XMLHttpRequest</code></td>\n<td>基于 <code>XMLHttpRequest</code></td>\n<td>基于 Promise</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td>较为复杂</td>\n<td>简洁，支持 Promise</td>\n<td>简洁，支持 Promise</td>\n</tr>\n<tr>\n<td><strong>自动转换 JSON</strong></td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持，需要手动转换</td>\n</tr>\n<tr>\n<td><strong>请求拦截器</strong></td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td><strong>取消请求</strong></td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td><strong>兼容性</strong></td>\n<td>广泛支持</td>\n<td>广泛支持</td>\n<td>不支持 IE</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-总结-12\"><a href=\"#5-总结-12\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>AJAX、Axios 和 Fetch 是用于进行网络请求的三种不同方式。AJAX 是传统的方式，使用 <code>XMLHttpRequest</code>；Axios 是一个基于 Promise 的 HTTP 客户端，提供了更强大的功能；Fetch 是现代的 API，提供了更简洁的语法和 Promise 支持。选择使用哪种方式通常取决于项目的需求、浏览器兼容性和开发者的偏好。</p>\n<h2 id=\"数组的遍历方法有哪些\"><a href=\"#数组的遍历方法有哪些\" class=\"headerlink\" title=\"数组的遍历方法有哪些\"></a>数组的遍历方法有哪些</h2><p>在 JavaScript 中，数组提供了多种遍历方法，允许开发者以不同的方式访问和操作数组中的元素。以下是一些常见的数组遍历方法：</p>\n<h3 id=\"1-for-循环\"><a href=\"#1-for-循环\" class=\"headerlink\" title=\"1. for 循环\"></a>1. <code>for</code> 循环</h3><p>最基本的遍历方法，使用传统的 <code>for</code> 循环可以访问数组的每个元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nfor (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n  console.log(arr[i]); &#x2F;&#x2F; 输出每个元素\n&#125;</code></pre>\n\n<h3 id=\"2-for-of-循环-1\"><a href=\"#2-for-of-循环-1\" class=\"headerlink\" title=\"2. for...of 循环\"></a>2. <code>for...of</code> 循环</h3><p><code>for...of</code> 循环用于遍历可迭代对象（如数组），直接访问数组的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nfor (const value of arr) &#123;\n  console.log(value); &#x2F;&#x2F; 输出每个元素\n&#125;</code></pre>\n\n<h3 id=\"3-forEach-方法\"><a href=\"#3-forEach-方法\" class=\"headerlink\" title=\"3. forEach() 方法\"></a>3. <code>forEach()</code> 方法</h3><p><code>forEach()</code> 方法对数组的每个元素执行一次提供的函数，适合执行副作用操作。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\narr.forEach((value) &#x3D;&gt; &#123;\n  console.log(value); &#x2F;&#x2F; 输出每个元素\n&#125;);</code></pre>\n\n<h3 id=\"4-map-方法\"><a href=\"#4-map-方法\" class=\"headerlink\" title=\"4. map() 方法\"></a>4. <code>map()</code> 方法</h3><p><code>map()</code> 方法创建一个新数组，包含调用函数处理每个元素后的结果。适合用于转换数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst doubled &#x3D; arr.map((value) &#x3D;&gt; value * 2);\nconsole.log(doubled); &#x2F;&#x2F; 输出: [2, 4, 6, 8, 10]</code></pre>\n\n<h3 id=\"5-filter-方法\"><a href=\"#5-filter-方法\" class=\"headerlink\" title=\"5. filter() 方法\"></a>5. <code>filter()</code> 方法</h3><p><code>filter()</code> 方法创建一个新数组，包含所有通过测试的元素。适合用于筛选数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst evens &#x3D; arr.filter((value) &#x3D;&gt; value % 2 &#x3D;&#x3D;&#x3D; 0);\nconsole.log(evens); &#x2F;&#x2F; 输出: [2, 4]</code></pre>\n\n<h3 id=\"6-reduce-方法\"><a href=\"#6-reduce-方法\" class=\"headerlink\" title=\"6. reduce() 方法\"></a>6. <code>reduce()</code> 方法</h3><p><code>reduce()</code> 方法对数组中的每个元素执行一个 reducer 函数，最终计算出一个值。适合用于累加或合并数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst sum &#x3D; arr.reduce((accumulator, value) &#x3D;&gt; accumulator + value, 0);\nconsole.log(sum); &#x2F;&#x2F; 输出: 15</code></pre>\n\n<h3 id=\"7-some-方法\"><a href=\"#7-some-方法\" class=\"headerlink\" title=\"7. some() 方法\"></a>7. <code>some()</code> 方法</h3><p><code>some()</code> 方法测试数组中是否至少有一个元素通过了提供的函数测试，返回布尔值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst hasEven &#x3D; arr.some((value) &#x3D;&gt; value % 2 &#x3D;&#x3D;&#x3D; 0);\nconsole.log(hasEven); &#x2F;&#x2F; 输出: true</code></pre>\n\n<h3 id=\"8-every-方法\"><a href=\"#8-every-方法\" class=\"headerlink\" title=\"8. every() 方法\"></a>8. <code>every()</code> 方法</h3><p><code>every()</code> 方法测试数组中的所有元素是否都通过了提供的函数测试，返回布尔值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst allPositive &#x3D; arr.every((value) &#x3D;&gt; value &gt; 0);\nconsole.log(allPositive); &#x2F;&#x2F; 输出: true</code></pre>\n\n<h3 id=\"9-find-方法\"><a href=\"#9-find-方法\" class=\"headerlink\" title=\"9. find() 方法\"></a>9. <code>find()</code> 方法</h3><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst found &#x3D; arr.find((value) &#x3D;&gt; value &gt; 3);\nconsole.log(found); &#x2F;&#x2F; 输出: 4</code></pre>\n\n<h3 id=\"10-findIndex-方法\"><a href=\"#10-findIndex-方法\" class=\"headerlink\" title=\"10. findIndex() 方法\"></a>10. <code>findIndex()</code> 方法</h3><p><code>findIndex()</code> 方法返回满足提供的测试函数的第一个元素的索引。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst index &#x3D; arr.findIndex((value) &#x3D;&gt; value &gt; 3);\nconsole.log(index); &#x2F;&#x2F; 输出: 3</code></pre>\n\n<h3 id=\"11-keys-、values-和-entries-方法\"><a href=\"#11-keys-、values-和-entries-方法\" class=\"headerlink\" title=\"11. keys()、values() 和 entries() 方法\"></a>11. <code>keys()</code>、<code>values()</code> 和 <code>entries()</code> 方法</h3><ul>\n<li>**<code>keys()</code>**：返回一个包含数组索引的迭代器。</li>\n<li>**<code>values()</code>**：返回一个包含数组值的迭代器。</li>\n<li>**<code>entries()</code>**：返回一个包含数组索引和对应值的迭代器。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\n\nfor (const index of arr.keys()) &#123;\n  console.log(index); &#x2F;&#x2F; 输出索引\n&#125;\n\nfor (const value of arr.values()) &#123;\n  console.log(value); &#x2F;&#x2F; 输出值\n&#125;\n\nfor (const [index, value] of arr.entries()) &#123;\n  console.log(index, value); &#x2F;&#x2F; 输出索引和值\n&#125;</code></pre>\n\n<h3 id=\"12-总结\"><a href=\"#12-总结\" class=\"headerlink\" title=\"12. 总结\"></a>12. 总结</h3><p>JavaScript 提供了多种数组遍历方法，包括传统的 <code>for</code> 循环、<code>for...of</code> 循环、<code>forEach()</code>、<code>map()</code>、<code>filter()</code>、<code>reduce()</code> 等。每种方法都有其特定的用途和适用场景，开发者可以根据需求选择合适的遍历方式。理解这些方法可以帮助开发者更高效地处理数组数据。</p>\n<h2 id=\"forEach-和-map-方法有什么区别\"><a href=\"#forEach-和-map-方法有什么区别\" class=\"headerlink\" title=\"forEach 和 map 方法有什么区别\"></a>forEach 和 map 方法有什么区别</h2><p><code>forEach</code> 和 <code>map</code> 是 JavaScript 中数组的两个常用方法，它们都用于遍历数组，但在功能和返回值上有显著的区别。以下是对这两者的详细比较：</p>\n<h3 id=\"1-定义-3\"><a href=\"#1-定义-3\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h3><ul>\n<li><p>**<code>forEach</code>**：用于对数组的每个元素执行一次提供的函数。它主要用于执行副作用操作（如打印、修改外部变量等），不返回任何值。</p>\n</li>\n<li><p>**<code>map</code>**：用于创建一个新数组，包含调用提供的函数处理每个元素后的结果。它主要用于转换数组中的元素。</p>\n</li>\n</ul>\n<h3 id=\"2-返回值\"><a href=\"#2-返回值\" class=\"headerlink\" title=\"2. 返回值\"></a>2. 返回值</h3><ul>\n<li><p>**<code>forEach</code>**：</p>\n<ul>\n<li>返回 <code>undefined</code>。</li>\n<li>适合用于需要对每个元素执行操作但不需要返回新数组的场景。</li>\n</ul>\n</li>\n<li><p>**<code>map</code>**：</p>\n<ul>\n<li>返回一个新数组，包含处理后的结果。</li>\n<li>适合用于需要对数组进行转换并返回新数组的场景。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-用法示例\"><a href=\"#3-用法示例\" class=\"headerlink\" title=\"3. 用法示例\"></a>3. 用法示例</h3><h4 id=\"forEach-示例\"><a href=\"#forEach-示例\" class=\"headerlink\" title=\"forEach 示例\"></a><code>forEach</code> 示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\narr.forEach((value) &#x3D;&gt; &#123;\n  console.log(value * 2); &#x2F;&#x2F; 输出每个元素的两倍\n&#125;);\n&#x2F;&#x2F; 返回值是 undefined</code></pre>\n\n<h4 id=\"map-示例\"><a href=\"#map-示例\" class=\"headerlink\" title=\"map 示例\"></a><code>map</code> 示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const arr &#x3D; [1, 2, 3, 4, 5];\nconst doubled &#x3D; arr.map((value) &#x3D;&gt; value * 2); &#x2F;&#x2F; 返回一个新数组\nconsole.log(doubled); &#x2F;&#x2F; 输出: [2, 4, 6, 8, 10]</code></pre>\n\n<h3 id=\"4-适用场景\"><a href=\"#4-适用场景\" class=\"headerlink\" title=\"4. 适用场景\"></a>4. 适用场景</h3><ul>\n<li><p>**使用 <code>forEach</code>**：</p>\n<ul>\n<li>当你只需要对数组的每个元素执行某个操作，而不需要返回新数组时，使用 <code>forEach</code>。</li>\n<li>例如，打印数组元素、更新外部变量等。</li>\n</ul>\n</li>\n<li><p>**使用 <code>map</code>**：</p>\n<ul>\n<li>当你需要对数组的每个元素进行转换，并返回一个新数组时，使用 <code>map</code>。</li>\n<li>例如，将数组中的数字转换为字符串、将对象数组中的某个属性提取出来等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-性能\"><a href=\"#5-性能\" class=\"headerlink\" title=\"5. 性能\"></a>5. 性能</h3><ul>\n<li><strong><code>forEach</code></strong> 和 <strong><code>map</code></strong> 的性能差异通常不大，但由于 <code>map</code> 会创建一个新数组，因此在处理大型数组时，<code>map</code> 可能会消耗更多的内存。</li>\n</ul>\n<h3 id=\"6-总结-4\"><a href=\"#6-总结-4\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>forEach</code></th>\n<th><code>map</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>返回值</strong></td>\n<td><code>undefined</code></td>\n<td>新数组</td>\n</tr>\n<tr>\n<td><strong>用途</strong></td>\n<td>执行副作用操作</td>\n<td>转换数组元素</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>不需要返回新数组的操作</td>\n<td>需要返回新数组的转换操作</td>\n</tr>\n</tbody></table>\n<p>理解 <code>forEach</code> 和 <code>map</code> 的区别可以帮助开发者选择合适的方法来处理数组，确保代码的可读性和效率。</p>\n<h1 id=\"原型与原型链\"><a href=\"#原型与原型链\" class=\"headerlink\" title=\"原型与原型链\"></a>原型与原型链</h1><h2 id=\"对原型、原型链的理解\"><a href=\"#对原型、原型链的理解\" class=\"headerlink\" title=\"对原型、原型链的理解\"></a>对原型、原型链的理解</h2><p>在 JavaScript 中，原型（Prototype）和原型链（Prototype Chain）是实现对象继承和共享属性的重要机制。以下是对这两个概念的详细解释：</p>\n<h3 id=\"1-原型（Prototype）\"><a href=\"#1-原型（Prototype）\" class=\"headerlink\" title=\"1. 原型（Prototype）\"></a>1. 原型（Prototype）</h3><h4 id=\"定义-7\"><a href=\"#定义-7\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>原型是 JavaScript 中对象的一个重要特性。每个 JavaScript 对象都有一个内部属性 <code>[[Prototype]]</code>，指向另一个对象，这个对象被称为原型。原型可以用来共享属性和方法。</p>\n<h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>共享属性和方法</strong>：通过原型，多个对象可以共享同一个属性和方法，节省内存。</li>\n<li><strong>构造函数的原型</strong>：当使用构造函数创建对象时，构造函数的 <code>prototype</code> 属性会被赋值给新创建对象的 <code>[[Prototype]]</code>。</li>\n</ul>\n<h4 id=\"示例-51\"><a href=\"#示例-51\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\n&#x2F;&#x2F; 在构造函数的原型上添加方法\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\nalice.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<p>在这个例子中，<code>sayHello</code> 方法被添加到 <code>Person</code> 的原型上，因此所有通过 <code>Person</code> 构造函数创建的实例（如 <code>alice</code>）都可以访问这个方法。</p>\n<h3 id=\"2-原型链（Prototype-Chain）\"><a href=\"#2-原型链（Prototype-Chain）\" class=\"headerlink\" title=\"2. 原型链（Prototype Chain）\"></a>2. 原型链（Prototype Chain）</h3><h4 id=\"定义-8\"><a href=\"#定义-8\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>原型链是 JavaScript 中实现对象继承的机制。当访问对象的属性或方法时，JavaScript 首先会查找对象自身的属性，如果没有找到，则会查找其原型对象的属性，依此类推，直到找到该属性或到达原型链的顶端（通常是 <code>Object.prototype</code>）。</p>\n<h4 id=\"特点-6\"><a href=\"#特点-6\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><p><strong>查找顺序</strong>：当访问一个对象的属性时，JavaScript 会按照以下顺序查找：</p>\n<ol>\n<li>对象自身的属性</li>\n<li>对象的原型（<code>[[Prototype]]</code>）</li>\n<li>原型的原型（即原型链上的下一个对象）</li>\n<li>直到 <code>null</code>（原型链的顶端）</li>\n</ol>\n</li>\n<li><p><strong>动态性</strong>：原型链是动态的，如果在原型上添加或修改属性，所有实例都可以立即访问这些更改。</p>\n</li>\n</ul>\n<h4 id=\"示例-52\"><a href=\"#示例-52\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nfunction Student(name, grade) &#123;\n  Person.call(this, name); &#x2F;&#x2F; 继承 Person 的属性\n  this.grade &#x3D; grade;\n&#125;\n\n&#x2F;&#x2F; 设置 Student 的原型为 Person 的实例\nStudent.prototype &#x3D; Object.create(Person.prototype);\nStudent.prototype.constructor &#x3D; Student;\n\n&#x2F;&#x2F; 在 Student 的原型上添加方法\nStudent.prototype.study &#x3D; function () &#123;\n  console.log(&#96;$&#123;this.name&#125; is studying.&#96;);\n&#125;;\n\nconst bob &#x3D; new Student(&quot;Bob&quot;, &quot;A&quot;);\nbob.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Bob\nbob.study(); &#x2F;&#x2F; 输出: Bob is studying.</code></pre>\n\n<p>在这个例子中，<code>Student</code> 通过 <code>Object.create(Person.prototype)</code> 继承了 <code>Person</code> 的原型，因此 <code>bob</code> 实例可以访问 <code>sayHello</code> 方法。</p>\n<h3 id=\"3-总结-6\"><a href=\"#3-总结-6\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>原型</strong>：是对象的一个重要特性，用于共享属性和方法。每个对象都有一个原型，可以通过构造函数的 <code>prototype</code> 属性进行设置。</li>\n<li><strong>原型链</strong>：是实现对象继承的机制，通过查找对象自身及其原型的属性，形成一个链式结构。原型链允许对象共享属性和方法，并实现继承。</li>\n</ul>\n<p>理解原型和原型链是掌握 JavaScript 对象继承和共享机制的关键，有助于编写更高效和可维护的代码。</p>\n<h2 id=\"原型修改、重写\"><a href=\"#原型修改、重写\" class=\"headerlink\" title=\"原型修改、重写\"></a>原型修改、重写</h2><p>在 JavaScript 中，原型（Prototype）是实现对象继承和共享属性的重要机制。原型的修改和重写可以影响对象的行为和属性访问。以下是对原型修改和重写的详细解释。</p>\n<h3 id=\"1-原型修改\"><a href=\"#1-原型修改\" class=\"headerlink\" title=\"1. 原型修改\"></a>1. 原型修改</h3><p>原型修改是指对对象的原型进行更改，以添加、删除或修改属性和方法。这种修改会影响所有通过该原型创建的实例。</p>\n<h4 id=\"示例：修改原型\"><a href=\"#示例：修改原型\" class=\"headerlink\" title=\"示例：修改原型\"></a>示例：修改原型</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\n&#x2F;&#x2F; 在原型上添加方法\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\nalice.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Alice\n\n&#x2F;&#x2F; 修改原型，添加新方法\nPerson.prototype.sayGoodbye &#x3D; function () &#123;\n  console.log(&#96;Goodbye, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nalice.sayGoodbye(); &#x2F;&#x2F; 输出: Goodbye, my name is Alice</code></pre>\n\n<p>在这个例子中，<code>sayGoodbye</code> 方法被添加到 <code>Person</code> 的原型上，因此所有实例（如 <code>alice</code>）都可以访问这个新方法。</p>\n<h3 id=\"2-原型重写\"><a href=\"#2-原型重写\" class=\"headerlink\" title=\"2. 原型重写\"></a>2. 原型重写</h3><p>原型重写是指完全替换对象的原型。这通常通过将一个新的对象赋值给构造函数的 <code>prototype</code> 属性来实现。重写原型会影响所有通过该构造函数创建的实例。</p>\n<h4 id=\"示例：重写原型\"><a href=\"#示例：重写原型\" class=\"headerlink\" title=\"示例：重写原型\"></a>示例：重写原型</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\n&#x2F;&#x2F; 原型上添加方法\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\nalice.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Alice\n\n&#x2F;&#x2F; 重写原型\nPerson.prototype &#x3D; &#123;\n  sayGoodbye: function () &#123;\n    console.log(&#96;Goodbye, my name is $&#123;this.name&#125;&#96;);\n  &#125;,\n&#125;;\n\nconst bob &#x3D; new Person(&quot;Bob&quot;);\nbob.sayHello(); &#x2F;&#x2F; TypeError: bob.sayHello is not a function\nbob.sayGoodbye(); &#x2F;&#x2F; 输出: Goodbye, my name is undefined</code></pre>\n\n<p>在这个例子中，<code>Person.prototype</code> 被重写为一个新的对象。由于 <code>sayHello</code> 方法不再存在于新的原型中，<code>bob</code> 实例无法访问它。此外，<code>name</code> 属性在 <code>sayGoodbye</code> 方法中未定义，因为 <code>bob</code> 实例没有 <code>name</code> 属性。</p>\n<h3 id=\"3-注意事项-1\"><a href=\"#3-注意事项-1\" class=\"headerlink\" title=\"3. 注意事项\"></a>3. 注意事项</h3><ul>\n<li><strong>影响实例</strong>：修改原型会影响所有通过该原型创建的实例，而重写原型会影响新创建的实例，但不会影响已经存在的实例。</li>\n<li><strong>保留原型链</strong>：在重写原型时，如果希望保留原有的原型链，可以使用 <code>Object.create()</code> 方法。</li>\n</ul>\n<h4 id=\"示例：保留原型链\"><a href=\"#示例：保留原型链\" class=\"headerlink\" title=\"示例：保留原型链\"></a>示例：保留原型链</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\n&#x2F;&#x2F; 重写原型，保留原有原型链\nPerson.prototype &#x3D; Object.create(Person.prototype);\nPerson.prototype.sayGoodbye &#x3D; function () &#123;\n  console.log(&#96;Goodbye, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\nalice.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Alice\nalice.sayGoodbye(); &#x2F;&#x2F; 输出: Goodbye, my name is Alice</code></pre>\n\n<h3 id=\"4-总结-11\"><a href=\"#4-总结-11\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>原型修改</strong>：是对现有原型的添加、删除或修改操作，影响所有实例。</li>\n<li><strong>原型重写</strong>：是完全替换原型，影响新创建的实例，但不会影响已经存在的实例。重写原型时要小心，以免丢失原有的方法和属性。</li>\n</ul>\n<p>理解原型的修改和重写是掌握 JavaScript 对象继承和共享机制的关键，有助于编写更高效和可维护的代码。</p>\n<h2 id=\"原型链指向\"><a href=\"#原型链指向\" class=\"headerlink\" title=\"原型链指向\"></a>原型链指向</h2><p>在 JavaScript 中，原型链（Prototype Chain）是实现对象继承和属性共享的机制。每个对象都有一个内部属性 <code>[[Prototype]]</code>，指向其原型对象。原型链的结构决定了对象属性和方法的查找顺序。以下是对原型链指向的详细解释。</p>\n<h3 id=\"1-原型链的基本概念\"><a href=\"#1-原型链的基本概念\" class=\"headerlink\" title=\"1. 原型链的基本概念\"></a>1. 原型链的基本概念</h3><ul>\n<li><strong>原型</strong>：每个 JavaScript 对象都有一个原型，原型是另一个对象，包含可以被该对象共享的属性和方法。</li>\n<li>**<code>[[Prototype]]</code>**：每个对象都有一个内部属性 <code>[[Prototype]]</code>，指向其原型对象。可以通过 <code>Object.getPrototypeOf(obj)</code> 或 <code>__proto__</code> 属性访问。</li>\n</ul>\n<h3 id=\"2-原型链的构建\"><a href=\"#2-原型链的构建\" class=\"headerlink\" title=\"2. 原型链的构建\"></a>2. 原型链的构建</h3><p>当一个对象访问某个属性或方法时，JavaScript 引擎会按照以下顺序查找：</p>\n<ol>\n<li><strong>对象自身</strong>：首先检查对象自身是否有该属性或方法。</li>\n<li><strong>原型</strong>：如果对象自身没有，查找其原型对象（<code>[[Prototype]]</code>）。</li>\n<li><strong>原型的原型</strong>：继续查找原型的原型，直到找到该属性或方法或到达原型链的顶端（通常是 <code>Object.prototype</code>）。</li>\n<li>**<code>null</code>**：如果到达 <code>null</code>，表示原型链的末尾，属性或方法不存在。</li>\n</ol>\n<h3 id=\"3-示例-1\"><a href=\"#3-示例-1\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><h4 id=\"创建一个对象和原型链\"><a href=\"#创建一个对象和原型链\" class=\"headerlink\" title=\"创建一个对象和原型链\"></a>创建一个对象和原型链</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\nconsole.log(alice.name); &#x2F;&#x2F; 输出: Alice\nalice.sayHello(); &#x2F;&#x2F; 输出: Hello, my name is Alice\n\n&#x2F;&#x2F; 查看原型链\nconsole.log(Object.getPrototypeOf(alice) &#x3D;&#x3D;&#x3D; Person.prototype); &#x2F;&#x2F; 输出: true\nconsole.log(Object.getPrototypeOf(Person.prototype) &#x3D;&#x3D;&#x3D; Object.prototype); &#x2F;&#x2F; 输出: true\nconsole.log(Object.getPrototypeOf(Object.prototype)); &#x2F;&#x2F; 输出: null</code></pre>\n\n<p>在这个例子中：</p>\n<ul>\n<li><code>alice</code> 是 <code>Person</code> 的实例，具有 <code>name</code> 属性。</li>\n<li><code>sayHello</code> 方法定义在 <code>Person.prototype</code> 上，<code>alice</code> 可以通过原型链访问它。</li>\n<li><code>Object.getPrototypeOf(alice)</code> 返回 <code>Person.prototype</code>，而 <code>Object.getPrototypeOf(Person.prototype)</code> 返回 <code>Object.prototype</code>，最终到达 <code>null</code>。</li>\n</ul>\n<h3 id=\"4-原型链的作用\"><a href=\"#4-原型链的作用\" class=\"headerlink\" title=\"4. 原型链的作用\"></a>4. 原型链的作用</h3><ul>\n<li><strong>属性共享</strong>：通过原型链，多个对象可以共享同一个方法，节省内存。</li>\n<li><strong>继承</strong>：原型链是实现对象继承的基础，子类可以通过原型链访问父类的方法和属性。</li>\n</ul>\n<h3 id=\"5-注意事项-1\"><a href=\"#5-注意事项-1\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h3><ul>\n<li><strong>性能</strong>：频繁访问原型链上的属性可能会影响性能，尤其是在深层嵌套的情况下。</li>\n<li><strong>属性覆盖</strong>：如果对象自身定义了与原型链上同名的属性，访问时会优先使用对象自身的属性，原型链上的属性将被覆盖。</li>\n</ul>\n<h3 id=\"6-总结-5\"><a href=\"#6-总结-5\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>原型链是 JavaScript 中实现对象继承和属性共享的机制。每个对象都有一个原型，通过 <code>[[Prototype]]</code> 属性连接，形成一个链式结构。当访问对象的属性或方法时，JavaScript 引擎会沿着原型链查找，直到找到该属性或方法或到达原型链的顶端。理解原型链的指向和工作原理是掌握 JavaScript 对象继承和共享机制的关键。</p>\n<h2 id=\"原型链的终点是什么？如何打印出原型链的终点？\"><a href=\"#原型链的终点是什么？如何打印出原型链的终点？\" class=\"headerlink\" title=\"原型链的终点是什么？如何打印出原型链的终点？\"></a>原型链的终点是什么？如何打印出原型链的终点？</h2><p>在 JavaScript 中，原型链的终点是 <code>null</code>。当访问一个对象的属性或方法时，如果在该对象及其原型链上都找不到该属性或方法，最终会到达 <code>null</code>，这表示原型链的末尾。</p>\n<h3 id=\"1-原型链的终点\"><a href=\"#1-原型链的终点\" class=\"headerlink\" title=\"1. 原型链的终点\"></a>1. 原型链的终点</h3><ul>\n<li>**<code>Object.prototype</code>**：所有对象的原型链最终都会指向 <code>Object.prototype</code>，这是 JavaScript 中所有对象的基类。</li>\n<li>**<code>null</code>**：<code>Object.prototype</code> 的 <code>[[Prototype]]</code> 是 <code>null</code>，这标志着原型链的终点。</li>\n</ul>\n<h3 id=\"2-打印原型链的终点\"><a href=\"#2-打印原型链的终点\" class=\"headerlink\" title=\"2. 打印原型链的终点\"></a>2. 打印原型链的终点</h3><p>可以通过 <code>Object.getPrototypeOf()</code> 方法逐步向上遍历原型链，直到到达 <code>null</code>。以下是一个示例，展示如何打印出一个对象的原型链及其终点。</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nPerson.prototype.sayHello &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\n\n&#x2F;&#x2F; 打印原型链\nlet currentObject &#x3D; alice;\n\nwhile (currentObject !&#x3D;&#x3D; null) &#123;\n  console.log(currentObject);\n  currentObject &#x3D; Object.getPrototypeOf(currentObject);\n&#125;\n\n&#x2F;&#x2F; 最后会打印出 null\nconsole.log(currentObject); &#x2F;&#x2F; 输出: null</code></pre>\n\n<h3 id=\"3-输出结果\"><a href=\"#3-输出结果\" class=\"headerlink\" title=\"3. 输出结果\"></a>3. 输出结果</h3><p>在这个示例中，代码会逐步打印出 <code>alice</code> 对象及其原型链上的每个对象，直到到达 <code>null</code>。输出结果可能类似于：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Person &#123; name: &#39;Alice&#39; &#125;\nPerson.prototype &#123; sayHello: [Function (anonymous)] &#125;\nObject.prototype &#123;&#125;\nnull</code></pre>\n\n<h3 id=\"4-总结-12\"><a href=\"#4-总结-12\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>原型链的终点是 <code>null</code>，表示没有更多的原型可供查找。通过 <code>Object.getPrototypeOf()</code> 方法，可以逐步遍历原型链并打印出每个对象，直到到达终点 <code>null</code>。理解原型链的结构和终点是掌握 JavaScript 对象继承和属性访问的重要部分。</p>\n<h1 id=\"执行上下文-x2F-作用域链-x2F-闭包\"><a href=\"#执行上下文-x2F-作用域链-x2F-闭包\" class=\"headerlink\" title=\"执行上下文&#x2F;作用域链&#x2F;闭包\"></a>执行上下文&#x2F;作用域链&#x2F;闭包</h1><h2 id=\"对闭包的理解\"><a href=\"#对闭包的理解\" class=\"headerlink\" title=\"对闭包的理解\"></a>对闭包的理解</h2><p>在 JavaScript 中，闭包（Closure）是一个重要的概念，它是指一个函数可以“记住”并访问其外部作用域的变量，即使在外部函数已经返回之后。闭包使得函数能够访问其外部作用域的变量，从而实现数据的封装和私有化。</p>\n<h3 id=\"1-闭包的基本概念\"><a href=\"#1-闭包的基本概念\" class=\"headerlink\" title=\"1. 闭包的基本概念\"></a>1. 闭包的基本概念</h3><ul>\n<li><strong>函数与作用域</strong>：每当一个函数被创建时，都会创建一个新的作用域。函数可以访问其外部作用域中的变量。</li>\n<li><strong>闭包的形成</strong>：当一个函数在其外部作用域中被定义并返回时，形成了闭包。这个返回的函数可以继续访问其外部作用域中的变量。</li>\n</ul>\n<h3 id=\"2-闭包的特点\"><a href=\"#2-闭包的特点\" class=\"headerlink\" title=\"2. 闭包的特点\"></a>2. 闭包的特点</h3><ul>\n<li><strong>持久化的作用域</strong>：闭包可以让函数保持对其外部作用域的引用，即使外部函数已经执行完毕。</li>\n<li><strong>数据封装</strong>：闭包可以用于创建私有变量，外部无法直接访问这些变量，只能通过闭包提供的函数进行访问和修改。</li>\n</ul>\n<h3 id=\"3-闭包的示例\"><a href=\"#3-闭包的示例\" class=\"headerlink\" title=\"3. 闭包的示例\"></a>3. 闭包的示例</h3><h4 id=\"示例-1：基本闭包\"><a href=\"#示例-1：基本闭包\" class=\"headerlink\" title=\"示例 1：基本闭包\"></a>示例 1：基本闭包</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function outerFunction() &#123;\n  let outerVariable &#x3D; &quot;I am from outer scope&quot;;\n\n  function innerFunction() &#123;\n    console.log(outerVariable); &#x2F;&#x2F; 访问外部变量\n  &#125;\n\n  return innerFunction; &#x2F;&#x2F; 返回内部函数\n&#125;\n\nconst closureFunction &#x3D; outerFunction(); &#x2F;&#x2F; 执行外部函数，返回内部函数\nclosureFunction(); &#x2F;&#x2F; 输出: I am from outer scope</code></pre>\n\n<p>在这个例子中，<code>innerFunction</code> 是一个闭包，它可以访问 <code>outerFunction</code> 的 <code>outerVariable</code> 变量，即使 <code>outerFunction</code> 已经执行完毕。</p>\n<h4 id=\"示例-2：数据封装\"><a href=\"#示例-2：数据封装\" class=\"headerlink\" title=\"示例 2：数据封装\"></a>示例 2：数据封装</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function createCounter() &#123;\n  let count &#x3D; 0; &#x2F;&#x2F; 私有变量\n\n  return &#123;\n    increment: function () &#123;\n      count++;\n      console.log(count);\n    &#125;,\n    decrement: function () &#123;\n      count--;\n      console.log(count);\n    &#125;,\n    getCount: function () &#123;\n      return count;\n    &#125;,\n  &#125;;\n&#125;\n\nconst counter &#x3D; createCounter();\ncounter.increment(); &#x2F;&#x2F; 输出: 1\ncounter.increment(); &#x2F;&#x2F; 输出: 2\ncounter.decrement(); &#x2F;&#x2F; 输出: 1\nconsole.log(counter.getCount()); &#x2F;&#x2F; 输出: 1</code></pre>\n\n<p>在这个例子中，<code>count</code> 是一个私有变量，外部无法直接访问。通过返回的对象中的方法，外部可以对 <code>count</code> 进行操作，从而实现数据的封装。</p>\n<h3 id=\"4-闭包的应用场景\"><a href=\"#4-闭包的应用场景\" class=\"headerlink\" title=\"4. 闭包的应用场景\"></a>4. 闭包的应用场景</h3><ul>\n<li><strong>数据私有化</strong>：使用闭包可以创建私有变量，防止外部直接访问。</li>\n<li><strong>函数工厂</strong>：可以创建具有特定状态的函数，例如计数器、事件处理器等。</li>\n<li><strong>延迟执行</strong>：闭包可以用于实现延迟执行的功能，保存状态。</li>\n</ul>\n<h3 id=\"5-注意事项-2\"><a href=\"#5-注意事项-2\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h3><ul>\n<li><strong>内存消耗</strong>：闭包会保持对外部作用域的引用，可能导致内存泄漏，特别是在不再需要闭包时。</li>\n<li><strong>调试困难</strong>：由于闭包的作用域链，调试时可能会增加复杂性。</li>\n</ul>\n<h3 id=\"6-总结-6\"><a href=\"#6-总结-6\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>闭包是 JavaScript 中一个强大而灵活的特性，它允许函数访问其外部作用域的变量，即使外部函数已经返回。通过闭包，可以实现数据的封装、私有变量和函数工厂等功能。理解闭包的概念和应用场景是掌握 JavaScript 编程的重要部分。</p>\n<h2 id=\"对作用域、作用域链的理解\"><a href=\"#对作用域、作用域链的理解\" class=\"headerlink\" title=\"对作用域、作用域链的理解\"></a>对作用域、作用域链的理解</h2><p>在 JavaScript 中，作用域（Scope）和作用域链（Scope Chain）是理解变量访问和函数执行的重要概念。以下是对这两个概念的详细解释。</p>\n<h3 id=\"1-作用域（Scope）\"><a href=\"#1-作用域（Scope）\" class=\"headerlink\" title=\"1. 作用域（Scope）\"></a>1. 作用域（Scope）</h3><h4 id=\"定义-9\"><a href=\"#定义-9\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>作用域是指在程序中定义变量的可访问范围。它决定了变量的生命周期和可见性。JavaScript 中的作用域主要分为以下几种类型：</p>\n<ul>\n<li><strong>全局作用域</strong>：在代码的最外层定义的变量，任何地方都可以访问。</li>\n<li><strong>函数作用域</strong>：在函数内部定义的变量，只能在该函数内部访问。</li>\n<li><strong>块级作用域</strong>：在 <code>&#123;&#125;</code> 块内定义的变量（如 <code>if</code>、<code>for</code> 等语句中的变量），使用 <code>let</code> 和 <code>const</code> 声明的变量具有块级作用域。</li>\n</ul>\n<h4 id=\"示例-53\"><a href=\"#示例-53\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 全局作用域\nlet globalVar &#x3D; &quot;I am global&quot;;\n\nfunction myFunction() &#123;\n  &#x2F;&#x2F; 函数作用域\n  let functionVar &#x3D; &quot;I am local to the function&quot;;\n  console.log(globalVar); &#x2F;&#x2F; 可以访问全局变量\n  console.log(functionVar); &#x2F;&#x2F; 可以访问函数变量\n&#125;\n\nmyFunction();\nconsole.log(globalVar); &#x2F;&#x2F; 输出: I am global\n&#x2F;&#x2F; console.log(functionVar); &#x2F;&#x2F; ReferenceError: functionVar is not defined</code></pre>\n\n<p>在这个例子中，<code>globalVar</code> 是全局变量，<code>functionVar</code> 是函数作用域内的变量，外部无法访问 <code>functionVar</code>。</p>\n<h3 id=\"2-作用域链（Scope-Chain）\"><a href=\"#2-作用域链（Scope-Chain）\" class=\"headerlink\" title=\"2. 作用域链（Scope Chain）\"></a>2. 作用域链（Scope Chain）</h3><h4 id=\"定义-10\"><a href=\"#定义-10\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>作用域链是指在查找变量时，JavaScript 引擎会按照一定的顺序查找变量的过程。每当一个函数被创建时，都会形成一个作用域链。作用域链的顺序是从当前作用域到外部作用域，直到全局作用域。</p>\n<h4 id=\"特点-7\"><a href=\"#特点-7\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>查找顺序</strong>：当访问一个变量时，JavaScript 首先会在当前作用域查找，如果没有找到，则会查找其外部作用域，依此类推，直到找到该变量或到达全局作用域。</li>\n<li><strong>嵌套作用域</strong>：函数内部可以访问外部函数的变量，这种嵌套关系形成了作用域链。</li>\n</ul>\n<h4 id=\"示例-54\"><a href=\"#示例-54\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let globalVar &#x3D; &quot;I am global&quot;;\n\nfunction outerFunction() &#123;\n  let outerVar &#x3D; &quot;I am from outer function&quot;;\n\n  function innerFunction() &#123;\n    let innerVar &#x3D; &quot;I am from inner function&quot;;\n    console.log(globalVar); &#x2F;&#x2F; 访问全局变量\n    console.log(outerVar); &#x2F;&#x2F; 访问外部函数的变量\n    console.log(innerVar); &#x2F;&#x2F; 访问内部函数的变量\n  &#125;\n\n  innerFunction();\n&#125;\n\nouterFunction();</code></pre>\n\n<p>在这个例子中，<code>innerFunction</code> 可以访问 <code>outerFunction</code> 的变量 <code>outerVar</code> 和全局变量 <code>globalVar</code>，形成了一个作用域链。</p>\n<h3 id=\"3-总结-7\"><a href=\"#3-总结-7\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>作用域</strong>：是变量的可访问范围，决定了变量的生命周期和可见性。JavaScript 中的作用域主要包括全局作用域、函数作用域和块级作用域。</li>\n<li><strong>作用域链</strong>：是查找变量的过程，JavaScript 引擎会按照从当前作用域到外部作用域的顺序查找变量，直到找到该变量或到达全局作用域。</li>\n</ul>\n<p>理解作用域和作用域链是掌握 JavaScript 变量访问、函数执行和闭包等概念的基础，有助于编写更清晰和可维护的代码。</p>\n<h2 id=\"对执行上下文的理解\"><a href=\"#对执行上下文的理解\" class=\"headerlink\" title=\"对执行上下文的理解\"></a>对执行上下文的理解</h2><p>在 JavaScript 中，执行上下文（Execution Context）是一个非常重要的概念，它是代码执行时的环境。执行上下文包含了代码执行所需的所有信息，包括变量、函数、对象等。理解执行上下文有助于更好地掌握 JavaScript 的执行机制、作用域和闭包等概念。</p>\n<h3 id=\"1-执行上下文的类型\"><a href=\"#1-执行上下文的类型\" class=\"headerlink\" title=\"1. 执行上下文的类型\"></a>1. 执行上下文的类型</h3><p>JavaScript 中有三种主要的执行上下文：</p>\n<h4 id=\"1-1-全局执行上下文\"><a href=\"#1-1-全局执行上下文\" class=\"headerlink\" title=\"1.1. 全局执行上下文\"></a>1.1. 全局执行上下文</h4><ul>\n<li><strong>定义</strong>：当 JavaScript 代码首次运行时，创建的执行上下文称为全局执行上下文。它是代码的最外层环境。</li>\n<li><strong>特点</strong>：<ul>\n<li>在全局上下文中，所有的变量和函数都是全局可访问的。</li>\n<li>全局上下文的 <code>this</code> 指向全局对象（在浏览器中是 <code>window</code> 对象）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-2-函数执行上下文\"><a href=\"#1-2-函数执行上下文\" class=\"headerlink\" title=\"1.2. 函数执行上下文\"></a>1.2. 函数执行上下文</h4><ul>\n<li><strong>定义</strong>：每当一个函数被调用时，都会创建一个新的执行上下文，称为函数执行上下文。</li>\n<li><strong>特点</strong>：<ul>\n<li>每个函数都有自己的作用域，函数内部的变量和参数在该上下文中可用。</li>\n<li>函数执行上下文的 <code>this</code> 指向调用该函数的对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-3-Eval-执行上下文\"><a href=\"#1-3-Eval-执行上下文\" class=\"headerlink\" title=\"1.3. Eval 执行上下文\"></a>1.3. Eval 执行上下文</h4><ul>\n<li><strong>定义</strong>：当使用 <code>eval</code> 函数执行字符串代码时，会创建一个 eval 执行上下文。</li>\n<li><strong>特点</strong>：通常不推荐使用 <code>eval</code>，因为它会影响性能和安全性。</li>\n</ul>\n<h3 id=\"2-执行上下文的组成\"><a href=\"#2-执行上下文的组成\" class=\"headerlink\" title=\"2. 执行上下文的组成\"></a>2. 执行上下文的组成</h3><p>每个执行上下文都有三个主要组成部分：</p>\n<h4 id=\"2-1-变量环境（Variable-Environment）\"><a href=\"#2-1-变量环境（Variable-Environment）\" class=\"headerlink\" title=\"2.1. 变量环境（Variable Environment）\"></a>2.1. 变量环境（Variable Environment）</h4><ul>\n<li><strong>定义</strong>：变量环境是执行上下文中存储变量和函数声明的地方。</li>\n<li><strong>特点</strong>：在函数执行上下文中，变量环境会包含函数的参数和内部变量。</li>\n</ul>\n<h4 id=\"2-2-词法环境（Lexical-Environment）\"><a href=\"#2-2-词法环境（Lexical-Environment）\" class=\"headerlink\" title=\"2.2. 词法环境（Lexical Environment）\"></a>2.2. 词法环境（Lexical Environment）</h4><ul>\n<li><strong>定义</strong>：词法环境是一个包含变量和函数的对象，记录了变量的绑定关系。</li>\n<li><strong>特点</strong>：每个执行上下文都有一个指向外部词法环境的引用，形成了作用域链。</li>\n</ul>\n<h4 id=\"2-3-this-绑定\"><a href=\"#2-3-this-绑定\" class=\"headerlink\" title=\"2.3. this 绑定\"></a>2.3. <code>this</code> 绑定</h4><ul>\n<li><strong>定义</strong>：<code>this</code> 是一个特殊的关键字，指向当前执行上下文中的对象。</li>\n<li><strong>特点</strong>：<code>this</code> 的值在函数调用时确定，取决于函数的调用方式。</li>\n</ul>\n<h3 id=\"3-执行上下文的生命周期\"><a href=\"#3-执行上下文的生命周期\" class=\"headerlink\" title=\"3. 执行上下文的生命周期\"></a>3. 执行上下文的生命周期</h3><p>执行上下文的生命周期通常包括以下几个阶段：</p>\n<ol>\n<li><p><strong>创建阶段</strong>：</p>\n<ul>\n<li>创建变量环境和词法环境。</li>\n<li>识别并存储函数声明和变量声明（但不赋值）。</li>\n<li>绑定 <code>this</code>。</li>\n</ul>\n</li>\n<li><p><strong>执行阶段</strong>：</p>\n<ul>\n<li>执行代码，赋值变量，调用函数。</li>\n<li>访问变量和函数，更新变量环境。</li>\n</ul>\n</li>\n<li><p><strong>销毁阶段</strong>：</p>\n<ul>\n<li>当执行上下文完成执行后，会被销毁，释放内存。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个简单的示例，展示了执行上下文的创建和使用：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let globalVar &#x3D; &quot;I am global&quot;;\n\nfunction outerFunction() &#123;\n  let outerVar &#x3D; &quot;I am from outer function&quot;;\n\n  function innerFunction() &#123;\n    let innerVar &#x3D; &quot;I am from inner function&quot;;\n    console.log(globalVar); &#x2F;&#x2F; 访问全局变量\n    console.log(outerVar); &#x2F;&#x2F; 访问外部函数的变量\n    console.log(innerVar); &#x2F;&#x2F; 访问内部函数的变量\n  &#125;\n\n  innerFunction();\n&#125;\n\nouterFunction();</code></pre>\n\n<p>在这个例子中：</p>\n<ul>\n<li>当 <code>outerFunction</code> 被调用时，会创建一个新的函数执行上下文，包含 <code>outerVar</code> 和对全局变量的访问。</li>\n<li>当 <code>innerFunction</code> 被调用时，会创建另一个函数执行上下文，包含 <code>innerVar</code> 和对 <code>outerVar</code> 的访问。</li>\n</ul>\n<h3 id=\"5-总结-13\"><a href=\"#5-总结-13\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>执行上下文是 JavaScript 中代码执行的环境，包含了变量、函数、作用域等信息。理解执行上下文的类型、组成和生命周期有助于掌握 JavaScript 的执行机制、作用域、闭包等概念，从而编写更高效和可维护的代码。</p>\n<h1 id=\"this-x2F-call-x2F-apply-x2F-bind\"><a href=\"#this-x2F-call-x2F-apply-x2F-bind\" class=\"headerlink\" title=\"this&#x2F;call&#x2F;apply&#x2F;bind\"></a>this&#x2F;call&#x2F;apply&#x2F;bind</h1><h2 id=\"对-this-对象的理解\"><a href=\"#对-this-对象的理解\" class=\"headerlink\" title=\"对 this 对象的理解\"></a>对 this 对象的理解</h2><p>在 JavaScript 中，<code>this</code> 是一个特殊的关键字，指向当前执行上下文中的对象。<code>this</code> 的值在函数调用时确定，取决于函数的调用方式。理解 <code>this</code> 的行为对于掌握 JavaScript 的对象和函数非常重要。以下是对 <code>this</code> 对象的详细解释。</p>\n<h3 id=\"1-this-的基本概念\"><a href=\"#1-this-的基本概念\" class=\"headerlink\" title=\"1. this 的基本概念\"></a>1. <code>this</code> 的基本概念</h3><ul>\n<li><strong>上下文</strong>：<code>this</code> 的值与函数的调用方式密切相关。它可以指向不同的对象，具体取决于函数是如何被调用的。</li>\n<li><strong>动态绑定</strong>：<code>this</code> 是动态绑定的，意味着它的值在运行时确定，而不是在函数定义时。</li>\n</ul>\n<h3 id=\"2-this-的不同情况\"><a href=\"#2-this-的不同情况\" class=\"headerlink\" title=\"2. this 的不同情况\"></a>2. <code>this</code> 的不同情况</h3><h4 id=\"2-1-全局上下文中的-this\"><a href=\"#2-1-全局上下文中的-this\" class=\"headerlink\" title=\"2.1. 全局上下文中的 this\"></a>2.1. 全局上下文中的 <code>this</code></h4><p>在全局上下文中，<code>this</code> 指向全局对象。在浏览器中，全局对象是 <code>window</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(this); &#x2F;&#x2F; 在浏览器中输出: Window &#123; ... &#125;</code></pre>\n\n<h4 id=\"2-2-函数调用中的-this\"><a href=\"#2-2-函数调用中的-this\" class=\"headerlink\" title=\"2.2. 函数调用中的 this\"></a>2.2. 函数调用中的 <code>this</code></h4><p>在普通函数调用中，<code>this</code> 指向全局对象（在严格模式下为 <code>undefined</code>）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function showThis() &#123;\n  console.log(this);\n&#125;\n\nshowThis(); &#x2F;&#x2F; 在浏览器中输出: Window &#123; ... &#125;</code></pre>\n\n<h4 id=\"2-3-对象方法中的-this\"><a href=\"#2-3-对象方法中的-this\" class=\"headerlink\" title=\"2.3. 对象方法中的 this\"></a>2.3. 对象方法中的 <code>this</code></h4><p>当函数作为对象的方法调用时，<code>this</code> 指向调用该方法的对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  name: &quot;Alice&quot;,\n  greet: function () &#123;\n    console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n  &#125;,\n&#125;;\n\nobj.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h4 id=\"2-4-构造函数中的-this\"><a href=\"#2-4-构造函数中的-this\" class=\"headerlink\" title=\"2.4. 构造函数中的 this\"></a>2.4. 构造函数中的 <code>this</code></h4><p>在构造函数中，<code>this</code> 指向新创建的实例对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;);\nconsole.log(alice.name); &#x2F;&#x2F; 输出: Alice</code></pre>\n\n<h4 id=\"2-5-call、apply-和-bind-方法\"><a href=\"#2-5-call、apply-和-bind-方法\" class=\"headerlink\" title=\"2.5. call、apply 和 bind 方法\"></a>2.5. <code>call</code>、<code>apply</code> 和 <code>bind</code> 方法</h4><ul>\n<li><strong><code>call</code></strong> 和 **<code>apply</code>**：这两个方法可以显式地设置 <code>this</code> 的值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet() &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;\n\nconst obj &#x3D; &#123; name: &quot;Alice&quot; &#125;;\ngreet.call(obj); &#x2F;&#x2F; 输出: Hello, my name is Alice\ngreet.apply(obj); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<ul>\n<li>**<code>bind</code>**：<code>bind</code> 方法创建一个新函数，永久绑定 <code>this</code> 的值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123; name: &quot;Alice&quot; &#125;;\nconst greet &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;.bind(obj);\n\ngreet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h4 id=\"2-6-箭头函数中的-this\"><a href=\"#2-6-箭头函数中的-this\" class=\"headerlink\" title=\"2.6. 箭头函数中的 this\"></a>2.6. 箭头函数中的 <code>this</code></h4><p>箭头函数不具有自己的 <code>this</code>，它会从外部作用域中继承 <code>this</code> 的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  name: &quot;Alice&quot;,\n  greet: function () &#123;\n    const inner &#x3D; () &#x3D;&gt; &#123;\n      console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n    &#125;;\n    inner();\n  &#125;,\n&#125;;\n\nobj.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"3-总结-8\"><a href=\"#3-总结-8\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong><code>this</code> 是动态的</strong>：<code>this</code> 的值在运行时确定，取决于函数的调用方式。</li>\n<li><strong>全局上下文</strong>：在全局上下文中，<code>this</code> 指向全局对象。</li>\n<li><strong>对象方法</strong>：在对象方法中，<code>this</code> 指向调用该方法的对象。</li>\n<li><strong>构造函数</strong>：在构造函数中，<code>this</code> 指向新创建的实例对象。</li>\n<li><strong>显式绑定</strong>：可以使用 <code>call</code>、<code>apply</code> 和 <code>bind</code> 方法显式设置 <code>this</code> 的值。</li>\n<li><strong>箭头函数</strong>：箭头函数不具有自己的 <code>this</code>，而是从外部作用域中继承。</li>\n</ul>\n<p>理解 <code>this</code> 对象的行为对于掌握 JavaScript 的对象、函数和作用域等概念至关重要，有助于编写更高效和可维护的代码。</p>\n<h2 id=\"call-和-apply-的区别？\"><a href=\"#call-和-apply-的区别？\" class=\"headerlink\" title=\"call() 和 apply() 的区别？\"></a>call() 和 apply() 的区别？</h2><p>在 JavaScript 中，<code>call()</code> 和 <code>apply()</code> 是两个用于改变函数执行上下文的函数，它们都可以用来显式地设置 <code>this</code> 的值。尽管它们的功能相似，但在参数传递的方式上有所不同。以下是对这两个方法的详细比较：</p>\n<h3 id=\"1-call-方法\"><a href=\"#1-call-方法\" class=\"headerlink\" title=\"1. call() 方法\"></a>1. <code>call()</code> 方法</h3><ul>\n<li><p><strong>定义</strong>：<code>call()</code> 方法调用一个函数，并将 <code>this</code> 关键字设置为指定的值。它接受参数列表。</p>\n</li>\n<li><p><strong>语法</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">functionName.call(thisArg, arg1, arg2, ...);</code></pre>\n</li>\n<li><p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet(greeting) &#123;\n  console.log(&#96;$&#123;greeting&#125;, my name is $&#123;this.name&#125;&#96;);\n&#125;\n\nconst person &#x3D; &#123; name: &quot;Alice&quot; &#125;;\ngreet.call(person, &quot;Hello&quot;); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre></li>\n</ul>\n<h3 id=\"2-apply-方法\"><a href=\"#2-apply-方法\" class=\"headerlink\" title=\"2. apply() 方法\"></a>2. <code>apply()</code> 方法</h3><ul>\n<li><p><strong>定义</strong>：<code>apply()</code> 方法也调用一个函数，并将 <code>this</code> 关键字设置为指定的值。与 <code>call()</code> 不同的是，<code>apply()</code> 接受一个数组或类数组对象作为参数。</p>\n</li>\n<li><p><strong>语法</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">functionName.apply(thisArg, [argsArray]);</code></pre>\n</li>\n<li><p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet(greeting, punctuation) &#123;\n  console.log(&#96;$&#123;greeting&#125;, my name is $&#123;this.name&#125;$&#123;punctuation&#125;&#96;);\n&#125;\n\nconst person &#x3D; &#123; name: &quot;Alice&quot; &#125;;\ngreet.apply(person, [&quot;Hello&quot;, &quot;!&quot;]); &#x2F;&#x2F; 输出: Hello, my name is Alice!</code></pre></li>\n</ul>\n<h3 id=\"3-主要区别-1\"><a href=\"#3-主要区别-1\" class=\"headerlink\" title=\"3. 主要区别\"></a>3. 主要区别</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>call()</code></th>\n<th><code>apply()</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>参数传递方式</strong></td>\n<td>逐个参数传递</td>\n<td>以数组或类数组对象传递参数</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td><code>functionName.call(thisArg, arg1, arg2, ...)</code></td>\n<td><code>functionName.apply(thisArg, [argsArray])</code></td>\n</tr>\n<tr>\n<td><strong>使用场景</strong></td>\n<td>当参数数量已知且不多时使用</td>\n<td>当参数数量不确定或为数组时使用</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-何时使用\"><a href=\"#4-何时使用\" class=\"headerlink\" title=\"4. 何时使用\"></a>4. 何时使用</h3><ul>\n<li><p>**使用 <code>call()</code>**：当你知道要传递的参数数量，并且希望逐个传递时，使用 <code>call()</code> 方法。</p>\n</li>\n<li><p>**使用 <code>apply()</code>**：当你有一个数组或类数组对象，并希望将其作为参数传递给函数时，使用 <code>apply()</code> 方法。</p>\n</li>\n</ul>\n<h3 id=\"5-例子对比\"><a href=\"#5-例子对比\" class=\"headerlink\" title=\"5. 例子对比\"></a>5. 例子对比</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sum(a, b) &#123;\n  return a + b;\n&#125;\n\nconst numbers &#x3D; [5, 10];\n\n&#x2F;&#x2F; 使用 call()\nconsole.log(sum.call(null, 5, 10)); &#x2F;&#x2F; 输出: 15\n\n&#x2F;&#x2F; 使用 apply()\nconsole.log(sum.apply(null, numbers)); &#x2F;&#x2F; 输出: 15</code></pre>\n\n<h3 id=\"6-总结-7\"><a href=\"#6-总结-7\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p><code>call()</code> 和 <code>apply()</code> 都是用于改变函数的 <code>this</code> 上下文的方法。它们的主要区别在于参数的传递方式：<code>call()</code> 逐个传递参数，而 <code>apply()</code> 以数组的形式传递参数。理解这两个方法的区别和使用场景可以帮助开发者更灵活地控制函数的执行上下文。</p>\n<h2 id=\"实现-call、apply-及-bind-函数\"><a href=\"#实现-call、apply-及-bind-函数\" class=\"headerlink\" title=\"实现 call、apply 及 bind 函数\"></a>实现 call、apply 及 bind 函数</h2><p>在 JavaScript 中，<code>call</code>、<code>apply</code> 和 <code>bind</code> 是用于改变函数执行上下文的常用方法。下面是如何实现这三个方法的示例。</p>\n<h3 id=\"1-实现-call-方法\"><a href=\"#1-实现-call-方法\" class=\"headerlink\" title=\"1. 实现 call 方法\"></a>1. 实现 <code>call</code> 方法</h3><p><code>call</code> 方法调用一个函数，并将 <code>this</code> 关键字设置为指定的值。它接受参数列表。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myCall &#x3D; function (context, ...args) &#123;\n  &#x2F;&#x2F; 如果 context 为 null 或 undefined，则指向全局对象\n  context &#x3D; context || globalThis; &#x2F;&#x2F; 在浏览器中是 window\n  &#x2F;&#x2F; 将函数绑定到 context 上\n  context.fn &#x3D; this; &#x2F;&#x2F; this 是调用 myCall 的函数\n  &#x2F;&#x2F; 调用函数并返回结果\n  const result &#x3D; context.fn(...args);\n  &#x2F;&#x2F; 删除临时函数\n  delete context.fn;\n  return result;\n&#125;;\n\n&#x2F;&#x2F; 示例\nfunction greet(greeting) &#123;\n  console.log(&#96;$&#123;greeting&#125;, my name is $&#123;this.name&#125;&#96;);\n&#125;\n\nconst person &#x3D; &#123; name: &quot;Alice&quot; &#125;;\ngreet.myCall(person, &quot;Hello&quot;); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"2-实现-apply-方法\"><a href=\"#2-实现-apply-方法\" class=\"headerlink\" title=\"2. 实现 apply 方法\"></a>2. 实现 <code>apply</code> 方法</h3><p><code>apply</code> 方法与 <code>call</code> 类似，但它接受一个数组作为参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myApply &#x3D; function (context, args) &#123;\n  context &#x3D; context || globalThis; &#x2F;&#x2F; 如果 context 为 null 或 undefined，则指向全局对象\n  context.fn &#x3D; this; &#x2F;&#x2F; this 是调用 myApply 的函数\n  &#x2F;&#x2F; 调用函数并返回结果\n  const result &#x3D; context.fn(...(args || [])); &#x2F;&#x2F; 如果 args 为 undefined，则传递空数组\n  delete context.fn; &#x2F;&#x2F; 删除临时函数\n  return result;\n&#125;;\n\n&#x2F;&#x2F; 示例\nfunction greet(greeting, punctuation) &#123;\n  console.log(&#96;$&#123;greeting&#125;, my name is $&#123;this.name&#125;$&#123;punctuation&#125;&#96;);\n&#125;\n\nconst person &#x3D; &#123; name: &quot;Alice&quot; &#125;;\ngreet.myApply(person, [&quot;Hello&quot;, &quot;!&quot;]); &#x2F;&#x2F; 输出: Hello, my name is Alice!</code></pre>\n\n<h3 id=\"3-实现-bind-方法\"><a href=\"#3-实现-bind-方法\" class=\"headerlink\" title=\"3. 实现 bind 方法\"></a>3. 实现 <code>bind</code> 方法</h3><p><code>bind</code> 方法创建一个新函数，永久绑定 <code>this</code> 的值，并可以预设参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myBind &#x3D; function (context, ...args) &#123;\n  const fn &#x3D; this; &#x2F;&#x2F; this 是调用 myBind 的函数\n  return function (...newArgs) &#123;\n    return fn.apply(context, [...args, ...newArgs]); &#x2F;&#x2F; 合并参数并调用\n  &#125;;\n&#125;;\n\n&#x2F;&#x2F; 示例\nfunction greet(greeting, punctuation) &#123;\n  console.log(&#96;$&#123;greeting&#125;, my name is $&#123;this.name&#125;$&#123;punctuation&#125;&#96;);\n&#125;\n\nconst person &#x3D; &#123; name: &quot;Alice&quot; &#125;;\nconst boundGreet &#x3D; greet.myBind(person, &quot;Hello&quot;);\nboundGreet(&quot;!&quot;); &#x2F;&#x2F; 输出: Hello, my name is Alice!</code></pre>\n\n<h3 id=\"4-总结-13\"><a href=\"#4-总结-13\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li>**<code>myCall</code>**：实现了 <code>call</code> 方法，允许你指定 <code>this</code> 的值并逐个传递参数。</li>\n<li>**<code>myApply</code>**：实现了 <code>apply</code> 方法，允许你指定 <code>this</code> 的值并以数组的形式传递参数。</li>\n<li>**<code>myBind</code>**：实现了 <code>bind</code> 方法，创建一个新函数，永久绑定 <code>this</code> 的值，并可以预设参数。</li>\n</ul>\n<p>通过这些实现，你可以更好地理解 <code>call</code>、<code>apply</code> 和 <code>bind</code> 的工作原理。</p>\n<h1 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a>异步编程</h1><h2 id=\"异步编程的实现方式？\"><a href=\"#异步编程的实现方式？\" class=\"headerlink\" title=\"异步编程的实现方式？\"></a>异步编程的实现方式？</h2><p>在 JavaScript 中，异步编程是处理并发操作的重要方式，尤其是在处理网络请求、文件读取等耗时操作时。以下是几种常见的异步编程实现方式：</p>\n<h3 id=\"1-回调函数（Callback）\"><a href=\"#1-回调函数（Callback）\" class=\"headerlink\" title=\"1. 回调函数（Callback）\"></a>1. 回调函数（Callback）</h3><p>回调函数是最基本的异步编程方式。通过将一个函数作为参数传递给另一个函数，在异步操作完成后调用这个回调函数。</p>\n<h4 id=\"示例-55\"><a href=\"#示例-55\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fetchData(callback) &#123;\n  setTimeout(() &#x3D;&gt; &#123;\n    const data &#x3D; &#123; name: &quot;Alice&quot; &#125;;\n    callback(data); &#x2F;&#x2F; 异步操作完成后调用回调\n  &#125;, 1000);\n&#125;\n\nfetchData((data) &#x3D;&gt; &#123;\n  console.log(data); &#x2F;&#x2F; 输出: &#123; name: &#39;Alice&#39; &#125;\n&#125;);</code></pre>\n\n<h3 id=\"2-Promise\"><a href=\"#2-Promise\" class=\"headerlink\" title=\"2. Promise\"></a>2. Promise</h3><p>Promise 是一种更现代的异步编程方式，表示一个可能在未来某个时间点完成的操作。Promise 有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已完成）和 <code>rejected</code>（已拒绝）。</p>\n<h4 id=\"示例-56\"><a href=\"#示例-56\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fetchData() &#123;\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      const data &#x3D; &#123; name: &quot;Alice&quot; &#125;;\n      resolve(data); &#x2F;&#x2F; 操作成功，调用 resolve\n    &#125;, 1000);\n  &#125;);\n&#125;\n\nfetchData()\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data); &#x2F;&#x2F; 输出: &#123; name: &#39;Alice&#39; &#125;\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error);\n  &#125;);</code></pre>\n\n<h3 id=\"3-async-x2F-await\"><a href=\"#3-async-x2F-await\" class=\"headerlink\" title=\"3. async&#x2F;await\"></a>3. async&#x2F;await</h3><p><code>async/await</code> 是基于 Promise 的语法糖，使得异步代码看起来更像同步代码。<code>async</code> 函数返回一个 Promise，而 <code>await</code> 用于等待 Promise 的完成。</p>\n<h4 id=\"示例-57\"><a href=\"#示例-57\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function fetchData() &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      const data &#x3D; &#123; name: &quot;Alice&quot; &#125;;\n      resolve(data);\n    &#125;, 1000);\n  &#125;);\n&#125;\n\nasync function getData() &#123;\n  try &#123;\n    const data &#x3D; await fetchData(); &#x2F;&#x2F; 等待 Promise 完成\n    console.log(data); &#x2F;&#x2F; 输出: &#123; name: &#39;Alice&#39; &#125;\n  &#125; catch (error) &#123;\n    console.error(error);\n  &#125;\n&#125;\n\ngetData();</code></pre>\n\n<h3 id=\"4-事件驱动（Event-driven）\"><a href=\"#4-事件驱动（Event-driven）\" class=\"headerlink\" title=\"4. 事件驱动（Event-driven）\"></a>4. 事件驱动（Event-driven）</h3><p>事件驱动编程是通过事件和事件处理程序来实现异步操作的方式。JavaScript 的许多 API（如 DOM 事件、网络请求等）都是基于事件驱动的。</p>\n<h4 id=\"示例-58\"><a href=\"#示例-58\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document.getElementById(&quot;myButton&quot;).addEventListener(&quot;click&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;Button clicked!&quot;); &#x2F;&#x2F; 处理点击事件\n&#125;);</code></pre>\n\n<h3 id=\"5-生成器（Generators）\"><a href=\"#5-生成器（Generators）\" class=\"headerlink\" title=\"5. 生成器（Generators）\"></a>5. 生成器（Generators）</h3><p>生成器是 ES6 引入的一种异步编程方式，可以通过 <code>yield</code> 关键字暂停和恢复函数的执行。结合 Promise 使用时，可以实现异步控制流。</p>\n<h4 id=\"示例-59\"><a href=\"#示例-59\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function* fetchData() &#123;\n  const data &#x3D; yield new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&#123; name: &quot;Alice&quot; &#125;);\n    &#125;, 1000);\n  &#125;);\n  console.log(data);\n&#125;\n\nconst generator &#x3D; fetchData();\nconst promise &#x3D; generator.next().value; &#x2F;&#x2F; 获取 Promise\npromise.then((data) &#x3D;&gt; generator.next(data)); &#x2F;&#x2F; 继续执行生成器</code></pre>\n\n<h3 id=\"6-总结-8\"><a href=\"#6-总结-8\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>JavaScript 提供了多种异步编程实现方式，包括回调函数、Promise、async&#x2F;await、事件驱动和生成器等。每种方式都有其适用场景和优缺点：</p>\n<ul>\n<li><strong>回调函数</strong>：简单，但可能导致回调地狱（callback hell）。</li>\n<li><strong>Promise</strong>：更清晰的错误处理和链式调用。</li>\n<li><strong>async&#x2F;await</strong>：使异步代码更易读，像同步代码一样。</li>\n<li><strong>事件驱动</strong>：适用于处理用户交互和事件。</li>\n<li><strong>生成器</strong>：提供了更灵活的异步控制流。</li>\n</ul>\n<p>理解这些异步编程方式可以帮助开发者更有效地处理并发操作，提高代码的可读性和可维护性。</p>\n<h2 id=\"setTimeout、Promise、Async-x2F-Await-的区别\"><a href=\"#setTimeout、Promise、Async-x2F-Await-的区别\" class=\"headerlink\" title=\"setTimeout、Promise、Async&#x2F;Await 的区别\"></a>setTimeout、Promise、Async&#x2F;Await 的区别</h2><p><code>setTimeout</code>、<code>Promise</code> 和 <code>async/await</code> 是 JavaScript 中处理异步操作的三种不同方式。它们各自有不同的用途和特性。以下是对这三者的详细比较：</p>\n<h3 id=\"1-setTimeout\"><a href=\"#1-setTimeout\" class=\"headerlink\" title=\"1. setTimeout\"></a>1. <code>setTimeout</code></h3><h4 id=\"定义-11\"><a href=\"#定义-11\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>setTimeout</code> 是一个用于延迟执行代码的函数。它接受两个参数：要执行的函数和延迟的时间（以毫秒为单位）。</p>\n<h4 id=\"特点-8\"><a href=\"#特点-8\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>延迟执行</strong>：<code>setTimeout</code> 用于在指定的时间后执行某个函数。</li>\n<li><strong>不返回值</strong>：<code>setTimeout</code> 返回一个定时器 ID，而不是 Promise。</li>\n<li><strong>不处理异步操作的结果</strong>：它主要用于延迟执行，而不是处理异步操作的结果。</li>\n</ul>\n<h4 id=\"示例-60\"><a href=\"#示例-60\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&quot;Start&quot;);\n\nsetTimeout(() &#x3D;&gt; &#123;\n  console.log(&quot;Executed after 1 second&quot;);\n&#125;, 1000);\n\nconsole.log(&quot;End&quot;);\n\n&#x2F;&#x2F; 输出:\n&#x2F;&#x2F; Start\n&#x2F;&#x2F; End\n&#x2F;&#x2F; Executed after 1 second</code></pre>\n\n<h3 id=\"2-Promise-1\"><a href=\"#2-Promise-1\" class=\"headerlink\" title=\"2. Promise\"></a>2. <code>Promise</code></h3><h4 id=\"定义-12\"><a href=\"#定义-12\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>Promise</code> 是一种用于表示异步操作的结果的对象。它可以处于三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已完成）和 <code>rejected</code>（已拒绝）。</p>\n<h4 id=\"特点-9\"><a href=\"#特点-9\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>链式调用</strong>：<code>Promise</code> 支持链式调用，可以通过 <code>.then()</code> 和 <code>.catch()</code> 方法处理成功和失败的结果。</li>\n<li><strong>处理异步操作的结果</strong>：<code>Promise</code> 主要用于处理异步操作的结果，提供更清晰的错误处理。</li>\n<li><strong>可以与 <code>setTimeout</code> 结合使用</strong>：可以在 Promise 中使用 <code>setTimeout</code> 来模拟异步操作。</li>\n</ul>\n<h4 id=\"示例-61\"><a href=\"#示例-61\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fetchData &#x3D; () &#x3D;&gt; &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&quot;Data fetched&quot;);\n    &#125;, 1000);\n  &#125;);\n&#125;;\n\nconsole.log(&quot;Start&quot;);\n\nfetchData().then((data) &#x3D;&gt; &#123;\n  console.log(data); &#x2F;&#x2F; 输出: Data fetched\n&#125;);\n\nconsole.log(&quot;End&quot;);\n\n&#x2F;&#x2F; 输出:\n&#x2F;&#x2F; Start\n&#x2F;&#x2F; End\n&#x2F;&#x2F; (1 second later)\n&#x2F;&#x2F; Data fetched</code></pre>\n\n<h3 id=\"3-async-await\"><a href=\"#3-async-await\" class=\"headerlink\" title=\"3. async/await\"></a>3. <code>async/await</code></h3><h4 id=\"定义-13\"><a href=\"#定义-13\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>async/await</code> 是基于 Promise 的语法糖，使得异步代码看起来更像同步代码。<code>async</code> 函数返回一个 Promise，而 <code>await</code> 用于等待 Promise 的完成。</p>\n<h4 id=\"特点-10\"><a href=\"#特点-10\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>更易读的语法</strong>：<code>async/await</code> 使得异步代码更易于理解和维护，像同步代码一样。</li>\n<li><strong>错误处理</strong>：可以使用 <code>try/catch</code> 语句处理错误。</li>\n<li><strong>依赖于 Promise</strong>：<code>await</code> 只能在 <code>async</code> 函数内部使用。</li>\n</ul>\n<h4 id=\"示例-62\"><a href=\"#示例-62\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fetchData &#x3D; () &#x3D;&gt; &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&quot;Data fetched&quot;);\n    &#125;, 1000);\n  &#125;);\n&#125;;\n\nconst getData &#x3D; async () &#x3D;&gt; &#123;\n  console.log(&quot;Start&quot;);\n  const data &#x3D; await fetchData(); &#x2F;&#x2F; 等待 Promise 完成\n  console.log(data); &#x2F;&#x2F; 输出: Data fetched\n  console.log(&quot;End&quot;);\n&#125;;\n\ngetData();\n\n&#x2F;&#x2F; 输出:\n&#x2F;&#x2F; Start\n&#x2F;&#x2F; (1 second later)\n&#x2F;&#x2F; Data fetched\n&#x2F;&#x2F; End</code></pre>\n\n<h3 id=\"4-主要区别总结-1\"><a href=\"#4-主要区别总结-1\" class=\"headerlink\" title=\"4. 主要区别总结\"></a>4. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>setTimeout</code></th>\n<th><code>Promise</code></th>\n<th><code>async/await</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>用途</strong></td>\n<td>延迟执行代码</td>\n<td>处理异步操作的结果</td>\n<td>使异步代码更易读</td>\n</tr>\n<tr>\n<td><strong>返回值</strong></td>\n<td>返回定时器 ID</td>\n<td>返回 Promise</td>\n<td>返回 Promise</td>\n</tr>\n<tr>\n<td><strong>错误处理</strong></td>\n<td>无法直接处理错误</td>\n<td>使用 <code>.catch()</code> 处理错误</td>\n<td>使用 <code>try/catch</code> 处理错误</td>\n</tr>\n<tr>\n<td><strong>语法</strong></td>\n<td>传统回调</td>\n<td>链式调用</td>\n<td>类似同步代码</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-总结-14\"><a href=\"#5-总结-14\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li>**<code>setTimeout</code>**：用于延迟执行某个函数，主要用于定时操作。</li>\n<li>**<code>Promise</code>**：用于处理异步操作的结果，提供更清晰的错误处理和链式调用。</li>\n<li>**<code>async/await</code>**：基于 Promise 的语法糖，使得异步代码更易读，像同步代码一样。</li>\n</ul>\n<p>理解这三者的区别和适用场景可以帮助开发者更有效地处理异步操作，提高代码的可读性和可维护性。</p>\n<h2 id=\"对-Promise-的理解\"><a href=\"#对-Promise-的理解\" class=\"headerlink\" title=\"对 Promise 的理解\"></a>对 Promise 的理解</h2><p>在 JavaScript 中，<code>Promise</code> 是一种用于处理异步操作的对象，它代表一个可能在未来某个时间点完成的操作。<code>Promise</code> 提供了一种更清晰和结构化的方式来处理异步代码，避免了传统回调函数带来的“回调地狱”问题。以下是对 <code>Promise</code> 的详细理解。</p>\n<h3 id=\"1-Promise-的基本概念\"><a href=\"#1-Promise-的基本概念\" class=\"headerlink\" title=\"1. Promise 的基本概念\"></a>1. Promise 的基本概念</h3><ul>\n<li><p><strong>状态</strong>：<code>Promise</code> 有三种状态：</p>\n<ul>\n<li><strong>Pending（进行中）</strong>：初始状态，表示异步操作尚未完成。</li>\n<li><strong>Fulfilled（已完成）</strong>：表示异步操作成功完成，并返回结果。</li>\n<li><strong>Rejected（已拒绝）</strong>：表示异步操作失败，并返回错误信息。</li>\n</ul>\n</li>\n<li><p><strong>不可变性</strong>：一旦 <code>Promise</code> 的状态从 <code>pending</code> 变为 <code>fulfilled</code> 或 <code>rejected</code>，就不能再改变。</p>\n</li>\n</ul>\n<h3 id=\"2-Promise-的创建\"><a href=\"#2-Promise-的创建\" class=\"headerlink\" title=\"2. Promise 的创建\"></a>2. Promise 的创建</h3><p>可以通过 <code>Promise</code> 构造函数创建一个新的 Promise 对象。构造函数接受一个执行器函数（executor），该函数有两个参数：<code>resolve</code> 和 <code>reject</code>。</p>\n<h4 id=\"示例-63\"><a href=\"#示例-63\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const myPromise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 模拟异步操作\n  setTimeout(() &#x3D;&gt; &#123;\n    const success &#x3D; true; &#x2F;&#x2F; 模拟成功或失败\n    if (success) &#123;\n      resolve(&quot;Operation succeeded!&quot;); &#x2F;&#x2F; 调用 resolve\n    &#125; else &#123;\n      reject(&quot;Operation failed!&quot;); &#x2F;&#x2F; 调用 reject\n    &#125;\n  &#125;, 1000);\n&#125;);</code></pre>\n\n<h3 id=\"3-Promise-的使用\"><a href=\"#3-Promise-的使用\" class=\"headerlink\" title=\"3. Promise 的使用\"></a>3. Promise 的使用</h3><h4 id=\"3-1-then-方法\"><a href=\"#3-1-then-方法\" class=\"headerlink\" title=\"3.1. then() 方法\"></a>3.1. <code>then()</code> 方法</h4><p><code>then()</code> 方法用于处理 Promise 的成功结果。它接受两个参数：第一个是处理成功结果的回调函数，第二个是处理失败结果的回调函数（可选）。</p>\n<h4 id=\"示例-64\"><a href=\"#示例-64\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result); &#x2F;&#x2F; 输出: Operation succeeded!\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error); &#x2F;&#x2F; 处理错误\n  &#125;);</code></pre>\n\n<h4 id=\"3-2-catch-方法\"><a href=\"#3-2-catch-方法\" class=\"headerlink\" title=\"3.2. catch() 方法\"></a>3.2. <code>catch()</code> 方法</h4><p><code>catch()</code> 方法用于处理 Promise 的拒绝结果，通常用于捕获错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error); &#x2F;&#x2F; 输出: Operation failed!\n  &#125;);</code></pre>\n\n<h4 id=\"3-3-finally-方法\"><a href=\"#3-3-finally-方法\" class=\"headerlink\" title=\"3.3. finally() 方法\"></a>3.3. <code>finally()</code> 方法</h4><p><code>finally()</code> 方法用于在 Promise 完成后执行某个操作，无论是成功还是失败。它不接受参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error);\n  &#125;)\n  .finally(() &#x3D;&gt; &#123;\n    console.log(&quot;Promise has been settled.&quot;); &#x2F;&#x2F; 无论成功或失败都会执行\n  &#125;);</code></pre>\n\n<h3 id=\"4-Promise-的链式调用\"><a href=\"#4-Promise-的链式调用\" class=\"headerlink\" title=\"4. Promise 的链式调用\"></a>4. Promise 的链式调用</h3><p>Promise 支持链式调用，可以通过返回新的 Promise 来实现多个异步操作的顺序执行。</p>\n<h4 id=\"示例-65\"><a href=\"#示例-65\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fetchData &#x3D; () &#x3D;&gt; &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&quot;Data fetched&quot;);\n    &#125;, 1000);\n  &#125;);\n&#125;;\n\nfetchData()\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data); &#x2F;&#x2F; 输出: Data fetched\n    return &quot;Next step&quot;; &#x2F;&#x2F; 返回新的值\n  &#125;)\n  .then((nextData) &#x3D;&gt; &#123;\n    console.log(nextData); &#x2F;&#x2F; 输出: Next step\n  &#125;);</code></pre>\n\n<h3 id=\"5-Promise-的静态方法\"><a href=\"#5-Promise-的静态方法\" class=\"headerlink\" title=\"5. Promise 的静态方法\"></a>5. Promise 的静态方法</h3><ul>\n<li>**<code>Promise.all()</code>**：接受一个 Promise 数组，返回一个新的 Promise，只有当所有 Promise 都成功时才会成功。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; Promise.resolve(3);\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;foo&quot;));\nconst promise3 &#x3D; 42;\n\nPromise.all([promise1, promise2, promise3]).then((values) &#x3D;&gt; &#123;\n  console.log(values); &#x2F;&#x2F; 输出: [3, &#39;foo&#39;, 42]\n&#125;);</code></pre>\n\n<ul>\n<li>**<code>Promise.race()</code>**：接受一个 Promise 数组，返回一个新的 Promise，一旦其中一个 Promise 完成或拒绝，就返回该 Promise 的结果。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;one&quot;));\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 500, &quot;two&quot;));\n\nPromise.race([promise1, promise2]).then((value) &#x3D;&gt; &#123;\n  console.log(value); &#x2F;&#x2F; 输出: &#39;two&#39;\n&#125;);</code></pre>\n\n<h3 id=\"6-总结-9\"><a href=\"#6-总结-9\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><ul>\n<li><strong>Promise</strong> 是处理异步操作的强大工具，提供了更清晰的语法和结构，避免了回调地狱。</li>\n<li><strong>状态</strong>：Promise 有三种状态：<code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code>。</li>\n<li><strong>方法</strong>：使用 <code>then()</code>、<code>catch()</code> 和 <code>finally()</code> 方法处理结果和错误。</li>\n<li><strong>链式调用</strong>：支持链式调用，可以顺序执行多个异步操作。</li>\n<li><strong>静态方法</strong>：提供了 <code>Promise.all()</code> 和 <code>Promise.race()</code> 等静态方法，方便处理多个 Promise。</li>\n</ul>\n<p>理解 Promise 的概念和用法是掌握 JavaScript 异步编程的重要基础，有助于编写更高效和可维护的代码。</p>\n<h2 id=\"Promise-的基本用法\"><a href=\"#Promise-的基本用法\" class=\"headerlink\" title=\"Promise 的基本用法\"></a>Promise 的基本用法</h2><p><code>Promise</code> 是 JavaScript 中用于处理异步操作的对象。它提供了一种更清晰的方式来处理异步代码，避免了回调地狱的问题。以下是 <code>Promise</code> 的基本用法，包括创建、使用和处理 Promise 的结果。</p>\n<h3 id=\"1-创建-Promise\"><a href=\"#1-创建-Promise\" class=\"headerlink\" title=\"1. 创建 Promise\"></a>1. 创建 Promise</h3><p>使用 <code>Promise</code> 构造函数可以创建一个新的 Promise 对象。构造函数接受一个执行器函数（executor），该函数有两个参数：<code>resolve</code> 和 <code>reject</code>。</p>\n<h4 id=\"示例-66\"><a href=\"#示例-66\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const myPromise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 模拟异步操作\n  setTimeout(() &#x3D;&gt; &#123;\n    const success &#x3D; true; &#x2F;&#x2F; 模拟成功或失败\n    if (success) &#123;\n      resolve(&quot;Operation succeeded!&quot;); &#x2F;&#x2F; 调用 resolve\n    &#125; else &#123;\n      reject(&quot;Operation failed!&quot;); &#x2F;&#x2F; 调用 reject\n    &#125;\n  &#125;, 1000);\n&#125;);</code></pre>\n\n<h3 id=\"2-使用-Promise\"><a href=\"#2-使用-Promise\" class=\"headerlink\" title=\"2. 使用 Promise\"></a>2. 使用 Promise</h3><h4 id=\"2-1-then-方法\"><a href=\"#2-1-then-方法\" class=\"headerlink\" title=\"2.1. then() 方法\"></a>2.1. <code>then()</code> 方法</h4><p><code>then()</code> 方法用于处理 Promise 的成功结果。它接受两个参数：第一个是处理成功结果的回调函数，第二个是处理失败结果的回调函数（可选）。</p>\n<h4 id=\"示例-67\"><a href=\"#示例-67\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result); &#x2F;&#x2F; 输出: Operation succeeded!\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error); &#x2F;&#x2F; 处理错误\n  &#125;);</code></pre>\n\n<h4 id=\"2-2-catch-方法\"><a href=\"#2-2-catch-方法\" class=\"headerlink\" title=\"2.2. catch() 方法\"></a>2.2. <code>catch()</code> 方法</h4><p><code>catch()</code> 方法用于处理 Promise 的拒绝结果，通常用于捕获错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error); &#x2F;&#x2F; 输出: Operation failed!\n  &#125;);</code></pre>\n\n<h4 id=\"2-3-finally-方法\"><a href=\"#2-3-finally-方法\" class=\"headerlink\" title=\"2.3. finally() 方法\"></a>2.3. <code>finally()</code> 方法</h4><p><code>finally()</code> 方法用于在 Promise 完成后执行某个操作，无论是成功还是失败。它不接受参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">myPromise\n  .then((result) &#x3D;&gt; &#123;\n    console.log(result);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(error);\n  &#125;)\n  .finally(() &#x3D;&gt; &#123;\n    console.log(&quot;Promise has been settled.&quot;); &#x2F;&#x2F; 无论成功或失败都会执行\n  &#125;);</code></pre>\n\n<h3 id=\"3-Promise-的链式调用\"><a href=\"#3-Promise-的链式调用\" class=\"headerlink\" title=\"3. Promise 的链式调用\"></a>3. Promise 的链式调用</h3><p>Promise 支持链式调用，可以通过返回新的 Promise 来实现多个异步操作的顺序执行。</p>\n<h4 id=\"示例-68\"><a href=\"#示例-68\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fetchData &#x3D; () &#x3D;&gt; &#123;\n  return new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n      resolve(&quot;Data fetched&quot;);\n    &#125;, 1000);\n  &#125;);\n&#125;;\n\nfetchData()\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data); &#x2F;&#x2F; 输出: Data fetched\n    return &quot;Next step&quot;; &#x2F;&#x2F; 返回新的值\n  &#125;)\n  .then((nextData) &#x3D;&gt; &#123;\n    console.log(nextData); &#x2F;&#x2F; 输出: Next step\n  &#125;);</code></pre>\n\n<h3 id=\"4-Promise-的静态方法\"><a href=\"#4-Promise-的静态方法\" class=\"headerlink\" title=\"4. Promise 的静态方法\"></a>4. Promise 的静态方法</h3><ul>\n<li>**<code>Promise.all()</code>**：接受一个 Promise 数组，返回一个新的 Promise，只有当所有 Promise 都成功时才会成功。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; Promise.resolve(3);\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;foo&quot;));\nconst promise3 &#x3D; 42;\n\nPromise.all([promise1, promise2, promise3]).then((values) &#x3D;&gt; &#123;\n  console.log(values); &#x2F;&#x2F; 输出: [3, &#39;foo&#39;, 42]\n&#125;);</code></pre>\n\n<ul>\n<li>**<code>Promise.race()</code>**：接受一个 Promise 数组，返回一个新的 Promise，一旦其中一个 Promise 完成或拒绝，就返回该 Promise 的结果。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;one&quot;));\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 500, &quot;two&quot;));\n\nPromise.race([promise1, promise2]).then((value) &#x3D;&gt; &#123;\n  console.log(value); &#x2F;&#x2F; 输出: &#39;two&#39;\n&#125;);</code></pre>\n\n<h3 id=\"5-总结-15\"><a href=\"#5-总结-15\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><strong>Promise</strong> 是处理异步操作的强大工具，提供了更清晰的语法和结构，避免了回调地狱。</li>\n<li><strong>状态</strong>：Promise 有三种状态：<code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code>。</li>\n<li><strong>方法</strong>：使用 <code>then()</code>、<code>catch()</code> 和 <code>finally()</code> 方法处理结果和错误。</li>\n<li><strong>链式调用</strong>：支持链式调用，可以顺序执行多个异步操作。</li>\n<li><strong>静态方法</strong>：提供了 <code>Promise.all()</code> 和 <code>Promise.race()</code> 等静态方法，方便处理多个 Promise。</li>\n</ul>\n<p>理解 Promise 的基本用法是掌握 JavaScript 异步编程的重要基础，有助于编写更高效和可维护的代码。</p>\n<h2 id=\"Promise-解决了什么问题\"><a href=\"#Promise-解决了什么问题\" class=\"headerlink\" title=\"Promise 解决了什么问题\"></a>Promise 解决了什么问题</h2><p><code>Promise</code> 是 JavaScript 中用于处理异步操作的重要工具，它解决了许多传统异步编程方式（如回调函数）所面临的问题。以下是 <code>Promise</code> 解决的一些主要问题：</p>\n<h3 id=\"1-回调地狱（Callback-Hell）\"><a href=\"#1-回调地狱（Callback-Hell）\" class=\"headerlink\" title=\"1. 回调地狱（Callback Hell）\"></a>1. 回调地狱（Callback Hell）</h3><p>在使用回调函数处理异步操作时，嵌套的回调会导致代码变得难以阅读和维护，形成所谓的“回调地狱”。这种情况通常发生在多个异步操作依赖于彼此的结果时。</p>\n<h4 id=\"示例（回调地狱）\"><a href=\"#示例（回调地狱）\" class=\"headerlink\" title=\"示例（回调地狱）\"></a>示例（回调地狱）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getData(function (result) &#123;\n  processData(result, function (processed) &#123;\n    saveData(processed, function (saved) &#123;\n      console.log(&quot;Data saved:&quot;, saved);\n    &#125;);\n  &#125;);\n&#125;);</code></pre>\n\n<h4 id=\"使用-Promise-解决\"><a href=\"#使用-Promise-解决\" class=\"headerlink\" title=\"使用 Promise 解决\"></a>使用 Promise 解决</h4><p>使用 <code>Promise</code> 可以将异步操作链式调用，从而避免嵌套。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getData()\n  .then(processData)\n  .then(saveData)\n  .then((saved) &#x3D;&gt; &#123;\n    console.log(&quot;Data saved:&quot;, saved);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"2-更清晰的错误处理\"><a href=\"#2-更清晰的错误处理\" class=\"headerlink\" title=\"2. 更清晰的错误处理\"></a>2. 更清晰的错误处理</h3><p>在传统的回调方式中，错误处理通常需要在每个回调中进行，导致代码重复且难以维护。<code>Promise</code> 提供了统一的错误处理机制，可以通过 <code>.catch()</code> 方法集中处理错误。</p>\n<h4 id=\"示例（错误处理）\"><a href=\"#示例（错误处理）\" class=\"headerlink\" title=\"示例（错误处理）\"></a>示例（错误处理）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">getData()\n  .then(processData)\n  .then(saveData)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Error:&quot;, error); &#x2F;&#x2F; 统一处理错误\n  &#125;);</code></pre>\n\n<h3 id=\"3-状态管理\"><a href=\"#3-状态管理\" class=\"headerlink\" title=\"3. 状态管理\"></a>3. 状态管理</h3><p><code>Promise</code> 具有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已完成）和 <code>rejected</code>（已拒绝）。这种状态管理使得开发者可以更清晰地了解异步操作的进展，并在适当的时候处理结果或错误。</p>\n<h3 id=\"4-组合异步操作\"><a href=\"#4-组合异步操作\" class=\"headerlink\" title=\"4. 组合异步操作\"></a>4. 组合异步操作</h3><p><code>Promise</code> 提供了静态方法，如 <code>Promise.all()</code> 和 <code>Promise.race()</code>，使得处理多个异步操作变得更加简单和直观。</p>\n<ul>\n<li>**<code>Promise.all()</code>**：可以并行执行多个 Promise，只有当所有 Promise 都成功时才会成功。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.all([promise1, promise2])\n  .then((results) &#x3D;&gt; &#123;\n    console.log(&quot;All results:&quot;, results);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;One of the promises failed:&quot;, error);\n  &#125;);</code></pre>\n\n<ul>\n<li>**<code>Promise.race()</code>**：可以在多个 Promise 中，返回第一个完成的 Promise 的结果。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Promise.race([promise1, promise2]).then((result) &#x3D;&gt; &#123;\n  console.log(&quot;First completed:&quot;, result);\n&#125;);</code></pre>\n\n<h3 id=\"5-更好的可读性和可维护性\"><a href=\"#5-更好的可读性和可维护性\" class=\"headerlink\" title=\"5. 更好的可读性和可维护性\"></a>5. 更好的可读性和可维护性</h3><p>由于 <code>Promise</code> 允许链式调用和集中处理错误，代码的可读性和可维护性得到了显著提升。开发者可以更容易地理解异步操作的流程。</p>\n<h3 id=\"6-与-async-await-的结合\"><a href=\"#6-与-async-await-的结合\" class=\"headerlink\" title=\"6. 与 async/await 的结合\"></a>6. 与 <code>async/await</code> 的结合</h3><p><code>Promise</code> 与 <code>async/await</code> 语法结合使用，使得异步代码看起来更像同步代码，进一步提高了代码的可读性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const data &#x3D; await getData();\n    const processed &#x3D; await processData(data);\n    await saveData(processed);\n    console.log(&quot;Data saved successfully&quot;);\n  &#125; catch (error) &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"7-总结-7\"><a href=\"#7-总结-7\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p><code>Promise</code> 解决了许多传统异步编程方式所面临的问题，包括回调地狱、错误处理的复杂性、状态管理、组合异步操作的便利性以及代码的可读性和可维护性。通过使用 <code>Promise</code>，开发者可以更高效地处理异步操作，编写出更清晰和易于维护的代码。</p>\n<h2 id=\"Promise-all-和-Promise-race-的区别的使用场景\"><a href=\"#Promise-all-和-Promise-race-的区别的使用场景\" class=\"headerlink\" title=\"Promise.all 和 Promise.race 的区别的使用场景\"></a>Promise.all 和 Promise.race 的区别的使用场景</h2><p><code>Promise.all</code> 和 <code>Promise.race</code> 是 JavaScript 中处理多个 Promise 的两个静态方法。它们的主要区别在于处理多个 Promise 的方式和返回结果的逻辑。以下是对这两个方法的详细比较以及它们的使用场景。</p>\n<h3 id=\"1-Promise-all\"><a href=\"#1-Promise-all\" class=\"headerlink\" title=\"1. Promise.all\"></a>1. <code>Promise.all</code></h3><h4 id=\"定义-14\"><a href=\"#定义-14\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>Promise.all</code> 接受一个可迭代对象（通常是数组），并返回一个新的 Promise。这个新的 Promise 只有在所有输入的 Promise 都成功时才会成功，并返回一个包含所有成功结果的数组。如果其中任何一个 Promise 失败，则返回的 Promise 会立即被拒绝，并返回第一个失败的错误。</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li><strong>并行执行多个异步操作</strong>：当你需要同时执行多个异步操作，并在所有操作完成后处理结果时，使用 <code>Promise.all</code>。</li>\n<li><strong>需要所有结果</strong>：当你需要所有 Promise 的结果，并且只有在所有 Promise 都成功时才继续执行后续操作。</li>\n</ul>\n<h4 id=\"示例-69\"><a href=\"#示例-69\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; Promise.resolve(3);\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;foo&quot;));\nconst promise3 &#x3D; 42;\n\nPromise.all([promise1, promise2, promise3])\n  .then((values) &#x3D;&gt; &#123;\n    console.log(values); &#x2F;&#x2F; 输出: [3, &#39;foo&#39;, 42]\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;One of the promises failed:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"2-Promise-race\"><a href=\"#2-Promise-race\" class=\"headerlink\" title=\"2. Promise.race\"></a>2. <code>Promise.race</code></h3><h4 id=\"定义-15\"><a href=\"#定义-15\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>Promise.race</code> 也接受一个可迭代对象（通常是数组），并返回一个新的 Promise。这个新的 Promise 一旦有任何一个输入的 Promise 完成（无论是成功还是失败），就会立即返回该 Promise 的结果。</p>\n<h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li><strong>竞争条件</strong>：当你有多个异步操作，但只关心第一个完成的操作时，使用 <code>Promise.race</code>。</li>\n<li><strong>超时处理</strong>：可以用来实现超时机制，例如，如果某个操作在一定时间内没有完成，则返回一个超时的 Promise。</li>\n</ul>\n<h4 id=\"示例-70\"><a href=\"#示例-70\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const promise1 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 1000, &quot;one&quot;));\nconst promise2 &#x3D; new Promise((resolve) &#x3D;&gt; setTimeout(resolve, 500, &quot;two&quot;));\n\nPromise.race([promise1, promise2])\n  .then((value) &#x3D;&gt; &#123;\n    console.log(value); &#x2F;&#x2F; 输出: &#39;two&#39; (因为 promise2 更快完成)\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;One of the promises failed:&quot;, error);\n  &#125;);</code></pre>\n\n<h3 id=\"3-主要区别总结-1\"><a href=\"#3-主要区别总结-1\" class=\"headerlink\" title=\"3. 主要区别总结\"></a>3. 主要区别总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>Promise.all</code></th>\n<th><code>Promise.race</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>返回值</strong></td>\n<td>只有在所有 Promise 都成功时才成功</td>\n<td>只要有一个 Promise 完成就返回结果</td>\n</tr>\n<tr>\n<td><strong>失败处理</strong></td>\n<td>只要有一个 Promise 失败就立即拒绝</td>\n<td>只要有一个 Promise 完成（成功或失败）就返回</td>\n</tr>\n<tr>\n<td><strong>使用场景</strong></td>\n<td>需要所有结果，且所有操作必须成功</td>\n<td>只关心第一个完成的操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-14\"><a href=\"#4-总结-14\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li>使用 <code>Promise.all</code> 当你需要并行执行多个异步操作，并在所有操作完成后处理结果时。</li>\n<li>使用 <code>Promise.race</code> 当你只关心第一个完成的操作，或者需要实现超时机制时。</li>\n</ul>\n<p>理解这两个方法的区别和适用场景可以帮助开发者更有效地处理多个异步操作，提高代码的可读性和可维护性。</p>\n<h2 id=\"对-async-x2F-await-的理解\"><a href=\"#对-async-x2F-await-的理解\" class=\"headerlink\" title=\"对 async&#x2F;await 的理解\"></a>对 async&#x2F;await 的理解</h2><p><code>async/await</code> 是 JavaScript 中用于处理异步操作的语法糖，基于 <code>Promise</code> 实现。它使得异步代码的编写和阅读更加直观，像同步代码一样。以下是对 <code>async/await</code> 的详细理解。</p>\n<h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h3><ul>\n<li><p><strong><code>async</code> 关键字</strong>：用于定义一个异步函数。异步函数总是返回一个 Promise。如果函数内部返回一个值，该值会被自动包装成一个已解决的 Promise；如果抛出一个错误，则返回一个被拒绝的 Promise。</p>\n</li>\n<li><p><strong><code>await</code> 关键字</strong>：用于等待一个 Promise 的完成。<code>await</code> 只能在 <code>async</code> 函数内部使用。它会暂停函数的执行，直到 Promise 完成，并返回结果。</p>\n</li>\n</ul>\n<h3 id=\"2-使用-async-await\"><a href=\"#2-使用-async-await\" class=\"headerlink\" title=\"2. 使用 async/await\"></a>2. 使用 <code>async/await</code></h3><h4 id=\"2-1-定义异步函数\"><a href=\"#2-1-定义异步函数\" class=\"headerlink\" title=\"2.1. 定义异步函数\"></a>2.1. 定义异步函数</h4><p>使用 <code>async</code> 关键字定义一个异步函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  &#x2F;&#x2F; 这里可以使用 await\n&#125;</code></pre>\n\n<h4 id=\"2-2-使用-await\"><a href=\"#2-2-使用-await\" class=\"headerlink\" title=\"2.2. 使用 await\"></a>2.2. 使用 <code>await</code></h4><p>在异步函数内部，可以使用 <code>await</code> 来等待 Promise 的结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n  const data &#x3D; await response.json();\n  return data; &#x2F;&#x2F; 返回一个 Promise\n&#125;</code></pre>\n\n<h4 id=\"2-3-调用异步函数\"><a href=\"#2-3-调用异步函数\" class=\"headerlink\" title=\"2.3. 调用异步函数\"></a>2.3. 调用异步函数</h4><p>调用异步函数时，可以使用 <code>then()</code> 方法处理返回的 Promise，或者使用 <code>await</code> 来获取结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 使用 then()\nfetchData().then((data) &#x3D;&gt; &#123;\n  console.log(data);\n&#125;);\n\n&#x2F;&#x2F; 使用 await\n(async () &#x3D;&gt; &#123;\n  const data &#x3D; await fetchData();\n  console.log(data);\n&#125;)();</code></pre>\n\n<h3 id=\"3-错误处理\"><a href=\"#3-错误处理\" class=\"headerlink\" title=\"3. 错误处理\"></a>3. 错误处理</h3><p>使用 <code>try/catch</code> 语句可以捕获异步函数中的错误，提供了更清晰的错误处理方式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    const data &#x3D; await response.json();\n    return data;\n  &#125; catch (error) &#123;\n    console.error(&quot;Fetch error:&quot;, error);\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"4-优势\"><a href=\"#4-优势\" class=\"headerlink\" title=\"4. 优势\"></a>4. 优势</h3><ul>\n<li><strong>可读性</strong>：<code>async/await</code> 使得异步代码看起来更像同步代码，易于理解和维护。</li>\n<li><strong>简化错误处理</strong>：通过 <code>try/catch</code> 语句，可以更方便地处理错误。</li>\n<li><strong>避免回调地狱</strong>：使用 <code>async/await</code> 可以避免嵌套的回调函数，使代码结构更清晰。</li>\n</ul>\n<h3 id=\"5-注意事项-3\"><a href=\"#5-注意事项-3\" class=\"headerlink\" title=\"5. 注意事项\"></a>5. 注意事项</h3><ul>\n<li>**只能在 <code>async</code> 函数中使用 <code>await</code>**：<code>await</code> 关键字只能在异步函数内部使用，不能在普通函数或全局作用域中使用。</li>\n<li><strong>Promise 的返回值</strong>：<code>async</code> 函数总是返回一个 Promise，因此可以使用 <code>.then()</code> 和 <code>.catch()</code> 方法处理结果和错误。</li>\n<li><strong>并行执行</strong>：如果需要并行执行多个异步操作，可以使用 <code>Promise.all()</code>。</li>\n</ul>\n<h3 id=\"6-示例\"><a href=\"#6-示例\" class=\"headerlink\" title=\"6. 示例\"></a>6. 示例</h3><p>以下是一个完整的示例，展示了如何使用 <code>async/await</code> 进行异步操作：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    const data &#x3D; await response.json();\n    return data;\n  &#125; catch (error) &#123;\n    console.error(&quot;Fetch error:&quot;, error);\n  &#125;\n&#125;\n\n(async () &#x3D;&gt; &#123;\n  const data &#x3D; await fetchData();\n  console.log(data);\n&#125;)();</code></pre>\n\n<h3 id=\"7-总结-8\"><a href=\"#7-总结-8\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><p><code>async/await</code> 是 JavaScript 中处理异步操作的强大工具，它使得异步代码的编写和阅读更加直观，提供了更清晰的错误处理方式。通过使用 <code>async/await</code>，开发者可以编写出更易于理解和维护的异步代码，提升代码的可读性和可维护性。</p>\n<h2 id=\"await-到底在等什么？\"><a href=\"#await-到底在等什么？\" class=\"headerlink\" title=\"await 到底在等什么？\"></a>await 到底在等什么？</h2><p>在 JavaScript 中，<code>await</code> 是一个关键字，用于暂停异步函数的执行，直到一个 Promise 完成（即变为 <code>fulfilled</code> 或 <code>rejected</code>）。具体来说，<code>await</code> 会等待以下几种情况：</p>\n<h3 id=\"1-等待-Promise\"><a href=\"#1-等待-Promise\" class=\"headerlink\" title=\"1. 等待 Promise\"></a>1. 等待 Promise</h3><p><code>await</code> 通常用于等待一个 Promise 对象的完成。它会暂停当前 <code>async</code> 函数的执行，直到 Promise 被解决（fulfilled）或拒绝（rejected）。</p>\n<h4 id=\"示例-71\"><a href=\"#示例-71\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;); &#x2F;&#x2F; 等待 fetch 返回的 Promise\n  const data &#x3D; await response.json(); &#x2F;&#x2F; 等待 response.json() 返回的 Promise\n  return data;\n&#125;\n\nfetchData().then((data) &#x3D;&gt; &#123;\n  console.log(data);\n&#125;);</code></pre>\n\n<p>在这个例子中，<code>await fetch(...)</code> 会等待 <code>fetch</code> 函数返回的 Promise 完成，只有在 Promise 完成后，才会继续执行下一行代码。</p>\n<h3 id=\"2-等待-Promise-的结果\"><a href=\"#2-等待-Promise-的结果\" class=\"headerlink\" title=\"2. 等待 Promise 的结果\"></a>2. 等待 Promise 的结果</h3><p>当 <code>await</code> 等待的 Promise 被解决时，它会返回 Promise 的结果。如果 Promise 被拒绝，<code>await</code> 会抛出错误，可以通过 <code>try/catch</code> 语句捕获。</p>\n<h4 id=\"示例-72\"><a href=\"#示例-72\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    const data &#x3D; await response.json();\n    return data;\n  &#125; catch (error) &#123;\n    console.error(&quot;Fetch error:&quot;, error);\n  &#125;\n&#125;</code></pre>\n\n<p>在这个例子中，如果 <code>fetch</code> 返回的 Promise 被拒绝，<code>await</code> 会抛出错误，进入 <code>catch</code> 块进行错误处理。</p>\n<h3 id=\"3-等待非-Promise-值\"><a href=\"#3-等待非-Promise-值\" class=\"headerlink\" title=\"3. 等待非 Promise 值\"></a>3. 等待非 Promise 值</h3><p>如果 <code>await</code> 后面跟的是一个非 Promise 值，JavaScript 会将其包装成一个已解决的 Promise，并立即返回该值。这意味着 <code>await</code> 也可以用于同步值。</p>\n<h4 id=\"示例-73\"><a href=\"#示例-73\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function example() &#123;\n  const result &#x3D; await 42; &#x2F;&#x2F; 42 会被包装成一个已解决的 Promise\n  console.log(result); &#x2F;&#x2F; 输出: 42\n&#125;\n\nexample();</code></pre>\n\n<p>在这个例子中，<code>await 42</code> 会立即返回 42，因为它不是一个 Promise。</p>\n<h3 id=\"4-总结-15\"><a href=\"#4-总结-15\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong><code>await</code> 等待的是一个 Promise</strong>：它会暂停 <code>async</code> 函数的执行，直到 Promise 完成。</li>\n<li><strong>返回 Promise 的结果</strong>：如果 Promise 被解决，<code>await</code> 返回其结果；如果被拒绝，<code>await</code> 抛出错误。</li>\n<li><strong>可以等待非 Promise 值</strong>：如果 <code>await</code> 后面是一个非 Promise 值，它会被包装成一个已解决的 Promise。</li>\n</ul>\n<p>理解 <code>await</code> 的工作原理有助于更好地使用 <code>async/await</code> 语法编写异步代码，使得代码更易于理解和维护。</p>\n<h2 id=\"async-x2F-await-的优势\"><a href=\"#async-x2F-await-的优势\" class=\"headerlink\" title=\"async&#x2F;await 的优势\"></a>async&#x2F;await 的优势</h2><p><code>async/await</code> 是 JavaScript 中处理异步操作的一种语法糖，基于 <code>Promise</code> 实现。它提供了一种更直观和易于理解的方式来编写异步代码。以下是 <code>async/await</code> 的主要优势：</p>\n<h3 id=\"1-更好的可读性\"><a href=\"#1-更好的可读性\" class=\"headerlink\" title=\"1. 更好的可读性\"></a>1. 更好的可读性</h3><ul>\n<li><strong>接近同步代码</strong>：<code>async/await</code> 使得异步代码的结构看起来更像同步代码，减少了回调函数的嵌套，使得代码更易于阅读和理解。</li>\n</ul>\n<h4 id=\"示例-74\"><a href=\"#示例-74\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n  const data &#x3D; await response.json();\n  return data;\n&#125;</code></pre>\n\n<p>与传统的 Promise 链式调用相比，<code>async/await</code> 使得代码更简洁。</p>\n<h3 id=\"2-简化错误处理\"><a href=\"#2-简化错误处理\" class=\"headerlink\" title=\"2. 简化错误处理\"></a>2. 简化错误处理</h3><ul>\n<li>**使用 <code>try/catch</code>**：<code>async/await</code> 允许使用 <code>try/catch</code> 语句来捕获错误，这使得错误处理更加直观和集中。</li>\n</ul>\n<h4 id=\"示例-75\"><a href=\"#示例-75\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    const data &#x3D; await response.json();\n    return data;\n  &#125; catch (error) &#123;\n    console.error(&quot;Fetch error:&quot;, error);\n  &#125;\n&#125;</code></pre>\n\n<p>这种方式比使用 <code>.catch()</code> 方法处理错误更清晰。</p>\n<h3 id=\"3-避免回调地狱\"><a href=\"#3-避免回调地狱\" class=\"headerlink\" title=\"3. 避免回调地狱\"></a>3. 避免回调地狱</h3><ul>\n<li><strong>减少嵌套</strong>：使用 <code>async/await</code> 可以避免回调地狱（callback hell），使得代码结构更加扁平化，易于维护。</li>\n</ul>\n<h4 id=\"示例-76\"><a href=\"#示例-76\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function processData() &#123;\n  const data &#x3D; await fetchData();\n  const processed &#x3D; await process(data);\n  await save(processed);\n  console.log(&quot;Data saved successfully&quot;);\n&#125;</code></pre>\n\n<p>与传统的回调方式相比，<code>async/await</code> 使得代码更易于跟踪和理解。</p>\n<h3 id=\"4-组合多个异步操作\"><a href=\"#4-组合多个异步操作\" class=\"headerlink\" title=\"4. 组合多个异步操作\"></a>4. 组合多个异步操作</h3><ul>\n<li><strong>并行执行</strong>：虽然 <code>async/await</code> 本身是顺序执行的，但可以结合 <code>Promise.all()</code> 来并行执行多个异步操作。</li>\n</ul>\n<h4 id=\"示例-77\"><a href=\"#示例-77\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchAllData() &#123;\n  const [data1, data2] &#x3D; await Promise.all([fetchData1(), fetchData2()]);\n  console.log(data1, data2);\n&#125;</code></pre>\n\n<p>这种方式使得多个异步操作可以同时进行，提高了效率。</p>\n<h3 id=\"5-更好的调试体验\"><a href=\"#5-更好的调试体验\" class=\"headerlink\" title=\"5. 更好的调试体验\"></a>5. 更好的调试体验</h3><ul>\n<li><strong>栈跟踪</strong>：使用 <code>async/await</code> 时，错误的栈跟踪信息通常更清晰，便于调试。因为错误会在 <code>await</code> 语句处抛出，而不是在 Promise 链的某个地方。</li>\n</ul>\n<h3 id=\"6-兼容性\"><a href=\"#6-兼容性\" class=\"headerlink\" title=\"6. 兼容性\"></a>6. 兼容性</h3><ul>\n<li><strong>广泛支持</strong>：<code>async/await</code> 是 ES2017（ES8）引入的特性，现代浏览器和 Node.js 都广泛支持这一特性，使得开发者可以放心使用。</li>\n</ul>\n<h3 id=\"7-代码结构清晰\"><a href=\"#7-代码结构清晰\" class=\"headerlink\" title=\"7. 代码结构清晰\"></a>7. 代码结构清晰</h3><ul>\n<li><strong>逻辑顺序</strong>：<code>async/await</code> 使得异步操作的逻辑顺序更加清晰，开发者可以按照自然的顺序编写代码，而不必担心回调的嵌套。</li>\n</ul>\n<h3 id=\"8-总结-2\"><a href=\"#8-总结-2\" class=\"headerlink\" title=\"8. 总结\"></a>8. 总结</h3><p><code>async/await</code> 提供了更好的可读性、简化的错误处理、避免回调地狱、并行执行多个异步操作的能力，以及更好的调试体验。这些优势使得 <code>async/await</code> 成为现代 JavaScript 开发中处理异步操作的首选方式。理解和掌握 <code>async/await</code> 的使用，可以帮助开发者编写出更清晰、可维护和高效的代码。</p>\n<h2 id=\"async-x2F-await-对比-Promise-的优势\"><a href=\"#async-x2F-await-对比-Promise-的优势\" class=\"headerlink\" title=\"async&#x2F;await 对比 Promise 的优势\"></a>async&#x2F;await 对比 Promise 的优势</h2><p><code>async/await</code> 是基于 <code>Promise</code> 的语法糖，旨在使异步编程更加直观和易于理解。虽然 <code>Promise</code> 本身已经提供了强大的异步处理能力，但 <code>async/await</code> 在多个方面相较于 <code>Promise</code> 具有明显的优势。以下是 <code>async/await</code> 对比 <code>Promise</code> 的主要优势：</p>\n<h3 id=\"1-更好的可读性-1\"><a href=\"#1-更好的可读性-1\" class=\"headerlink\" title=\"1. 更好的可读性\"></a>1. 更好的可读性</h3><ul>\n<li><strong>接近同步代码</strong>：<code>async/await</code> 使得异步代码的结构看起来更像同步代码，减少了嵌套，使得代码更易于阅读和理解。</li>\n</ul>\n<h4 id=\"示例-78\"><a href=\"#示例-78\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><strong>使用 Promise</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    return response.json();\n  &#125;)\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;);</code></pre>\n\n<p><strong>使用 async&#x2F;await</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    const data &#x3D; await response.json();\n    console.log(data);\n  &#125; catch (error) &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;\n&#125;\n\nfetchData();</code></pre>\n\n<h3 id=\"2-简化错误处理-1\"><a href=\"#2-简化错误处理-1\" class=\"headerlink\" title=\"2. 简化错误处理\"></a>2. 简化错误处理</h3><ul>\n<li>**使用 <code>try/catch</code>**：<code>async/await</code> 允许使用 <code>try/catch</code> 语句来捕获错误，这使得错误处理更加直观和集中。</li>\n</ul>\n<h4 id=\"示例-79\"><a href=\"#示例-79\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><strong>使用 Promise</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    return response.json();\n  &#125;)\n  .then((data) &#x3D;&gt; &#123;\n    console.log(data);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;);</code></pre>\n\n<p><strong>使用 async&#x2F;await</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    if (!response.ok) &#123;\n      throw new Error(&quot;Network response was not ok&quot;);\n    &#125;\n    const data &#x3D; await response.json();\n    console.log(data);\n  &#125; catch (error) &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;\n&#125;\n\nfetchData();</code></pre>\n\n<h3 id=\"3-避免回调地狱-1\"><a href=\"#3-避免回调地狱-1\" class=\"headerlink\" title=\"3. 避免回调地狱\"></a>3. 避免回调地狱</h3><ul>\n<li><strong>减少嵌套</strong>：使用 <code>async/await</code> 可以避免回调地狱（callback hell），使得代码结构更加扁平化，易于维护。</li>\n</ul>\n<h4 id=\"示例-80\"><a href=\"#示例-80\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><strong>使用 Promise</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;)\n  .then((response) &#x3D;&gt; &#123;\n    return response.json();\n  &#125;)\n  .then((data) &#x3D;&gt; &#123;\n    return processData(data);\n  &#125;)\n  .then((processedData) &#x3D;&gt; &#123;\n    return saveData(processedData);\n  &#125;)\n  .then(() &#x3D;&gt; &#123;\n    console.log(&quot;Data saved successfully&quot;);\n  &#125;)\n  .catch((error) &#x3D;&gt; &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;);</code></pre>\n\n<p><strong>使用 async&#x2F;await</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function processAndSaveData() &#123;\n  try &#123;\n    const response &#x3D; await fetch(&quot;https:&#x2F;&#x2F;api.example.com&#x2F;data&quot;);\n    const data &#x3D; await response.json();\n    const processedData &#x3D; await processData(data);\n    await saveData(processedData);\n    console.log(&quot;Data saved successfully&quot;);\n  &#125; catch (error) &#123;\n    console.error(&quot;Error:&quot;, error);\n  &#125;\n&#125;\n\nprocessAndSaveData();</code></pre>\n\n<h3 id=\"4-更好的调试体验\"><a href=\"#4-更好的调试体验\" class=\"headerlink\" title=\"4. 更好的调试体验\"></a>4. 更好的调试体验</h3><ul>\n<li><strong>栈跟踪</strong>：使用 <code>async/await</code> 时，错误的栈跟踪信息通常更清晰，便于调试。因为错误会在 <code>await</code> 语句处抛出，而不是在 Promise 链的某个地方。</li>\n</ul>\n<h3 id=\"5-组合多个异步操作\"><a href=\"#5-组合多个异步操作\" class=\"headerlink\" title=\"5. 组合多个异步操作\"></a>5. 组合多个异步操作</h3><ul>\n<li><strong>并行执行</strong>：虽然 <code>async/await</code> 本身是顺序执行的，但可以结合 <code>Promise.all()</code> 来并行执行多个异步操作。</li>\n</ul>\n<h4 id=\"示例-81\"><a href=\"#示例-81\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">async function fetchAllData() &#123;\n  const [data1, data2] &#x3D; await Promise.all([fetchData1(), fetchData2()]);\n  console.log(data1, data2);\n&#125;</code></pre>\n\n<h3 id=\"6-代码结构清晰\"><a href=\"#6-代码结构清晰\" class=\"headerlink\" title=\"6. 代码结构清晰\"></a>6. 代码结构清晰</h3><ul>\n<li><strong>逻辑顺序</strong>：<code>async/await</code> 使得异步操作的逻辑顺序更加清晰，开发者可以按照自然的顺序编写代码，而不必担心回调的嵌套。</li>\n</ul>\n<h3 id=\"7-总结-9\"><a href=\"#7-总结-9\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><ul>\n<li><strong>可读性</strong>：<code>async/await</code> 使得异步代码更易于阅读，接近同步代码的风格。</li>\n<li><strong>错误处理</strong>：通过 <code>try/catch</code> 语句，错误处理变得更加直观。</li>\n<li><strong>避免回调地狱</strong>：减少了嵌套，使得代码结构更清晰。</li>\n<li><strong>调试体验</strong>：提供了更好的栈跟踪信息，便于调试。</li>\n<li><strong>组合异步操作</strong>：可以结合 <code>Promise.all()</code> 轻松处理多个异步操作。</li>\n</ul>\n<p>理解 <code>async/await</code> 的优势可以帮助开发者更有效地编写异步代码，提高代码的可读性和可维护性。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h2 id=\"对象创建的方式有哪些？\"><a href=\"#对象创建的方式有哪些？\" class=\"headerlink\" title=\"对象创建的方式有哪些？\"></a>对象创建的方式有哪些？</h2><p>在 JavaScript 中，有多种方式可以创建对象。每种方式都有其特定的用例和优缺点。以下是几种常见的对象创建方式：</p>\n<h3 id=\"1-对象字面量\"><a href=\"#1-对象字面量\" class=\"headerlink\" title=\"1. 对象字面量\"></a>1. 对象字面量</h3><p>这是创建对象最简单和最常用的方式。通过对象字面量，可以直接定义对象的属性和方法。</p>\n<h4 id=\"示例-82\"><a href=\"#示例-82\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const person &#x3D; &#123;\n  name: &quot;Alice&quot;,\n  age: 30,\n  greet: function () &#123;\n    console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n  &#125;,\n&#125;;\n\nperson.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"2-Object-构造函数\"><a href=\"#2-Object-构造函数\" class=\"headerlink\" title=\"2. Object 构造函数\"></a>2. <code>Object</code> 构造函数</h3><p>使用 <code>Object</code> 构造函数可以创建一个空对象，然后可以动态地添加属性和方法。</p>\n<h4 id=\"示例-83\"><a href=\"#示例-83\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const person &#x3D; new Object();\nperson.name &#x3D; &quot;Bob&quot;;\nperson.age &#x3D; 25;\nperson.greet &#x3D; function () &#123;\n  console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n&#125;;\n\nperson.greet(); &#x2F;&#x2F; 输出: Hello, my name is Bob</code></pre>\n\n<h3 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h3><p>通过定义构造函数，可以创建具有相同属性和方法的多个对象实例。构造函数通常与 <code>new</code> 关键字一起使用。</p>\n<h4 id=\"示例-84\"><a href=\"#示例-84\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Person(name, age) &#123;\n  this.name &#x3D; name;\n  this.age &#x3D; age;\n  this.greet &#x3D; function () &#123;\n    console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n  &#125;;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;, 30);\nconst bob &#x3D; new Person(&quot;Bob&quot;, 25);\n\nalice.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice\nbob.greet(); &#x2F;&#x2F; 输出: Hello, my name is Bob</code></pre>\n\n<h3 id=\"4-Object-create-方法\"><a href=\"#4-Object-create-方法\" class=\"headerlink\" title=\"4. Object.create() 方法\"></a>4. <code>Object.create()</code> 方法</h3><p><code>Object.create()</code> 方法可以创建一个新对象，并将其原型设置为指定的对象。这种方式适合用于实现对象的继承。</p>\n<h4 id=\"示例-85\"><a href=\"#示例-85\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const personPrototype &#x3D; &#123;\n  greet: function () &#123;\n    console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n  &#125;,\n&#125;;\n\nconst alice &#x3D; Object.create(personPrototype);\nalice.name &#x3D; &quot;Alice&quot;;\nalice.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"5-ES6-类（Class）\"><a href=\"#5-ES6-类（Class）\" class=\"headerlink\" title=\"5. ES6 类（Class）\"></a>5. ES6 类（Class）</h3><p>ES6 引入了类语法，使得定义对象的构造函数和方法更加直观。类实际上是构造函数的语法糖。</p>\n<h4 id=\"示例-86\"><a href=\"#示例-86\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Person &#123;\n  constructor(name, age) &#123;\n    this.name &#x3D; name;\n    this.age &#x3D; age;\n  &#125;\n\n  greet() &#123;\n    console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n  &#125;\n&#125;\n\nconst alice &#x3D; new Person(&quot;Alice&quot;, 30);\nalice.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"6-工厂函数\"><a href=\"#6-工厂函数\" class=\"headerlink\" title=\"6. 工厂函数\"></a>6. 工厂函数</h3><p>工厂函数是一种返回对象的普通函数。它不使用 <code>new</code> 关键字，而是直接返回一个对象。</p>\n<h4 id=\"示例-87\"><a href=\"#示例-87\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function createPerson(name, age) &#123;\n  return &#123;\n    name: name,\n    age: age,\n    greet: function () &#123;\n      console.log(&#96;Hello, my name is $&#123;this.name&#125;&#96;);\n    &#125;,\n  &#125;;\n&#125;\n\nconst alice &#x3D; createPerson(&quot;Alice&quot;, 30);\nalice.greet(); &#x2F;&#x2F; 输出: Hello, my name is Alice</code></pre>\n\n<h3 id=\"7-总结-10\"><a href=\"#7-总结-10\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><ul>\n<li><strong>对象字面量</strong>：简单直接，适合创建单个对象。</li>\n<li><strong><code>Object</code> 构造函数</strong>：灵活但不常用。</li>\n<li><strong>构造函数</strong>：适合创建多个具有相同属性和方法的对象实例。</li>\n<li>**<code>Object.create()</code>**：适合实现对象继承。</li>\n<li><strong>ES6 类</strong>：提供了更清晰的语法，适合面向对象编程。</li>\n<li><strong>工厂函数</strong>：灵活且不依赖 <code>new</code> 关键字，适合创建对象实例。</li>\n</ul>\n<p>理解这些对象创建方式可以帮助开发者根据不同的需求选择合适的方法来创建和管理对象。</p>\n<h2 id=\"对象继承的方式有哪些？\"><a href=\"#对象继承的方式有哪些？\" class=\"headerlink\" title=\"对象继承的方式有哪些？\"></a>对象继承的方式有哪些？</h2><p>在 JavaScript 中，对象继承是实现代码重用和组织的重要机制。JavaScript 提供了多种方式来实现对象继承。以下是几种常见的对象继承方式：</p>\n<h3 id=\"1-原型链继承\"><a href=\"#1-原型链继承\" class=\"headerlink\" title=\"1. 原型链继承\"></a>1. 原型链继承</h3><p>这是 JavaScript 中最基本的继承方式。通过将一个对象的原型设置为另一个对象的实例，实现继承。</p>\n<h4 id=\"示例-88\"><a href=\"#示例-88\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Animal(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nAnimal.prototype.speak &#x3D; function () &#123;\n  console.log(&#96;$&#123;this.name&#125; makes a noise.&#96;);\n&#125;;\n\nfunction Dog(name) &#123;\n  Animal.call(this, name); &#x2F;&#x2F; 调用父类构造函数\n&#125;\n\nDog.prototype &#x3D; Object.create(Animal.prototype); &#x2F;&#x2F; 设置原型链\nDog.prototype.constructor &#x3D; Dog; &#x2F;&#x2F; 修正构造函数指向\n\nconst dog &#x3D; new Dog(&quot;Rex&quot;);\ndog.speak(); &#x2F;&#x2F; 输出: Rex makes a noise.</code></pre>\n\n<h3 id=\"2-Object-create-方法\"><a href=\"#2-Object-create-方法\" class=\"headerlink\" title=\"2. Object.create() 方法\"></a>2. <code>Object.create()</code> 方法</h3><p><code>Object.create()</code> 方法可以创建一个新对象，并将其原型设置为指定的对象。这种方式适合用于实现对象的继承。</p>\n<h4 id=\"示例-89\"><a href=\"#示例-89\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const animal &#x3D; &#123;\n  speak: function () &#123;\n    console.log(&#96;$&#123;this.name&#125; makes a noise.&#96;);\n  &#125;,\n&#125;;\n\nconst dog &#x3D; Object.create(animal);\ndog.name &#x3D; &quot;Rex&quot;;\ndog.speak(); &#x2F;&#x2F; 输出: Rex makes a noise.</code></pre>\n\n<h3 id=\"3-构造函数继承\"><a href=\"#3-构造函数继承\" class=\"headerlink\" title=\"3. 构造函数继承\"></a>3. 构造函数继承</h3><p>通过在子类构造函数中调用父类构造函数，实现属性的继承。</p>\n<h4 id=\"示例-90\"><a href=\"#示例-90\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Animal(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nfunction Dog(name) &#123;\n  Animal.call(this, name); &#x2F;&#x2F; 调用父类构造函数\n&#125;\n\nconst dog &#x3D; new Dog(&quot;Rex&quot;);\nconsole.log(dog.name); &#x2F;&#x2F; 输出: Rex</code></pre>\n\n<h3 id=\"4-组合继承（伪经典继承）\"><a href=\"#4-组合继承（伪经典继承）\" class=\"headerlink\" title=\"4. 组合继承（伪经典继承）\"></a>4. 组合继承（伪经典继承）</h3><p>组合继承结合了原型链继承和构造函数继承的优点，是一种常用的继承方式。</p>\n<h4 id=\"示例-91\"><a href=\"#示例-91\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Animal(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nAnimal.prototype.speak &#x3D; function () &#123;\n  console.log(&#96;$&#123;this.name&#125; makes a noise.&#96;);\n&#125;;\n\nfunction Dog(name) &#123;\n  Animal.call(this, name); &#x2F;&#x2F; 调用父类构造函数\n&#125;\n\nDog.prototype &#x3D; Object.create(Animal.prototype); &#x2F;&#x2F; 设置原型链\nDog.prototype.constructor &#x3D; Dog; &#x2F;&#x2F; 修正构造函数指向\n\nconst dog &#x3D; new Dog(&quot;Rex&quot;);\ndog.speak(); &#x2F;&#x2F; 输出: Rex makes a noise.</code></pre>\n\n<h3 id=\"5-寄生组合继承\"><a href=\"#5-寄生组合继承\" class=\"headerlink\" title=\"5. 寄生组合继承\"></a>5. 寄生组合继承</h3><p>寄生组合继承是对组合继承的一种优化，避免了调用两次父类构造函数。</p>\n<h4 id=\"示例-92\"><a href=\"#示例-92\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function Animal(name) &#123;\n  this.name &#x3D; name;\n&#125;\n\nAnimal.prototype.speak &#x3D; function () &#123;\n  console.log(&#96;$&#123;this.name&#125; makes a noise.&#96;);\n&#125;;\n\nfunction Dog(name) &#123;\n  Animal.call(this, name); &#x2F;&#x2F; 调用父类构造函数\n&#125;\n\nDog.prototype &#x3D; Object.create(Animal.prototype); &#x2F;&#x2F; 设置原型链\nDog.prototype.constructor &#x3D; Dog; &#x2F;&#x2F; 修正构造函数指向\n\nconst dog &#x3D; new Dog(&quot;Rex&quot;);\ndog.speak(); &#x2F;&#x2F; 输出: Rex makes a noise.</code></pre>\n\n<h3 id=\"6-ES6-类继承\"><a href=\"#6-ES6-类继承\" class=\"headerlink\" title=\"6. ES6 类继承\"></a>6. ES6 类继承</h3><p>ES6 引入了类语法，使得继承更加直观和易于理解。<code>class</code> 和 <code>extends</code> 关键字用于实现继承。</p>\n<h4 id=\"示例-93\"><a href=\"#示例-93\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Animal &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n\n  speak() &#123;\n    console.log(&#96;$&#123;this.name&#125; makes a noise.&#96;);\n  &#125;\n&#125;\n\nclass Dog extends Animal &#123;\n  constructor(name) &#123;\n    super(name); &#x2F;&#x2F; 调用父类构造函数\n  &#125;\n&#125;\n\nconst dog &#x3D; new Dog(&quot;Rex&quot;);\ndog.speak(); &#x2F;&#x2F; 输出: Rex makes a noise.</code></pre>\n\n<h3 id=\"7-总结-11\"><a href=\"#7-总结-11\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h3><ul>\n<li><strong>原型链继承</strong>：通过设置原型链实现继承，适合方法的继承。</li>\n<li>**<code>Object.create()</code>**：创建一个新对象并设置其原型，适合简单的继承。</li>\n<li><strong>构造函数继承</strong>：通过调用父类构造函数实现属性的继承。</li>\n<li><strong>组合继承</strong>：结合原型链和构造函数继承的优点，常用的继承方式。</li>\n<li><strong>寄生组合继承</strong>：对组合继承的优化，避免了不必要的父类构造函数调用。</li>\n<li><strong>ES6 类继承</strong>：使用 <code>class</code> 和 <code>extends</code> 关键字实现继承，语法更清晰。</li>\n</ul>\n<p>理解这些继承方式可以帮助开发者根据不同的需求选择合适的方法来实现对象继承，提高代码的可读性和可维护性。</p>\n<h1 id=\"垃圾回收与内存泄漏\"><a href=\"#垃圾回收与内存泄漏\" class=\"headerlink\" title=\"垃圾回收与内存泄漏\"></a>垃圾回收与内存泄漏</h1><h2 id=\"浏览器的垃圾回收机制\"><a href=\"#浏览器的垃圾回收机制\" class=\"headerlink\" title=\"浏览器的垃圾回收机制\"></a>浏览器的垃圾回收机制</h2><p>JavaScript 是一种具有自动垃圾回收（Garbage Collection, GC）机制的语言，这意味着开发者不需要手动管理内存分配和释放。浏览器中的 JavaScript 引擎（如 V8、SpiderMonkey 等）负责自动管理内存，回收不再使用的对象。以下是浏览器垃圾回收机制的基本概念和工作原理：</p>\n<h3 id=\"1-垃圾回收的基本概念\"><a href=\"#1-垃圾回收的基本概念\" class=\"headerlink\" title=\"1. 垃圾回收的基本概念\"></a>1. 垃圾回收的基本概念</h3><ul>\n<li><strong>内存管理</strong>：JavaScript 引擎会自动分配内存给新对象，并在对象不再需要时回收内存。</li>\n<li><strong>垃圾</strong>：在程序中不再可访问的对象被视为垃圾，需要被回收以释放内存。</li>\n</ul>\n<h3 id=\"2-常见的垃圾回收算法\"><a href=\"#2-常见的垃圾回收算法\" class=\"headerlink\" title=\"2. 常见的垃圾回收算法\"></a>2. 常见的垃圾回收算法</h3><h4 id=\"2-1-标记-清除（Mark-and-Sweep）\"><a href=\"#2-1-标记-清除（Mark-and-Sweep）\" class=\"headerlink\" title=\"2.1. 标记-清除（Mark-and-Sweep）\"></a>2.1. 标记-清除（Mark-and-Sweep）</h4><p>这是最常用的垃圾回收算法。其基本思想是通过标记和清除两个阶段来回收内存。</p>\n<ul>\n<li><strong>标记阶段</strong>：从根对象（如全局对象）开始，递归遍历所有可达对象，并标记它们。</li>\n<li><strong>清除阶段</strong>：遍历内存中的所有对象，回收未被标记的对象。</li>\n</ul>\n<h4 id=\"示例-94\"><a href=\"#示例-94\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 标记阶段：标记所有从根对象可达的对象。\n2. 清除阶段：回收未标记的对象。</code></pre>\n\n<h4 id=\"2-2-引用计数（Reference-Counting）\"><a href=\"#2-2-引用计数（Reference-Counting）\" class=\"headerlink\" title=\"2.2. 引用计数（Reference Counting）\"></a>2.2. 引用计数（Reference Counting）</h4><p>这种算法通过跟踪每个对象的引用次数来管理内存。当对象的引用计数为零时，表示该对象不再可访问，可以被回收。</p>\n<ul>\n<li><strong>优点</strong>：简单直接。</li>\n<li><strong>缺点</strong>：无法处理循环引用。</li>\n</ul>\n<h4 id=\"示例-95\"><a href=\"#示例-95\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let obj1 &#x3D; &#123;&#125;;\nlet obj2 &#x3D; &#123; ref: obj1 &#125;;\nobj1.ref &#x3D; obj2;\n\n&#x2F;&#x2F; obj1 和 obj2 互相引用，引用计数不会降为零，导致内存泄漏。</code></pre>\n\n<h3 id=\"3-垃圾回收的触发条件\"><a href=\"#3-垃圾回收的触发条件\" class=\"headerlink\" title=\"3. 垃圾回收的触发条件\"></a>3. 垃圾回收的触发条件</h3><ul>\n<li><strong>内存分配</strong>：当分配新对象时，可能会触发垃圾回收。</li>\n<li><strong>内存使用达到阈值</strong>：当内存使用达到某个阈值时，可能会触发垃圾回收。</li>\n</ul>\n<h3 id=\"4-垃圾回收的优化\"><a href=\"#4-垃圾回收的优化\" class=\"headerlink\" title=\"4. 垃圾回收的优化\"></a>4. 垃圾回收的优化</h3><p>现代 JavaScript 引擎通常会使用分代垃圾回收（Generational Garbage Collection）来优化性能。分代垃圾回收将内存分为两代：新生代和老生代。</p>\n<ul>\n<li><strong>新生代</strong>：存储生命周期较短的对象，垃圾回收频率较高。</li>\n<li><strong>老生代</strong>：存储生命周期较长的对象，垃圾回收频率较低。</li>\n</ul>\n<h3 id=\"5-内存泄漏的常见原因\"><a href=\"#5-内存泄漏的常见原因\" class=\"headerlink\" title=\"5. 内存泄漏的常见原因\"></a>5. 内存泄漏的常见原因</h3><p>尽管 JavaScript 有自动垃圾回收机制，但内存泄漏仍然可能发生。常见的内存泄漏原因包括：</p>\n<ul>\n<li><strong>意外的全局变量</strong>：未使用 <code>var</code>、<code>let</code> 或 <code>const</code> 声明的变量会成为全局变量。</li>\n<li><strong>闭包</strong>：不当使用闭包可能导致内存无法释放。</li>\n<li><strong>未清理的 DOM 引用</strong>：删除 DOM 元素时未清理相关的 JavaScript 引用。</li>\n<li><strong>循环引用</strong>：对象之间的循环引用可能导致内存无法释放。</li>\n</ul>\n<h3 id=\"6-总结-10\"><a href=\"#6-总结-10\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><ul>\n<li><strong>自动内存管理</strong>：JavaScript 引擎自动管理内存分配和回收。</li>\n<li><strong>标记-清除算法</strong>：最常用的垃圾回收算法，通过标记和清除来回收内存。</li>\n<li><strong>分代垃圾回收</strong>：通过将内存分为新生代和老生代来优化性能。</li>\n<li><strong>内存泄漏</strong>：尽管有垃圾回收机制，内存泄漏仍可能发生，需要注意代码中的潜在问题。</li>\n</ul>\n<p>理解浏览器的垃圾回收机制有助于编写更高效和内存友好的 JavaScript 代码。</p>\n<h2 id=\"哪些情况会导致内存泄漏\"><a href=\"#哪些情况会导致内存泄漏\" class=\"headerlink\" title=\"哪些情况会导致内存泄漏\"></a>哪些情况会导致内存泄漏</h2><p>内存泄漏是指程序在运行过程中无法释放不再使用的内存，导致内存占用不断增加。尽管 JavaScript 有自动垃圾回收机制，但某些编程错误仍可能导致内存泄漏。以下是一些常见的导致内存泄漏的情况：</p>\n<h3 id=\"1-意外的全局变量\"><a href=\"#1-意外的全局变量\" class=\"headerlink\" title=\"1. 意外的全局变量\"></a>1. 意外的全局变量</h3><p>未使用 <code>var</code>、<code>let</code> 或 <code>const</code> 声明的变量会成为全局变量，导致内存无法释放。</p>\n<h4 id=\"示例-96\"><a href=\"#示例-96\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function createLeak() &#123;\n  leakyVar &#x3D; &quot;This is a leak&quot;; &#x2F;&#x2F; 未声明的变量，成为全局变量\n&#125;\n\ncreateLeak();</code></pre>\n\n<h3 id=\"2-闭包\"><a href=\"#2-闭包\" class=\"headerlink\" title=\"2. 闭包\"></a>2. 闭包</h3><p>闭包可以捕获外部函数的变量，但不当使用可能导致内存无法释放，尤其是在循环中创建闭包时。</p>\n<h4 id=\"示例-97\"><a href=\"#示例-97\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function createClosure() &#123;\n  const largeArray &#x3D; new Array(1000).fill(&quot;leak&quot;);\n  return function () &#123;\n    console.log(largeArray.length);\n  &#125;;\n&#125;\n\nconst closure &#x3D; createClosure();\n&#x2F;&#x2F; 即使不再需要 largeArray，闭包仍然持有对它的引用</code></pre>\n\n<h3 id=\"3-未清理的-DOM-引用\"><a href=\"#3-未清理的-DOM-引用\" class=\"headerlink\" title=\"3. 未清理的 DOM 引用\"></a>3. 未清理的 DOM 引用</h3><p>删除 DOM 元素时，如果 JavaScript 中仍然保留对这些元素的引用，可能导致内存无法释放。</p>\n<h4 id=\"示例-98\"><a href=\"#示例-98\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const element &#x3D; document.getElementById(&quot;myElement&quot;);\ndocument.body.removeChild(element);\n&#x2F;&#x2F; 仍然保留对 element 的引用，导致内存泄漏</code></pre>\n\n<h3 id=\"4-循环引用\"><a href=\"#4-循环引用\" class=\"headerlink\" title=\"4. 循环引用\"></a>4. 循环引用</h3><p>对象之间的循环引用可能导致内存无法释放，尤其是在使用旧版浏览器时。</p>\n<h4 id=\"示例-99\"><a href=\"#示例-99\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function createCircularReference() &#123;\n  const obj1 &#x3D; &#123;&#125;;\n  const obj2 &#x3D; &#123;&#125;;\n  obj1.ref &#x3D; obj2;\n  obj2.ref &#x3D; obj1;\n&#125;\n\ncreateCircularReference();\n&#x2F;&#x2F; obj1 和 obj2 互相引用，可能导致内存泄漏</code></pre>\n\n<h3 id=\"5-事件监听器未移除\"><a href=\"#5-事件监听器未移除\" class=\"headerlink\" title=\"5. 事件监听器未移除\"></a>5. 事件监听器未移除</h3><p>为 DOM 元素添加事件监听器后，如果不再需要这些监听器但未移除，可能导致内存泄漏。</p>\n<h4 id=\"示例-100\"><a href=\"#示例-100\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const button &#x3D; document.getElementById(&quot;myButton&quot;);\nfunction handleClick() &#123;\n  console.log(&quot;Button clicked&quot;);\n&#125;\n\nbutton.addEventListener(&quot;click&quot;, handleClick);\n&#x2F;&#x2F; 如果不再需要 handleClick，应该移除监听器\nbutton.removeEventListener(&quot;click&quot;, handleClick);</code></pre>\n\n<h3 id=\"6-定时器和回调\"><a href=\"#6-定时器和回调\" class=\"headerlink\" title=\"6. 定时器和回调\"></a>6. 定时器和回调</h3><p>未清理的定时器和回调函数可能导致内存泄漏。</p>\n<h4 id=\"示例-101\"><a href=\"#示例-101\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;\n  console.log(&quot;This runs every second&quot;);\n&#125;, 1000);\n\n&#x2F;&#x2F; 如果不再需要，应该清除定时器\nclearInterval(intervalId);</code></pre>\n\n<h3 id=\"7-缓存过多数据\"><a href=\"#7-缓存过多数据\" class=\"headerlink\" title=\"7. 缓存过多数据\"></a>7. 缓存过多数据</h3><p>在应用中缓存过多数据，尤其是大数据集，可能导致内存占用过高。</p>\n<h4 id=\"示例-102\"><a href=\"#示例-102\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const cache &#x3D; &#123;&#125;;\nfunction cacheData(key, data) &#123;\n  cache[key] &#x3D; data;\n&#125;\n\n&#x2F;&#x2F; 应该定期清理不再需要的数据</code></pre>\n\n<h3 id=\"8-总结-3\"><a href=\"#8-总结-3\" class=\"headerlink\" title=\"8. 总结\"></a>8. 总结</h3><ul>\n<li><strong>意外的全局变量</strong>：未声明的变量会成为全局变量。</li>\n<li><strong>闭包</strong>：不当使用闭包可能导致内存无法释放。</li>\n<li><strong>未清理的 DOM 引用</strong>：删除 DOM 元素时未清理相关的 JavaScript 引用。</li>\n<li><strong>循环引用</strong>：对象之间的循环引用可能导致内存无法释放。</li>\n<li><strong>事件监听器未移除</strong>：未移除不再需要的事件监听器。</li>\n<li><strong>定时器和回调</strong>：未清理的定时器和回调函数。</li>\n<li><strong>缓存过多数据</strong>：缓存过多数据可能导致内存占用过高。</li>\n</ul>\n<p>理解这些内存泄漏的原因可以帮助开发者编写更高效和内存友好的 JavaScript 代码。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"设计模式都有哪些\"><a href=\"#设计模式都有哪些\" class=\"headerlink\" title=\"设计模式都有哪些\"></a>设计模式都有哪些</h2><p>JavaScript 中的设计模式是在软件工程中被广泛使用的一系列最佳实践。以下是一些常见的设计模式，以及它们的代码示例：</p>\n<h3 id=\"1-工厂模式（Factory-Pattern）\"><a href=\"#1-工厂模式（Factory-Pattern）\" class=\"headerlink\" title=\"1. 工厂模式（Factory Pattern）\"></a>1. 工厂模式（Factory Pattern）</h3><p>工厂模式是一种创建型模式，用于处理对象的创建，让对象的实例化延迟到子类中进行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Rectangle &#123;\n  constructor(width, height) &#123;\n    this.width &#x3D; width;\n    this.height &#x3D; height;\n  &#125;\n\n  calculateArea() &#123;\n    return this.width * this.height;\n  &#125;\n&#125;\n\nclass Square &#123;\n  constructor(size) &#123;\n    this.size &#x3D; size;\n  &#125;\n\n  calculateArea() &#123;\n    return this.size * this.size;\n  &#125;\n&#125;\n\nclass ShapeFactory &#123;\n  static createShape(type) &#123;\n    if (type &#x3D;&#x3D;&#x3D; &quot;rectangle&quot;) &#123;\n      return new Rectangle(4, 5);\n    &#125; else if (type &#x3D;&#x3D;&#x3D; &quot;square&quot;) &#123;\n      return new Square(5);\n    &#125;\n  &#125;\n&#125;\n\nconst myRectangle &#x3D; ShapeFactory.createShape(&quot;rectangle&quot;);\nconst mySquare &#x3D; ShapeFactory.createShape(&quot;square&quot;);\nconsole.log(myRectangle.calculateArea()); &#x2F;&#x2F; 20\nconsole.log(mySquare.calculateArea()); &#x2F;&#x2F; 25</code></pre>\n\n<h3 id=\"2-单例模式（Singleton-Pattern）\"><a href=\"#2-单例模式（Singleton-Pattern）\" class=\"headerlink\" title=\"2. 单例模式（Singleton Pattern）\"></a>2. 单例模式（Singleton Pattern）</h3><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Singleton &#123;\n  static getInstance() &#123;\n    if (!Singleton.instance) &#123;\n      Singleton.instance &#x3D; new Singleton();\n    &#125;\n    return Singleton.instance;\n  &#125;\n\n  constructor() &#123;\n    if (Singleton.instance) &#123;\n      throw new Error(\n        &quot;Error: Instantiation failed: Use Singleton.getInstance() instead of new.&quot;\n      );\n    &#125;\n    this.state &#x3D; &#123;&#125;;\n  &#125;\n&#125;\n\nconst instance1 &#x3D; Singleton.getInstance();\nconst instance2 &#x3D; Singleton.getInstance();\nconsole.log(instance1 &#x3D;&#x3D;&#x3D; instance2); &#x2F;&#x2F; true</code></pre>\n\n<h3 id=\"3-观察者模式（Observer-Pattern）\"><a href=\"#3-观察者模式（Observer-Pattern）\" class=\"headerlink\" title=\"3. 观察者模式（Observer Pattern）\"></a>3. 观察者模式（Observer Pattern）</h3><p>观察者模式定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Observer &#123;\n  constructor(name) &#123;\n    this.name &#x3D; name;\n  &#125;\n\n  update(message) &#123;\n    console.log(&#96;$&#123;this.name&#125; received message: $&#123;message&#125;&#96;);\n  &#125;\n&#125;\n\nclass Subject &#123;\n  constructor() &#123;\n    this.observers &#x3D; [];\n  &#125;\n\n  subscribe(observer) &#123;\n    this.observers.push(observer);\n  &#125;\n\n  unsubscribe(observer) &#123;\n    this.observers &#x3D; this.observers.filter((sub) &#x3D;&gt; sub !&#x3D;&#x3D; observer);\n  &#125;\n\n  notify(message) &#123;\n    this.observers.forEach((observer) &#x3D;&gt; observer.update(message));\n  &#125;\n&#125;\n\nconst subject &#x3D; new Subject();\nconst observer1 &#x3D; new Observer(&quot;Observer 1&quot;);\nconst observer2 &#x3D; new Observer(&quot;Observer 2&quot;);\n\nsubject.subscribe(observer1);\nsubject.subscribe(observer2);\nsubject.notify(&quot;Hello!&quot;); &#x2F;&#x2F; Both observers receive the message</code></pre>\n\n<h3 id=\"4-策略模式（Strategy-Pattern）\"><a href=\"#4-策略模式（Strategy-Pattern）\" class=\"headerlink\" title=\"4. 策略模式（Strategy Pattern）\"></a>4. 策略模式（Strategy Pattern）</h3><p>策略模式定义了一系列算法，并将每个算法封装起来，使它们可以互换使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class SortStrategy &#123;\n  sort(items) &#123;\n    throw new Error(&quot;Sort strategy must be implemented&quot;);\n  &#125;\n&#125;\n\nclass BubbleSortStrategy extends SortStrategy &#123;\n  sort(items) &#123;\n    items.sort((a, b) &#x3D;&gt; a - b);\n  &#125;\n&#125;\n\nclass QuickSortStrategy extends SortStrategy &#123;\n  sort(items) &#123;\n    &#x2F;&#x2F; Quick sort implementation\n  &#125;\n&#125;\n\nclass Context &#123;\n  constructor(strategy) &#123;\n    this.strategy &#x3D; strategy;\n  &#125;\n\n  setStrategy(strategy) &#123;\n    this.strategy &#x3D; strategy;\n  &#125;\n\n  executeSort(items) &#123;\n    this.strategy.sort(items);\n  &#125;\n&#125;\n\nconst items &#x3D; [5, 3, 6, 2];\nconst bubbleSort &#x3D; new BubbleSortStrategy();\nconst context &#x3D; new Context(bubbleSort);\ncontext.executeSort(items);\nconsole.log(items); &#x2F;&#x2F; Sorted array</code></pre>\n\n<h3 id=\"5-装饰器模式（Decorator-Pattern）\"><a href=\"#5-装饰器模式（Decorator-Pattern）\" class=\"headerlink\" title=\"5. 装饰器模式（Decorator Pattern）\"></a>5. 装饰器模式（Decorator Pattern）</h3><p>装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function makeBold(component) &#123;\n  return function () &#123;\n    return &#96;&lt;strong&gt;$&#123;component()&#125;&lt;&#x2F;strong&gt;&#96;;\n  &#125;;\n&#125;\n\nfunction makeLarge(component) &#123;\n  return function () &#123;\n    return &#96;&lt;h1&gt;$&#123;component()&#125;&lt;&#x2F;h1&gt;&#96;;\n  &#125;;\n&#125;\n\nfunction Hello() &#123;\n  return &quot;Hello World&quot;;\n&#125;\n\nconst BoldHello &#x3D; makeBold(Hello);\nconst LargeHello &#x3D; makeLarge(BoldHello);\n\nconsole.log(LargeHello()); &#x2F;&#x2F; &lt;h1&gt;&lt;strong&gt;Hello World&lt;&#x2F;strong&gt;&lt;&#x2F;h1&gt;\n&#96;&#96;;</code></pre>\n","feature":true,"text":"数据类型JavaScript 有哪些数据类型，它们的区别？在 JavaScript 中，数据类型主要分为两大类：基本数据类型（Primitive Types）和 引用数据类型（Reference Types）。以下是详细的分类和它们的区别： 1. 基本数据类型（Primitive...","link":"","photos":[],"count_time":{"symbolsCount":"150k","symbolsTime":"2:17"},"categories":[{"name":"interview","slug":"interview","count":5,"path":"api/categories/interview.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%AE%83%E4%BB%AC%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">JavaScript 有哪些数据类型，它们的区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88Primitive-Types%EF%BC%89\"><span class=\"toc-text\">1. 基本数据类型（Primitive Types）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88Reference-Types%EF%BC%89\"><span class=\"toc-text\">2. 引用数据类型（Reference Types）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. 区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">数据类型检测的方式有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-typeof-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1. typeof 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2. instanceof 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Object-prototype-toString-call\"><span class=\"toc-text\">3. Object.prototype.toString.call()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Array-isArray\"><span class=\"toc-text\">4. Array.isArray()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-3\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-constructor-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5. constructor 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-4\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">6. 自定义类型检测函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-5\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">判断数组的方式有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Array-isArray\"><span class=\"toc-text\">1. Array.isArray()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-6\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6-1\"><span class=\"toc-text\">2. instanceof 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-7\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Object-prototype-toString-call-1\"><span class=\"toc-text\">3. Object.prototype.toString.call()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-8\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-constructor-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. constructor 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-9\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5. 自定义类型检测函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-10\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#null-%E5%92%8C-undefined-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">null 和 undefined 区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">3. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%9B%B8%E7%AD%89%E6%80%A7%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">4. 相等性比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#typeof-null-%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">typeof null 的结果是什么，为什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-typeof-null-%E7%9A%84%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">1. typeof null 的结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">2. 原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">instanceof 操作符的实现原理及实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. 实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%87%AA%E5%AE%9A%E4%B9%89-instanceof-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3. 自定义 instanceof 实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">4. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-0-1-0-2-x3D-x3D-0-3%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%85%B6%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">为什么 0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1. 浮点数精度问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E8%AE%A9%E5%AE%83%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">2. 如何让它相等</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">3. 其他解决方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%AE%89%E5%85%A8%E7%9A%84-undefined-%E5%80%BC%EF%BC%9F\"><span class=\"toc-text\">如何获取安全的 undefined 值？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-void-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1. 使用 void 操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8-undefined\"><span class=\"toc-text\">2. 直接使用 undefined</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%A3%80%E6%9F%A5%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BA-undefined\"><span class=\"toc-text\">3. 检查变量是否为 undefined</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4. 使用默认参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8-typeof-%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">5. 使用 typeof 检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8-try-catch-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">6. 使用 try...catch 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#typeof-NaN-%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">typeof NaN 的结果是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-11\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%9D%E5%A4%96%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">额外信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#isNaN-%E5%92%8C-Number-isNaN-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">isNaN 和 Number.isNaN 函数的区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-isNaN-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1. isNaN 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-12\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Number-isNaN-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. Number.isNaN 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-13\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%80%BC%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">其他值到字符串的转换规则？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%95%B0%E5%AD%97%EF%BC%88Number%EF%BC%89\"><span class=\"toc-text\">1.1. 数字（Number）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%B8%83%E5%B0%94%E5%80%BC%EF%BC%88Boolean%EF%BC%89\"><span class=\"toc-text\">1.2. 布尔值（Boolean）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-null\"><span class=\"toc-text\">1.3. null</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-undefined\"><span class=\"toc-text\">1.4. undefined</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-Symbol\"><span class=\"toc-text\">1.5. Symbol</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%EF%BC%88Object%EF%BC%89\"><span class=\"toc-text\">2. 对象（Object）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%EF%BC%88Array%EF%BC%89\"><span class=\"toc-text\">3. 数组（Array）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%87%BD%E6%95%B0%EF%BC%88Function%EF%BC%89\"><span class=\"toc-text\">4. 函数（Function）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">5. 其他类型的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%92%8C-amp-amp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%9F\"><span class=\"toc-text\">|| 和 &amp;&amp; 操作符的返回值？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%EF%BC%88%E9%80%BB%E8%BE%91%E6%88%96%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1. ||（逻辑或）操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-14\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-amp-amp-%EF%BC%88%E9%80%BB%E8%BE%91%E4%B8%8E%EF%BC%89%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2. &amp;&amp;（逻辑与）操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-15\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%BF%94%E5%9B%9E%E5%80%BC%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 返回值总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4. 结合使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-is-%E4%B8%8E%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6-%E2%80%9C-x3D-x3D-x3D-%E2%80%9D%E3%80%81%E2%80%9C-x3D-x3D-%E2%80%9D-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">Object.is() 与比较操作符 “&#x3D;&#x3D;&#x3D;”、“&#x3D;&#x3D;” 的区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-JavaScript-%E4%B8%AD%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">什么是 JavaScript 中的包装类型？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Object-is\"><span class=\"toc-text\">1. Object.is()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-16\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">2. 严格相等操作符 &#x3D;&#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-17\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%BD%E6%9D%BE%E7%9B%B8%E7%AD%89%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">3. 宽松相等操作符 &#x3D;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-18\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9F\"><span class=\"toc-text\">JavaScript 中如何进行隐式类型转换？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">1. 数字与字符串的运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-19\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B8%83%E5%B0%94%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2. 布尔值的转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-20\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">3. 比较操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-21\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%8E%9F%E5%A7%8B%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">4. 对象与原始值的转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-22\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5. 使用 + 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-23\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-undefined-%E5%92%8C-null\"><span class=\"toc-text\">6. undefined 和 null</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-24\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5%EF%BC%9F\"><span class=\"toc-text\">+操作符什么时候用于字符串的拼接？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1. 字符串拼接的基本规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">2. 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">2.1. 字符串与字符串的拼接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">2.2. 字符串与数字的拼接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%B8%83%E5%B0%94%E5%80%BC%E7%9A%84%E6%8B%BC%E6%8E%A5\"><span class=\"toc-text\">2.3. 字符串与布尔值的拼接</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">3. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89-BigInt-%E7%9A%84%E6%8F%90%E6%A1%88%EF%BC%9F\"><span class=\"toc-text\">为什么会有 BigInt 的提案？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B4%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%99%90%E5%88%B6\"><span class=\"toc-text\">1. 整数精度限制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-25\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%9C%80%E6%B1%82%E5%A2%9E%E5%8A%A0\"><span class=\"toc-text\">2. 需求增加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8F%90%E6%A1%88%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">3. 提案背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-BigInt-%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">4. BigInt 的特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#object-assign-%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E6%B3%95%E6%98%AF%E6%B7%B1%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Object-assign\"><span class=\"toc-text\">1. Object.assign()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-26\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%EF%BC%89\"><span class=\"toc-text\">2. 扩展运算符（...）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-27\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. 深拷贝与浅拷贝的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4. 深拷贝的实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ES6\"><span class=\"toc-text\">ES6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#let%E3%80%81const%E3%80%81var-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">let、const、var 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">1. 作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">2. 变量提升</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%87%8D%E6%96%B0%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">3. 重新赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#const-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E5%90%97\"><span class=\"toc-text\">const 对象的属性可以修改吗</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-28\"><span class=\"toc-text\">示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. 修改对象的属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2. 修改数组的元素</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C-new-%E4%B8%80%E4%B8%AA%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7\"><span class=\"toc-text\">如果 new 一个箭头函数的会怎么样</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8-new-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">1. 尝试使用 new 关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-29\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">2. 箭头函数的特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">箭头函数与普通函数的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1. 语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-this-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2. this 绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-arguments-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3. arguments 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%9C%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4. 作为构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">5. 方法定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84-this-%E6%8C%87%E5%90%91%E5%93%AA%E2%BE%A5%EF%BC%9F\"><span class=\"toc-text\">箭头函数的 this 指向哪⾥？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BB%A7%E6%89%BF%E5%A4%96%E9%83%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84-this\"><span class=\"toc-text\">1. 继承外部上下文的 this</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">2. 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%9C%A8%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.1. 在普通函数中的 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%9C%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.2. 在箭头函数中的 this</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">扩展运算符的作用及使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2. 使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%B1%95%E5%BC%80%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.1. 展开数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%90%88%E5%B9%B6%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.2. 合并数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%85%8B%E9%9A%86%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">2.3. 克隆数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E5%B1%95%E5%BC%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.4. 展开对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-%E5%90%88%E5%B9%B6%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.5. 合并对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-%E5%85%8B%E9%9A%86%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.6. 克隆对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">3. 其他使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%9C%A8%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%AD%E5%B1%95%E5%BC%80%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3.1. 在函数调用中展开数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%9C%A8%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.2. 在函数参数中使用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E8%A7%A3%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对对象与数组的解构的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">1. 数组解构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.1. 基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E8%B7%B3%E8%BF%87%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1.2. 跳过元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">1.3. 默认值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">2. 对象解构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2.1. 基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E9%87%8D%E5%91%BD%E5%90%8D%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2.2. 重命名变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">2.3. 默认值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B5%8C%E5%A5%97%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">3. 嵌套解构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E6%95%B0%E7%BB%84%E5%B5%8C%E5%A5%97%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">3.1. 数组嵌套解构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%AF%B9%E8%B1%A1%E5%B5%8C%E5%A5%97%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">3.2. 对象嵌套解构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96%E9%AB%98%E5%BA%A6%E5%B5%8C%E5%A5%97%E7%9A%84%E5%AF%B9%E8%B1%A1%E9%87%8C%E7%9A%84%E6%8C%87%E5%AE%9A%E5%B1%9E%E6%80%A7%EF%BC%9F\"><span class=\"toc-text\">如何提取高度嵌套的对象里的指定属性？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">1. 使用解构赋值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%8F%90%E5%8F%96%E5%B5%8C%E5%A5%97%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1.1. 提取嵌套属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%8F%90%E5%8F%96%E9%83%A8%E5%88%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. 提取部分属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">3. 使用默认值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%8F%90%E5%8F%96%E5%8A%A8%E6%80%81%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. 提取动态属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-rest-%E5%8F%82%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 rest 参数的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1. 基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1\"><span class=\"toc-text\">2. 使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E6%94%B6%E9%9B%86%E4%B8%8D%E5%AE%9A%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.1. 收集不定数量的参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%B8%8E%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.2. 与其他参数结合使用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%8E-arguments-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. 与 arguments 对象的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%85%B6%E4%BB%96%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">4. 其他注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES6-%E4%B8%AD%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">ES6 中模板语法与字符串处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1. 模板字面量的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-30\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">2. 多行字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-31\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B5%8C%E5%85%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3. 嵌入表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-32\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">4. 标签模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-33\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">5. 字符串处理的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">JavaScript 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">new 操作符的实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-new-%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1. new 操作符的基本功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">2. 实现步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%88%9B%E5%BB%BA%E6%96%B0%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.1. 创建新对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%AE%BE%E7%BD%AE%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">2.2. 设置原型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%91%E5%AE%9A-this\"><span class=\"toc-text\">2.3. 绑定 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.4. 返回对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%87%AA%E5%AE%9A%E4%B9%89-new-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4. 自定义 new 实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#map-%E5%92%8C-Object-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">map 和 Object 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 基本定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%94%AE%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 键的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%94%AE%E5%80%BC%E5%AF%B9%E7%9A%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">3. 键值对的顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">4. 性能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">5. 方法和属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">6. 迭代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#map-%E5%92%8C-weakMap-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">map 和 weakMap 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">1. 基本定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%94%AE%E7%9A%84%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">2. 键的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">3. 垃圾回收</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. 方法和属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">5. 迭代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">6. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">JavaScript 有哪些内置对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1. 基本对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2. 数据结构对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%94%99%E8%AF%AF%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3. 错误对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4. 日期和时间对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">5. 正则表达式对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-JSON-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">6. JSON 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%95%B0%E5%AD%A6%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">7. 数学对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">8. 全局对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%85%B6%E4%BB%96%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">9. 其他内置对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">10. 结论</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-JSON-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 JSON 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-JSON-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1. JSON 的基本结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-34\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-JSON-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2. JSON 的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-JSON-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">3. JSON 的使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-JSON-%E7%9A%84%E8%A7%A3%E6%9E%90%E5%92%8C%E7%94%9F%E6%88%90\"><span class=\"toc-text\">4. JSON 的解析和生成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-JSON-%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">5. JSON 的限制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E8%84%9A%E6%9C%AC%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">JavaScript 脚本延迟加载的方式有哪些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-defer-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. 使用 defer 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-async-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. 使用 async 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B0%86%E8%84%9A%E6%9C%AC%E6%94%BE%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%BA%95%E9%83%A8\"><span class=\"toc-text\">3. 将脚本放在页面底部</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-JavaScript-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">4. 使用 JavaScript 动态加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">5. 使用模块化加载器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8-Intersection-Observer-API\"><span class=\"toc-text\">6. 使用 Intersection Observer API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9F\"><span class=\"toc-text\">JavaScript 类数组对象的定义？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1. 类数组对象的示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-arguments-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.1. arguments 对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-DOM-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E7%9A%84-NodeList\"><span class=\"toc-text\">1.2. DOM 方法返回的 NodeList</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-HTMLCollection\"><span class=\"toc-text\">1.3. HTMLCollection</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2. 类数组对象与数组的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B0%86%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">3. 将类数组对象转换为数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%BF%E7%94%A8-Array-from\"><span class=\"toc-text\">3.1. 使用 Array.from()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.2. 使用扩展运算符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">数组有哪些原生方法？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1. 数组创建和初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2. 数组操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">3. 数组遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">4. 数组查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%92%8C%E5%8F%8D%E8%BD%AC\"><span class=\"toc-text\">5. 数组排序和反转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%95%B0%E7%BB%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%87%E5%89%B2\"><span class=\"toc-text\">6. 数组连接和切割</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%95%B0%E7%BB%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">7. 数组其他方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">8. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%85%B6%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">常见的位运算符有哪些？其计算规则是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">1. 位运算符列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E6%8C%89%E4%BD%8D%E4%B8%8E%EF%BC%88AND%EF%BC%89-amp\"><span class=\"toc-text\">1.1. 按位与（AND）&amp;</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E6%8C%89%E4%BD%8D%E6%88%96%EF%BC%88OR%EF%BC%89\"><span class=\"toc-text\">1.2. 按位或（OR）|</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96%EF%BC%88XOR%EF%BC%89\"><span class=\"toc-text\">1.3. 按位异或（XOR）^</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-%E6%8C%89%E4%BD%8D%E9%9D%9E%EF%BC%88NOT%EF%BC%89\"><span class=\"toc-text\">1.4. 按位非（NOT）~</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-%E5%B7%A6%E7%A7%BB%EF%BC%88Left-Shift%EF%BC%89-lt-lt\"><span class=\"toc-text\">1.5. 左移（Left Shift）&lt;&lt;</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-%E5%8F%B3%E7%A7%BB%EF%BC%88Right-Shift%EF%BC%89-gt-gt\"><span class=\"toc-text\">1.6. 右移（Right Shift）&gt;&gt;</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB%EF%BC%88Unsigned-Right-Shift%EF%BC%89-gt-gt-gt\"><span class=\"toc-text\">1.7. 无符号右移（Unsigned Right Shift）&gt;&gt;&gt;</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2. 计算规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BD%E6%95%B0%E7%9A%84-arguments-%E5%8F%82%E6%95%B0%E6%98%AF%E7%B1%BB%E6%95%B0%E7%BB%84%E8%80%8C%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E7%B1%BB%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-arguments-%E6%98%AF%E7%B1%BB%E6%95%B0%E7%BB%84%E8%80%8C%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">1. arguments 是类数组而不是数组的原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-arguments-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2. arguments 对象的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%81%8D%E5%8E%86%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3. 遍历类数组对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%BF%E7%94%A8-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.1. 使用 for 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8-for-of-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.2. 使用 for...of 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E4%BD%BF%E7%94%A8-Array-from\"><span class=\"toc-text\">3.3. 使用 Array.from()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.4. 使用扩展运算符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-DOM-%E5%92%8C-BOM%EF%BC%9F\"><span class=\"toc-text\">什么是 DOM 和 BOM？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-DOM%EF%BC%88%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">1. DOM（文档对象模型）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1.1. 定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.2. 特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E5%B8%B8%E7%94%A8-DOM-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.3. 常用 DOM 方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-BOM%EF%BC%88%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">2. BOM（浏览器对象模型）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2.1. 定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2.2. 特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%B8%B8%E7%94%A8-BOM-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.3. 常用 BOM 对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">对类数组对象的理解，如何转化为数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">1. 类数组对象的特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2. 常见的类数组对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B0%86%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E7%BB%84-1\"><span class=\"toc-text\">3. 将类数组对象转换为数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%BF%E7%94%A8-Array-from-1\"><span class=\"toc-text\">3.1. 使用 Array.from()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88Spread-Operator%EF%BC%89\"><span class=\"toc-text\">3.2. 使用扩展运算符（Spread Operator）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E4%BD%BF%E7%94%A8-Array-prototype-slice-call\"><span class=\"toc-text\">3.3. 使用 Array.prototype.slice.call()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E4%BD%BF%E7%94%A8-Array-prototype-concat\"><span class=\"toc-text\">3.4. 使用 Array.prototype.concat()</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#escape%E3%80%81encodeURI%E3%80%81encodeURIComponent-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">escape、encodeURI、encodeURIComponent 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-escape\"><span class=\"toc-text\">1. escape</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-35\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-encodeURI\"><span class=\"toc-text\">2. encodeURI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-36\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-encodeURIComponent\"><span class=\"toc-text\">3. encodeURIComponent</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-37\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-AJAX-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-AJAX-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">对 AJAX 的理解，实现一个 AJAX 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-AJAX-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. AJAX 的工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-AJAX-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">2. 实现一个 AJAX 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A%E8%8E%B7%E5%8F%96-JSON-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">示例：获取 JSON 数据</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">3. 代码解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-Fetch-API\"><span class=\"toc-text\">4. 使用 Fetch API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%8C%E5%AE%83%E5%AF%BC%E8%87%B4%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F\"><span class=\"toc-text\">JavaScript 为什么要进行变量提升，它导致了什么问题？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1. 变量提升的机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-38\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">2. 变量提升的影响</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E7%9A%84%E6%B7%B7%E6%B7%86\"><span class=\"toc-text\">2.1. 可能导致的混淆</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%A3%E5%86%B3%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 解决变量提升问题的方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B0%BE%E8%B0%83%E7%94%A8%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%B0%BE%E8%B0%83%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F\"><span class=\"toc-text\">什么是尾调用，使用尾调用有什么好处？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B0%BE%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 尾调用的定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-39\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96%EF%BC%88TCO%EF%BC%89\"><span class=\"toc-text\">2. 尾调用优化（TCO）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">尾调用优化的工作原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E5%B0%BE%E8%B0%83%E7%94%A8%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">3. 使用尾调用的好处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E9%81%BF%E5%85%8D%E6%A0%88%E6%BA%A2%E5%87%BA\"><span class=\"toc-text\">3.1. 避免栈溢出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">3.2. 提高性能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%9B%B4%E6%B8%85%E6%99%B0%E7%9A%84%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3.3. 更清晰的代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">4. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%90%8C%EF%BC%9F\"><span class=\"toc-text\">ES6 模块与 CommonJS 模块有什么异同？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2. 语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-ES6-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.1. ES6 模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-CommonJS-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.2. CommonJS 模块</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3. 加载方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">4. 作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">5. 兼容性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84-DOM-%E6%93%8D%E4%BD%9C%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">常见的 DOM 操作有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1. 获取元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2. 修改元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">3. 添加和删除元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4. 事件处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%81%8D%E5%8E%86%E5%92%8C%E6%93%8D%E4%BD%9C%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">5. 遍历和操作节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">6. 其他常用操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#use-strict-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">use strict 是什么意思 ? 使用它区别是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1. 什么是严格模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%90%AF%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2. 启用严格模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E5%92%8C%E9%99%90%E5%88%B6\"><span class=\"toc-text\">3. 严格模式的主要区别和限制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.1. 禁止使用未声明的变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E7%A6%81%E6%AD%A2%E5%88%A0%E9%99%A4%E5%8F%98%E9%87%8F%E3%80%81%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%92%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.2. 禁止删除变量、对象属性和函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E7%A6%81%E6%AD%A2%E9%87%8D%E5%90%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.3. 禁止重名参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-this-%E7%9A%84%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">3.4. this 的行为</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-%E5%85%B6%E4%BB%96%E9%99%90%E5%88%B6\"><span class=\"toc-text\">3.5. 其他限制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">4. 使用严格模式的好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%B1%9E%E4%BA%8E%E6%9F%90%E4%B8%AA%E7%B1%BB%EF%BC%9F\"><span class=\"toc-text\">如何判断一个对象是否属于某个类？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8-instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">1. 使用 instanceof 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-40\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-isPrototypeOf-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 使用 isPrototypeOf 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-41\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-Object-getPrototypeOf\"><span class=\"toc-text\">3. 使用 Object.getPrototypeOf()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-42\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-constructor-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">4. 使用 constructor 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-43\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">5. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">强类型语言和弱类型语言的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BC%BA%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%EF%BC%88Strongly-Typed-Language%EF%BC%89\"><span class=\"toc-text\">1. 强类型语言（Strongly Typed Language）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">示例语言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-44\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%EF%BC%88Weakly-Typed-Language%EF%BC%89\"><span class=\"toc-text\">2. 弱类型语言（Weakly Typed Language）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-1\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E8%AF%AD%E8%A8%80-1\"><span class=\"toc-text\">示例语言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-45\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">解释性语言和编译型语言的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 执行方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">3. 性能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4. 开发流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5. 错误处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E7%A4%BA%E4%BE%8B%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">6. 示例语言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%B7%B7%E5%90%88%E5%9E%8B%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">7. 混合型语言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">8. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for%E2%80%A6in-%E5%92%8C-for%E2%80%A6of-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">for…in 和 for…of 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-for-in-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">1. for...in 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-46\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-for-of-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2. for...of 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-3\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-1\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-47\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. 主要区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">4. 使用建议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-11\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ajax%E3%80%81axios%E3%80%81fetch-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">ajax、axios、fetch 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-AJAX\"><span class=\"toc-text\">1. AJAX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-4\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-2\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-48\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Axios\"><span class=\"toc-text\">2. Axios</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-5\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-3\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-49\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Fetch\"><span class=\"toc-text\">3. Fetch</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-6\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-4\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-50\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-12\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">数组的遍历方法有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">1. for 循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-for-of-%E5%BE%AA%E7%8E%AF-1\"><span class=\"toc-text\">2. for...of 循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-forEach-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. forEach() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-map-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4. map() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-filter-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5. filter() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-reduce-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">6. reduce() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-some-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">7. some() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-every-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">8. every() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-find-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">9. find() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-findIndex-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">10. findIndex() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-keys-%E3%80%81values-%E5%92%8C-entries-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">11. keys()、values() 和 entries() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">12. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#forEach-%E5%92%8C-map-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">forEach 和 map 方法有什么区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89-3\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">2. 返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 用法示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#forEach-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">forEach 示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#map-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">map 示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 适用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">5. 性能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型与原型链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对原型、原型链的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E5%9E%8B%EF%BC%88Prototype%EF%BC%89\"><span class=\"toc-text\">1. 原型（Prototype）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-7\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-5\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-51\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%88Prototype-Chain%EF%BC%89\"><span class=\"toc-text\">2. 原型链（Prototype Chain）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-8\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-6\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-52\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E4%BF%AE%E6%94%B9%E3%80%81%E9%87%8D%E5%86%99\"><span class=\"toc-text\">原型修改、重写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E5%9E%8B%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">1. 原型修改</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A%E4%BF%AE%E6%94%B9%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">示例：修改原型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%9F%E5%9E%8B%E9%87%8D%E5%86%99\"><span class=\"toc-text\">2. 原型重写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A%E9%87%8D%E5%86%99%E5%8E%9F%E5%9E%8B\"><span class=\"toc-text\">示例：重写原型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">3. 注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A%E4%BF%9D%E7%95%99%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">示例：保留原型链</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-11\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%8C%87%E5%90%91\"><span class=\"toc-text\">原型链指向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 原型链的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">2. 原型链的构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">3. 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">创建一个对象和原型链</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">4. 原型链的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">5. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0%E5%87%BA%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">原型链的终点是什么？如何打印出原型链的终点？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9\"><span class=\"toc-text\">1. 原型链的终点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%89%93%E5%8D%B0%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%BB%88%E7%82%B9\"><span class=\"toc-text\">2. 打印原型链的终点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">3. 输出结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-12\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-x2F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE-x2F-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">执行上下文&#x2F;作用域链&#x2F;闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对闭包的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%97%AD%E5%8C%85%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 闭包的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%97%AD%E5%8C%85%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2. 闭包的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%97%AD%E5%8C%85%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 闭包的示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-1%EF%BC%9A%E5%9F%BA%E6%9C%AC%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">示例 1：基本闭包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-2%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">示例 2：数据封装</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 闭包的应用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2\"><span class=\"toc-text\">5. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对作用域、作用域链的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88Scope%EF%BC%89\"><span class=\"toc-text\">1. 作用域（Scope）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-9\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-53\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%EF%BC%88Scope-Chain%EF%BC%89\"><span class=\"toc-text\">2. 作用域链（Scope Chain）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-10\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-7\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-54\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对执行上下文的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 执行上下文的类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%85%A8%E5%B1%80%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">1.1. 全局执行上下文</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">1.2. 函数执行上下文</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-Eval-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">1.3. Eval 执行上下文</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">2. 执行上下文的组成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%8F%98%E9%87%8F%E7%8E%AF%E5%A2%83%EF%BC%88Variable-Environment%EF%BC%89\"><span class=\"toc-text\">2.1. 变量环境（Variable Environment）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%AF%8D%E6%B3%95%E7%8E%AF%E5%A2%83%EF%BC%88Lexical-Environment%EF%BC%89\"><span class=\"toc-text\">2.2. 词法环境（Lexical Environment）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-this-%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2.3. this 绑定</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">3. 执行上下文的生命周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-13\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#this-x2F-call-x2F-apply-x2F-bind\"><span class=\"toc-text\">this&#x2F;call&#x2F;apply&#x2F;bind</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-this-%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 this 对象的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-this-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. this 的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-this-%E7%9A%84%E4%B8%8D%E5%90%8C%E6%83%85%E5%86%B5\"><span class=\"toc-text\">2. this 的不同情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.1. 全局上下文中的 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.2. 函数调用中的 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.3. 对象方法中的 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.4. 构造函数中的 this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-call%E3%80%81apply-%E5%92%8C-bind-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.5. call、apply 和 bind 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84-this\"><span class=\"toc-text\">2.6. 箭头函数中的 this</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#call-%E5%92%8C-apply-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">call() 和 apply() 的区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-call-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1. call() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-apply-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. apply() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB-1\"><span class=\"toc-text\">3. 主要区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4. 何时使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BE%8B%E5%AD%90%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">5. 例子对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-call%E3%80%81apply-%E5%8F%8A-bind-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">实现 call、apply 及 bind 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0-call-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1. 实现 call 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0-apply-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 实现 apply 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E7%8E%B0-bind-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3. 实现 bind 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-13\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">异步编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">异步编程的实现方式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%88Callback%EF%BC%89\"><span class=\"toc-text\">1. 回调函数（Callback）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-55\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Promise\"><span class=\"toc-text\">2. Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-56\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-async-x2F-await\"><span class=\"toc-text\">3. async&#x2F;await</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-57\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%EF%BC%88Event-driven%EF%BC%89\"><span class=\"toc-text\">4. 事件驱动（Event-driven）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-58\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88Generators%EF%BC%89\"><span class=\"toc-text\">5. 生成器（Generators）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-59\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#setTimeout%E3%80%81Promise%E3%80%81Async-x2F-Await-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">setTimeout、Promise、Async&#x2F;Await 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-setTimeout\"><span class=\"toc-text\">1. setTimeout</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-11\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-8\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-60\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Promise-1\"><span class=\"toc-text\">2. Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-12\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-61\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-async-await\"><span class=\"toc-text\">3. async&#x2F;await</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-13\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-10\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-62\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">4. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-14\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-Promise-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 Promise 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Promise-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. Promise 的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Promise-%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">2. Promise 的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-63\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Promise-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3. Promise 的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-then-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.1. then() 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-64\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-catch-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.2. catch() 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-finally-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.3. finally() 方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Promise-%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4. Promise 的链式调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-65\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Promise-%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5. Promise 的静态方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">Promise 的基本用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%88%9B%E5%BB%BA-Promise\"><span class=\"toc-text\">1. 创建 Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-66\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-Promise\"><span class=\"toc-text\">2. 使用 Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-then-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.1. then() 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-67\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-catch-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.2. catch() 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-finally-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.3. finally() 方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Promise-%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">3. Promise 的链式调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-68\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Promise-%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4. Promise 的静态方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93-15\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise-%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Promise 解决了什么问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%EF%BC%88Callback-Hell%EF%BC%89\"><span class=\"toc-text\">1. 回调地狱（Callback Hell）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%88%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%EF%BC%89\"><span class=\"toc-text\">示例（回调地狱）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Promise-%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">使用 Promise 解决</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9B%B4%E6%B8%85%E6%99%B0%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2. 更清晰的错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%88%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%EF%BC%89\"><span class=\"toc-text\">示例（错误处理）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3. 状态管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E5%90%88%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4. 组合异步操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7%E5%92%8C%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7\"><span class=\"toc-text\">5. 更好的可读性和可维护性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%B8%8E-async-await-%E7%9A%84%E7%BB%93%E5%90%88\"><span class=\"toc-text\">6. 与 async&#x2F;await 的结合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise-all-%E5%92%8C-Promise-race-%E7%9A%84%E5%8C%BA%E5%88%AB%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Promise.all 和 Promise.race 的区别的使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Promise-all\"><span class=\"toc-text\">1. Promise.all</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-14\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-69\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Promise-race\"><span class=\"toc-text\">2. Promise.race</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-15\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-1\"><span class=\"toc-text\">使用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-70\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3. 主要区别总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-14\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-async-x2F-await-%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">对 async&#x2F;await 的理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8-async-await\"><span class=\"toc-text\">2. 使用 async&#x2F;await</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%9A%E4%B9%89%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.1. 定义异步函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%BD%BF%E7%94%A8-await\"><span class=\"toc-text\">2.2. 使用 await</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.3. 调用异步函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">3. 错误处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">4. 优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-3\"><span class=\"toc-text\">5. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#await-%E5%88%B0%E5%BA%95%E5%9C%A8%E7%AD%89%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">await 到底在等什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AD%89%E5%BE%85-Promise\"><span class=\"toc-text\">1. 等待 Promise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-71\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AD%89%E5%BE%85-Promise-%E7%9A%84%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">2. 等待 Promise 的结果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-72\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%AD%89%E5%BE%85%E9%9D%9E-Promise-%E5%80%BC\"><span class=\"toc-text\">3. 等待非 Promise 值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-73\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-15\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#async-x2F-await-%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">async&#x2F;await 的优势</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7\"><span class=\"toc-text\">1. 更好的可读性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-74\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AE%80%E5%8C%96%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2. 简化错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-75\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%81%BF%E5%85%8D%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1\"><span class=\"toc-text\">3. 避免回调地狱</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-76\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4. 组合多个异步操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-77\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%B0%83%E8%AF%95%E4%BD%93%E9%AA%8C\"><span class=\"toc-text\">5. 更好的调试体验</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">6. 兼容性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E6%B8%85%E6%99%B0\"><span class=\"toc-text\">7. 代码结构清晰</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">8. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#async-x2F-await-%E5%AF%B9%E6%AF%94-Promise-%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">async&#x2F;await 对比 Promise 的优势</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7-1\"><span class=\"toc-text\">1. 更好的可读性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-78\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AE%80%E5%8C%96%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-1\"><span class=\"toc-text\">2. 简化错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-79\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%81%BF%E5%85%8D%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1-1\"><span class=\"toc-text\">3. 避免回调地狱</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-80\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%B0%83%E8%AF%95%E4%BD%93%E9%AA%8C\"><span class=\"toc-text\">4. 更好的调试体验</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">5. 组合多个异步操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-81\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E6%B8%85%E6%99%B0\"><span class=\"toc-text\">6. 代码结构清晰</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">对象创建的方式有哪些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\"><span class=\"toc-text\">1. 对象字面量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-82\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Object-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. Object 构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-83\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-84\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Object-create-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4. Object.create() 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-85\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-ES6-%E7%B1%BB%EF%BC%88Class%EF%BC%89\"><span class=\"toc-text\">5. ES6 类（Class）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-86\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">6. 工厂函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-87\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">对象继承的方式有哪些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">1. 原型链继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-88\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Object-create-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. Object.create() 方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-89\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">3. 构造函数继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-90\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF%EF%BC%88%E4%BC%AA%E7%BB%8F%E5%85%B8%E7%BB%A7%E6%89%BF%EF%BC%89\"><span class=\"toc-text\">4. 组合继承（伪经典继承）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-91\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">5. 寄生组合继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-92\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-ES6-%E7%B1%BB%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">6. ES6 类继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-93\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93-11\"><span class=\"toc-text\">7. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">垃圾回收与内存泄漏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">浏览器的垃圾回收机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 垃圾回收的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2. 常见的垃圾回收算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%EF%BC%88Mark-and-Sweep%EF%BC%89\"><span class=\"toc-text\">2.1. 标记-清除（Mark-and-Sweep）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-94\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%EF%BC%88Reference-Counting%EF%BC%89\"><span class=\"toc-text\">2.2. 引用计数（Reference Counting）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-95\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">3. 垃圾回收的触发条件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">4. 垃圾回收的优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%B8%B8%E8%A7%81%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">5. 内存泄漏的常见原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93-10\"><span class=\"toc-text\">6. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%AA%E4%BA%9B%E6%83%85%E5%86%B5%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">哪些情况会导致内存泄漏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%84%8F%E5%A4%96%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1. 意外的全局变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-96\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">2. 闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-97\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%9C%AA%E6%B8%85%E7%90%86%E7%9A%84-DOM-%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">3. 未清理的 DOM 引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-98\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">4. 循环引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-99\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8%E6%9C%AA%E7%A7%BB%E9%99%A4\"><span class=\"toc-text\">5. 事件监听器未移除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-100\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%9B%9E%E8%B0%83\"><span class=\"toc-text\">6. 定时器和回调</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-101\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E7%BC%93%E5%AD%98%E8%BF%87%E5%A4%9A%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">7. 缓存过多数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B-102\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">8. 总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">设计模式都有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Factory-Pattern%EF%BC%89\"><span class=\"toc-text\">1. 工厂模式（Factory Pattern）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88Singleton-Pattern%EF%BC%89\"><span class=\"toc-text\">2. 单例模式（Singleton Pattern）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88Observer-Pattern%EF%BC%89\"><span class=\"toc-text\">3. 观察者模式（Observer Pattern）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88Strategy-Pattern%EF%BC%89\"><span class=\"toc-text\">4. 策略模式（Strategy Pattern）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88Decorator-Pattern%EF%BC%89\"><span class=\"toc-text\">5. 装饰器模式（Decorator Pattern）</span></a></li></ol></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"interview-react","uid":"315f9f443ae2dc302897ea2ae6c37f7e","slug":"interview-react","date":"2024-12-29T04:03:32.000Z","updated":"2024-12-29T06:12:06.463Z","comments":true,"path":"api/articles/interview-react.json","keywords":null,"cover":"/images/interview-react/cover.png","text":"组件基础React 事件机制 新的事件委托机制： &#x2F;&#x2F; React 18+ 的事件绑定示例 const App &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; 事件处理器 const handleClick &#x3D; (e...","link":"","photos":[],"count_time":{"symbolsCount":"169k","symbolsTime":"2:33"},"categories":[{"name":"interview","slug":"interview","count":5,"path":"api/categories/interview.json"}],"tags":[{"name":"react","slug":"react","count":1,"path":"api/tags/react.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"interview-css","uid":"22d898182469a084004dd0b5135b46c1","slug":"interview-css","date":"2024-12-28T06:03:24.000Z","updated":"2024-12-28T06:42:34.880Z","comments":true,"path":"api/articles/interview-css.json","keywords":null,"cover":"/images/interview-css/cover.png","text":"一、CSS 基础CSS 选择器及其优先级CSS 选择器用于选择 HTML 元素并应用样式。选择器的种类繁多，每种选择器都有其特定的用途和优先级。以下是常见的 CSS 选择器及其优先级的详细介绍。 1. 常见的 CSS 选择器 通用选择器 (*)： 选择所有元素。 * &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"105k","symbolsTime":"1:35"},"categories":[{"name":"interview","slug":"interview","count":5,"path":"api/categories/interview.json"}],"tags":[{"name":"css","slug":"css","count":1,"path":"api/tags/css.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}}}}