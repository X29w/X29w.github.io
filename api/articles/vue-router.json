{"title":"Vue-Router","uid":"21b9d275999a54f82cbd29d23f792608","slug":"vue-router","date":"2023-03-21T15:26:07.000Z","updated":"2023-03-21T15:32:11.913Z","comments":true,"path":"api/articles/vue-router.json","keywords":null,"cover":"https://storage.googleapis.com/vue-mastery.appspot.com/flamelink/media/Vue%203%20Vue%20Router.001.1598281020347.jpeg?GoogleAccessId=firebase-adminsdk-otdiq%40vue-mastery.iam.gserviceaccount.com&Expires=16725225600&Signature=Kds9Vo1%2FguD6uXUKVaIIMSix%2FoxEJ8uYcjm4zI3Dsum78NsD6F1S%2BfU7aORJqAYT0F1mJ%2B96qEL0HekOS8bUdbWY7d9d2%2BQd37Ee4KZZkwPhrL81l4jUSy6EeFgAegr%2BWsrNgdQTcQoFduRG4%2FGfUIshAJFU9jxPLmqaJgKL3bFqptbabDw9qYVKFY3N47rJl5GsZWqyZ4ZAJsznwmxxQOaAgK6%2BLkECzBIB%2BJkOamz9e02Cx4PusWzsMo5cJjamzkoHUYcC2nu6fAGuo0AqW%2BPAGtdHyohf9aQk8uf1U1WdKzhZSH%2FvRQpljRRnZ7DjwuEEEprVirj2Ra98ee6noA%3D%3D","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li>\n<li>前端路由：key 是路径，value 是组件。</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><ul>\n<li>安装 vue-router，命令：<code>npm i vue-router</code></li>\n<li>应用插件：<code>Vue.use(VueRouter)</code></li>\n<li>编写 router 配置项:</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;引入VueRouter\nimport VueRouter from &quot;vue-router&quot;;\n&#x2F;&#x2F;引入Luyou 组件\nimport About from &quot;..&#x2F;components&#x2F;About&quot;;\nimport Home from &quot;..&#x2F;components&#x2F;Home&quot;;\n\n&#x2F;&#x2F;创建router实例对象，去管理一组一组的路由规则\nconst router &#x3D; new VueRouter(&#123;\n  routes: [\n    &#123;\n      path: &quot;&#x2F;about&quot;,\n      component: About,\n    &#125;,\n    &#123;\n      path: &quot;&#x2F;home&quot;,\n      component: Home,\n    &#125;,\n  ],\n&#125;);\n\n&#x2F;&#x2F;暴露router\nexport default router;</code></pre>\n\n<ul>\n<li>实现跳转</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</code></pre>\n\n<ul>\n<li><em>用于展示的容器</em><br>这个超级容易忘，没有它写半天东西出不来</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</code></pre>\n\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h3><ul>\n<li>路由组件通常存放在 pages 文件夹，一般组件通常存放在 components 文件夹。</li>\n<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>\n<li>每个组件都有自己的$route 属性，里面存储着自己的路由信息。</li>\n<li>整个应用只有一个 router，可以通过组件的$router 属性获取到。</li>\n</ul>\n<h2 id=\"多级路由\"><a href=\"#多级路由\" class=\"headerlink\" title=\"多级路由\"></a>多级路由</h2><ul>\n<li>配置路由规则，使用 children 配置项：</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">routes: [\n  &#123;\n    path: &quot;&#x2F;about&quot;,\n    component: About,\n  &#125;,\n  &#123;\n    path: &quot;&#x2F;home&quot;,\n    component: Home,\n    children: [\n      &#x2F;&#x2F;通过children配置子级路由\n      &#123;\n        path: &quot;news&quot;, &#x2F;&#x2F;此处一定不要写：&#x2F;news\n        component: News,\n      &#125;,\n      &#123;\n        path: &quot;message&quot;, &#x2F;&#x2F;此处一定不要写：&#x2F;message\n        component: Message,\n      &#125;,\n    ],\n  &#125;,\n];</code></pre>\n\n<ul>\n<li>跳转（要写完整路径）：</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;</code></pre>\n\n<h2 id=\"路由的参数\"><a href=\"#路由的参数\" class=\"headerlink\" title=\"路由的参数\"></a>路由的参数</h2><h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;\n&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;666&amp;title&#x3D;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;\n&lt;router-link\n  :to&#x3D;&quot;&#123;\n    path: &#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,\n    query: &#123;\n      id: 666,\n      title: &#39;你好&#39;,\n    &#125;,\n  &#125;&quot;\n&gt;跳转&lt;&#x2F;router-link&gt;</code></pre>\n\n<h3 id=\"接收参数\"><a href=\"#接收参数\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$route.query.id;\n$route.query.title;</code></pre>\n\n<h2 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h2><ul>\n<li>可以简化路由的跳转。</li>\n</ul>\n<h3 id=\"给路由命名\"><a href=\"#给路由命名\" class=\"headerlink\" title=\"给路由命名\"></a>给路由命名</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n\tpath:&#39;&#x2F;demo&#39;,\n\tcomponent:Demo,\n\tchildren:[\n\t\t&#123;\n\t\t\tpath:&#39;test&#39;,\n\t\t\tcomponent:Test,\n\t\t\tchildren:[\n\t\t\t\t&#123;\n                      name:&#39;hello&#39; &#x2F;&#x2F;给路由命名\n\t\t\t\t\tpath:&#39;welcome&#39;,\n\t\t\t\t\tcomponent:Hello,\n\t\t\t\t&#125;\n\t\t\t]\n\t\t&#125;\n\t]\n&#125;</code></pre>\n\n<h3 id=\"简化跳转\"><a href=\"#简化跳转\" class=\"headerlink\" title=\"简化跳转\"></a>简化跳转</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!--简化前，需要写完整的路径 --&gt;\n&lt;router-link to&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;welcome&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化后，直接通过名字跳转 --&gt;\n&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!--简化写法配合传递参数 --&gt;\n&lt;router-link\n  :to&#x3D;&quot;&#123;\n\t\tname:&#39;hello&#39;,\n\t\tquery:&#123;\n\t\t   id:666,\n            title:&#39;你好&#39;\n\t\t&#125;\n\t&#125;&quot;\n  &gt;跳转&lt;&#x2F;router-link\n&gt;</code></pre>\n\n<h2 id=\"路由的-params-参数\"><a href=\"#路由的-params-参数\" class=\"headerlink\" title=\"路由的 params 参数\"></a>路由的 params 参数</h2><h3 id=\"配置路由，声明接收-params-参数\"><a href=\"#配置路由，声明接收-params-参数\" class=\"headerlink\" title=\"配置路由，声明接收 params 参数\"></a>配置路由，声明接收 params 参数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n\tpath:&#39;&#x2F;home&#39;,\n\tcomponent:Home,\n\tchildren:[\n\t\t&#123;\n\t\t\tpath:&#39;news&#39;,\n\t\t\tcomponent:News\n\t\t&#125;,\n\t\t&#123;\n\t\t\tcomponent:Message,\n\t\t\tchildren:[\n\t\t\t\t&#123;\n\t\t\t\t\tname:&#39;xiangqing&#39;,\n\t\t\t\t\tpath:&#39;detail&#x2F;:id&#x2F;:title&#39;, &#x2F;&#x2F;使用占位符声明接收params参数\n\t\t\t\t\tcomponent:Detail\n\t\t\t\t&#125;\n\t\t\t]\n\t\t&#125;\n\t]\n&#125;</code></pre>\n\n<h3 id=\"传递参数-1\"><a href=\"#传递参数-1\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;\n&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;666&#x2F;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;\n\n&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;\n&lt;router-link\n  :to&#x3D;&quot;&#123;\n\t\tname:&#39;xiangqing&#39;,\n\t\tparams:&#123;\n\t\t   id:666,\n            title:&#39;你好&#39;\n\t\t&#125;\n\t&#125;&quot;\n  &gt;跳转&lt;&#x2F;router-link\n&gt;</code></pre>\n\n<h3 id=\"接收参数-1\"><a href=\"#接收参数-1\" class=\"headerlink\" title=\"接收参数\"></a>接收参数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$route.params.id;\n$route.params.title;</code></pre>\n\n<h2 id=\"路由的-props-配置\"><a href=\"#路由的-props-配置\" class=\"headerlink\" title=\"路由的 props 配置\"></a>路由的 props 配置</h2><ul>\n<li>作用：让路由组件更方便的收到参数</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n\tname:&#39;xiangqing&#39;,\n\tpath:&#39;detail&#x2F;:id&#39;,\n\tcomponent:Detail,\n\n\t&#x2F;&#x2F;第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件\n\t&#x2F;&#x2F; props:&#123;a:900&#125;\n\n\t&#x2F;&#x2F;第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件\n\t&#x2F;&#x2F; props:true\n\n\t&#x2F;&#x2F;第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件\n\tprops(route)&#123;\n\t\treturn &#123;\n\t\t\tid:route.query.id,\n\t\t\ttitle:route.query.title\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"的-replace-属性\"><a href=\"#的-replace-属性\" class=\"headerlink\" title=\"的 replace 属性\"></a><router-link>的 replace 属性</h2><ul>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器的历史记录有两种写入方式：分别为 push 和 replace，push 是追加历史记录，replace 是替换当前记录。路由跳转时候默认为 push</li>\n<li>如何开启 replace 模式：&lt;router-link replace …….&gt;News</router-link></li>\n</ul>\n<h2 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;$router的两个API\nthis.$router.push(&#123;\n  name: &quot;xiangqing&quot;,\n  params: &#123;\n    id: xxx,\n    title: xxx,\n  &#125;,\n&#125;);\n\nthis.$router.replace(&#123;\n  name: &quot;xiangqing&quot;,\n  params: &#123;\n    id: xxx,\n    title: xxx,\n  &#125;,\n&#125;);\nthis.$router.forward(); &#x2F;&#x2F;前进\nthis.$router.back(); &#x2F;&#x2F;后退\nthis.$router.go(); &#x2F;&#x2F;可前进也可后退</code></pre>\n\n<h2 id=\"缓存路由组件\"><a href=\"#缓存路由组件\" class=\"headerlink\" title=\"缓存路由组件\"></a>缓存路由组件</h2><ul>\n<li>作用：让不展示的路由组件保持挂载，不被销毁。</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;keep-alive include&#x3D;&quot;News&quot;&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;keep-alive&gt;</code></pre>\n\n<h2 id=\"两个新的生命周期钩子\"><a href=\"#两个新的生命周期钩子\" class=\"headerlink\" title=\"两个新的生命周期钩子\"></a>两个新的生命周期钩子</h2><ul>\n<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>\n<li>具体名字：<ul>\n<li><code>activated</code>路由组件被激活时触发。</li>\n<li><code>deactivated</code>路由组件失活时触发。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><ul>\n<li>作用：对路由进行权限控制</li>\n<li>分类：<code>全局守卫</code>、<code>独享守卫</code>、<code>组件内守卫</code></li>\n</ul>\n<h3 id=\"全局守卫\"><a href=\"#全局守卫\" class=\"headerlink\" title=\"全局守卫\"></a>全局守卫</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;全局前置守卫：初始化时执行、每次路由切换前执行\nrouter.beforeEach((to, from, next) &#x3D;&gt; &#123;\n  console.log(&quot;beforeEach&quot;, to, from);\n  if (to.meta.isAuth) &#123;\n    &#x2F;&#x2F;判断当前路由是否需要进行权限控制\n    if (localStorage.getItem(&quot;school&quot;) &#x3D;&#x3D;&#x3D; &quot;atguigu&quot;) &#123;\n      &#x2F;&#x2F;权限控制的具体规则\n      next(); &#x2F;&#x2F;放行\n    &#125; else &#123;\n      alert(&quot;暂无权限查看&quot;);\n      &#x2F;&#x2F; next(&#123;name:&#39;guanyu&#39;&#125;)\n    &#125;\n  &#125; else &#123;\n    next(); &#x2F;&#x2F;放行\n  &#125;\n&#125;);\n\n&#x2F;&#x2F;全局后置守卫：初始化时执行、每次路由切换后执行\nrouter.afterEach((to, from) &#x3D;&gt; &#123;\n  console.log(&quot;afterEach&quot;, to, from);\n  if (to.meta.title) &#123;\n    document.title &#x3D; to.meta.title; &#x2F;&#x2F;修改网页的title\n  &#125; else &#123;\n    document.title &#x3D; &quot;vue_test&quot;;\n  &#125;\n&#125;);</code></pre>\n\n<h3 id=\"独享守卫\"><a href=\"#独享守卫\" class=\"headerlink\" title=\"独享守卫\"></a>独享守卫</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeEnter(to,from,next)&#123;\n\tconsole.log(&#39;beforeEnter&#39;,to,from)\n\tif(to.meta.isAuth)&#123; &#x2F;&#x2F;判断当前路由是否需要进行权限控制\n\t\tif(localStorage.getItem(&#39;school&#39;) &#x3D;&#x3D;&#x3D; &#39;atguigu&#39;)&#123;\n\t\t\tnext()\n\t\t&#125;else&#123;\n\t\t\talert(&#39;暂无权限查看&#39;)\n\t\t\t&#x2F;&#x2F; next(&#123;name:&#39;guanyu&#39;&#125;)\n\t\t&#125;\n\t&#125;else&#123;\n\t\tnext()\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;进入守卫：通过路由规则，进入该组件时被调用\nbeforeRouteEnter (to, from, next) &#123;\n&#125;,\n&#x2F;&#x2F;离开守卫：通过路由规则，离开该组件时被调用\nbeforeRouteLeave (to, from, next) &#123;\n&#125;</code></pre>\n\n<h2 id=\"路由的两种工作模式\"><a href=\"#路由的两种工作模式\" class=\"headerlink\" title=\"路由的两种工作模式\"></a>路由的两种工作模式</h2><ul>\n<li>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</li>\n<li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</li>\n<li>hash 模式：<ul>\n<li>地址中永远带着#号，不美观 。</li>\n<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li>\n<li>兼容性较好。</li>\n</ul>\n</li>\n<li>history 模式：<ul>\n<li>地址干净，美观 。</li>\n<li>兼容性和 hash 模式相比略差。</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"介绍 理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。 前端路由：key 是路径，value 是组件。 基本使用 安装 vue-router，命令：npm i vue-router 应用插件：Vue.use(V...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"},{"name":"Vue","slug":"tecnology/Vue","count":3,"path":"api/categories/tecnology/Vue.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tips\"><span class=\"toc-text\">Tips</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%A7%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">多级路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">路由的参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">传递参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">接收参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">命名路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E8%B7%AF%E7%94%B1%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">给路由命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8C%96%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">简化跳转</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84-params-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">路由的 params 参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%EF%BC%8C%E5%A3%B0%E6%98%8E%E6%8E%A5%E6%94%B6-params-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">配置路由，声明接收 params 参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0-1\"><span class=\"toc-text\">传递参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-1\"><span class=\"toc-text\">接收参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84-props-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">路由的 props 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9A%84-replace-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">的 replace 属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">编程式路由导航</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">缓存路由组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%AA%E6%96%B0%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">两个新的生命周期钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">路由守卫</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">全局守卫</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8B%AC%E4%BA%AB%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">独享守卫</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%86%85%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">组件内守卫</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">路由的两种工作模式</span></a></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vuex","uid":"d5f81ad13155fc328e81b1032965290d","slug":"vuex","date":"2023-03-21T15:29:07.000Z","updated":"2023-03-21T15:31:48.211Z","comments":true,"path":"api/articles/vuex.json","keywords":null,"cover":"https://developer.johncayde.com/img/tech/vuex.png","text":"Vuex介绍What’s the Vuex? 概念：专门在Vue中实现集中式状态（数据）管理的一个Vue插，对Vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信 工作原理 核心流程 store： 每一个Vuex应用...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"},{"name":"Vue","slug":"tecnology/Vue","count":3,"path":"api/categories/tecnology/Vue.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Pinia","uid":"6a13b89bc1d9db16e3bd75ad19728f7b","slug":"pinia","date":"2023-03-21T15:21:53.000Z","updated":"2023-03-21T15:25:18.809Z","comments":true,"path":"api/articles/pinia.json","keywords":null,"cover":"https://pinia.vuejs.org/social.png","text":"介绍但 Pinia 适用于 Vue 2 和 Vue 3 ，并且不需要您使用组合 API。 Benefit 开发工具支持 跟踪操作、突变的时间表 商店出现在使用它们的组件中 时间旅行和更容易的调试 热模块更换 无需重新加载页面即可修改您的商店 在开发时保持任何现有状态 为 JS 用...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/categories/tecnology.json"}],"tags":[{"name":"tecnology","slug":"tecnology","count":5,"path":"api/tags/tecnology.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}