{"title":"interview-html","uid":"3aa405af8114bdbedccc4d79b50ad9ac","slug":"interview-html","date":"2024-12-22T10:43:24.000Z","updated":"2024-12-22T11:02:32.707Z","comments":true,"path":"api/articles/interview-html.json","keywords":null,"cover":"/images/interview-html/cover.png","content":"<h2 id=\"src-和-href-的区别\"><a href=\"#src-和-href-的区别\" class=\"headerlink\" title=\"src 和 href 的区别\"></a>src 和 href 的区别</h2><p>在 HTML 中，<code>src</code> 和 <code>href</code> 是两个常用的属性，它们的主要区别在于它们的用途和适用的标签。以下是详细的解释：</p>\n<h3 id=\"1-src-属性\"><a href=\"#1-src-属性\" class=\"headerlink\" title=\"1. src 属性\"></a>1. <code>src</code> 属性</h3><ul>\n<li><strong>全称</strong>：source（源）</li>\n<li><strong>用途</strong>：用于指定外部资源的路径，通常用于嵌入媒体文件，如图像、音频、视频等。</li>\n<li><strong>适用标签</strong>：<ul>\n<li><code>&lt;img&gt;</code>：用于图像</li>\n<li><code>&lt;script&gt;</code>：用于 JavaScript 文件</li>\n<li><code>&lt;iframe&gt;</code>：用于嵌入其他网页</li>\n<li><code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code>：用于音频和视频文件</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;img src&#x3D;&quot;image.jpg&quot; alt&#x3D;&quot;示例图像&quot; &#x2F;&gt;\n&lt;script src&#x3D;&quot;script.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;example.com&quot;&gt;&lt;&#x2F;iframe&gt;</code></pre>\n\n<h3 id=\"2-href-属性\"><a href=\"#2-href-属性\" class=\"headerlink\" title=\"2. href 属性\"></a>2. <code>href</code> 属性</h3><ul>\n<li><strong>全称</strong>：hyperlink reference（超链接引用）</li>\n<li><strong>用途</strong>：用于指定链接的目标地址，通常用于创建超链接。</li>\n<li><strong>适用标签</strong>：<ul>\n<li><code>&lt;a&gt;</code>：用于超链接</li>\n<li><code>&lt;link&gt;</code>：用于链接外部样式表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;example.com&quot;&gt;访问示例网站&lt;&#x2F;a&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;styles.css&quot; &#x2F;&gt;</code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>HTML 语义化是指使用 HTML 标签来准确地描述网页内容的意义和结构，而不仅仅是为了视觉效果。语义化的 HTML 使得网页更易于理解、维护和优化，尤其是在搜索引擎优化（SEO）和无障碍访问方面。</p>\n<h3 id=\"1-语义化的好处\"><a href=\"#1-语义化的好处\" class=\"headerlink\" title=\"1. 语义化的好处\"></a>1. 语义化的好处</h3><ul>\n<li><strong>提高可读性</strong>：语义化的标签使得代码更易于阅读和理解，开发者可以快速识别网页的结构和内容。</li>\n<li><strong>增强 SEO</strong>：搜索引擎能够更好地理解网页内容，从而提高网页在搜索结果中的排名。</li>\n<li><strong>改善无障碍访问</strong>：使用语义化标签可以帮助屏幕阅读器等辅助技术更好地解析网页内容，提升残障人士的访问体验。</li>\n<li><strong>便于维护</strong>：清晰的结构使得后续的维护和更新变得更加简单。</li>\n</ul>\n<h3 id=\"2-常用的语义化标签\"><a href=\"#2-常用的语义化标签\" class=\"headerlink\" title=\"2. 常用的语义化标签\"></a>2. 常用的语义化标签</h3><ul>\n<li><code>&lt;header&gt;</code>：定义文档的头部，通常包含网站的标题、导航等。</li>\n<li><code>&lt;nav&gt;</code>：定义导航链接的部分。</li>\n<li><code>&lt;main&gt;</code>：定义文档的主要内容。</li>\n<li><code>&lt;article&gt;</code>：定义独立的内容块，通常是博客文章或新闻报道。</li>\n<li><code>&lt;section&gt;</code>：定义文档中的一个区域，通常包含相关的内容。</li>\n<li><code>&lt;aside&gt;</code>：定义与主内容相关但不直接相关的内容，如侧边栏。</li>\n<li><code>&lt;footer&gt;</code>：定义文档的底部，通常包含版权信息、联系信息等。</li>\n</ul>\n<h3 id=\"3-示例\"><a href=\"#3-示例\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个简单的 HTML 结构示例，展示了如何使用语义化标签：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;语义化 HTML 示例&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;h1&gt;我的网站&lt;&#x2F;h1&gt;\n      &lt;nav&gt;\n        &lt;ul&gt;\n          &lt;li&gt;&lt;a href&#x3D;&quot;#home&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n          &lt;li&gt;&lt;a href&#x3D;&quot;#about&quot;&gt;关于我们&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n          &lt;li&gt;&lt;a href&#x3D;&quot;#contact&quot;&gt;联系我们&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;nav&gt;\n    &lt;&#x2F;header&gt;\n    &lt;main&gt;\n      &lt;article&gt;\n        &lt;h2&gt;第一篇文章&lt;&#x2F;h2&gt;\n        &lt;p&gt;这是文章的内容。&lt;&#x2F;p&gt;\n      &lt;&#x2F;article&gt;\n      &lt;section&gt;\n        &lt;h2&gt;相关信息&lt;&#x2F;h2&gt;\n        &lt;p&gt;这是与文章相关的信息。&lt;&#x2F;p&gt;\n      &lt;&#x2F;section&gt;\n    &lt;&#x2F;main&gt;\n    &lt;aside&gt;\n      &lt;h2&gt;侧边栏&lt;&#x2F;h2&gt;\n      &lt;p&gt;这是侧边栏的内容。&lt;&#x2F;p&gt;\n    &lt;&#x2F;aside&gt;\n    &lt;footer&gt;\n      &lt;p&gt;© 2023 我的公司&lt;&#x2F;p&gt;\n    &lt;&#x2F;footer&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>HTML 语义化不仅有助于提升网页的可读性和可维护性，还能增强搜索引擎的理解能力和无障碍访问体验。使用合适的语义化标签是现代网页开发的重要实践。</p>\n<h2 id=\"DOCTYPE-⽂档类型-的作⽤\"><a href=\"#DOCTYPE-⽂档类型-的作⽤\" class=\"headerlink\" title=\"DOCTYPE(⽂档类型) 的作⽤\"></a>DOCTYPE(⽂档类型) 的作⽤</h2><p><code>DOCTYPE</code>（文档类型声明）是 HTML 文档的第一行代码，用于告诉浏览器该文档使用的 HTML 或 XHTML 版本。它的主要作用包括以下几个方面：</p>\n<h3 id=\"1-指定文档类型\"><a href=\"#1-指定文档类型\" class=\"headerlink\" title=\"1. 指定文档类型\"></a>1. 指定文档类型</h3><p><code>DOCTYPE</code> 声明帮助浏览器识别文档的类型和版本，从而正确解析和渲染网页。不同的 HTML 版本有不同的语法和特性，<code>DOCTYPE</code> 确保浏览器使用正确的规则来处理文档。</p>\n<h3 id=\"2-启用标准模式\"><a href=\"#2-启用标准模式\" class=\"headerlink\" title=\"2. 启用标准模式\"></a>2. 启用标准模式</h3><p>使用 <code>DOCTYPE</code> 声明可以使浏览器进入标准模式（Standards Mode），在这种模式下，浏览器会遵循 W3C 的标准来渲染页面。没有 <code>DOCTYPE</code> 声明时，浏览器可能会进入怪异模式（Quirks Mode），这可能导致页面在不同浏览器中的表现不一致。</p>\n<h3 id=\"3-提高兼容性\"><a href=\"#3-提高兼容性\" class=\"headerlink\" title=\"3. 提高兼容性\"></a>3. 提高兼容性</h3><p>通过明确指定文档类型，开发者可以确保网页在不同浏览器和设备上的兼容性。这样可以减少因浏览器解析差异而导致的显示问题。</p>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是几种常见的 <code>DOCTYPE</code> 声明示例：</p>\n<ul>\n<li><p><strong>HTML5</strong>：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;</code></pre>\n</li>\n<li><p><strong>HTML 4.01</strong>：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</code></pre>\n</li>\n<li><p><strong>XHTML 1.0</strong>：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Strict&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-strict.dtd&quot;&gt;</code></pre></li>\n</ul>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p><code>DOCTYPE</code> 声明在 HTML 文档中起着至关重要的作用，它不仅指定了文档的类型和版本，还影响浏览器的渲染模式和兼容性。为了确保网页的正确显示和良好的用户体验，建议在每个 HTML 文档的开头都包含适当的 <code>DOCTYPE</code> 声明。</p>\n<h2 id=\"script-标签中-defer-和-async-的区别\"><a href=\"#script-标签中-defer-和-async-的区别\" class=\"headerlink\" title=\"script 标签中 defer 和 async 的区别\"></a>script 标签中 defer 和 async 的区别</h2><p>在 HTML 中，<code>&lt;script&gt;</code> 标签用于引入和执行 JavaScript 代码。为了优化网页的加载性能，<code>&lt;script&gt;</code> 标签可以使用 <code>defer</code> 和 <code>async</code> 属性。这两个属性的主要区别在于它们的加载和执行方式。以下是详细的解释：</p>\n<h3 id=\"1-defer-属性\"><a href=\"#1-defer-属性\" class=\"headerlink\" title=\"1. defer 属性\"></a>1. <code>defer</code> 属性</h3><ul>\n<li><strong>加载方式</strong>：当使用 <code>defer</code> 属性时，脚本会在文档解析完成后异步加载，但会在 <code>DOMContentLoaded</code> 事件之前执行。</li>\n<li><strong>执行顺序</strong>：多个带有 <code>defer</code> 的脚本会按照它们在文档中出现的顺序依次执行。</li>\n<li><strong>适用场景</strong>：适合需要在 DOM 完全加载后执行的脚本，尤其是当脚本之间有依赖关系时。</li>\n</ul>\n<h4 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;使用 defer&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;script1.js&quot; defer&gt;&lt;&#x2F;script&gt;\n    &lt;script src&#x3D;&quot;script2.js&quot; defer&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"2-async-属性\"><a href=\"#2-async-属性\" class=\"headerlink\" title=\"2. async 属性\"></a>2. <code>async</code> 属性</h3><ul>\n<li><strong>加载方式</strong>：当使用 <code>async</code> 属性时，脚本会异步加载，并且在加载完成后立即执行，而不等待文档解析完成。</li>\n<li><strong>执行顺序</strong>：多个带有 <code>async</code> 的脚本的执行顺序是不确定的，取决于它们的加载时间。</li>\n<li><strong>适用场景</strong>：适合独立的脚本，不依赖于其他脚本或 DOM 的内容。</li>\n</ul>\n<h4 id=\"示例：-3\"><a href=\"#示例：-3\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;使用 async&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;script1.js&quot; async&gt;&lt;&#x2F;script&gt;\n    &lt;script src&#x3D;&quot;script2.js&quot; async&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li>**<code>defer</code>**：脚本异步加载，执行顺序按照文档中的顺序，适合需要在 DOM 加载完成后执行的脚本。</li>\n<li>**<code>async</code>**：脚本异步加载，执行顺序不确定，适合独立的脚本。</li>\n</ul>\n<p>选择使用 <code>defer</code> 还是 <code>async</code> 取决于脚本的依赖关系和执行时机。如果脚本需要在 DOM 完全加载后执行，使用 <code>defer</code>；如果脚本是独立的，可以使用 <code>async</code>。</p>\n<h2 id=\"常⽤的-meta-标签有哪些\"><a href=\"#常⽤的-meta-标签有哪些\" class=\"headerlink\" title=\"常⽤的 meta 标签有哪些\"></a>常⽤的 meta 标签有哪些</h2><p>在 HTML 中，<code>&lt;meta&gt;</code> 标签用于提供关于文档的元数据，这些元数据不会直接显示在网页上，但对浏览器、搜索引擎和其他服务非常重要。以下是一些常用的 <code>&lt;meta&gt;</code> 标签及其作用：</p>\n<h3 id=\"1-字符集声明\"><a href=\"#1-字符集声明\" class=\"headerlink\" title=\"1. 字符集声明\"></a>1. 字符集声明</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：指定文档的字符编码，<code>UTF-8</code> 是一种常用的字符编码，支持多种语言字符。</li>\n</ul>\n<h3 id=\"2-页面描述\"><a href=\"#2-页面描述\" class=\"headerlink\" title=\"2. 页面描述\"></a>2. 页面描述</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta\n  name&#x3D;&quot;description&quot;\n  content&#x3D;&quot;这是一个示例网页，用于展示常用的 meta 标签。&quot;\n&#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：提供网页的简短描述，搜索引擎通常会在搜索结果中显示这个描述。</li>\n</ul>\n<h3 id=\"3-关键词\"><a href=\"#3-关键词\" class=\"headerlink\" title=\"3. 关键词\"></a>3. 关键词</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;HTML, meta 标签, 示例, 编程&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：列出与网页内容相关的关键词，虽然现代搜索引擎对这个标签的重视程度降低，但仍然可以提供一些帮助。</li>\n</ul>\n<h3 id=\"4-作者信息\"><a href=\"#4-作者信息\" class=\"headerlink\" title=\"4. 作者信息\"></a>4. 作者信息</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;author&quot; content&#x3D;&quot;张三&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：指定网页的作者信息。</li>\n</ul>\n<h3 id=\"5-视口设置\"><a href=\"#5-视口设置\" class=\"headerlink\" title=\"5. 视口设置\"></a>5. 视口设置</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：控制网页在移动设备上的布局和缩放，确保网页在不同设备上良好显示。</li>\n</ul>\n<h3 id=\"6-兼容性设置\"><a href=\"#6-兼容性设置\" class=\"headerlink\" title=\"6. 兼容性设置\"></a>6. 兼容性设置</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：指定 Internet Explorer 的渲染模式，<code>IE=edge</code> 表示使用最新的渲染引擎。</li>\n</ul>\n<h3 id=\"7-版权信息\"><a href=\"#7-版权信息\" class=\"headerlink\" title=\"7. 版权信息\"></a>7. 版权信息</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta name&#x3D;&quot;copyright&quot; content&#x3D;&quot;© 2023 我的公司&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：提供网页的版权信息。</li>\n</ul>\n<h3 id=\"8-社交媒体分享\"><a href=\"#8-社交媒体分享\" class=\"headerlink\" title=\"8. 社交媒体分享\"></a>8. 社交媒体分享</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta property&#x3D;&quot;og:title&quot; content&#x3D;&quot;示例网页&quot; &#x2F;&gt;\n&lt;meta\n  property&#x3D;&quot;og:description&quot;\n  content&#x3D;&quot;这是一个示例网页，用于展示常用的 meta 标签。&quot;\n&#x2F;&gt;\n&lt;meta property&#x3D;&quot;og:image&quot; content&#x3D;&quot;image.jpg&quot; &#x2F;&gt;\n&lt;meta property&#x3D;&quot;og:url&quot; content&#x3D;&quot;https:&#x2F;&#x2F;example.com&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><strong>作用</strong>：用于社交媒体分享时的元数据，<code>og</code> 表示 Open Graph 协议，帮助在社交平台上更好地展示链接。</li>\n</ul>\n<h3 id=\"9-其他常用标签\"><a href=\"#9-其他常用标签\" class=\"headerlink\" title=\"9. 其他常用标签\"></a>9. 其他常用标签</h3><ul>\n<li><strong>刷新页面</strong>：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;30&quot; &#x2F;&gt;</code></pre>\n<ul>\n<li><strong>作用</strong>：每 30 秒刷新一次页面。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>&lt;meta&gt;</code> 标签在网页中扮演着重要的角色，提供了关于文档的各种信息，帮助浏览器和搜索引擎更好地理解和处理网页内容。根据需要，可以选择合适的 <code>&lt;meta&gt;</code> 标签来优化网页的表现和可访问性。</p>\n<h2 id=\"HTML5-有哪些更新\"><a href=\"#HTML5-有哪些更新\" class=\"headerlink\" title=\"HTML5 有哪些更新\"></a>HTML5 有哪些更新</h2><p>HTML5 是 HTML 的最新版本，相较于之前的版本，HTML5 引入了许多新特性和改进。以下是一些主要的更新和新特性：</p>\n<h3 id=\"1-新的语义元素\"><a href=\"#1-新的语义元素\" class=\"headerlink\" title=\"1. 新的语义元素\"></a>1. 新的语义元素</h3><p>HTML5 引入了一些新的语义标签，使得网页结构更加清晰和易于理解：</p>\n<ul>\n<li><code>&lt;header&gt;</code>：定义文档的头部。</li>\n<li><code>&lt;nav&gt;</code>：定义导航链接的部分。</li>\n<li><code>&lt;main&gt;</code>：定义文档的主要内容。</li>\n<li><code>&lt;section&gt;</code>：定义文档中的一个区域。</li>\n<li><code>&lt;article&gt;</code>：定义独立的内容块。</li>\n<li><code>&lt;aside&gt;</code>：定义与主内容相关但不直接相关的内容。</li>\n<li><code>&lt;footer&gt;</code>：定义文档的底部。</li>\n</ul>\n<h3 id=\"2-新的表单控件\"><a href=\"#2-新的表单控件\" class=\"headerlink\" title=\"2. 新的表单控件\"></a>2. 新的表单控件</h3><p>HTML5 增强了表单功能，新增了一些输入类型和属性：</p>\n<ul>\n<li>新的输入类型：<code>email</code>、<code>url</code>、<code>date</code>、<code>time</code>、<code>number</code>、<code>range</code>、<code>color</code> 等。</li>\n<li>新的表单属性：<code>placeholder</code>、<code>required</code>、<code>pattern</code>、<code>autocomplete</code> 等。</li>\n</ul>\n<h3 id=\"3-多媒体支持\"><a href=\"#3-多媒体支持\" class=\"headerlink\" title=\"3. 多媒体支持\"></a>3. 多媒体支持</h3><p>HTML5 提供了原生的音频和视频支持，使用 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 标签，无需依赖外部插件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;audio controls&gt;\n  &lt;source src&#x3D;&quot;audio.mp3&quot; type&#x3D;&quot;audio&#x2F;mpeg&quot; &#x2F;&gt;\n  您的浏览器不支持音频元素。\n&lt;&#x2F;audio&gt;\n\n&lt;video width&#x3D;&quot;320&quot; height&#x3D;&quot;240&quot; controls&gt;\n  &lt;source src&#x3D;&quot;video.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot; &#x2F;&gt;\n  您的浏览器不支持视频元素。\n&lt;&#x2F;video&gt;</code></pre>\n\n<h3 id=\"4-Canvas-和-SVG\"><a href=\"#4-Canvas-和-SVG\" class=\"headerlink\" title=\"4. Canvas 和 SVG\"></a>4. Canvas 和 SVG</h3><p>HTML5 引入了 <code>&lt;canvas&gt;</code> 元素，允许在网页上动态绘制图形和动画：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;canvas\n  id&#x3D;&quot;myCanvas&quot;\n  width&#x3D;&quot;200&quot;\n  height&#x3D;&quot;100&quot;\n  style&#x3D;&quot;border:1px solid #000000;&quot;\n&gt;&lt;&#x2F;canvas&gt;</code></pre>\n\n<h3 id=\"5-本地存储\"><a href=\"#5-本地存储\" class=\"headerlink\" title=\"5. 本地存储\"></a>5. 本地存储</h3><p>HTML5 提供了本地存储 API，允许在用户的浏览器中存储数据，分为两种：</p>\n<ul>\n<li><code>localStorage</code>：持久存储，数据不会过期。</li>\n<li><code>sessionStorage</code>：会话存储，数据在浏览器会话结束时清除。</li>\n</ul>\n<h3 id=\"6-地理位置-API\"><a href=\"#6-地理位置-API\" class=\"headerlink\" title=\"6. 地理位置 API\"></a>6. 地理位置 API</h3><p>HTML5 引入了地理位置 API，允许网页获取用户的地理位置信息：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">navigator.geolocation.getCurrentPosition(function (position) &#123;\n  console.log(position.coords.latitude, position.coords.longitude);\n&#125;);</code></pre>\n\n<h3 id=\"7-WebSockets\"><a href=\"#7-WebSockets\" class=\"headerlink\" title=\"7. WebSockets\"></a>7. WebSockets</h3><p>HTML5 引入了 WebSockets，允许在客户端和服务器之间建立持久的双向通信通道，适用于实时应用。</p>\n<h3 id=\"8-离线应用\"><a href=\"#8-离线应用\" class=\"headerlink\" title=\"8. 离线应用\"></a>8. 离线应用</h3><p>HTML5 提供了应用缓存（Application Cache）和 Service Workers，允许网页在离线状态下运行。</p>\n<h3 id=\"9-新的-API\"><a href=\"#9-新的-API\" class=\"headerlink\" title=\"9. 新的 API\"></a>9. 新的 API</h3><p>HTML5 还引入了许多新的 API，如：</p>\n<ul>\n<li><strong>拖放 API</strong>：支持拖放操作。</li>\n<li><strong>Web Workers</strong>：允许在后台线程中运行 JavaScript，提升性能。</li>\n<li><strong>Web Storage</strong>：提供更简单的本地存储解决方案。</li>\n</ul>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>HTML5 带来了许多新的特性和改进，使得网页开发更加灵活和强大。通过引入新的语义元素、多媒体支持、存储解决方案和各种 API，HTML5 使得开发者能够创建更丰富和互动的用户体验。</p>\n<h2 id=\"img-的-srcset-属性的作⽤？\"><a href=\"#img-的-srcset-属性的作⽤？\" class=\"headerlink\" title=\"img 的 srcset 属性的作⽤？\"></a>img 的 srcset 属性的作⽤？</h2><p><code>&lt;img&gt;</code> 标签中的 <code>srcset</code> 属性用于提供多个图像资源，以便浏览器根据不同的条件（如屏幕分辨率、视口大小等）选择最合适的图像进行加载。这种技术被称为响应式图像，可以提高网页的加载性能和用户体验。</p>\n<h3 id=\"1-主要作用\"><a href=\"#1-主要作用\" class=\"headerlink\" title=\"1. 主要作用\"></a>1. 主要作用</h3><ul>\n<li><strong>适应不同设备</strong>：<code>srcset</code> 允许开发者为不同的设备和屏幕分辨率提供不同的图像版本，从而确保在各种设备上都能获得最佳的视觉效果。</li>\n<li><strong>优化加载性能</strong>：通过根据设备的特性选择合适的图像，减少不必要的带宽消耗，提高页面加载速度。</li>\n<li><strong>提高图像质量</strong>：在高分辨率设备（如 Retina 显示屏）上，可以提供更高质量的图像，确保图像清晰可见。</li>\n</ul>\n<h3 id=\"2-使用方式\"><a href=\"#2-使用方式\" class=\"headerlink\" title=\"2. 使用方式\"></a>2. 使用方式</h3><p><code>srcset</code> 属性通常与 <code>sizes</code> 属性一起使用，<code>sizes</code> 属性定义了图像在不同条件下的显示大小。以下是一个示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;img\n  src&#x3D;&quot;image-small.jpg&quot;\n  srcset&#x3D;&quot;image-small.jpg 600w, image-medium.jpg 1200w, image-large.jpg 1800w&quot;\n  sizes&#x3D;&quot;(max-width: 600px) 100vw, \n           (max-width: 1200px) 50vw, \n           33vw&quot;\n  alt&#x3D;&quot;示例图像&quot;\n&#x2F;&gt;</code></pre>\n\n<h3 id=\"3-示例解析\"><a href=\"#3-示例解析\" class=\"headerlink\" title=\"3. 示例解析\"></a>3. 示例解析</h3><ul>\n<li>**<code>src</code>**：提供了默认图像（在不支持 <code>srcset</code> 的浏览器中使用）。</li>\n<li>**<code>srcset</code>**：列出了不同图像及其对应的宽度（<code>600w</code>、<code>1200w</code>、<code>1800w</code>），浏览器会根据设备的屏幕宽度选择合适的图像。</li>\n<li>**<code>sizes</code>**：定义了在不同条件下图像的显示大小：<ul>\n<li>当视口宽度小于或等于 600px 时，图像宽度为 100%（<code>100vw</code>）。</li>\n<li>当视口宽度小于或等于 1200px 时，图像宽度为 50%（<code>50vw</code>）。</li>\n<li>在其他情况下，图像宽度为 33%（<code>33vw</code>）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-总结-1\"><a href=\"#4-总结-1\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p><code>srcset</code> 属性使得开发者能够为不同的设备和条件提供多种图像选择，从而优化网页的加载性能和用户体验。通过合理使用 <code>srcset</code> 和 <code>sizes</code>，可以确保在各种设备上都能展示出最佳的图像效果。</p>\n<h2 id=\"行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h2><p>在 HTML 中，元素可以根据其显示特性分为三种类型：行内元素、块级元素和空（void）元素。以下是对这三种元素的详细分类和说明：</p>\n<h3 id=\"1-行内元素\"><a href=\"#1-行内元素\" class=\"headerlink\" title=\"1. 行内元素\"></a>1. 行内元素</h3><p>行内元素（Inline Elements）是指不会在前后产生换行的元素，它们通常用于文本内容的格式化。常见的行内元素包括：</p>\n<ul>\n<li><code>&lt;a&gt;</code>：超链接</li>\n<li><code>&lt;span&gt;</code>：通用的行内容器</li>\n<li><code>&lt;strong&gt;</code>：加粗文本</li>\n<li><code>&lt;em&gt;</code>：斜体文本</li>\n<li><code>&lt;b&gt;</code>：加粗文本（不带语义）</li>\n<li><code>&lt;i&gt;</code>：斜体文本（不带语义）</li>\n<li><code>&lt;img&gt;</code>：图像</li>\n<li><code>&lt;br&gt;</code>：换行</li>\n<li><code>&lt;code&gt;</code>：代码片段</li>\n<li><code>&lt;small&gt;</code>：小号文本</li>\n<li><code>&lt;sub&gt;</code>：下标</li>\n<li><code>&lt;sup&gt;</code>：上标</li>\n<li><code>&lt;time&gt;</code>：时间</li>\n<li><code>&lt;label&gt;</code>：表单标签</li>\n</ul>\n<h3 id=\"2-块级元素\"><a href=\"#2-块级元素\" class=\"headerlink\" title=\"2. 块级元素\"></a>2. 块级元素</h3><p>块级元素（Block Elements）是指在前后会产生换行的元素，它们通常用于构建页面的结构。常见的块级元素包括：</p>\n<ul>\n<li><code>&lt;div&gt;</code>：通用的块级容器</li>\n<li><code>&lt;p&gt;</code>：段落</li>\n<li><code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>：标题（从大到小）</li>\n<li><code>&lt;ul&gt;</code>：无序列表</li>\n<li><code>&lt;ol&gt;</code>：有序列表</li>\n<li><code>&lt;li&gt;</code>：列表项</li>\n<li><code>&lt;header&gt;</code>：文档头部</li>\n<li><code>&lt;footer&gt;</code>：文档底部</li>\n<li><code>&lt;section&gt;</code>：文档中的一个区域</li>\n<li><code>&lt;article&gt;</code>：独立的内容块</li>\n<li><code>&lt;aside&gt;</code>：与主内容相关但不直接相关的内容</li>\n<li><code>&lt;table&gt;</code>：表格</li>\n<li><code>&lt;form&gt;</code>：表单</li>\n</ul>\n<h3 id=\"3-空（void）元素\"><a href=\"#3-空（void）元素\" class=\"headerlink\" title=\"3. 空（void）元素\"></a>3. 空（void）元素</h3><p>空元素（Void Elements）是指没有结束标签的元素，它们通常用于插入内容或提供功能。常见的空元素包括：</p>\n<ul>\n<li><code>&lt;br&gt;</code>：换行</li>\n<li><code>&lt;hr&gt;</code>：水平线</li>\n<li><code>&lt;img&gt;</code>：图像</li>\n<li><code>&lt;input&gt;</code>：输入框</li>\n<li><code>&lt;link&gt;</code>：链接外部资源（如样式表）</li>\n<li><code>&lt;meta&gt;</code>：提供文档的元数据</li>\n<li><code>&lt;base&gt;</code>：指定相对 URL 的基准 URL</li>\n<li><code>&lt;source&gt;</code>：为 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 提供多个资源</li>\n<li><code>&lt;track&gt;</code>：为 <code>&lt;video&gt;</code> 提供文本轨道</li>\n<li><code>&lt;area&gt;</code>：定义图像地图中的区域</li>\n</ul>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>行内元素</strong>：不会产生换行，通常用于文本格式化。</li>\n<li><strong>块级元素</strong>：会产生换行，通常用于构建页面结构。</li>\n<li><strong>空元素</strong>：没有结束标签，通常用于插入内容或提供功能。</li>\n</ul>\n<h2 id=\"说一下-web-worker\"><a href=\"#说一下-web-worker\" class=\"headerlink\" title=\"说一下 web worker\"></a>说一下 web worker</h2><p>Web Worker 是一种在浏览器中运行 JavaScript 的机制，允许开发者在后台线程中执行脚本，从而实现多线程编程。Web Worker 的主要目的是提高网页的性能，尤其是在处理大量计算或长时间运行的任务时，避免阻塞主线程（UI 线程），从而保持用户界面的响应性。</p>\n<h3 id=\"1-Web-Worker-的特点\"><a href=\"#1-Web-Worker-的特点\" class=\"headerlink\" title=\"1. Web Worker 的特点\"></a>1. Web Worker 的特点</h3><ul>\n<li><strong>并行执行</strong>：Web Worker 在独立的线程中运行，可以与主线程并行执行，避免了长时间的计算导致用户界面卡顿。</li>\n<li><strong>不访问 DOM</strong>：Web Worker 不能直接访问 DOM 和窗口对象，但可以通过消息传递与主线程进行通信。</li>\n<li><strong>异步处理</strong>：Web Worker 的任务是异步的，主线程可以继续执行其他操作，而不必等待 Worker 完成任务。</li>\n</ul>\n<h3 id=\"2-创建-Web-Worker\"><a href=\"#2-创建-Web-Worker\" class=\"headerlink\" title=\"2. 创建 Web Worker\"></a>2. 创建 Web Worker</h3><p>要创建一个 Web Worker，通常需要以下步骤：</p>\n<ol>\n<li><p><strong>创建 Worker 脚本</strong>：编写一个 JavaScript 文件，包含 Worker 要执行的代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; worker.js\nself.onmessage &#x3D; function (event) &#123;\n  const result &#x3D; event.data * 2; &#x2F;&#x2F; 处理数据\n  self.postMessage(result); &#x2F;&#x2F; 将结果发送回主线程\n&#125;;</code></pre>\n</li>\n<li><p><strong>在主线程中创建 Worker 实例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nconst worker &#x3D; new Worker(&quot;worker.js&quot;);\n\nworker.onmessage &#x3D; function (event) &#123;\n  console.log(&quot;Worker 返回的结果:&quot;, event.data);\n&#125;;\n\nworker.postMessage(10); &#x2F;&#x2F; 向 Worker 发送数据</code></pre></li>\n</ol>\n<h3 id=\"3-消息传递\"><a href=\"#3-消息传递\" class=\"headerlink\" title=\"3. 消息传递\"></a>3. 消息传递</h3><p>主线程和 Worker 之间通过 <code>postMessage</code> 方法进行消息传递。主线程可以使用 <code>worker.postMessage(data)</code> 向 Worker 发送数据，而 Worker 可以使用 <code>self.postMessage(data)</code> 向主线程发送数据。</p>\n<h3 id=\"4-终止-Worker\"><a href=\"#4-终止-Worker\" class=\"headerlink\" title=\"4. 终止 Worker\"></a>4. 终止 Worker</h3><p>可以使用 <code>worker.terminate()</code> 方法终止 Worker 的执行。Worker 一旦被终止，将无法再恢复。</p>\n<h3 id=\"5-使用场景\"><a href=\"#5-使用场景\" class=\"headerlink\" title=\"5. 使用场景\"></a>5. 使用场景</h3><p>Web Worker 适用于以下场景：</p>\n<ul>\n<li><strong>复杂计算</strong>：处理大量数据或复杂算法时，可以将计算任务放在 Worker 中执行。</li>\n<li><strong>数据处理</strong>：在后台处理数据（如图像处理、文件解析等），避免阻塞主线程。</li>\n<li><strong>实时应用</strong>：在实时应用中（如在线游戏、聊天应用等），可以使用 Worker 处理网络请求和数据更新。</li>\n</ul>\n<h3 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a>6. 注意事项</h3><ul>\n<li>Web Worker 不能访问 DOM，因此需要通过消息传递与主线程进行交互。</li>\n<li>Worker 脚本必须在同源策略下加载，不能跨域。</li>\n<li>Worker 的创建和通信会有一定的性能开销，因此适合用于长时间运行的任务。</li>\n</ul>\n<h3 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Web Worker 是一种强大的工具，可以帮助开发者在浏览器中实现多线程编程，提升网页的性能和用户体验。通过将计算密集型任务放在后台线程中执行，Web Worker 可以有效避免主线程的阻塞，保持用户界面的流畅性。</p>\n<h2 id=\"HTML5-的离线储存怎么使用，它的工作原理是什么\"><a href=\"#HTML5-的离线储存怎么使用，它的工作原理是什么\" class=\"headerlink\" title=\"HTML5 的离线储存怎么使用，它的工作原理是什么\"></a>HTML5 的离线储存怎么使用，它的工作原理是什么</h2><p>HTML5 的离线存储主要通过两种技术实现：<strong>应用缓存（Application Cache）</strong>和<strong>Web Storage</strong>（包括 <code>localStorage</code> 和 <code>sessionStorage</code>）。以下是这两种技术的详细介绍及其工作原理。</p>\n<h3 id=\"1-应用缓存（Application-Cache）\"><a href=\"#1-应用缓存（Application-Cache）\" class=\"headerlink\" title=\"1. 应用缓存（Application Cache）\"></a>1. 应用缓存（Application Cache）</h3><h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>应用缓存允许开发者指定哪些资源（如 HTML、CSS、JavaScript、图像等）可以在用户的设备上缓存，以便在离线状态下访问。应用缓存的工作原理如下：</p>\n<ul>\n<li><strong>Manifest 文件</strong>：开发者需要创建一个清单文件（manifest file），该文件列出了需要缓存的资源和其他相关信息。</li>\n<li><strong>浏览器缓存</strong>：当用户首次访问网页时，浏览器会下载并缓存清单文件中列出的所有资源。</li>\n<li><strong>离线访问</strong>：当用户处于离线状态时，浏览器会从缓存中加载资源，而不是从网络请求。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html manifest&#x3D;&quot;example.appcache&quot;&gt;\n  &lt;head&gt;\n    &lt;title&gt;离线应用示例&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎使用离线应用&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><strong>manifest 文件（example.appcache）</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CACHE MANIFEST\n# 版本 1.0\n\nCACHE:\nindex.html\nstyles.css\nscript.js\n\nNETWORK:\n*</code></pre>\n\n<ul>\n<li><strong>CACHE</strong>：列出需要缓存的资源。</li>\n<li><strong>NETWORK</strong>：列出需要从网络请求的资源，<code>*</code> 表示所有其他资源。</li>\n</ul>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>应用缓存已被标记为过时，建议使用 Service Workers 作为替代方案。</li>\n</ul>\n<h3 id=\"2-Web-Storage\"><a href=\"#2-Web-Storage\" class=\"headerlink\" title=\"2. Web Storage\"></a>2. Web Storage</h3><p>Web Storage 提供了两种存储机制：<code>localStorage</code> 和 <code>sessionStorage</code>。</p>\n<h4 id=\"2-1-localStorage\"><a href=\"#2-1-localStorage\" class=\"headerlink\" title=\"2.1 localStorage\"></a>2.1 localStorage</h4><ul>\n<li><strong>持久性</strong>：数据存储在用户的浏览器中，直到被显式删除，数据不会过期。</li>\n<li><strong>存储大小</strong>：通常可以存储约 5MB 的数据。</li>\n</ul>\n<p><strong>使用示例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 存储数据\nlocalStorage.setItem(&quot;key&quot;, &quot;value&quot;);\n\n&#x2F;&#x2F; 读取数据\nconst value &#x3D; localStorage.getItem(&quot;key&quot;);\n\n&#x2F;&#x2F; 删除数据\nlocalStorage.removeItem(&quot;key&quot;);\n\n&#x2F;&#x2F; 清空所有数据\nlocalStorage.clear();</code></pre>\n\n<h4 id=\"2-2-sessionStorage\"><a href=\"#2-2-sessionStorage\" class=\"headerlink\" title=\"2.2 sessionStorage\"></a>2.2 sessionStorage</h4><ul>\n<li><strong>会话性</strong>：数据仅在当前会话中有效，浏览器窗口关闭后数据会被清除。</li>\n<li><strong>存储大小</strong>：通常可以存储约 5MB 的数据。</li>\n</ul>\n<p><strong>使用示例</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 存储数据\nsessionStorage.setItem(&quot;sessionKey&quot;, &quot;sessionValue&quot;);\n\n&#x2F;&#x2F; 读取数据\nconst sessionValue &#x3D; sessionStorage.getItem(&quot;sessionKey&quot;);\n\n&#x2F;&#x2F; 删除数据\nsessionStorage.removeItem(&quot;sessionKey&quot;);\n\n&#x2F;&#x2F; 清空所有数据\nsessionStorage.clear();</code></pre>\n\n<h3 id=\"3-总结-1\"><a href=\"#3-总结-1\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>应用缓存</strong>：允许开发者缓存网页资源以便离线访问，但已被标记为过时，建议使用 Service Workers。</li>\n<li><strong>Web Storage</strong>：提供 <code>localStorage</code> 和 <code>sessionStorage</code>，用于在浏览器中存储数据，适合需要持久化或会话性的数据存储。</li>\n</ul>\n<p>通过合理使用这些技术，开发者可以创建更好的用户体验，允许用户在离线状态下访问网页和应用。</p>\n<h2 id=\"浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\"><a href=\"#浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\" class=\"headerlink\" title=\"浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\"></a>浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</h2><p>浏览器对 HTML5 的离线存储资源进行管理和加载的方式主要依赖于应用缓存（Application Cache）和 Web Storage（<code>localStorage</code> 和 <code>sessionStorage</code>）。以下是这两种技术的详细管理和加载机制：</p>\n<h3 id=\"1-应用缓存（Application-Cache）-1\"><a href=\"#1-应用缓存（Application-Cache）-1\" class=\"headerlink\" title=\"1. 应用缓存（Application Cache）\"></a>1. 应用缓存（Application Cache）</h3><h4 id=\"管理和加载过程\"><a href=\"#管理和加载过程\" class=\"headerlink\" title=\"管理和加载过程\"></a>管理和加载过程</h4><ol>\n<li><p><strong>清单文件（Manifest File）</strong>：</p>\n<ul>\n<li>开发者创建一个清单文件，列出需要缓存的资源。</li>\n<li>清单文件的 MIME 类型应为 <code>text/cache-manifest</code>。</li>\n</ul>\n</li>\n<li><p><strong>首次加载</strong>：</p>\n<ul>\n<li>当用户首次访问网页时，浏览器会请求清单文件。</li>\n<li>浏览器解析清单文件，下载并缓存文件中列出的所有资源。</li>\n</ul>\n</li>\n<li><p><strong>资源更新</strong>：</p>\n<ul>\n<li>如果清单文件的内容发生变化（例如，版本号更新），浏览器会重新下载清单文件并更新缓存。</li>\n<li>开发者可以通过在清单文件中添加注释（如 <code># version 1.0</code>）来强制浏览器更新缓存。</li>\n</ul>\n</li>\n<li><p><strong>离线访问</strong>：</p>\n<ul>\n<li>当用户处于离线状态时，浏览器会从缓存中加载资源，而不是从网络请求。</li>\n<li>如果请求的资源不在缓存中，浏览器会显示错误页面。</li>\n</ul>\n</li>\n<li><p><strong>事件管理</strong>：</p>\n<ul>\n<li>浏览器会触发一些事件，如 <code>updateready</code>，开发者可以通过 JavaScript 监听这些事件，以便在资源更新时进行相应处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>应用缓存已被标记为过时，建议使用 Service Workers 作为替代方案。</li>\n</ul>\n<h3 id=\"2-Web-Storage-1\"><a href=\"#2-Web-Storage-1\" class=\"headerlink\" title=\"2. Web Storage\"></a>2. Web Storage</h3><h4 id=\"管理和加载过程-1\"><a href=\"#管理和加载过程-1\" class=\"headerlink\" title=\"管理和加载过程\"></a>管理和加载过程</h4><ol>\n<li><p><strong>数据存储</strong>：</p>\n<ul>\n<li>开发者可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> API 存储数据。</li>\n<li>数据以键值对的形式存储，<code>localStorage</code> 的数据在浏览器关闭后仍然存在，而 <code>sessionStorage</code> 的数据在浏览器会话结束后被清除。</li>\n</ul>\n</li>\n<li><p><strong>数据访问</strong>：</p>\n<ul>\n<li>开发者可以通过 <code>getItem</code> 方法读取存储的数据，通过 <code>setItem</code> 方法存储数据。</li>\n<li>数据的存储和读取是同步的，操作简单且快速。</li>\n</ul>\n</li>\n<li><p><strong>数据管理</strong>：</p>\n<ul>\n<li>开发者可以使用 <code>removeItem</code> 方法删除特定的键值对，使用 <code>clear</code> 方法清空所有存储的数据。</li>\n</ul>\n</li>\n<li><p><strong>存储限制</strong>：</p>\n<ul>\n<li>大多数浏览器对 <code>localStorage</code> 和 <code>sessionStorage</code> 的存储大小限制在 5MB 左右，具体取决于浏览器的实现。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-总结-2\"><a href=\"#3-总结-2\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li><strong>应用缓存</strong>：通过清单文件管理和加载离线资源，允许用户在离线状态下访问网页。虽然功能强大，但已被标记为过时，建议使用 Service Workers。</li>\n<li><strong>Web Storage</strong>：提供简单的 API 来管理和加载数据，适合需要持久化或会话性的数据存储。</li>\n</ul>\n<p>通过这些机制，浏览器能够有效地管理和加载 HTML5 的离线存储资源，提升用户体验，允许用户在没有网络连接的情况下访问网页和应用。</p>\n<h2 id=\"title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别？\"><a href=\"#title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别？\" class=\"headerlink\" title=\"title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？\"></a>title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？</h2><p>在 HTML 中，<code>&lt;title&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;i&gt;</code> 和 <code>&lt;em&gt;</code> 等标签各自有不同的语义和用途。以下是它们之间的区别：</p>\n<h3 id=\"1-lt-title-gt-与-lt-h1-gt\"><a href=\"#1-lt-title-gt-与-lt-h1-gt\" class=\"headerlink\" title=\"1. &lt;title&gt; 与 &lt;h1&gt;\"></a>1. <code>&lt;title&gt;</code> 与 <code>&lt;h1&gt;</code></h3><ul>\n<li><p>**<code>&lt;title&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：定义文档的标题，显示在浏览器的标题栏或标签页上。</li>\n<li><strong>位置</strong>：位于 <code>&lt;head&gt;</code> 部分。</li>\n<li><strong>语义</strong>：用于描述网页的主题或内容，通常对搜索引擎优化（SEO）非常重要。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;head&gt;\n  &lt;title&gt;我的网页标题&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;</code></pre>\n</li>\n<li><p>**<code>&lt;h1&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：定义文档的主标题，通常是页面内容的主要主题。</li>\n<li><strong>位置</strong>：位于 <code>&lt;body&gt;</code> 部分，可以出现在任何地方。</li>\n<li><strong>语义</strong>：表示页面的主要内容，通常是 SEO 中最重要的标题标签。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;h1&gt;欢迎来到我的网页&lt;&#x2F;h1&gt;</code></pre></li>\n</ul>\n<h3 id=\"2-lt-b-gt-与-lt-strong-gt\"><a href=\"#2-lt-b-gt-与-lt-strong-gt\" class=\"headerlink\" title=\"2. &lt;b&gt; 与 &lt;strong&gt;\"></a>2. <code>&lt;b&gt;</code> 与 <code>&lt;strong&gt;</code></h3><ul>\n<li><p>**<code>&lt;b&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：用于加粗文本，但没有语义意义。</li>\n<li><strong>语义</strong>：仅用于视觉效果，不传达任何重要性。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p&gt;这是一个&lt;b&gt;加粗&lt;&#x2F;b&gt;的文本。&lt;&#x2F;p&gt;</code></pre>\n</li>\n<li><p>**<code>&lt;strong&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：用于强调文本，通常以加粗显示。</li>\n<li><strong>语义</strong>：表示文本的重要性，通常用于传达更强的语气或重要性。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p&gt;这是一个&lt;strong&gt;重要&lt;&#x2F;strong&gt;的文本。&lt;&#x2F;p&gt;</code></pre></li>\n</ul>\n<h3 id=\"3-lt-i-gt-与-lt-em-gt\"><a href=\"#3-lt-i-gt-与-lt-em-gt\" class=\"headerlink\" title=\"3. &lt;i&gt; 与 &lt;em&gt;\"></a>3. <code>&lt;i&gt;</code> 与 <code>&lt;em&gt;</code></h3><ul>\n<li><p>**<code>&lt;i&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：用于斜体文本，但没有语义意义。</li>\n<li><strong>语义</strong>：仅用于视觉效果，不传达任何强调。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p&gt;这是一个&lt;i&gt;斜体&lt;&#x2F;i&gt;的文本。&lt;&#x2F;p&gt;</code></pre>\n</li>\n<li><p>**<code>&lt;em&gt;</code>**：</p>\n<ul>\n<li><strong>用途</strong>：用于强调文本，通常以斜体显示。</li>\n<li><strong>语义</strong>：表示文本的强调，通常用于传达更强的语气。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;p&gt;这是一个&lt;em&gt;强调&lt;&#x2F;em&gt;的文本。&lt;&#x2F;p&gt;</code></pre></li>\n</ul>\n<h3 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>**<code>&lt;title&gt;</code>**：文档的标题，位于 <code>&lt;head&gt;</code> 中，影响浏览器标签和 SEO。</li>\n<li>**<code>&lt;h1&gt;</code>**：页面的主标题，位于 <code>&lt;body&gt;</code> 中，表示主要内容。</li>\n<li>**<code>&lt;b&gt;</code>**：加粗文本，无语义意义。</li>\n<li>**<code>&lt;strong&gt;</code>**：强调文本，表示重要性。</li>\n<li>**<code>&lt;i&gt;</code>**：斜体文本，无语义意义。</li>\n<li>**<code>&lt;em&gt;</code>**：强调文本，表示语气的强调。</li>\n</ul>\n<p>使用语义化的标签（如 <code>&lt;strong&gt;</code> 和 <code>&lt;em&gt;</code>）有助于提高网页的可访问性和 SEO 效果，而仅用于视觉效果的标签（如 <code>&lt;b&gt;</code> 和 <code>&lt;i&gt;</code>）则应谨慎使用。</p>\n<h2 id=\"iframe-有那些优点和缺点？\"><a href=\"#iframe-有那些优点和缺点？\" class=\"headerlink\" title=\"iframe 有那些优点和缺点？\"></a>iframe 有那些优点和缺点？</h2><p><code>&lt;iframe&gt;</code>（内联框架）是 HTML 中用于嵌入另一个 HTML 页面或文档的元素。使用 <code>&lt;iframe&gt;</code> 有其优点和缺点，以下是详细的分析：</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><p><strong>内容嵌入</strong>：</p>\n<ul>\n<li>可以轻松嵌入其他网页、视频、地图等内容，而无需重定向用户到新页面。</li>\n</ul>\n</li>\n<li><p><strong>隔离性</strong>：</p>\n<ul>\n<li>嵌入的内容在自己的上下文中运行，与主页面的 JavaScript 和 CSS 相互独立，减少了样式和脚本冲突的可能性。</li>\n</ul>\n</li>\n<li><p><strong>跨域内容</strong>：</p>\n<ul>\n<li>可以嵌入来自不同域的内容，允许在同一页面上显示外部资源（如社交媒体小部件、广告等）。</li>\n</ul>\n</li>\n<li><p><strong>便于实现复杂布局</strong>：</p>\n<ul>\n<li>可以在页面中创建复杂的布局，允许在同一页面中显示多个不同的内容区域。</li>\n</ul>\n</li>\n<li><p><strong>动态加载</strong>：</p>\n<ul>\n<li>可以根据需要动态加载内容，减少初始页面加载的负担。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><p><strong>性能问题</strong>：</p>\n<ul>\n<li>嵌入的页面会增加额外的 HTTP 请求，可能导致页面加载速度变慢，尤其是当嵌入的内容较大时。</li>\n</ul>\n</li>\n<li><p><strong>SEO 问题</strong>：</p>\n<ul>\n<li>搜索引擎可能不会索引 <code>&lt;iframe&gt;</code> 中的内容，这可能影响嵌入内容的可见性和 SEO 效果。</li>\n</ul>\n</li>\n<li><p><strong>安全性问题</strong>：</p>\n<ul>\n<li>嵌入的内容可能包含恶意代码，导致安全风险。需要确保嵌入的内容来自可信来源。</li>\n<li>可能受到点击劫持（Clickjacking）攻击的风险。</li>\n</ul>\n</li>\n<li><p><strong>用户体验</strong>：</p>\n<ul>\n<li>嵌入的内容可能导致用户体验不佳，尤其是在移动设备上，可能会影响响应式设计。</li>\n</ul>\n</li>\n<li><p><strong>跨域限制</strong>：</p>\n<ul>\n<li>对于跨域的 <code>&lt;iframe&gt;</code>，JavaScript 访问嵌入内容的限制（同源策略）可能会导致功能受限。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>&lt;iframe&gt;</code> 是一个强大的工具，可以方便地嵌入外部内容，但在使用时需要权衡其优缺点。开发者应考虑性能、安全性和用户体验等因素，合理使用 <code>&lt;iframe&gt;</code>，确保嵌入的内容来自可信来源，并在必要时采取安全措施。</p>\n<h2 id=\"label-的作用是什么？如何使用？\"><a href=\"#label-的作用是什么？如何使用？\" class=\"headerlink\" title=\"label 的作用是什么？如何使用？\"></a>label 的作用是什么？如何使用？</h2><p><code>&lt;label&gt;</code> 标签在 HTML 中用于为表单控件提供可点击的标签。它的主要作用是增强表单的可用性和可访问性，使用户能够更容易地与表单元素进行交互。以下是关于 <code>&lt;label&gt;</code> 的详细说明及其使用方法：</p>\n<h3 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1. 作用\"></a>1. 作用</h3><ul>\n<li><strong>提高可用性</strong>：当用户点击 <code>&lt;label&gt;</code> 标签时，浏览器会自动将焦点转移到与之关联的表单控件（如输入框、复选框等），这使得用户在填写表单时更加方便。</li>\n<li><strong>增强可访问性</strong>：为表单控件提供描述性标签，有助于使用屏幕阅读器的用户理解表单的功能，提高无障碍访问性。</li>\n</ul>\n<h3 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2. 使用方法\"></a>2. 使用方法</h3><p><code>&lt;label&gt;</code> 标签可以通过两种方式与表单控件关联：</p>\n<h4 id=\"2-1-使用-for-属性\"><a href=\"#2-1-使用-for-属性\" class=\"headerlink\" title=\"2.1 使用 for 属性\"></a>2.1 使用 <code>for</code> 属性</h4><p>使用 <code>for</code> 属性将 <code>&lt;label&gt;</code> 标签与特定的表单控件关联。<code>for</code> 属性的值应与表单控件的 <code>id</code> 属性相同。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;label for&#x3D;&quot;username&quot;&gt;用户名：&lt;&#x2F;label&gt;\n&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;</code></pre>\n\n<p>在这个示例中，当用户点击“用户名”标签时，焦点会转移到输入框中。</p>\n<h4 id=\"2-2-包裹表单控件\"><a href=\"#2-2-包裹表单控件\" class=\"headerlink\" title=\"2.2 包裹表单控件\"></a>2.2 包裹表单控件</h4><p>另一种方式是将表单控件直接放在 <code>&lt;label&gt;</code> 标签内，这样也可以实现关联。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;label\n  &gt;用户名：\n  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &#x2F;&gt;\n&lt;&#x2F;label&gt;</code></pre>\n\n<p>在这个示例中，点击“用户名”文本或输入框都会将焦点转移到输入框中。</p>\n<h3 id=\"3-示例-1\"><a href=\"#3-示例-1\" class=\"headerlink\" title=\"3. 示例\"></a>3. 示例</h3><p>以下是一个完整的表单示例，展示了如何使用 <code>&lt;label&gt;</code> 标签：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;表单示例&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;form&gt;\n      &lt;label for&#x3D;&quot;username&quot;&gt;用户名：&lt;&#x2F;label&gt;\n      &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot; required &#x2F;&gt;\n      &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;\n\n      &lt;label for&#x3D;&quot;password&quot;&gt;密码：&lt;&#x2F;label&gt;\n      &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; required &#x2F;&gt;\n      &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;\n\n      &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; &#x2F;&gt;\n    &lt;&#x2F;form&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-2\"><a href=\"#4-总结-2\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><code>&lt;label&gt;</code> 标签用于为表单控件提供可点击的标签，增强用户体验和可访问性。</li>\n<li>可以通过 <code>for</code> 属性与表单控件关联，或将表单控件包裹在 <code>&lt;label&gt;</code> 标签内。</li>\n<li>使用 <code>&lt;label&gt;</code> 标签可以提高表单的可用性，特别是对于使用辅助技术的用户。</li>\n</ul>\n<h2 id=\"Canvas-和-SVG-的区别\"><a href=\"#Canvas-和-SVG-的区别\" class=\"headerlink\" title=\"Canvas 和 SVG 的区别\"></a>Canvas 和 SVG 的区别</h2><p>Canvas 和 SVG 是两种在网页上绘制图形的技术，各自有不同的特点和适用场景。以下是它们之间的主要区别：</p>\n<h3 id=\"1-定义和基本概念\"><a href=\"#1-定义和基本概念\" class=\"headerlink\" title=\"1. 定义和基本概念\"></a>1. 定义和基本概念</h3><ul>\n<li><p><strong>Canvas</strong>：</p>\n<ul>\n<li>Canvas 是一个 HTML 元素（<code>&lt;canvas&gt;</code>），用于在网页上以像素为基础绘制图形。</li>\n<li>使用 JavaScript API 进行绘制，适合动态生成图形和动画。</li>\n</ul>\n</li>\n<li><p><strong>SVG</strong>：</p>\n<ul>\n<li>SVG（可缩放矢量图形）是一种基于 XML 的矢量图形格式，用于描述二维图形。</li>\n<li>图形是由路径、形状和文本等元素组成，适合静态图形和可缩放的图像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-渲染方式\"><a href=\"#2-渲染方式\" class=\"headerlink\" title=\"2. 渲染方式\"></a>2. 渲染方式</h3><ul>\n<li><p><strong>Canvas</strong>：</p>\n<ul>\n<li>以位图（像素）方式渲染，绘制后无法直接修改单个图形元素。</li>\n<li>每次重绘时需要重新绘制所有内容，适合需要频繁更新的场景（如游戏、动画）。</li>\n</ul>\n</li>\n<li><p><strong>SVG</strong>：</p>\n<ul>\n<li>以矢量方式渲染，图形元素可以独立操作和修改。</li>\n<li>可以通过 CSS 和 JavaScript 直接操作和动画化单个元素，适合静态图形和交互式图形。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"3. 性能\"></a>3. 性能</h3><ul>\n<li><p><strong>Canvas</strong>：</p>\n<ul>\n<li>在处理大量图形时性能较好，适合高频率的重绘（如游戏）。</li>\n<li>由于是位图，图形质量在缩放时可能会降低。</li>\n</ul>\n</li>\n<li><p><strong>SVG</strong>：</p>\n<ul>\n<li>在处理复杂图形时性能可能较差，尤其是当图形元素数量较多时。</li>\n<li>矢量图形在缩放时不会失去质量，适合需要高质量图形的场景。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-文件大小\"><a href=\"#4-文件大小\" class=\"headerlink\" title=\"4. 文件大小\"></a>4. 文件大小</h3><ul>\n<li><p><strong>Canvas</strong>：</p>\n<ul>\n<li>通常生成的图形是位图，文件大小取决于图像的分辨率和复杂度。</li>\n</ul>\n</li>\n<li><p><strong>SVG</strong>：</p>\n<ul>\n<li>由于是基于 XML 的文本格式，文件大小通常较小，尤其是对于简单图形。</li>\n<li>复杂图形可能导致文件大小增加，但仍然比位图小。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-适用场景\"><a href=\"#5-适用场景\" class=\"headerlink\" title=\"5. 适用场景\"></a>5. 适用场景</h3><ul>\n<li><p><strong>Canvas</strong>：</p>\n<ul>\n<li>适合游戏、动画、实时数据可视化等需要频繁更新的场景。</li>\n<li>适合处理大量像素数据的应用。</li>\n</ul>\n</li>\n<li><p><strong>SVG</strong>：</p>\n<ul>\n<li>适合图标、图表、静态图形和需要高质量缩放的场景。</li>\n<li>适合需要交互和动画的矢量图形。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-示例\"><a href=\"#6-示例\" class=\"headerlink\" title=\"6. 示例\"></a>6. 示例</h3><ul>\n<li><strong>Canvas 示例</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;canvas\n  id&#x3D;&quot;myCanvas&quot;\n  width&#x3D;&quot;400&quot;\n  height&#x3D;&quot;200&quot;\n  style&#x3D;&quot;border:1px solid #000000;&quot;\n&gt;&lt;&#x2F;canvas&gt;\n&lt;script&gt;\n  var canvas &#x3D; document.getElementById(&quot;myCanvas&quot;);\n  var ctx &#x3D; canvas.getContext(&quot;2d&quot;);\n  ctx.fillStyle &#x3D; &quot;#FF0000&quot;;\n  ctx.fillRect(20, 20, 150, 100);\n&lt;&#x2F;script&gt;</code></pre>\n\n<ul>\n<li><strong>SVG 示例</strong>：</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg width&#x3D;&quot;400&quot; height&#x3D;&quot;200&quot;&gt;\n  &lt;rect x&#x3D;&quot;20&quot; y&#x3D;&quot;20&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;100&quot; fill&#x3D;&quot;red&quot; &#x2F;&gt;\n&lt;&#x2F;svg&gt;</code></pre>\n\n<h3 id=\"总结-7\"><a href=\"#总结-7\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>Canvas</strong>：适合动态、频繁更新的图形，使用位图渲染，性能较好，但不支持直接操作单个元素。</li>\n<li><strong>SVG</strong>：适合静态和可缩放的图形，使用矢量渲染，支持直接操作和动画化单个元素，但在处理复杂图形时性能可能较差。</li>\n</ul>\n<p>根据具体需求选择合适的技术，可以更好地实现图形效果和用户体验。如果您有更多问题或需要进一步的解释，请随时问我！</p>\n<h2 id=\"head-标签有什么作用，其中什么标签必不可少？\"><a href=\"#head-标签有什么作用，其中什么标签必不可少？\" class=\"headerlink\" title=\"head 标签有什么作用，其中什么标签必不可少？\"></a>head 标签有什么作用，其中什么标签必不可少？</h2><p><code>&lt;head&gt;</code> 标签是 HTML 文档的一个重要部分，位于文档的开头，主要用于包含文档的元数据和其他信息。以下是 <code>&lt;head&gt;</code> 标签的主要作用及其中必不可少的标签：</p>\n<h3 id=\"1-lt-head-gt-标签的作用\"><a href=\"#1-lt-head-gt-标签的作用\" class=\"headerlink\" title=\"1. &lt;head&gt; 标签的作用\"></a>1. <code>&lt;head&gt;</code> 标签的作用</h3><ul>\n<li><strong>元数据</strong>：包含关于文档的信息，如标题、字符集、描述、关键词等，这些信息不会直接显示在网页上，但对浏览器和搜索引擎非常重要。</li>\n<li><strong>链接外部资源</strong>：可以链接外部样式表、脚本文件和其他资源，帮助网页实现样式和功能。</li>\n<li><strong>设置文档的行为</strong>：可以通过 <code>&lt;meta&gt;</code> 标签设置文档的视口、兼容性等属性，影响网页在不同设备和浏览器中的表现。</li>\n</ul>\n<h3 id=\"2-必不可少的标签\"><a href=\"#2-必不可少的标签\" class=\"headerlink\" title=\"2. 必不可少的标签\"></a>2. 必不可少的标签</h3><p>在 <code>&lt;head&gt;</code> 标签中，有几个标签是必不可少的，尤其是对于现代网页的基本结构：</p>\n<ol>\n<li><p>**<code>&lt;title&gt;</code>**：</p>\n<ul>\n<li><strong>作用</strong>：定义文档的标题，显示在浏览器的标题栏或标签页上。</li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;title&gt;我的网页标题&lt;&#x2F;title&gt;</code></pre></li>\n</ul>\n</li>\n<li><p>**<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>**：</p>\n<ul>\n<li><strong>作用</strong>：指定文档的字符编码，<code>UTF-8</code> 是一种常用的字符编码，支持多种语言字符。</li>\n<li><strong>示例</strong>：<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</code></pre></li>\n</ul>\n</li>\n</ol>\n<p>这两个标签是构建 HTML 文档的基本要素，确保网页能够正确显示和被搜索引擎索引。</p>\n<h3 id=\"3-其他常用标签\"><a href=\"#3-其他常用标签\" class=\"headerlink\" title=\"3. 其他常用标签\"></a>3. 其他常用标签</h3><p>除了上述必不可少的标签，<code>&lt;head&gt;</code> 中还可以包含其他常用标签：</p>\n<ul>\n<li>**<code>&lt;meta name=&quot;description&quot; content=&quot;网页描述&quot;&gt;</code>**：提供网页的简短描述，搜索引擎通常会在搜索结果中显示这个描述。</li>\n<li>**<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>**：控制网页在移动设备上的布局和缩放。</li>\n<li>**<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code>**：链接外部样式表。</li>\n<li>**<code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>**：链接外部 JavaScript 文件。</li>\n</ul>\n<h3 id=\"4-示例-1\"><a href=\"#4-示例-1\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个完整的 HTML 文档示例，展示了 <code>&lt;head&gt;</code> 标签的基本结构：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;这是一个示例网页。&quot; &#x2F;&gt;\n    &lt;title&gt;我的网页标题&lt;&#x2F;title&gt;\n    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;styles.css&quot; &#x2F;&gt;\n    &lt;script src&#x3D;&quot;script.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎来到我的网页&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"总结-8\"><a href=\"#总结-8\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>&lt;head&gt;</code> 标签在 HTML 文档中起着至关重要的作用，包含了文档的元数据和外部资源链接。其中，<code>&lt;title&gt;</code> 和 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 是必不可少的标签，确保网页的基本功能和正确显示。</p>\n<h2 id=\"文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\"><a href=\"#文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\" class=\"headerlink\" title=\"文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?\"></a>文档声明（Doctype）和<code>&lt;!Doctype html&gt;</code>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><h3 id=\"1-文档声明（Doctype）和-lt-DOCTYPE-html-gt-的作用\"><a href=\"#1-文档声明（Doctype）和-lt-DOCTYPE-html-gt-的作用\" class=\"headerlink\" title=\"1. 文档声明（Doctype）和 &lt;!DOCTYPE html&gt; 的作用\"></a>1. 文档声明（Doctype）和 <code>&lt;!DOCTYPE html&gt;</code> 的作用</h3><p><strong>文档声明（Doctype）</strong> 是 HTML 文档的第一行代码，用于告诉浏览器该文档使用的 HTML 或 XHTML 版本。<code>&lt;!DOCTYPE html&gt;</code> 是 HTML5 的文档声明，具有以下作用：</p>\n<ul>\n<li><strong>指定文档类型</strong>：<code>&lt;!DOCTYPE html&gt;</code> 告诉浏览器该文档是 HTML5 格式，确保浏览器以正确的方式解析和渲染页面。</li>\n<li><strong>启用标准模式</strong>：使用 <code>&lt;!DOCTYPE html&gt;</code> 可以使浏览器进入标准模式（Standards Mode），在这种模式下，浏览器会遵循 W3C 的标准来渲染页面，确保不同浏览器之间的表现一致。</li>\n<li><strong>提高兼容性</strong>：通过明确指定文档类型，开发者可以确保网页在不同浏览器和设备上的兼容性，减少因浏览器解析差异而导致的显示问题。</li>\n</ul>\n<h3 id=\"2-严格模式与混杂模式的区分\"><a href=\"#2-严格模式与混杂模式的区分\" class=\"headerlink\" title=\"2. 严格模式与混杂模式的区分\"></a>2. 严格模式与混杂模式的区分</h3><ul>\n<li><p><strong>严格模式（Standards Mode）</strong>：</p>\n<ul>\n<li>在严格模式下，浏览器会遵循 W3C 的标准来渲染页面，确保页面的表现符合现代网页开发的最佳实践。</li>\n<li>严格模式下，某些过时的 HTML 和 CSS 特性将被忽略，开发者需要使用符合标准的代码。</li>\n</ul>\n</li>\n<li><p><strong>混杂模式（Quirks Mode）</strong>：</p>\n<ul>\n<li>在混杂模式下，浏览器会模拟旧版浏览器的行为，以兼容早期的网页设计。这种模式主要是为了支持旧版网页的显示。</li>\n<li>混杂模式下，浏览器可能会使用一些非标准的渲染规则，导致不同浏览器之间的表现不一致。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-严格模式与混杂模式的意义\"><a href=\"#3-严格模式与混杂模式的意义\" class=\"headerlink\" title=\"3. 严格模式与混杂模式的意义\"></a>3. 严格模式与混杂模式的意义</h3><ul>\n<li><p><strong>严格模式的意义</strong>：</p>\n<ul>\n<li>提供一致的渲染行为，确保网页在不同浏览器中的表现一致。</li>\n<li>鼓励开发者使用符合标准的 HTML 和 CSS，提升网页的可维护性和可访问性。</li>\n<li>有助于提高网页的性能和安全性。</li>\n</ul>\n</li>\n<li><p><strong>混杂模式的意义</strong>：</p>\n<ul>\n<li>允许旧版网页在现代浏览器中继续正常显示，避免因标准的变化而导致的显示问题。</li>\n<li>为开发者提供了一个过渡期，使他们能够逐步更新和改进旧版网页。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-示例-2\"><a href=\"#4-示例-2\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h3><p>以下是一个简单的 HTML5 文档示例，展示了如何使用 <code>&lt;!DOCTYPE html&gt;</code>：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;示例网页&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;欢迎来到我的网页&lt;&#x2F;h1&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"总结-9\"><a href=\"#总结-9\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>文档声明（Doctype）</strong> 是 HTML 文档的第一行代码，用于指定文档类型和启用标准模式。</li>\n<li><strong>严格模式</strong> 和 <strong>混杂模式</strong> 的区别在于渲染行为和对标准的遵循程度，严格模式遵循 W3C 标准，而混杂模式则兼容旧版网页。</li>\n<li>使用 <code>&lt;!DOCTYPE html&gt;</code> 可以确保网页在现代浏览器中以标准模式渲染，从而提高网页的兼容性和一致性。</li>\n</ul>\n<h2 id=\"浏览器乱码的原因是什么？如何解决？\"><a href=\"#浏览器乱码的原因是什么？如何解决？\" class=\"headerlink\" title=\"浏览器乱码的原因是什么？如何解决？\"></a>浏览器乱码的原因是什么？如何解决？</h2><p>浏览器乱码通常是指网页内容无法正确显示，出现了不正常的字符或符号。这种情况通常是由于字符编码不匹配引起的。以下是浏览器乱码的常见原因及其解决方法：</p>\n<h3 id=\"1-乱码的原因\"><a href=\"#1-乱码的原因\" class=\"headerlink\" title=\"1. 乱码的原因\"></a>1. 乱码的原因</h3><ul>\n<li><p><strong>字符编码不一致</strong>：</p>\n<ul>\n<li>网页的字符编码与浏览器解析时使用的字符编码不一致。例如，网页使用 UTF-8 编码，但浏览器却以 ISO-8859-1 编码解析。</li>\n</ul>\n</li>\n<li><p><strong>缺少字符集声明</strong>：</p>\n<ul>\n<li>网页没有在 <code>&lt;head&gt;</code> 部分声明字符集，导致浏览器无法正确识别字符编码。</li>\n</ul>\n</li>\n<li><p><strong>文件保存编码不一致</strong>：</p>\n<ul>\n<li>HTML 文件在保存时使用的编码与网页中声明的编码不一致。例如，文件以 UTF-8 编码保存，但在 HTML 中声明为 ISO-8859-1。</li>\n</ul>\n</li>\n<li><p><strong>服务器配置问题</strong>：</p>\n<ul>\n<li>服务器未正确设置响应头中的字符编码，导致浏览器无法正确解析内容。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-解决方法\"><a href=\"#2-解决方法\" class=\"headerlink\" title=\"2. 解决方法\"></a>2. 解决方法</h3><h4 id=\"2-1-声明字符集\"><a href=\"#2-1-声明字符集\" class=\"headerlink\" title=\"2.1 声明字符集\"></a>2.1 声明字符集</h4><p>确保在 HTML 文档的 <code>&lt;head&gt;</code> 部分正确声明字符集，通常使用 UTF-8 编码：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</code></pre>\n\n<h4 id=\"2-2-确保文件保存编码一致\"><a href=\"#2-2-确保文件保存编码一致\" class=\"headerlink\" title=\"2.2 确保文件保存编码一致\"></a>2.2 确保文件保存编码一致</h4><p>在保存 HTML 文件时，确保使用与声明的字符集一致的编码格式。大多数现代文本编辑器（如 VSCode、Sublime Text 等）都支持选择文件编码。</p>\n<h4 id=\"2-3-服务器配置\"><a href=\"#2-3-服务器配置\" class=\"headerlink\" title=\"2.3 服务器配置\"></a>2.3 服务器配置</h4><p>确保服务器正确设置响应头中的字符编码。例如，在 Apache 服务器中，可以在 <code>.htaccess</code> 文件中添加以下行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AddDefaultCharset UTF-8</code></pre>\n\n<p>在 Nginx 服务器中，可以在配置文件中添加：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">charset utf-8;</code></pre>\n\n<h4 id=\"2-4-检查浏览器设置\"><a href=\"#2-4-检查浏览器设置\" class=\"headerlink\" title=\"2.4 检查浏览器设置\"></a>2.4 检查浏览器设置</h4><p>在某些情况下，用户的浏览器设置可能会影响字符编码的解析。可以尝试手动设置浏览器的字符编码为 UTF-8，通常在浏览器的“查看”或“编码”菜单中可以找到相关选项。</p>\n<h3 id=\"3-总结-3\"><a href=\"#3-总结-3\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><p>浏览器乱码通常是由于字符编码不一致引起的。通过在 HTML 文档中正确声明字符集、确保文件保存编码一致、配置服务器响应头以及检查浏览器设置，可以有效解决乱码问题。使用 UTF-8 编码是现代网页开发的最佳实践，能够支持多种语言字符，减少乱码的可能性。</p>\n<h2 id=\"渐进增强和优雅降级之间的区别\"><a href=\"#渐进增强和优雅降级之间的区别\" class=\"headerlink\" title=\"渐进增强和优雅降级之间的区别\"></a>渐进增强和优雅降级之间的区别</h2><p>渐进增强（Progressive Enhancement）和优雅降级（Graceful Degradation）是两种不同的网页设计和开发策略，它们的目标都是为了提高用户体验，但实现方式有所不同。以下是这两者之间的主要区别：</p>\n<h3 id=\"1-渐进增强（Progressive-Enhancement）\"><a href=\"#1-渐进增强（Progressive-Enhancement）\" class=\"headerlink\" title=\"1. 渐进增强（Progressive Enhancement）\"></a>1. 渐进增强（Progressive Enhancement）</h3><ul>\n<li><strong>定义</strong>：渐进增强是一种从基础功能开始构建网页的策略，首先确保所有用户都能访问到核心内容和功能，然后在此基础上逐步添加更高级的功能和样式，以提升用户体验。</li>\n<li><strong>实现方式</strong>：<ul>\n<li><strong>基础内容</strong>：首先提供基本的 HTML 内容，确保在所有浏览器和设备上都能正常显示。</li>\n<li><strong>增强功能</strong>：在此基础上，使用 CSS 和 JavaScript 添加样式和交互功能，针对支持这些技术的浏览器进行优化。</li>\n</ul>\n</li>\n<li><strong>优点</strong>：<ul>\n<li>确保所有用户都能访问到核心内容，无论他们使用的设备或浏览器的能力如何。</li>\n<li>提高了无障碍性，确保即使在不支持高级功能的环境中，用户也能获得良好的体验。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-优雅降级（Graceful-Degradation）\"><a href=\"#2-优雅降级（Graceful-Degradation）\" class=\"headerlink\" title=\"2. 优雅降级（Graceful Degradation）\"></a>2. 优雅降级（Graceful Degradation）</h3><ul>\n<li><p><strong>定义</strong>：优雅降级是一种从完整功能开始构建网页的策略，首先为现代浏览器和设备提供丰富的功能和样式，然后确保在较旧或不支持的浏览器中仍能保持基本的可用性。</p>\n</li>\n<li><p><strong>实现方式</strong>：</p>\n<ul>\n<li><strong>完整功能</strong>：首先开发一个功能丰富的网页，使用最新的 HTML、CSS 和 JavaScript 特性。</li>\n<li><strong>降级处理</strong>：在较旧或不支持的浏览器中，提供替代方案或简化版本，以确保基本功能仍然可用。</li>\n</ul>\n</li>\n<li><p><strong>优点</strong>：</p>\n<ul>\n<li>可以充分利用现代浏览器的功能，提供丰富的用户体验。</li>\n<li>在设计时考虑到向后兼容性，确保在较旧的环境中仍能正常工作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-主要区别\"><a href=\"#3-主要区别\" class=\"headerlink\" title=\"3. 主要区别\"></a>3. 主要区别</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>渐进增强（Progressive Enhancement）</th>\n<th>优雅降级（Graceful Degradation）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>开发策略</strong></td>\n<td>从基础功能开始，逐步增强</td>\n<td>从完整功能开始，逐步降级</td>\n</tr>\n<tr>\n<td><strong>核心内容</strong></td>\n<td>确保所有用户都能访问核心内容</td>\n<td>以现代浏览器为目标，确保基本可用性</td>\n</tr>\n<tr>\n<td><strong>用户体验</strong></td>\n<td>所有用户都能获得良好体验</td>\n<td>现代用户获得最佳体验，旧用户获得基本体验</td>\n</tr>\n<tr>\n<td><strong>无障碍性</strong></td>\n<td>更加注重无障碍性</td>\n<td>可能忽视较旧设备的用户体验</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-总结-3\"><a href=\"#4-总结-3\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><ul>\n<li><strong>渐进增强</strong> 强调从基础开始，确保所有用户都能访问核心内容，然后逐步添加增强功能，适合关注无障碍性和兼容性的项目。</li>\n<li><strong>优雅降级</strong> 强调从完整功能开始，确保现代用户获得最佳体验，同时考虑到较旧环境的兼容性，适合需要充分利用现代技术的项目。</li>\n</ul>\n<p>选择哪种策略取决于项目的需求、目标用户群体和技术栈。理解这两者的区别有助于开发者在设计和开发网页时做出更合适的决策。</p>\n<h2 id=\"说一下-HTML5-drag-API\"><a href=\"#说一下-HTML5-drag-API\" class=\"headerlink\" title=\"说一下 HTML5 drag API\"></a>说一下 HTML5 drag API</h2><p>HTML5 Drag API 是一组用于实现拖放功能的接口，允许用户通过拖动元素来进行交互。这个 API 提供了一种简单的方法来处理拖放操作，使得网页应用程序能够更直观地与用户进行交互。以下是对 HTML5 Drag API 的详细介绍，包括其工作原理、主要事件和使用示例。</p>\n<h3 id=\"1-工作原理\"><a href=\"#1-工作原理\" class=\"headerlink\" title=\"1. 工作原理\"></a>1. 工作原理</h3><p>HTML5 Drag API 主要依赖于以下几个步骤：</p>\n<ul>\n<li><strong>可拖动元素</strong>：通过设置 <code>draggable</code> 属性为 <code>true</code>，使元素可被拖动。</li>\n<li><strong>拖动事件</strong>：在拖动过程中，浏览器会触发一系列事件，开发者可以通过这些事件来处理拖放操作。</li>\n<li><strong>放置目标</strong>：在目标元素上处理放置操作，允许用户将拖动的元素放置到指定位置。</li>\n</ul>\n<h3 id=\"2-主要事件\"><a href=\"#2-主要事件\" class=\"headerlink\" title=\"2. 主要事件\"></a>2. 主要事件</h3><p>HTML5 Drag API 定义了一些重要的事件，开发者可以通过这些事件来处理拖放操作：</p>\n<ul>\n<li><strong>dragstart</strong>：当用户开始拖动元素时触发。可以在此事件中设置拖动的数据。</li>\n<li><strong>drag</strong>：在拖动过程中持续触发，通常用于更新拖动效果。</li>\n<li><strong>dragend</strong>：当拖动操作结束时触发，无论是成功放置还是取消。</li>\n<li><strong>dragover</strong>：当拖动的元素在放置目标上方时触发。需要调用 <code>event.preventDefault()</code> 来允许放置。</li>\n<li><strong>dragenter</strong>：当拖动的元素进入放置目标区域时触发。</li>\n<li><strong>dragleave</strong>：当拖动的元素离开放置目标区域时触发。</li>\n<li><strong>drop</strong>：当拖动的元素被放置到目标区域时触发。</li>\n</ul>\n<h3 id=\"3-使用示例\"><a href=\"#3-使用示例\" class=\"headerlink\" title=\"3. 使用示例\"></a>3. 使用示例</h3><p>以下是一个简单的示例，展示了如何使用 HTML5 Drag API 实现拖放功能：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;zh&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;HTML5 Drag API 示例&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      #dragItem &#123;\n        width: 100px;\n        height: 100px;\n        background-color: lightblue;\n        margin: 10px;\n        cursor: move;\n      &#125;\n      #dropZone &#123;\n        width: 300px;\n        height: 300px;\n        border: 2px dashed #ccc;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;dragItem&quot; draggable&#x3D;&quot;true&quot;&gt;拖动我&lt;&#x2F;div&gt;\n    &lt;div id&#x3D;&quot;dropZone&quot;&gt;放置区域&lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      const dragItem &#x3D; document.getElementById(&quot;dragItem&quot;);\n      const dropZone &#x3D; document.getElementById(&quot;dropZone&quot;);\n\n      &#x2F;&#x2F; 处理 dragstart 事件\n      dragItem.addEventListener(&quot;dragstart&quot;, (event) &#x3D;&gt; &#123;\n        event.dataTransfer.setData(&quot;text&#x2F;plain&quot;, &quot;这是拖动的数据&quot;);\n        event.target.style.opacity &#x3D; 0.5; &#x2F;&#x2F; 拖动时改变透明度\n      &#125;);\n\n      &#x2F;&#x2F; 处理 dragend 事件\n      dragItem.addEventListener(&quot;dragend&quot;, (event) &#x3D;&gt; &#123;\n        event.target.style.opacity &#x3D; 1; &#x2F;&#x2F; 恢复透明度\n      &#125;);\n\n      &#x2F;&#x2F; 处理 dragover 事件\n      dropZone.addEventListener(&quot;dragover&quot;, (event) &#x3D;&gt; &#123;\n        event.preventDefault(); &#x2F;&#x2F; 允许放置\n      &#125;);\n\n      &#x2F;&#x2F; 处理 drop 事件\n      dropZone.addEventListener(&quot;drop&quot;, (event) &#x3D;&gt; &#123;\n        event.preventDefault(); &#x2F;&#x2F; 防止默认行为\n        const data &#x3D; event.dataTransfer.getData(&quot;text&#x2F;plain&quot;);\n        alert(&#96;放置了: $&#123;data&#125;&#96;);\n      &#125;);\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h3 id=\"4-总结-4\"><a href=\"#4-总结-4\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>HTML5 Drag API 提供了一种简单而强大的方式来实现拖放功能。通过设置 <code>draggable</code> 属性和处理相关事件，开发者可以创建直观的用户交互体验。这个 API 在现代网页应用中非常有用，尤其是在需要用户自定义布局或交互的场景中。</p>\n","feature":true,"text":"src 和 href 的区别在 HTML 中，src 和 href 是两个常用的属性，它们的主要区别在于它们的用途和适用的标签。以下是详细的解释： 1. src 属性 全称：source（源） 用途：用于指定外部资源的路径，通常用于嵌入媒体文件，如图像、音频、视频等。 适用标签：...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"interview","slug":"interview","count":1,"path":"api/categories/interview.json"}],"tags":[{"name":"html","slug":"html","count":1,"path":"api/tags/html.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#src-%E5%92%8C-href-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">src 和 href 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-src-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. src 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">示例：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-href-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. href 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A-1\"><span class=\"toc-text\">示例：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">1. 语义化的好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">2. 常用的语义化标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DOCTYPE-%E2%BD%82%E6%A1%A3%E7%B1%BB%E5%9E%8B-%E7%9A%84%E4%BD%9C%E2%BD%A4\"><span class=\"toc-text\">DOCTYPE(⽂档类型) 的作⽤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E5%AE%9A%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 指定文档类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%90%AF%E7%94%A8%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2. 启用标准模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8F%90%E9%AB%98%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">3. 提高兼容性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#script-%E6%A0%87%E7%AD%BE%E4%B8%AD-defer-%E5%92%8C-async-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">script 标签中 defer 和 async 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-defer-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. defer 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A-2\"><span class=\"toc-text\">示例：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-async-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2. async 属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%EF%BC%9A-3\"><span class=\"toc-text\">示例：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E2%BD%A4%E7%9A%84-meta-%E6%A0%87%E7%AD%BE%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">常⽤的 meta 标签有哪些</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AD%97%E7%AC%A6%E9%9B%86%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">1. 字符集声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%A1%B5%E9%9D%A2%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">2. 页面描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B3%E9%94%AE%E8%AF%8D\"><span class=\"toc-text\">3. 关键词</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4. 作者信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E8%A7%86%E5%8F%A3%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">5. 视口设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">6. 兼容性设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">7. 版权信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E5%88%86%E4%BA%AB\"><span class=\"toc-text\">8. 社交媒体分享</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">9. 其他常用标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTML5-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">HTML5 有哪些更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%96%B0%E7%9A%84%E8%AF%AD%E4%B9%89%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1. 新的语义元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%96%B0%E7%9A%84%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6\"><span class=\"toc-text\">2. 新的表单控件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">3. 多媒体支持</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Canvas-%E5%92%8C-SVG\"><span class=\"toc-text\">4. Canvas 和 SVG</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">5. 本地存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE-API\"><span class=\"toc-text\">6. 地理位置 API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-WebSockets\"><span class=\"toc-text\">7. WebSockets</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">8. 离线应用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E6%96%B0%E7%9A%84-API\"><span class=\"toc-text\">9. 新的 API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#img-%E7%9A%84-srcset-%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E2%BD%A4%EF%BC%9F\"><span class=\"toc-text\">img 的 srcset 属性的作⽤？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%BB%E8%A6%81%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. 主要作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 使用方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">3. 示例解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F-%E7%A9%BA-void-%E5%85%83%E7%B4%A0%E6%9C%89%E9%82%A3%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">1. 行内元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2. 块级元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A9%BA%EF%BC%88void%EF%BC%89%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">3. 空（void）元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8B-web-worker\"><span class=\"toc-text\">说一下 web worker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Web-Worker-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1. Web Worker 的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-Web-Worker\"><span class=\"toc-text\">2. 创建 Web Worker</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">3. 消息传递</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%BB%88%E6%AD%A2-Worker\"><span class=\"toc-text\">4. 终止 Worker</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">5. 使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">6. 注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTML5-%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%AE%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">HTML5 的离线储存怎么使用，它的工作原理是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98%EF%BC%88Application-Cache%EF%BC%89\"><span class=\"toc-text\">1. 应用缓存（Application Cache）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">工作原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Web-Storage\"><span class=\"toc-text\">2. Web Storage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-localStorage\"><span class=\"toc-text\">2.1 localStorage</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-sessionStorage\"><span class=\"toc-text\">2.2 sessionStorage</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9-HTML5-%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%82%A8%E5%AD%98%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%EF%BC%9F\"><span class=\"toc-text\">浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98%EF%BC%88Application-Cache%EF%BC%89-1\"><span class=\"toc-text\">1. 应用缓存（Application Cache）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">管理和加载过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Web-Storage-1\"><span class=\"toc-text\">2. Web Storage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E5%92%8C%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B-1\"><span class=\"toc-text\">管理和加载过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#title-%E4%B8%8E-h1-%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81b-%E4%B8%8E-strong-%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81i-%E4%B8%8E-em-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lt-title-gt-%E4%B8%8E-lt-h1-gt\"><span class=\"toc-text\">1. &lt;title&gt; 与 &lt;h1&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-lt-b-gt-%E4%B8%8E-lt-strong-gt\"><span class=\"toc-text\">2. &lt;b&gt; 与 &lt;strong&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-lt-i-gt-%E4%B8%8E-lt-em-gt\"><span class=\"toc-text\">3. &lt;i&gt; 与 &lt;em&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-5\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#iframe-%E6%9C%89%E9%82%A3%E4%BA%9B%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">iframe 有那些优点和缺点？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-6\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#label-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">label 的作用是什么？如何使用？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. 作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 使用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8-for-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.1 使用 for 属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%8C%85%E8%A3%B9%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6\"><span class=\"toc-text\">2.2 包裹表单控件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">3. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-2\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Canvas-%E5%92%8C-SVG-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Canvas 和 SVG 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 定义和基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 渲染方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">3. 性能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">4. 文件大小</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">5. 适用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">6. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-7\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#head-%E6%A0%87%E7%AD%BE%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%BB%80%E4%B9%88%E6%A0%87%E7%AD%BE%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">head 标签有什么作用，其中什么标签必不可少？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lt-head-gt-%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. &lt;head&gt; 标签的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">2. 必不可少的标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">3. 其他常用标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-1\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-8\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3%E5%A3%B0%E6%98%8E%EF%BC%88Doctype%EF%BC%89%E5%92%8C-lt-Doctype-html-gt-%E6%9C%89%E4%BD%95%E4%BD%9C%E7%94%A8-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%EF%BC%9F%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E6%A1%A3%E5%A3%B0%E6%98%8E%EF%BC%88Doctype%EF%BC%89%E5%92%8C-lt-DOCTYPE-html-gt-%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1. 文档声明（Doctype）和 &lt;!DOCTYPE html&gt; 的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%86\"><span class=\"toc-text\">2. 严格模式与混杂模式的区分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">3. 严格模式与混杂模式的意义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\">4. 示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-9\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F\"><span class=\"toc-text\">浏览器乱码的原因是什么？如何解决？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">1. 乱码的原因</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2. 解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%A3%B0%E6%98%8E%E5%AD%97%E7%AC%A6%E9%9B%86\"><span class=\"toc-text\">2.1 声明字符集</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E7%A1%AE%E4%BF%9D%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E7%BC%96%E7%A0%81%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">2.2 确保文件保存编码一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.3 服务器配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E6%A3%80%E6%9F%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">2.4 检查浏览器设置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">3. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">渐进增强和优雅降级之间的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%EF%BC%88Progressive-Enhancement%EF%BC%89\"><span class=\"toc-text\">1. 渐进增强（Progressive Enhancement）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%EF%BC%88Graceful-Degradation%EF%BC%89\"><span class=\"toc-text\">2. 优雅降级（Graceful Degradation）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3. 主要区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-3\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E4%B8%80%E4%B8%8B-HTML5-drag-API\"><span class=\"toc-text\">说一下 HTML5 drag API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. 工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%BB%E8%A6%81%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">2. 主要事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3. 使用示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-4\"><span class=\"toc-text\">4. 总结</span></a></li></ol></li></ol>","author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"rollup","uid":"6d1a44d72f500b2ae165cfd01771a531","slug":"rollup","date":"2024-12-22T08:39:14.000Z","updated":"2024-12-22T10:16:45.524Z","comments":true,"path":"api/articles/rollup.json","keywords":null,"cover":"/images/rollup/cover.png","text":"rollup前端工程化历程 除屑优化(tree shaking)除了可以使用 ES 模块之外，Rollup 还可以静态分析你导入的代码，并将排除任何实际上没有使用的内容，从上面的引入和最后的打包结果就可以看到，没有使用到的内容直接被删除了。 注意，除屑优化的核心思想是在编译阶段通...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"Academic","slug":"Academic","count":2,"path":"api/categories/Academic.json"}],"tags":[{"name":"rollup","slug":"rollup","count":1,"path":"api/tags/rollup.json"}],"author":{"name":"X-29","slug":"blog-author","avatar":"https://i.postimg.cc/3Rd6NTPm/X.png","link":"/","description":"Welcome to this blog! Here will tell you everything about X-29.","socials":{"github":"https://github.com/X29w","twitter":"","stackoverflow":"https://stackoverflow.com/users/20511900/x29","wechat":"","qq":"","weibo":"https://weibo.com/u/7801588846","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}